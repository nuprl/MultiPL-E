name: HumanEval_22_filter_integers
language: php
prompt: "<?php\n// Filter given list of any python values only for integers\n// >>>\
  \ filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
  \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
  \ {\n"
tests: "function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
  )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
  \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $values = array_filter($values, 'is_int');\n    return $values;\n\
    }\n", "    $values = array_filter($values, 'is_int');\n    return $values;\n}\n",
  "  return array_filter($values, function($value) {\n    return is_int($value);\n\
    \  });\n}\n\n/**\n * Filter given list of any python values only for floats\n\
    \ * >>> filter_floats(array(\"a\", 3.14, 5))\n * array(3.14)\n * >>> filter_floats(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n * array(1.0, 2.0, 3.0)\n */", "    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$array = array_filter($array,\
    \ function($value) {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array\
    \ = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$array = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nThis should be the accepted answer. Works perfectly and doesn't require\
    \ any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and doesn't require any additional libraries.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Works perfectly and doesn't require\
    \ any additional libraries.\n<|/ c |>\n<| a |>\n<code>\n$array = array(\"a\",\
    \ \"b\", \"c\", \"d\", \"e\");\n$array = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=5 tags=php,arrays\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$array = array_filter($array,\
    \ function($value) {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=5\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"\
    d\", \"e\");", "  return array_filter($values, function($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    $filtered = array();\n    foreach ($values\
    \ as $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "    $filtered\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array |>\n\
    <code>", "    return array_filter($values, function ($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "    $values = array_filter($values, 'is_int');\n\
    \    return $values;\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThis doesn't work for me in PHP 7.2.24. `array_filter`\
    \ returns an empty array for me when given an empty array.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me in PHP 7.2.24. `array_filter` returns an empty array\
    \ for me when given an empty array.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\"a\", 3.14, 5);\n$array = array_filter($array, function ($value)\
    \ {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array, function\
    \ ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array\
    \ = array_filter($array, function ($value) {\n    return is_int($value);\n});\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\", 3.14,\
    \ 5);\n$array = array_filter($array, function ($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"a\", 3.14, 5);\n$array = array_filter($array, function ($value) {\n\
    \    return is_int($value);\n});\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array, function\
    \ ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array\
    \ = array_filter($array, function ($value) {\n    return is_int($value);\n});\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\", 3.14,\
    \ 5);\n$array = array_filter($array, function ($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=2 |>\n<code>\n$array = array(\"\
    a\", 3.14, 5);\n$array = array_filter($array, function ($value) {\n    return\
    \ is_", "    $filtered = array();\n    foreach ($values as $value) {\n       \
    \ if (is_int($value)) {\n            $filtered[] = $value;\n        }\n    }\n\
    \    return $filtered;\n}\n", "    $values = array_filter($values, 'is_int');\n\
    \    return $values;\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    $filtered = array();\n\
    \    foreach ($values as $value) {\n        if (is_int($value)) {\n          \
    \  $filtered[] = $value;\n        }\n    }\n    return $filtered;\n}\n", "   \
    \ $filtered = array();\n    foreach ($values as $value) {\n        if (is_int($value))\
    \ {\n            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n", "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me.\n<|/ c |>\n<| a tags=php,arrays,filter |>\n<code>\n\
    $array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5);\n\n\
    $array = array_filter($array, function($value){\n    return is_numeric($value);\n\
    });\n\nprint_r($array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| a tags=php,arrays,filter\
    \ |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"\
    e\" => 5);\n\n$array = array_filter($array, function($value){\n    return is_numeric($value);\n\
    });\n\nprint_r($array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| a tags=php,arrays,filter\
    \ |>\n<code>\n$array = array(\"a\" => 1, \"b\" ", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    $filtered\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n", "  return array_filter($values, function($value) {\n    return is_int($value);\n\
    \  });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "  return array_filter($values, function($value)\
    \ {\n    return is_int($value);\n  });\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    $filtered\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n", "    return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    $values = array_filter($values, 'is_int');\n    return $values;\n\
    }\n", "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    return array_filter($values, function ($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    $integers = array();\n\
    \    foreach ($values as $value) {\n        if (is_int($value)) {\n          \
    \  $integers[] = $value;\n        }\n    }\n    return $integers;\n}\n", "   \
    \ return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| a dscore=5 tags=arrays,php |>\n\
    <code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" =>\
    \ 5);\n$array = array_filter($array, function ($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and doesn't require any additional libraries.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and doesn't require any additional libraries.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5);\n\
    $array = array_filter($array, function ($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and doesn't require any additional libraries.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Works perfectly and doesn't require\
    \ any additional libraries.\n<|/ c |>\n<| c |>\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    $filtered\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n", "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    return array_filter($values, function($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "    $filtered = array();\n    foreach ($values\
    \ as $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function($value) {\n    return is_int($value);\n  });\n\
    }\n", "    return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "  return array_filter($values, function\
    \ ($value) {\n    return is_int($value);\n  });\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    $integers = array();\n    foreach\
    \ ($values as $value) {\n        if (is_int($value)) {\n            $integers[]\
    \ = $value;\n        }\n    }\n    return $integers;\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nThis doesn't work if you have a string that looks like a number, e.g. \"\
    123abc\"\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\",\"b\",\"c\"\
    ,\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array, \"is_int\"\
    );\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$array = array_filter($array, \"is_int\");\nprint_r($array);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\"\
    ,\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array, \"\
    is_int\");\nprint_r($array);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array\
    \ = array_filter($array, \"is_int\");\nprint_r($array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array, \"is_int\");\n\
    print_r($array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array,\
    \ \"is_int\");\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$array = array_filter($array, \"is_int\");\nprint_r($array);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\"\
    ,\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = ", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I prefer to\
    \ use `array_filter` instead of `array_map` because I find it more readable. `array_map`\
    \ makes it look like you're doing something with the return value of `array_map`,\
    \ whereas `array_filter` makes it look like you're filtering out elements that\
    \ don't meet a certain criteria.\n<|/ c |>\n<| c |>\nI agree with you, `array_map`\
    \ makes it look like you're doing something with the return value of `array_map`,\
    \ whereas `array_filter` makes it look like you're filtering out elements that\
    \ don't meet a certain criteria.\n<|/ c |>\n<| c |>\nI prefer this solution as\
    \ well, since it keeps the original array intact. `array_map` would return a new\
    \ array with the values filtered out. `array_filter` would return a new array\
    \ with the values filtered out. `array_map` would return a new array with the\
    \ values filtered out. `array_filter` would return a new array with the values\
    \ filtered out. `array_map` would return a new array with the values filtered\
    \ out. `array_filter` would return a new array with the values filtered out. `array_map`\
    \ would return a new array with the values filtered out. `array_filter` would\
    \ return a new array with the values filtered out. `array_map` would return a\
    \ new array with the values filtered out. `array_filter` would return a new array\
    \ with the values filtered out. `array_map` would return a new array with the\
    \ values filtered out. `array_filter` would return a new array with the values\
    \ filtered out. `array_map` would return a new array with the values filtered\
    \ out. `array_filter` would return a new array with the values filtered out. `array_map`\
    \ would return a new array with the values filtered out. `array_filter` would\
    \ return a new array with the values filtered out. `array_map` would return a\
    \ new array with the values filtered out. `array_filter` would return a new array\
    \ with the values filtered out. `array_map` would return a new array with the\
    \ values filtered out. `array_filter` would return a new array with the values\
    \ filtered out. `array_map` would return a new array with the values filtered\
    \ out. `array_filter` would return a new array with the values filtered out. `array_map`\
    \ would return a new array with the values filtered out. `array_filter` would\
    \ return a new array with the values filtered out. `array_map` would return a\
    \ new array with the values filtered out. `array_", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "  return array_filter($values, function\
    \ ($value) {\n    return is_int($value);\n  });\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    $filtered = array();\n    foreach\
    \ ($values as $value) {\n        if (is_int($value)) {\n            $filtered[]\
    \ = $value;\n        }\n    }\n    return $filtered;\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "  return array_filter($values, function\
    \ ($value) {\n    return is_int($value);\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2,\
    \ \"c\" => 3, \"d\" => 4, \"e\" => 5);\n\n$array = array_filter($array, function\
    \ ($value) {\n    return is_int($value);\n});\n\nprint_r($array);\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Simple and effective.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple and effective.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple and effective.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple and effective.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"\
    c\" => 3, \"d\" => 4, \"e\" => 5);\n$array = array_filter($array, function ($value)\
    \ {\n    return is_int($value);\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c\
    \ |>\nThis should be the accepted answer. Simple and effective.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"\
    d\" => 4, \"e\" => 5);\n$array = array_filter($array, function ($value) {\n  \
    \  return is_int($value);\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"\
    e\" => 5);\n$array = array_filter($array, function ($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5);\n$array = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2,\
    \ \"c\" => 3, \"d\" => 4, \"e\" => 5);", "    $filtered = array();\n    foreach\
    \ ($values as $value) {\n        if (is_int($value)) {\n            $filtered[]\
    \ = $value;\n        }\n    }\n    return $filtered;\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n$array[]\
    \ = array('name' => 'John', 'age' => '20');\n$array[] = array('name' => 'Jane',\
    \ 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '50');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '50');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '50');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '50');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" =>\
    \ 3, \"d\" => 4, \"e\" => 5);\n\n$result = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" =>\
    \ 3, \"d\" => 4, \"e\" => 5);\n\n$result = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" =>\
    \ 3, \"d\" => 4, \"e\" => 5);\n\n$result = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2,\
    \ \"c\" => 3, \"d\" => 4, \"e\" => 5);\n\n$result = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2,\
    \ \"c\" => 3, \"d\" => 4, \"e\" => 5);\n\n$result = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2,\
    \ \"c\" => 3, \"d\" => 4, \"e\" => 5);\n\n$result = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" =>\
    \ 3, \"d\" => 4, \"e\" => 5);\n\n$result = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n\nprint_r($result);\n</code>\n<|/", "  \
    \  return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I\
    \ wonder why you didn't use array_filter() in the first place?\n<|/ c |>\n<| c\
    \ |>\nBecause I didn't know about array_filter() until I read this question. :)\n\
    <|/ c |>\n<| c |>\nI didn't know about array_filter() until I read this question.\
    \ :)\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "    $filtered =\
    \ array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n", "    $filtered = array();\n    foreach ($values as $value) {\n        if\
    \ (is_int($value)) {\n            $filtered[] = $value;\n        }\n    }\n  \
    \  return $filtered;\n}\n", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function($value) {\n    return is_int($value);\n  });\n\
    }\n", "    $filtered = array();\n    foreach ($values as $value) {\n        if\
    \ (is_int($value)) {\n            $filtered[] = $value;\n        }\n    }\n  \
    \  return $filtered;\n}\n", "    $filtered = array();\n    foreach ($values as\
    \ $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    $filtered\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n", "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    $integers = array();\n    foreach ($values as $value) {\n \
    \       if (is_int($value)) {\n            $integers[] = $value;\n        }\n\
    \    }\n    return $integers;\n}\n", "    $filtered = array();\n    foreach ($values\
    \ as $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,filter |>\n<code>", "    $filtered = array();\n   \
    \ foreach ($values as $value) {\n        if (is_int($value)) {\n            $filtered[]\
    \ = $value;\n        }\n    }\n    return $filtered;\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    $filtered\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n", "    $filtered = array();\n    foreach ($values as $value) {\n        if\
    \ (is_int($value)) {\n            $filtered[] = $value;\n        }\n    }\n  \
    \  return $filtered;\n}\n", "    $values = array_filter($values, 'is_int');\n\
    \    return $values;\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, because it doesn't require a custom function.\
    \  However, it does require PHP >= 5.3.0.  I used `array_filter($values, function($value)\
    \ { if (is_int($value)) { return true; } else { return false; } });` instead.\n\
    <|/ c |>\n<| c |>\nI like this solution as well, but I prefer `array_filter($values,\
    \ function($value) { return is_int($value); });` because it's more concise.\n\
    <|/ c |>\n<| c |>\nI like this solution as well, but I prefer `array_filter($values,\
    \ function($value) { return is_int($value); });` because it's more concise.\n\
    <|/ c |>\n<| c |>\nI like this solution as well, but I prefer `array_filter($values,\
    \ function($value) { return is_int($value); });` because it's more concise.\n\
    <|/ c |>\n<| c |>\nI like this solution as well, but I prefer `array_filter($values,\
    \ function($value) { return is_int($value); });` because it's more concise.\n\
    <|/ c |>\n<| a tags=arrays,php,filtering |>\n<code>\n$array = array(\"a\", 3.14,\
    \ 5);\n$filtered = array_filter($array, function($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution doesn't work if you have\
    \ a string in the array. `array_filter` will filter out all non-integer values.\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work if you have a string in the array.\
    \ `array_filter` will filter out all non-integer values.\n<|/ c |>\n<| c |>\n\
    This solution doesn't work if you have a string in the array. `array_filter` will\
    \ filter out all non-integer values.\n<|/ c |>\n<| c |>\nThis solution doesn't\
    \ work if you have a string in the array. `array_filter` will filter out all non-integer\
    \ values.\n<|/ c |>\n<| c |>\nThis solution doesn't work if you have a string\
    \ in the array. `array_filter` will filter out all non-integer values.\n<|/ c\
    \ |>\n<| a tags=arrays,php,filtering |>\n<code>\n$array = array(\"a\", 3.14, 5);\n\
    $filtered = array_filter($array, function($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/", "    return array_filter($values, function($value) {\n   \
    \     return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    $filtered = array();\n    foreach ($values as $value) {\n\
    \        if (is_int($value)) {\n            $filtered[] = $value;\n        }\n\
    \    }\n    return $filtered;\n}\n", "    $filtered = array();\n    foreach ($values\
    \ as $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\n", "    $filtered = array();\n  \
    \  foreach ($values as $value) {\n        if (is_int($value)) {\n            $filtered[]\
    \ = $value;\n        }\n    }\n    return $filtered;\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n", "  return array_filter($values, function($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    $values = array_filter($values, 'is_int');\n\
    \    return $values;\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_numeric($value);\n  });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "    $integers =\
    \ array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $integers[] = $value;\n        }\n    }\n    return $integers;\n\
    }\n", "    return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "    $filtered = array();\n    foreach\
    \ ($values as $value) {\n        if (is_int($value)) {\n            $filtered[]\
    \ = $value;\n        }\n    }\n    return $filtered;\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\", 3.14,\
    \ 5);\n$array = array_filter($array, 'is_int');\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array,\
    \ 'is_int');\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\"a\", 3.14, 5);\n$array = array_filter($array, 'is_int');\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\"\
    , 3.14, 5);\n$array = array_filter($array, 'is_int');\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array\
    \ = array_filter($array, 'is_int');\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array, 'is_int');\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$array = array(\"\
    a\", 3.14, 5);\n$array = array_filter($array, 'is_int');\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array\
    \ = array_filter($array, 'is_int');\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array, 'is_int');\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    a\", 3.14, 5);\n$array = array_filter($array, 'is_int');\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array,\
    \ 'is_int');\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\"a\", 3.14, 5);\n$array = array_filter($array, 'is_int');\n</code>",
  "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "    $integers\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $integers[] = $value;\n        }\n    }\n    return $integers;\n\
    }\n", "    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "  return array_filter($values, function($value)\
    \ {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n</code>\n<|/\
    \ a |>\n<| a dscore=1 |>\nI made a small improvement to the accepted answer. \n\
    It will filter out empty arrays as well as empty strings. \n<code>", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    $values\
    \ = array_filter($values, 'is_int');\n    return $values;\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n", "    return array_filter($values, function ($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "  return array_filter($values, function($value)\
    \ {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function($value) {\n    return is_int($value);\n  });\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(\n    array(\"a\" => 1, \"b\" => 2, \"c\" => 3),\n    array(\"a\" =>\
    \ 4, \"b\" => 5, \"c\" => 6),\n    array(\"a\" => 7, \"b\" => 8, \"c\" => 9),\n\
    );\n\n$result = array_map(function($v){\n    return array_filter($v, function($v){\n\
    \        return is_int($v);\n    });\n}, $array);\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\n    array(\"a\"\
    \ => 1, \"b\" => 2, \"c\" => 3),\n    array(\"a\" => 4, \"b\" => 5, \"c\" => 6),\n\
    \    array(\"a\" => 7, \"b\" => 8, \"c\" => 9),\n);\n\n$result = array();\nforeach($array\
    \ as $subarray) {\n    $result = array_merge($result, array_filter($subarray));\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(\n    array(\"a\" => 1, \"b\" => 2, \"c\" => 3),\n    array(\"a\" =>\
    \ 4, \"b\" => 5, \"c\" => 6),\n    array(\"a\" => 7, \"b\" => 8, \"c\" => 9),\n\
    );\n\n$result = array();\nforeach($array as $subarray) {\n    $result = array_merge($result,\
    \ array_filter($subarray));\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    $array = array(\n    array(\"a\" => 1, \"b\" => 2, \"c\" => 3),\n    array(\"\
    a\" => 4, \"b\" => 5, \"c\" => 6),\n    array(\"a\" => 7, \"b\" => 8, \"c\" =>\
    \ 9),\n);\n\n$result = array();\nforeach($array as $subarray) {\n    $result =\
    \ array_merge($result, array_filter($subarray));\n}\n\nprint_r($result);\n</code>\n\
    <|/ a tags=arrays,php dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\n\
    \    array(\"a\" => 1, \"b\" => 2, \"c\" => 3),\n    array(\"a\" ", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "    return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "    $filtered =\
    \ array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n", "    $filtered = array();\n    foreach ($values as $value) {\n        if\
    \ (is_int($value)) {\n            $filtered[] = $value;\n        }\n    }\n  \
    \  return $filtered;\n}\n", "  return array_filter($values, function($value) {\n\
    \    return is_int($value);\n  });\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's very\
    \ easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's very easy to understand.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and it's very easy to understand.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ very easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's very easy to understand.\n<|/ c |>\n<| a dscore=5 tags=arrays,php,filter\
    \ |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"\
    e\" => 5);\n\n$filtered = array_filter($array, function ($value) {\n    return\
    \ is_int($value);\n});\n</code>\n<|/ a |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and it's very easy to understand.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and it's very easy to understand.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ very easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's very easy to understand.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and it's very easy to understand.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"\
    c\" => 3, \"d\" => 4, \"e\" => 5);\n\n$filtered = array_filter($array, function\
    \ ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a tags=arrays,php,filter\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's very\
    \ easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's very easy to understand.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer", "  return array_filter($values, function ($value) {\n\
    \    return is_int($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nThis doesn't work when you have an array with mixed types. `filter_integers(array(\"\
    a\", 3.14, 5))` returns `array(5)` instead of `array(1)`.\n<|/ c |>\n<| c |>\n\
    I added a version that works with mixed types. I hope it helps.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work when you have an array with mixed types. `filter_integers(array(\"\
    a\", 3.14, 5))` returns `array(5)` instead of `array(1)`.\n<|/ c |>\n<| c |>\n\
    I added a version that works with mixed types. I hope it helps.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=1\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", 3.14,\
    \ 5);\n$array = array_filter($array, function ($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\"\
    , 3.14, 5);\n$array = array_filter($array, function ($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"a\", 3.14, 5);\n$array = array_filter($array, function ($value) {\n\
    \    return is_int($value);\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\", 3.14, 5);\n$array = array_filter($array, function\
    \ ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\n$array = ", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    $integers = array();\n\
    \    foreach ($values as $value) {\n        if (is_int($value)) {\n          \
    \  $integers[] = $value;\n        }\n    }\n    return $integers;\n}\n", "   \
    \ return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    $values = array_filter($values, 'is_int');\n    return $values;\n\
    }\n", "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    return array_filter($values, function($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "    $filtered = array();\n    foreach ($values\
    \ as $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\n</code>\n<|/ a |>\n<| a |>\nI used\
    \ this code to remove empty array from array\n<code>\n$array = array();\n$array\
    \ = array_filter($array);\n</code>\n<|/ a tags=arrays,php dscore=5 |>\n<| c |>\n\
    This does not remove empty arrays, it only removes empty values.\n<|/ c |>\n<|\
    \ c |>\nThis does not remove empty arrays, it only removes empty values.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\n$array = array();\n$array = array_filter($array);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis does not remove empty arrays,\
    \ it only removes empty values.\n<|/ c |>\n<| c |>\nThis does not remove empty\
    \ arrays, it only removes empty values.\n<|/ c |>\n<| a |>\n<code>\n$array = array();\n\
    $array = array_filter($array);\n</code>\n<|/ a dscore=5 tags=arrays,php |>\n<|\
    \ a tags=arrays,php |>\n<code>\n$array = array();\n$array = array_filter($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\n<code>\n$array = array();\n$array\
    \ = array_filter($array);\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array();\n$array = array_filter($array);\n</code>\n<|/\
    \ a dscore=5 |>\n<| a dscore=5 |>\n<code>\n$array = array();\n$array = array_filter($array);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=5 |>\n<code>\n$array = array();\n\
    $array = array_filter($array);\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=5\
    \ |>\n<code>\n$array = array();\n$array = array_filter($array);\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a dscore=5 |>\n<code>\n$array = array();\n$array =\
    \ array_filter($array);\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array();\n$array = array_filter($array);\n</code>\n", " \
    \   return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays,filter |>\n<| a tags=php,arrays,filter\
    \ |>\n<code>", "  return array_filter($values, function($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    $integers = array();\n    foreach ($values\
    \ as $value) {\n        if (is_int($value)) {\n            $integers[] = $value;\n\
    \        }\n    }\n    return $integers;\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    $filtered = array();\n    foreach\
    \ ($values as $value) {\n        if (is_int($value)) {\n            $filtered[]\
    \ = $value;\n        }\n    }\n    return $filtered;\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    $filtered = array();\n    foreach ($values\
    \ as $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "    $filtered = array();\n    foreach ($values as $value) {\n        if\
    \ (is_int($value)) {\n            $filtered[] = $value;\n        }\n    }\n  \
    \  return $filtered;\n}\n", "    $integers = array();\n    foreach ($values as\
    \ $value) {\n        if (is_int($value)) {\n            $integers[] = $value;\n\
    \        }\n    }\n    return $integers;\n}\n", "    $values = array_filter($values,\
    \ 'is_int');\n    return $values;\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n</code>\n<|/ a tags=php,arrays,filter,integer\
    \ |>\n<| c |>\nThis doesn't work for me. `array_filter` returns an empty array\
    \ for me.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `array_filter` returns\
    \ an empty array for me.\n<|/ c |>\n<| a tags=php,arrays,filter,integer |>\n<code>\n\
    $array = array(\"a\", 3.14, 5);\n$array = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't work for me. `array_filter` returns an empty array for me.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `array_filter` returns an empty array for me.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `array_filter` returns an empty array\
    \ for me.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `array_filter` returns\
    \ an empty array for me.\n<|/ c |>\n<| a tags=php,arrays,filter,integer |>\n<code>\n\
    $array = array(\"a\", 3.14, 5);\n$array = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't work for me. `array_filter` returns an empty array for me.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `array_filter` returns an empty array for me.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `array_filter` returns an empty array\
    \ for me.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `array_filter` returns\
    \ an empty array for me.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"\
    a\", 3.14, 5);\n$array = array_filter($array, function($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a tags=php,arrays,filter,integer |>\n<| c |>\nThis doesn't work\
    \ for me. `array_filter` returns an empty array for me.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for me. `array_filter` returns an empty array for me.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `array_filter` returns an empty array for me.\n\
    <|/ ", "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    return array_filter($values, function($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a dscore=3 |>\nI came up with something that works pretty well for me:\n<code>",
  "    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    $integers = array();\n    foreach ($values as $value) {\n\
    \        if (is_int($value)) {\n            $integers[] = $value;\n        }\n\
    \    }\n    return $integers;\n}\n", "    $values = array_filter($values, 'is_int');\n\
    \    return $values;\n}\n", "    $filtered = array();\n    foreach ($values as\
    \ $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function($value) {\n    return is_numeric($value);\n \
    \ });\n}\n", "    return array_filter($values, function ($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nI came up with a solution that is more flexible and doesn't\
    \ require any additional libraries. I wrote a function that will filter out any\
    \ non-numeric values from a given array:\n<code>", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n</code>\n<|/\
    \ a tags=arrays,php,filter,integer |>\n<| a tags=arrays,php,filter,integer |>\n\
    <code>\n$array = array(\n    'a',\n    3.14,\n    5,\n    'abc',\n    array(),\n\
    \    array()\n);\n\n$result = array_filter($array, function ($value) {\n    return\
    \ is_int($value);\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis should be the accepted answer. No need to reinvent the wheel.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the\
    \ wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ reinvent the wheel.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\n \
    \   'a',\n    3.14,\n    5,\n    'abc',\n    array(),\n    array()\n);\n\n$result\
    \ = array_filter($array, function ($value) {\n    return is_int($value);\n});\n\
    \nprint_r($result);\n</code>\n<|/ a tags=arrays,php,filter,integer |>\n<| c |>\n\
    This should be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n\
    <| a tags=arrays,php,filter,integer |>\n<code>\n$array = array(\n    'a',\n  \
    \  3.14,\n    5,\n    'abc',\n    array(),\n    array()\n);\n\n$result = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=5 |>\n<| a tags=arrays,php,filter,integer |>\n<code>\n$array\
    \ = array(\n    'a',\n    3.14,\n    5,\n    'abc',\n    array(),\n    array()\n\
    );\n\n$result = array_filter($array, function ($value) {\n    return is_int($value);\n\
    });\n\nprint_r($result);\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\n<code>\n\
    $array = array(\n    'a',\n    ", "    $filtered = array();\n    foreach ($values\
    \ as $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\n", "    $integers = array();\n  \
    \  foreach ($values as $value) {\n        if (is_int($value)) {\n            $integers[]\
    \ = $value;\n        }\n    }\n    return $integers;\n}\n", "    $filtered = array();\n\
    \    foreach ($values as $value) {\n        if (is_int($value)) {\n          \
    \  $filtered[] = $value;\n        }\n    }\n    return $filtered;\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "  return array_filter($values, function($value) {\n    return is_int($value);\n\
    \  });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "    $filtered\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
