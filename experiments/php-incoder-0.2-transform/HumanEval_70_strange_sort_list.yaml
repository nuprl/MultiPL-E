name: HumanEval_70_strange_sort_list
language: php
prompt: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
  \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
  \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list(array(1,\
  \ 2, 3, 4))\n// array(1, 4, 2, 3)\n// >>> strange_sort_list(array(5, 5, 5, 5))\n\
  // array(5, 5, 5, 5)\n// >>> strange_sort_list(array())\n// array()\nfunction strange_sort_list($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return strange_sort_list(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
  \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
  \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
  \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
  \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach\
    \ ($lst as $item) {\n    if ($item == $min) {\n      $lst[] = $max;\n    } else\
    \ if ($item == $max) {\n      $lst[] = $min;\n    } else {\n      $lst[] = $item;\n\
    \    }\n  }\n  return $lst;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `array(1,2,3)`.\n<|/ c |>\n<| c |>\nIt works. Try it with\
    \ `array(1,2,3)`. `strange_sort_list(array(1,2,3))` returns `array(1,2,3)`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `array(1,2,3)`.\n<|/ c |>\n<|\
    \ c |>\nIt works. Try it with `array(1,2,3)`. `strange_sort_list(array(1,2,3))`\
    \ returns `array(1,2,3)`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `array(1,2,3)`.\n\
    <|/ c |>\n<| a |>\n<code>", "  $min = min($lst);\n  $max = max($lst);\n  $lst\
    \ = array();\n  foreach ($lst as $value) {\n    if ($value < $min) {\n      $lst[]\
    \ = $min;\n    } else if ($value > $max) {\n      $lst[] = $max;\n    } else {\n\
    \      $lst[] = $value;\n    }\n  }\n  return $lst;\n}\n</code>\n<|/ a tags=sorting,php\
    \ |>\n<| c |>\nThis is not an answer, but a comment. Answers should contain an\
    \ explanation of what the code does, not just code.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I thought it would be helpful to show how it works. I added some\
    \ comments to make it clearer.\n<|/ c |>\n<| c |>\nI agree with you, but I thought\
    \ it would be helpful to show how it works. I added some comments to make it clearer.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought it would be helpful to show\
    \ how it works. I added some comments to make it clearer.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I thought it would be helpful to show how it works. I added\
    \ some comments to make it clearer.\n<|/ c |>\n<| a |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array = array_merge($array,array_reverse($array));\n$array = array_merge($array,array_reverse($array));\n\
    $array = array_merge($array,array_reverse($array));\n$array = array_merge($array,array_reverse($array));\n\
    $array = array_merge($array,array_reverse($array));\n$array = array_merge($array,array_reverse($array));\n\
    $array = array_merge($array,array_reverse($array));\n$array = array_merge($array,array_reverse($array));\n\
    $array = array_merge($array,array_reverse($array));\n$array = array_merge($array,array_reverse($array));\n\
    $array = array_merge($array,array_reverse($array));\n$array = array_merge($array,array_reverse($array));\n\
    $array = array_merge($array,array_reverse($array));\n$array = array_merge($array,array_reverse($array));\n\
    $array = array_merge($array,array_reverse($array));\n$array = array_merge($array,array_reverse($array));\n\
    $array = array_merge($array,array_reverse($array));\n$array = array_merge($array,",
  "    $sorted = array();\n    $min = $max = array_shift($lst);\n    foreach ($lst\
    \ as $item) {\n        if ($item < $min) {\n            $sorted[] = $min;\n  \
    \          $min = $item;\n        } elseif ($item > $max) {\n            $sorted[]\
    \ = $max;\n            $max = $item;\n        } else {\n            $sorted[]\
    \ = $item;\n        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. I'm getting `array(4, 1, 3, 2)` when\
    \ I run this code.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works.\
    \ What PHP version are you using?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10\
    \ and it works. What PHP version are you using?\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.3.10 and it works. What PHP version are you using?\n<|/ c |>\n<| c\
    \ |>\nI tested it on PHP 5.3.10 and it works. What PHP version are you using?\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post.\n<|/ c |>\n<| c |>\nThis does provide an answer\
    \ to the question. `array_reverse` reverses the order of the array in place. `array_reverse`\
    \ does not return a new array, it modifies the array in place.\n<|/ c |>\n<| c\
    \ |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post.\n<|/ c |>\n\
    <| c |>\nThis does provide an answer to the question. `array_reverse` reverses\
    \ the order of the array in place. `array_reverse` does not return a new array,\
    \ it modifies the array in place.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post.\n<|/ c |>\n<| a |>\n<code>\n$array = array(1,\
    \ 2, 3, 4);\n$array = array_reverse($array);", "  $lst = array_reverse($lst);\n\
    \  sort($lst);\n  return $lst;\n}\n", "    $sorted = array();\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ $lst);\n    return $sorted;\n}\n", "    $sorted = array();\n    $min = $max\
    \ = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $min) {\n   \
    \         $min = $item;\n        } else if ($item > $max) {\n            $max\
    \ = $item;\n        }\n        $sorted[] = $item;\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $arr = array(1,2,3,4,5,6,7,8,9,10);\n$arr1 = array(4,5,6,7,8,9,10);\n$arr2 = array(4,5,6,7,8,9,10);\n\
    $arr3 = array(4,5,6,7,8,9,10);\n$arr4 = array(4,5,6,7,8,9,10);\n$arr5 = array(4,5,6,7,8,9,10);\n\
    $arr6 = array(4,5,6,7,8,9,10);\n$arr7 = array(4,5,6,7,8,9,10);\n$arr8 = array(4,5,6,7,8,9,10);\n\
    $arr9 = array(4,5,6,7,8,9,10);\n$arr10 = array(4,5,6,7,8,9,10);\n$arr11 = array(4,5,6,7,8,9,10);\n\
    $arr12 = array(4,5,6,7,8,9,10);\n$arr13 = array(4,5,6,7,8,9,10);\n$arr14 = array(4,5,6,7,8,9,10);\n\
    $arr15 = array(4,5,6,7,8,9,10);\n$arr16 = array(4,5,6,7,8,9,10);\n$arr17 = array(4,5,6,7,8,9,10);\n\
    $arr18 = array(4,5,6,7,8,9,10);\n$arr19 = array(4,5,6,7,8,9,10);\n$arr20 = array(4,5,6,7,8,9,10);\n\
    $arr21 = array(4,5,6,7,8,9,10);\n$arr22 = array(4,5,6,7,8,9,10);\n$arr23 = array(4,5,6,7,8,9,10);\n\
    $arr24 = array(4,5,6,7,8,9,10);\n$arr25 = array(4,5,6,7,8,9,10);\n$arr26 = array(4,5,6,7,8,9,10);\n\
    $arr27 = array(4,5,6,7,8,9,10);\n$arr28 = array(4,5,6,7,8,9,10);\n$arr29 = array(4,5,6,7,8,9,10);\n\
    $arr30 = array(4,5,6,7,8,9,10);\n$arr31 = array(4,5,6,7,8,9,10);\n$arr32 = array(4,5,6,7,8,9,10);\n\
    $arr", "  $sorted = array();\n  $sorted = array_merge($sorted, $lst);\n  $sorted\
    \ = array_merge($sorted, array_reverse($lst));\n  $sorted = array_merge($sorted,\
    \ array_reverse($sorted, true));\n  return $sorted;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's easy\
    \ to understand.\n<|/ c |>\n<| c |>\nI love this solution, it's very elegant.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's easy to understand.\n<|/ c |>\n<| c |>\nI love this solution, it's\
    \ very elegant. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's easy to understand.\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array_map(function($v)\
    \ use ($min, $max) {\n    return $v < $min ? $min : $v > $max ? $max : $v;\n \
    \ }, $lst);\n  return $lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n<?php", "    $sorted = array();\n    $min = $max = array_shift($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item < $min) {\n            $sorted[]\
    \ = $min;\n            $min = $item;\n        } elseif ($item > $max) {\n    \
    \        $sorted[] = $max;\n            $max = $item;\n        } else {\n    \
    \        $sorted[] = $item;\n        }\n    }\n    $sorted[] = $min;\n    $sorted[]\
    \ = $max;\n    return $sorted;\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10646188)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to sort an\
    \ array in such a way that when two elements are equal, they are next to each\
    \ other. He also wants to sort it so that when two elements are equal, they are\
    \ next to each other. He also wants to sort it so that when two elements are equal,\
    \ they are next to each other. He also wants to sort it so that when two elements\
    \ are equal, they are next to each other. He also wants to sort it so that when\
    \ two elements are equal, they are next to each other. He also wants to sort it\
    \ so that when two elements are equal, they are next to each other. He also wants\
    \ to sort it so that when two elements are equal, they are next to each other.\
    \ He also wants to sort it so that when two elements are equal, they are next\
    \ to each other. He also wants to sort it so that when two elements are equal,\
    \ they are next to each other. He also wants to sort it so that when two elements\
    \ are equal, they are next to each other. He also wants to sort it so that when\
    \ two elements are equal, they are next to each other. He also wants to sort it\
    \ so that when two elements are equal, they are next to each other. He also wants\
    \ to sort it so that when two elements are equal, they are next to each other.\
    \ He also wants to sort it so that when two elements are equal, they are next\
    \ to each other. He also wants to sort it so that when two elements are equal,\
    \ they are next to each other. He also wants to sort it so that when two elements\
    \ are equal, they are next to each other. He also ", "    $min = min($lst);\n\
    \    $max = max($lst);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max(", "  $sorted = array();\n  $min = $lst[0];\n  $max = $lst[0];\n  foreach\
    \ ($lst as $item) {\n    if ($item < $min) {\n      $min = $item;\n    }\n   \
    \ if ($item > $max) {\n      $max = $item;\n    }\n  }\n  $sorted[] = $min;\n\
    \  $sorted[] = $max;\n  foreach ($lst as $item) {\n    if ($item < $min) {\n \
    \     $sorted[] = $min;\n    }\n    if ($item > $max) {\n      $sorted[] = $max;\n\
    \    }\n    $sorted[] = $item;\n  }\n  return $sorted;\n}\n", "  $sorted_lst =\
    \ array();\n  foreach ($lst as $key => $value) {\n    $sorted_lst[] = $value;\n\
    \  }\n  sort($sorted_lst);\n  return $sorted_lst;\n}\n", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $lst = array_reverse($lst);\n  foreach ($lst as $key =>\
    \ $value) {\n    if ($value < $min) {\n      $lst[$key] = $min;\n    } else if\
    \ ($value > $max) {\n      $lst[$key] = $max;\n    }\n  }\n  return $lst;\n}\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$array\
    \ = array(1, 2, 3, 4);\n$array = str_replace(array('0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9'), array('', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j'), $array);\n$array = str_replace(array('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j'), array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), $array);\n\
    $array = str_replace(array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'),\
    \ array('', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), $array);\n$array\
    \ = str_replace(array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), $array);\n$array = str_replace(array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('', 'a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j'), $array);\n$array = str_replace(array('a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), array('0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9'), $array);\n$array = str_replace(array('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9'), array('', 'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j'), $array);\n$array = str_replace(array('a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j'), array('0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9'), $array);\n$array = str_replace(array('0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9'), array('', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'),\
    \ $array);\n$array = str_replace(array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j'), array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), ", "   \
    \ $sorted = array();\n    $sorted = array_merge($sorted, $lst);\n    $sorted =\
    \ array_merge($sorted, array_reverse($lst));\n    $sorted = array_merge($sorted,\
    \ array_reverse($sorted, true));\n    return $sorted;\n}\n", "    $sorted = array();\n\
    \    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, $lst);\n    return $sorted;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(1,\
    \ 2, 3, 4);\n$array = str_repeat('x', count($array));\n$array = array_merge($array,\
    \ array_flip($array));\n$array = array_flip($array);\n$array = array_merge($array,\
    \ array_flip($array));\n$array = array_merge($array, array_flip($array));\n$array\
    \ = array_merge($array, array_flip($array));\n$array = array_merge($array, array_flip($array));\n\
    $array = array_merge($array, array_flip($array));\n$array = array_merge($array,\
    \ array_flip($array));\n$array = array_merge($array, array_flip($array));\n$array\
    \ = array_merge($array, array_flip($array));\n$array = array_merge($array, array_flip($array));\n\
    $array = array_merge($array, array_flip($array));\n$array = array_merge($array,\
    \ array_flip($array));\n$array = array_merge($array, array_flip($array));\n$array\
    \ = array_merge($array, array_flip($array));\n$array = array_merge($array, array_flip($array));\n\
    $array = array_merge($array, array_flip($array));\n$array = array_merge($array,\
    \ array_flip($array));\n$array = array_merge($array, array_flip($array));\n$array\
    \ = array_merge($array, array_flip($array));\n$array = array_merge($array, array_flip($array));\n\
    $array = array_merge($array, array_flip($array));\n$array = array_merge($array,\
    \ array_flip($array));\n$array = array_merge($array, array_flip($array));\n$array\
    \ = array_merge($array, array_flip($array));\n$array = array_merge($array, array_flip($array));\n\
    $array = array_merge($array, array_flip($array));\n$array = array_merge($array,\
    \ array_flip($array));\n$array = array_merge($array, array_flip($array));\n$array\
    \ = array_merge($array, array_flip($array));\n$array = array_merge($array, array_flip($array));\n\
    $array = array_merge($array, array_flip($array));\n$array = array_merge($array,\
    \ array_flip($", "  $sorted = array();\n  foreach ($lst as $key => $value) {\n\
    \    $sorted[$key] = $value;\n  }\n  ksort($sorted);\n  return $sorted;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and it's simple.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. Works perfectly and it's simple.\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>", "    $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item == $min) {\n            $sorted[]\
    \ = $min;\n        } else if ($item == $max) {\n            $sorted[] = $max;\n\
    \        } else {\n            $sorted[] = $item;\n        }\n    }\n    return\
    \ $sorted;\n}\n", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array_map(function($v)\
    \ use ($min, $max) {\n    return $v < $min ? $min : $v > $max ? $max : $v;\n \
    \ }, $lst);\n  return $lst;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11205580)\n\
    <|/ c |>\n<| c |>\nI added an explanation why I believe this to be an answer.\
    \ Thanks for your feedback.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/11205580)\n\
    <|/ c |>\n<| c |>\nI added an explanation why I believe this to be an answer.\
    \ Thanks for your feedback.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/11205580)\n\
    <|/ c |>\n<| a |>\n<code>\n<?php", "    $sorted = array();\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, array_reverse($lst));\n    return\
    \ $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$arr1 = array();\n$arr2 = array();\n$arr3 =\
    \ array();\n$arr4 = array();\n$arr5 = array();\n$arr6 = array();\n$arr7 = array();\n\
    $arr8 = array();\n$arr9 = array();\n$arr10 = array();\n$arr11 = array();\n$arr12\
    \ = array();\n$arr13 = array();\n$arr14 = array();\n$arr15 = array();\n$arr16\
    \ = array();\n$arr17 = array();\n$arr18 = array();\n$arr19 = array();\n$arr20\
    \ = array();\n$arr21 = array();\n$arr22 = array();\n$arr23 = array();\n$arr24\
    \ = array();\n$arr25 = array();\n$arr26 = array();\n$arr27 = array();\n$arr28\
    \ = array();\n$arr29 = array();\n$arr30 = array();\n$arr31 = array();\n$arr32\
    \ = array();\n$arr33 = array();\n$arr34 = array();\n$arr35 = array();\n$arr36\
    \ = array();\n$arr37 = array();\n$arr38 = array();\n$arr39 = array();\n$arr40\
    \ = array();\n$arr41 = array();\n$arr42 = array();\n$arr43 = array();\n$arr44\
    \ = array();\n$arr45 = array();\n$arr46 = array();\n$arr47 = array();\n$arr48\
    \ = array();\n$arr49 = array();\n$arr50 = array();\n$arr51 = array();\n$arr52\
    \ = array();\n$arr53 = array();\n$arr54 = array();\n$arr55 = array();\n$arr56\
    \ = array();\n$arr57 = array();\n$arr58 = array();\n$arr59 = array();\n$arr60\
    \ = array();\n$arr61 = array();\n$arr62 = array();\n$arr63 = array();\n$arr64\
    \ = array();\n$arr65", "  $lst = array_reverse($lst);\n  foreach ($lst as $key\
    \ => $value) {\n    $lst[$key] = $value;\n  }\n  return $lst;\n}\n", "    $sorted\
    \ = array();\n    foreach ($lst as $key => $value) {\n        $sorted[$key] =\
    \ $value;\n    }\n    array_multisort($sorted, SORT_DESC, $lst);\n    return $lst;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `array_multisort` sorts\
    \ by the first element of the array. `strange_sort_list` sorts by the first element\
    \ of the array and then the second element of the array.\n<|/ c |>\n<| c |>\n\
    I added a version that works with associative arrays too.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me. `array_multisort` sorts by the first element of the\
    \ array. `strange_sort_list` sorts by the first element of the array and then\
    \ the second element of the array.\n<|/ c |>\n<| c |>\nThis doesn't work for me.\
    \ `array_multisort` sorts by the first element of the array. `strange_sort_list`\
    \ sorts by the first element of the array and then the second element of the array.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `array_multisort` sorts by the first\
    \ element of the array. `strange_sort_list` sorts by the first element of the\
    \ array and then the second element of the array.\n<|/ c |>\n<| a tags=sorting,arrays,php\
    \ |>\n<code>", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array_map(function($v)\
    \ use ($min, $max) {\n    return $v < $min ? $min : $v > $max ? $max : $v;\n \
    \ }, $lst);\n  return $lst;\n}\n", "  $sorted = array();\n  $min = $lst[0];\n\
    \  $max = $lst[0];\n  foreach ($lst as $item) {\n    if ($item < $min) {\n   \
    \   $min = $item;\n    } else if ($item > $max) {\n      $max = $item;\n    }\n\
    \  }\n  while ($min < $max) {\n    $sorted[] = $min;\n    $min++;\n  }\n  while\
    \ ($min > $max) {\n    $sorted[] = $max;\n    $max--;\n  }\n  foreach ($lst as\
    \ $item) {\n    if ($item < $min) {\n      $sorted[] = $item;\n    } else if ($item\
    \ > $max) {\n      $sorted[] = $item;\n    }\n  }\n  return $sorted;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n<code>", "    $sorted = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    foreach ($lst as $val) {\n\
    \        if ($val < $min) {\n            $sorted[] = $min;\n        } else if\
    \ ($val > $max) {\n            $sorted[] = $max;\n        } else {\n         \
    \   $sorted[] = $val;\n        }\n    }\n    return $sorted;\n}\n", "  $min =\
    \ min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach ($lst as $i =>\
    \ $val) {\n    if ($val == $min) {\n      $lst[$i] = $max;\n    } else if ($val\
    \ == $max) {\n      $lst[$i] = $min;\n    } else {\n      $lst[$i] = $val;\n \
    \   }\n  }\n  return $lst;\n}\n", "  $min = min($lst);\n  $max = max($lst);\n\
    \  $result = array();\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $result[] = $min;\n    } else if ($item == $max) {\n      $result[] = $max;\n\
    \    } else {\n      $result[] = $item;\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are multiple equal numbers\
    \ in the list. Try `strange_sort_list(array(1,1,2,3,4))`\n<|/ c |>\n<| c |>\n\
    Yes, I noticed that and fixed it. I also added a second solution that doesn't\
    \ require the use of any extra functions or variables.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    $min = min($lst);\n    $max = max($lst);\n    $lst = array();\n\
    \    foreach ($lst as $v) {\n        if ($v == $min) {\n            $lst[] = $v;\n\
    \        } else if ($v == $max) {\n            $lst[] = $v;\n        } else {\n\
    \            $lst[] = $min;\n            $lst[] = $max;\n        }\n    }\n  \
    \  return $lst;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't\
    \ work for me. `strange_sort_list(array(5, 5, 5, 5))` returns `array(5, 5, 5,\
    \ 5)`\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works. I added a link\
    \ to the function to the answer.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10\
    \ and it works. I added a link to the function to the answer.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for me. strange_sort_list(array(5, 5, 5, 5)) returns array(5,\
    \ 5, 5, 5)\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works. I added\
    \ a link to the function to the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    <?php", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach\
    \ ($lst as $i) {\n    if ($i < $min) {\n      $lst[] = $min;\n    } else if ($i\
    \ > $max) {\n      $lst[] = $max;\n    } else {\n      $lst[] = $i;\n    }\n \
    \ }\n  return $lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n<?php\n$array = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n\
    \    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n\
    \    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n \
    \   15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n    19 => 19,\n  \
    \  20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n    24 => 24,\n   \
    \ 25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n    30\
    \ => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n    35 =>\
    \ 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n\
    \    41 => 41,\n    42 => 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n \
    \   46 => 46,\n    47 => 47,\n    48 => 48,\n    49 => 49,\n    50 => 50,\n  \
    \  51 => 51,\n    52 => 52,\n    53 => 53,\n    54 => 54,\n    55 => 55,\n   \
    \ 56 => 56,\n    57 => 57,\n    58 => 58,\n    59 => 59,\n    60 => 60,\n    61\
    \ => 61,\n    62 => 62,\n    63 => 63,\n    64 => 64,\n    65 => 65,\n    66 =>\
    \ 66,\n    67 => 67,\n    68 => 68,\n    69 => 69,\n    70 => 70,\n    71 => 71,\n",
  "    $min = min($lst);\n    $max = max($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst += array($min, $max);\n    return $lst;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are duplicate numbers in the array\n\
    <|/ c |>\n<| c |>\nIt works if there are duplicate numbers in the array. Try it\
    \ yourself.\n<|/ c |>\n<| c |>\nIt doesn't work if there are duplicate numbers\
    \ in the array. Try it yourself.\n<|/ c |>\n<| c |>\nIt works if there are duplicate\
    \ numbers in the array. Try it yourself.\n<|/ c |>\n<| c |>\nIt works if there\
    \ are duplicate numbers in the array. Try it yourself.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "    $sorted = array();\n    foreach ($lst as $key => $value) {\n\
    \        $sorted[$key] = $value;\n    }\n    array_multisort($sorted, SORT_DESC,\
    \ $lst);\n    return $lst;\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| c\
    \ |>\nThis doesn't work if there are duplicate elements in the array\n<|/ c |>\n\
    <| c |>\nIt does work if there are duplicate elements in the array. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI tested it and it doesn't work if there are duplicate elements\
    \ in the array. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work if there are\
    \ duplicate elements in the array. Try it yourself.\n<|/ c |>\n<| c |>\nIt does\
    \ work if there are duplicate elements in the array. Try it yourself.\n<|/ c |>\n\
    <| a |>\n<code>", "    $min = min($lst);\n    $max = max($lst);\n    $mid = $min\
    \ + ($max - $min) / 2;\n    $lst = array();\n    foreach ($lst as $key => $value)\
    \ {\n        if ($value < $mid) {\n            $lst[$key] = $value;\n        }\
    \ else {\n            $lst[$key] = $mid;\n        }\n    }\n    return $lst;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php", "    $sorted\
    \ = array();\n    $min = min($lst);\n    $max = max($lst);\n    foreach ($lst\
    \ as $item) {\n        if ($item == $min) {\n            $sorted[] = $min;\n \
    \       } else if ($item == $max) {\n            $sorted[] = $max;\n        }\
    \ else {\n            $sorted[] = $item;\n        }\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>", "  $lst\
    \ = array_reverse($lst);\n  $lst = array_merge($lst);\n  return $lst;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array = array_reverse($array);\n$array = array_merge($array);\nprint_r($array);",
  "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach ($lst as\
    \ $i => $v) {\n    if ($v == $min) {\n      $lst[$i] = $max;\n    } else if ($v\
    \ == $max) {\n      $lst[$i] = $min;\n    } else {\n      $lst[$i] = $v;\n   \
    \ }\n  }\n  return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0\
    \ |>\n<code>", "  $sorted = array();\n  $min = $lst[0];\n  $max = $lst[0];\n \
    \ foreach ($lst as $item) {\n    if ($item < $min) {\n      $min = $item;\n  \
    \  } else if ($item > $max) {\n      $max = $item;\n    }\n    $sorted[] = $item;\n\
    \  }\n  return $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This doesn't work if you have duplicate numbers in the array. For example, if\
    \ you have `array(1, 2, 3, 3, 4)` it will return `array(4, 2, 3, 1, 4)`.\n<|/\
    \ c |>\n<| c |>\nI believe this answer should have been accepted as the correct\
    \ answer. Thanks for sharing your solution!\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    \n$array = array_unique($array);\n$array = array_values($array);\n$array = array_chunk($array,\
    \ ceil(count($array)/2));\n$array = array_map(function($v){return $v[0];}, $array);\n\
    $array = array_map(function($v){return $v[1];}, $array);\n$array = array_map(function($v){return\
    \ $v[0];}, $array);\n$array = array_map(function($v){return $v[1];}, $array);\n\
    $array = array_map(function($v){return $v[0];}, $array);\n$array = array_map(function($v){return\
    \ $v[1];}, $array);\n$array = array_map(function($v){return $v[0];}, $array);\n\
    $array = array_map(function($v){return $v[1];}, $array);\n$array = array_map(function($v){return\
    \ $v[0];}, $array);\n$array = array_map(function(", "    $sorted = array();\n\
    \    foreach ($lst as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort($sorted, SORT_DESC, $lst);\n    return $lst;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n<code>", "    $sorted = array();\n\
    \    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, $lst);\n    return $sorted;\n}",
  "    $sorted = array();\n    $sorted = array_merge($sorted, $lst);\n    $sorted\
    \ = array_merge($sorted, array_reverse($lst));\n    return $sorted;\n}\n", " \
    \ $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach ($lst as\
    \ $v) {\n    if ($v < $min) {\n      $lst[] = $min;\n    } else if ($v > $max)\
    \ {\n      $lst[] = $max;\n    } else {\n      $lst[] = $v;\n    }\n  }\n  return\
    \ $lst;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work\
    \ if you have two equal numbers in the array. For example, `strange_sort_list(array(1,1,1,1))`\
    \ returns `array(1,1,1,1)`.\n<|/ c |>\n<| c |>\n: I fixed the bug, thanks for\
    \ pointing it out. :)\n<|/ c |>\n<| c |>\nThis doesn't work if you have two equal\
    \ numbers in the array. For example, `strange_sort_list(array(1,1,1,1))` returns\
    \ `array(1,1,1,1)`.\n<|/ c |>\n<| c |>\n: Yes, I noticed that too. Thanks for\
    \ pointing it out. :)\n<|/ c |>\n<| a dscore=4 |>\n<code>", "    $sorted = array();\n\
    \    $min = $lst[0];\n    $max = $lst[0];\n    foreach ($lst as $item) {\n   \
    \     if ($item < $min) {\n            $min = $item;\n        } elseif ($item\
    \ > $max) {\n            $max = $item;\n        } else {\n            $sorted[]\
    \ = $item;\n        }\n    }\n    return $sorted;\n}\n", "  $sorted = array();\n\
    \  foreach ($lst as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  array_multisort($sorted,\
    \ SORT_ASC, $lst);\n  return $lst;\n}\n", "    $sorted = array();\n    $sorted\
    \ = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted, $lst);\n \
    \   $sorted = array_merge($sorted, $lst);\n    return $sorted;\n}\n", "    $sorted\
    \ = array();\n    $sorted = array_merge($sorted, $lst);\n    array_multisort($sorted,\
    \ SORT_ASC, $lst);\n    return $lst;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n\
    \  foreach ($lst as $val) {\n    if ($val < $min) {\n      $lst[] = $min;\n  \
    \  } else if ($val > $max) {\n      $lst[] = $max;\n    } else {\n      $lst[]\
    \ = $val;\n    }\n  }\n  return $lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I like the idea of using min and max to find the min and max and then sorting\
    \ the list based on that. Thanks!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$arr =\
    \ array(1,2,3,4,5,6,7,8,9,10);\n$min = min($arr);\n$max = max($arr);\n$arr2 =\
    \ array();\nforeach($arr as $val){\n    if($val < $min){\n        $arr2[] = $min;\n\
    \    }\n    if($val > $max){\n        $arr2[] = $max;\n    }\n    $arr2[] = $val;\n\
    }\nprint_r($arr2);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($arr);\n\
    $max = max($arr);\n$arr2 = array();\nforeach($arr as $val){\n    if($val < $min){\n\
    \        $arr2[] = $min;\n    }\n    if($val > $max){\n        $arr2[] = $max;\n\
    \    }\n    $arr2[] = $val;\n}\nprint_r($arr2);", "  $min = min($lst);\n  $max\
    \ = max($lst);\n  $lst = array_map(function ($v) use ($min, $max) {\n    return\
    \ $v < $min ? $min : $v > $max ? $max : $v;\n  }, $lst);\n  return $lst;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,php,arrays |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, array_reverse($arr));\n$arr = array_merge($arr, array_reverse($arr));\n\
    $arr = array_merge($arr, ", "    $sorted = array();\n    $min = min($lst);\n \
    \   $max = max($lst);\n    foreach ($lst as $item) {\n        if ($item == $min)\
    \ {\n            $sorted[] = $min;\n        } else if ($item == $max) {\n    \
    \        $sorted[] = $max;\n        } else {\n            $sorted[] = $item;\n\
    \        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are duplicates in the array. Try it\
    \ with array(1, 2, 3, 3, 4)\n<|/ c |>\n<| c |>\nIt does work if there are duplicates\
    \ in the array. Try it with array(1, 2, 3, 3, 4)\n<|/ c |>\n<| c |>\nIt does work\
    \ if there are duplicates in the array. Try it with array(1, 2, 3, 3, 4)\n<|/\
    \ c |>\n<| c |>\nIt does work if there are duplicates in the array. Try it with\
    \ array(1, 2, 3, 3, 4)\n<|/ c |>\n<| c |>\nIt does work if there are duplicates\
    \ in the array. Try it with array(1, 2, 3, 3, 4)\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>", "  $sorted = array();\n  $min = min($lst);\n  $max = max($lst);\n  foreach\
    \ ($lst as $val) {\n    if ($val < $min) {\n      $sorted[] = $min;\n    } else\
    \ if ($val > $max) {\n      $sorted[] = $max;\n    } else {\n      $sorted[] =\
    \ $val;\n    }\n  }\n  return $sorted;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I like your solution, however it fails for `strange_sort_list(array(5, 5, 5, 5))`\
    \ which should return `array(5, 5, 5, 5)`\n<|/ c |>\n<| c |>\nI added a version\
    \ that works for that case\n<|/ c |>\n<| a tags=php,sorting |>\n<code>", "  $sorted\
    \ = array();\n  foreach ($lst as $key => $value) {\n    $sorted[$key] = $value;\n\
    \  }\n  array_multisort($sorted, SORT_DESC, $lst);\n  return $lst;\n}", "    $min\
    \ = min($lst);\n    $max = max($lst);\n    $lst = array_map(function ($num) use\
    \ ($min, $max) {\n        return $min + $num * ($max - $min) / 2;\n    }, $lst);\n\
    \    return $lst;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nI like\
    \ your solution, however it fails on this test case: \n`strange_sort_list(array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,",
  "    $min = min($lst);\n    $max = max($lst);\n    $lst = array();\n    foreach\
    \ ($lst as $item) {\n        if ($item == $min) {\n            $lst[] = $max;\n\
    \        } else if ($item == $max) {\n            $lst[] = $min;\n        } else\
    \ {\n            $lst[] = $item;\n        }\n    }\n    return $lst;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not the right answer. Try this with $lst =\
    \ array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,22",
  "    $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n    foreach\
    \ ($lst as $key => $value) {\n        if ($value < $min) {\n            $sorted[]\
    \ = $min;\n            $min = $value;\n        } elseif ($value > $max) {\n  \
    \          $sorted[] = $max;\n            $max = $value;\n        } else {\n \
    \           $sorted[] = $value;\n        }\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me. `strange_sort_list(array(5,\
    \ 10, 15, 20, 25))` returns `array(5, 10, 15, 20, 25)` instead of `array(5, 15,\
    \ 10, 20, 25)`.\n<|/ c |>\n<| c |>\nI tested it and it works. Are you sure you\
    \ used it correctly? I used `strange_sort_list(array(5, 10, 15, 20, 25))` and\
    \ it returned `array(5, 15, 10, 20, 25)`.\n<|/ c |>\n<| c |>\nYes, I used it exactly\
    \ as you did. Maybe I missed something. I'll check it out again.\n<|/ c |>\n<|\
    \ c |>\nOh, I see. You used `strange_sort_list(array(5, 10, 15, 20, 25))` instead\
    \ of `strange_sort_list(array(1, 2, 3, 4))`. Sorry for the confusion.\n<|/ c |>\n\
    <| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n\
    \  foreach ($lst as $val) {\n    if ($val < $min) {\n      $lst[] = $min;\n  \
    \  } else if ($val > $max) {\n      $lst[] = $max;\n    } else {\n      $lst[]\
    \ = $val;\n    }\n  }\n  return $lst;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it with `strange_sort_list(array(5, 5, 5, 5))`.\n<|/ c\
    \ |>\n<| c |>\n: I tested it and it works. I added a test case to the answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to the answer.\n<|/ c |>\n<| c |>\n:\
    \ I added a test case to the answer.\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to the answer.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$array =\
    \ array(\n    array(\n        'name' => 'a',\n        'value' => 1\n    ),\n \
    \   array(\n        'name' => 'b',\n        'value' => 2\n    ),\n    array(\n\
    \        'name' => 'c',\n        'value' => 3\n    ),\n    array(\n        'name'\
    \ => 'd',\n        'value' => 4\n    ),\n    array(\n        'name' => 'e',\n\
    \        'value' => 5\n    ),\n    array(\n        'name' => 'f',\n        'value'\
    \ => 6\n    ),\n    array(\n        'name' => 'g',\n        'value' => 7\n   \
    \ ),\n    array(\n        'name' => 'h',\n        'value' => 8\n    ),\n    array(\n\
    \        'name' => 'i',\n        'value' => 9\n    ),\n    array(\n        'name'\
    \ => 'j',\n        'value' => 10\n    ),\n    array(\n        'name' => 'k',\n\
    \        'value' => 11\n    ),\n    array(\n        'name' => 'l',\n        'value'\
    \ => 12\n    ),\n    array(\n        'name' => 'm',\n        'value' => 13\n \
    \   ),\n    array(\n        'name' => 'n',\n        'value' => 14\n    ),\n  \
    \  array(\n        'name' => 'o',\n        'value' => 15\n    ),\n    array(\n\
    \        'name' => 'p',\n        'value' => 16\n    ),\n    array(\n        'name'\
    \ => 'q',\n        'value' => 17\n    ),\n    array(\n        'name' => 'r',\n\
    \        'value' => 18\n    ),\n    array(\n        'name' => 's',\n        'value'\
    \ => 19\n    ),\n    array(\n        'name' => '", "    $lst = array_reverse($lst);\n\
    \    $lst = array_merge($lst);\n    return $lst;\n}\n", "  $sorted = array();\n\
    \  $min = $lst[0];\n  $max = $lst[0];\n  foreach ($lst as $item) {\n    if ($item\
    \ < $min) {\n      $min = $item;\n    }\n    if ($item > $max) {\n      $max =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $item;\n    }\n    if ($item == $max) {\n      $sorted[] =\
    \ $item;\n    }\n  }\n  ", "    $sorted = array();\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, array_reverse($lst));\n    $sorted\
    \ = array_merge($sorted, array_reverse($sorted, true));\n    return $sorted;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $lst = array();\n  foreach ($lst as $v) {\n    if ($v\
    \ == $min) {\n      $lst[] = $v;\n    } else if ($v == $max) {\n      $lst[] =\
    \ $v;\n    } else {\n      $lst[] = $min;\n      $lst[] = $max;\n    }\n  }\n\
    \  return $lst;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work if there are duplicate numbers in the array.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if there are duplicate numbers in the array.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if there are duplicate numbers in the array.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    \n$arr1 = array();\n$arr2 = array();\n$arr3 = array();\n$arr4 = array();\n$arr5\
    \ = array();\n$arr6 = array();\n$arr7 = array();\n$arr8 = array();\n$arr9 = array();\n\
    $arr10 = array();\n$arr11 = array();\n$arr12 = array();\n$arr13 = array();\n$arr14\
    \ = array();\n$arr15 = array();\n$arr16 = array();\n$arr17 = array();\n$arr18\
    \ = array();\n$arr19 = array();\n$arr20 = array();\n$arr21 = array();\n$arr22\
    \ = array();\n$arr23 = array();\n$arr24 = array();\n$arr25 = array();\n$arr26\
    \ = array();\n$arr27 = array();\n$arr28 = array", "    $sorted = array();\n  \
    \  $min = $lst[0];\n    $max = $lst[0];\n    foreach ($lst as $item) {\n     \
    \   if ($item < $min) {\n            $min = $item;\n        } else if ($item >\
    \ $max) {\n            $max = $item;\n        }\n    }\n    $sorted = array_merge($sorted,\
    \ array($min));\n    foreach ($lst as $item) {\n        if ($item == $min) {\n\
    \            $sorted = array_merge($sorted, array($item));\n        } else if\
    \ ($item == $max) {\n            $sorted = array_merge($sorted, array($item, $max));\n\
    \        } else {\n            $sorted = array_merge($sorted, array($item, $min,\
    \ $max));\n        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>", "    $lst = array_reverse($lst);\n\
    \    $lst = array_merge($lst);\n    return $lst;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = [1, 2, 3, 4, 5];\n$arr2\
    \ = array_reverse($arr);\n$arr3 = array_merge($arr, $arr2);\nprint_r($arr3);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1, 2, 3,\
    \ 4, 5];\n$arr2 = array_reverse($arr);\n$arr3 = array_merge($arr, $arr2);\nprint_r($arr3);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    <?php\n$arr = [1, 2, 3, 4, 5];\n$arr2 = array_reverse($arr);\n$arr3 = array_merge($arr,\
    \ $arr2);\nprint_r($arr3);", "  $lst = array_reverse($lst);\n  $lst = array_merge($lst);\n\
    \  return $lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if\
    \ there are duplicate numbers in the list. For example, `strange_sort_list(array(1,2,2,3,4))`\
    \ returns `array(1,2,3,4)`\n<|/ c |>\n<| c |>\nThis doesn't work if there are\
    \ duplicate numbers in the list. For example, `strange_sort_list(array(1,2,2,3,4))`\
    \ returns `array(1,2,3,4)`\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ have this problem.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", "    $sorted\
    \ = array();\n    $min = $lst[0];\n    $max = $lst[0];\n    foreach ($lst as $item)\
    \ {\n        if ($item < $min) {\n            $min = $item;\n        } else if\
    \ ($item > $max) {\n            $max = $item;\n        }\n        $sorted[] =\
    \ $item;\n    }\n    return $sorted;\n}\n", "  $sorted = array();\n  foreach ($lst\
    \ as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as\
    \ $key => $value) {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key\
    \ => $value) {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key =>\
    \ $value) {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key => $value)\
    \ {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key => $value) {\n\
    \    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key => $value) {\n \
    \   $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key => $value) {\n  \
    \  $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key => $value) {\n   \
    \ $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key => $value) {\n    $sorted[$key]\
    \ = $value;\n  }\n  foreach ($sorted as $key => $value) {\n    $sorted[$key] =\
    \ $value;\n  }\n  foreach ($sorted as $key => $value) {\n    $sorted[$key] = $value;\n\
    \  }\n  foreach ($sorted as $key => $value) {\n    $sorted[$key] = $value;\n \
    \ }\n  foreach ($sorted as $key => $value) {\n    $sorted[$key] = $value;\n  }\n\
    \  foreach ($sorted as $key => $value) {\n    $sorted[$key] = $value;\n  }\n \
    \ foreach ($sorted as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  foreach\
    \ ($sorted as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted\
    \ as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as\
    \ $key => $value) {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key\
    \ => $value) {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key =>\
    \ $value) {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key => $value)\
    \ {\n    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key => $value) {\n\
    \    $sorted[$key] = $value;\n  }\n  foreach ($sorted as $key => $value) {\n \
    \   $sorted[$key] = $value;\n  }\n  ", "    $sorted = array();\n    $min = array_shift($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item < $min) {\n            $sorted\
    \ = array_merge($sorted, array($min));\n            $min = $item;\n        } else\
    \ {\n            $sorted[] = $item;\n        }\n    }\n    return $sorted;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    $min = min($lst);\n\
    \    $max = max($lst);\n    $lst = array();\n    foreach ($lst as $key => $value)\
    \ {\n        if ($min > $value) {\n            $lst[$key] = $min;\n        } else\
    \ if ($max < $value) {\n            $lst[$key] = $max;\n        } else {\n   \
    \         $lst[$key] = $value;\n        }\n    }\n    return $lst;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me. `strange_sort_list(array(5,5,5,5))`\
    \ returns `array(5, 5, 5, 5)`\n<|/ c |>\n<| c |>\nI tested it and it works. Are\
    \ you sure you copied it correctly? I tested it on PHP 5.3.10 and PHP 5.4.3\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. I tested it on PHP 5.3.10 and PHP\
    \ 5.4.3\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and PHP 5.4.3 too. Works\
    \ fine.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and PHP 5.4.3 too. Works\
    \ fine.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "    $sorted = array();\n    $min\
    \ = min($lst);\n    $max = max($lst);\n    foreach ($lst as $key => $value) {\n\
    \        if ($value < $min) {\n            $sorted[] = $min;\n            $min\
    \ = $value;\n        } elseif ($value > $max) {\n            $sorted[] = $max;\n\
    \            $max = $value;\n        } else {\n            $sorted[] = $value;\n\
    \        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_merge($array, array_reverse($array));\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if there are duplicate values in the original array.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_merge($array,\
    \ array_reverse($array));\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_merge($array, array_reverse($array));\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(1, 2, 3,\
    \ 4);\n$array = array_merge($array, array_reverse($array));\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_merge($array, array_reverse($array));\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_merge($array,\
    \ array_reverse($array));\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_merge($array, array_reverse($array));\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $array = array(1, 2, 3, 4);\n$array = array_merge($array, array_reverse($array));\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array =\
    \ array(1, 2, 3, 4);\n$array = array_merge($array, array_reverse($array));\n</code>\n\
    <|/ a dscore=1 |>\n", "    $sorted = array();\n    $min = min($lst);\n    $max\
    \ = max($lst);\n    foreach ($lst as $val) {\n        if ($val < $min) {\n   \
    \         $sorted[] = $min;\n        } else if ($val > $max) {\n            $sorted[]\
    \ = $max;\n        } else {\n            $sorted[] = $val;\n        }\n    }\n\
    \    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't\
    \ work for me. `strange_sort_list(array(1, 2, 3, 4))` returns `array(4, 3, 2,\
    \ 1)`\n<|/ c |>\n<| c |>\nIt doesn't work for me either. `strange_sort_list(array(1,\
    \ 2, 3, 4))` returns `array(4, 3, 2, 1)`\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ me either. `strange_sort_list(array(1, 2, 3, 4))` returns `array(4, 3, 2, 1)`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me either. `strange_sort_list(array(1,\
    \ 2, 3, 4))` returns `array(4, 3, 2, 1)`\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ me either. `strange_sort_list(array(1, 2, 3, 4))` returns `array(4, 3, 2, 1)`\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "    $sorted = array();\n    $sorted = array_merge($sorted,\
    \ $lst);\n    array_multisort($sorted, SORT_ASC, $lst);\n    return $lst;\n}\n",
  "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach ($lst as\
    \ $v) {\n    $lst[] = $v;\n    if ($v == $min) {\n      $lst[] = $max;\n    }\n\
    \    if ($v == $max) {\n      $lst[] = $min;\n    }\n  }\n  return $lst;\n}\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `strange_sort_list(array(5,5,5,5))` returns `array(5, 5, 5, 5)`.\n<|/ c |>\n\
    <| c |>\nIt does work for me. Try it again and see if it works for you. I've added\
    \ a link to a working example.\n<|/ c |>\n<| c |>\nIt works in your example, but\
    \ not in mine. I've added my code to the original post.\n<|/ c |>\n<| c |>\nI\
    \ see what you're saying. Your code doesn't work because you're using `$lst` as\
    \ the array you're sorting and `$v` as the value you're sorting by. I've updated\
    \ my answer to reflect this.\n<|/ c |>\n<| c |>\nAh yes, I see now. Thanks for\
    \ your help!\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $sorted = array();\n \
    \   $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ array_reverse($lst));\n    $sorted = array_merge($sorted, array_reverse($sorted,\
    \ true));\n    return $sorted;\n}\n", "  $min = min($lst);\n  $max = max($lst);\n\
    \  $lst = array();\n  foreach ($lst as $item) {\n    if ($item < $min) {\n   \
    \   $lst[] = $min;\n    } else if ($item > $max) {\n      $lst[] = $max;\n   \
    \ } else {\n      $lst[] = $item;\n    }\n  }\n  return $lst;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if you have negative numbers. Try\
    \ `strange_sort_list(array(-4, -5, -6, -7, -8))`\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work because `min` and `max` don't work on negative numbers. Try `strange_sort_list(array(-4,\
    \ -5, -6, -7, -8))`.\n<|/ c |>\n<| c |>\n: I added a version that works with negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ works with negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n\
    : I added a version that works with negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    $sorted = array();\n    $min = $max\
    \ = reset($lst);\n    foreach ($lst as $item) {\n        if ($item < $min) {\n\
    \            $min = $item;\n        } else if ($item > $max) {\n            $max\
    \ = $item;\n        }\n        $sorted[] = $item;\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list(array(1,2,3))`\
    \ returns `array(1,2,3)` instead of `array(3,2,1)`.\n<|/ c |>\n<| c |>\n: It works.\
    \ I tested it before posting. What PHP version are you using?\n<|/ c |>\n<| c\
    \ |>\n: It works on PHP 5.3.6. Which version are you using?\n<|/ c |>\n<| c |>\n\
    : It works on PHP 5.3.6. Which version are you using?\n<|/ c |>\n<| c |>\n: It\
    \ works on PHP 5.3.6. Which version are you using?\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>", "    $sorted = array();\n    foreach ($lst as $key => $value) {\n\
    \        $sorted[$key] = $value;\n    }\n    asort($sorted);\n    return $sorted;\n\
    }\n", "    $lst = array_reverse($lst);\n    sort($lst);\n    return $lst;\n}\n",
  "    $sorted = array();\n    $sorted = array_merge($sorted, $lst);\n    sort($sorted);\n\
    \    return $sorted;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    <?php\n$arr = array(1, 2, 3, 4);\n$arr2 = array();\n$arr3 = array();\n$arr4 =\
    \ array();\n$arr5 = array();\n$arr6 = array();\n$arr7 = array();\n$arr8 = array();\n\
    $arr9 = array();\n$arr10 = array();\n$arr11 = array();\n$arr12 = array();\n$arr13\
    \ = array();\n$arr14 = array();\n$arr15 = array();\n$arr16 = array();\n$arr17\
    \ = array();\n$arr18 = array();\n$arr19 = array();\n$arr20 = array();\n$arr21\
    \ = array();\n$arr22 = array();\n$arr23 = array();\n$arr24 = array();\n$arr25\
    \ = array();\n$arr26 = array();\n$arr27 = array();\n$arr28 = array();\n$arr29\
    \ = array();\n$arr30 = array();\n$arr31 = array();\n$arr32 = array();\n$arr33\
    \ = array();\n$arr34 = array();\n$arr35 = array();\n$arr36 = array();\n$arr37\
    \ = array();\n$arr38 = array();\n$arr39 = array();\n$arr40 = array();\n$arr41\
    \ = array();\n$arr42 = array();\n$arr43 = array();\n$arr44 = array();\n$arr45\
    \ = array();\n$arr46 = array();\n$arr47 = array();\n$arr48 = array();\n$arr49\
    \ = array();\n$arr50 = array();\n$arr51 = array();\n$arr52 = array();\n$arr53\
    \ = array();\n$arr54 = array();\n$arr55 = array();\n$arr56 = array();\n$arr57\
    \ = array();\n$arr58 = array();\n$arr59 = array();\n$arr60 = array();\n$arr61\
    \ = array();\n$arr62 = array();\n$arr63 = array();\n$arr64 = array();\n$arr65\
    \ = array();\n$arr66 = array();\n$arr67 = array();\n$", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $lst = array();\n  foreach ($lst as $i) {\n    if ($i\
    \ < $min) {\n      $lst[] = $min;\n    } else if ($i > $max) {\n      $lst[] =\
    \ $max;\n    } else {\n      $lst[] = $i;\n    }\n  }\n  return $lst;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n\
    $array = array(1, 2, 3, 4);\n$array = array_reverse($array);\nprint_r($array);",
  "    $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n    foreach\
    \ ($lst as $item) {\n        if ($item < $min) {\n            $sorted[] = $min;\n\
    \        } else if ($item > $max) {\n            $sorted[] = $max;\n        }\
    \ else {\n            $sorted[] = $item;\n        }\n    }\n    return $sorted;\n\
    }\n", "    $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n\
    \    foreach ($lst as $key => $value) {\n        if ($value < $min) {\n      \
    \      $sorted[] = $min;\n            $min = $value;\n        } elseif ($value\
    \ > $max) {\n            $sorted[] = $max;\n            $max = $value;\n     \
    \   } else {\n            $sorted[] = $value;\n        }\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n\
    $sorted = array();\n$min = min($arr);\n$max = max($arr);\n$i = 0;\nforeach($arr\
    \ as $val){\n    if($val < $min){\n        $sorted[$i] = $min;\n        $min =\
    \ $val;\n    }elseif($val > $max){\n        $sorted[$i] = $max;\n        $max\
    \ = $val;\n    }else{\n        $sorted[$i] = $val;\n    }\n    $i++;\n}\nprint_r($sorted);",
  "    $sorted = array();\n    $sorted = array_merge($sorted, $lst);\n    $sorted\
    \ = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted, $lst);\n \
    \   return $sorted;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem\
    \ to work. `strange_sort_list(array(1,2,3,4,5,6,7,8,9))` returns `array(1,2,3,4,5,6,7,8,9)`\
    \ instead of `array(1,2,3,4,5,6,7,8,9,5,6,7,8,9)`\n<|/ c |>\n<| c |>\nIt does\
    \ work, just tested it. The problem is that it sorts the array in place, so the\
    \ original array is untouched. Try `print_r($lst);` before and after the call\
    \ to `strange_sort_list` and you'll see what I mean.\n<|/ c |>\n<| c |>\nAh, I\
    \ see what you mean. Yes, I see what you mean. Thanks for clarifying.\n<|/ c |>\n\
    <| a |>\n<code>", "    $min = min($lst);\n    $max = max($lst);\n    $lst = array();\n\
    \    foreach ($lst as $key => $value) {\n        if ($value < $min) {\n      \
    \      $lst[$key] = $min;\n        } elseif ($value > $max) {\n            $lst[$key]\
    \ = $max;\n        } else {\n            $lst[$key] = $value;\n        }\n   \
    \ }\n    return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This does not answer the question. He wants to sort by descending order. Your\
    \ solution sorts by ascending order.\n<|/ c |>\n<| c |>\nI thought he wanted descending\
    \ order. He said he wanted the highest number first, then the lowest number first,\
    \ then the second highest number first, then the second lowest number first, then\
    \ the third highest number first, then the third lowest number first, then the\
    \ fourth highest number first, then the fourth lowest number first, then the fifth\
    \ highest number first, then the fifth lowest number first, then the sixth highest\
    \ number first, then the sixth lowest number first, then the seventh highest number\
    \ first, then the seventh lowest number first, then the eighth highest number\
    \ first, then the eighth lowest number first, then the ninth highest number first,\
    \ then the ninth lowest number first, then the tenth highest number first, then\
    \ the tenth lowest number first, then the eleventh highest number first, then\
    \ the eleventh lowest number first, then the twelfth highest number first, then\
    \ the twelfth lowest number first, then the thirteenth highest number first, then\
    \ the thirteenth lowest number first, then the fourteenth highest number first,\
    \ then the fourteenth lowest number first, then the fifteenth highest number first,\
    \ then the fifteenth lowest number first, then the sixteenth highest number first,\
    \ then the sixteenth lowest number first, then the seventeenth highest number\
    \ first, then the seventeenth lowest number first, then the eighteenth highest\
    \ number first, then the eighteenth lowest number first, then the nineteenth highest\
    \ number first, then the nineteenth lowest number first, then the twentieth highest\
    \ number first, then the twentieth lowest number first, then the thirtieth highest\
    \ number first, then the thirtieth lowest number first, then the fortieth highest\
    \ number first, then the fortieth lowest number first, then the fiftieth highest\
    \ number first, then the fiftieth lowest number first, then the sixtieth ", " \
    \   $sorted = array();\n    $min = $max = array_shift($lst);\n    foreach ($lst\
    \ as $item) {\n        if ($item < $min) {\n            $min = $item;\n      \
    \  } else if ($item > $max) {\n            $max = $item;\n        }\n        $sorted[]\
    \ = $item;\n    }\n    return array_merge($sorted, array($min, $max));\n}\n",
  "  $sorted = array();\n  $min = $lst[0];\n  $max = $lst[0];\n  foreach ($lst as\
    \ $item) {\n    if ($item < $min) {\n      $min = $item;\n    }\n    if ($item\
    \ > $max) {\n      $max = $item;\n    }\n  }\n  while ($min < $max) {\n    $sorted[]\
    \ = $min;\n    $min++;\n  }\n  while ($min > $max) {\n    $sorted[] = $max;\n\
    \    $max--;\n  }\n  foreach ($lst as $item) {\n    if ($item < $min) {\n    \
    \  $sorted[] = $min;\n    }\n    if ($item > $max) {\n      $sorted[] = $max;\n\
    \    }\n    $sorted[] = $item;\n  }\n  return $sorted;\n}\n", "    $sorted = array();\n\
    \    foreach ($lst as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort($sorted, SORT_DESC, $lst);\n    return $lst;\n}\n", " \
    \   $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n    foreach\
    \ ($lst as $item) {\n        if ($item < $min) {\n            $sorted[] = $min;\n\
    \            $min = $item;\n        } elseif ($item > $max) {\n            $sorted[]\
    \ = $max;\n            $max = $item;\n        } else {\n            $sorted[]\
    \ = $item;\n        }\n    }\n    return $sorted;\n}\n", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $lst = array();\n  foreach ($lst as $item) {\n    if ($item\
    \ == $min) {\n      $lst[] = $min;\n    } else if ($item == $max) {\n      $lst[]\
    \ = $max;\n    } else {\n      $lst[] = $item;\n    }\n  }\n  return $lst;\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't seem to work for me. `strange_sort_list(array(1,\
    \ 2, 3, 4))` returns `array(1, 4, 2, 3)`.\n<|/ c |>\n<| c |>\nIt does for me.\
    \ Try it again and make sure you don't have any typos in your code.\n<|/ c |>\n\
    <| c |>\nI did try it again and I still get the same result. Maybe it's because\
    \ I'm running PHP 5.3.10?\n<|/ c |>\n<| c |>\nYes, it does work for me on 5.3.10.\
    \ Try it again and make sure you don't have any typos in your code. Also, make\
    \ sure you don't have any whitespace before or after the `<?php` tag. I've edited\
    \ my answer to show you the exact code I used.\n<|/ c |>\n<| c |>\nI did try it\
    \ again and I still get the same result. Maybe it's because I'm running PHP 5.3.10?\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    $sorted = array();\n    $min = min($lst);\n\
    \    $max = max($lst);\n    foreach ($lst as $item) {\n        if ($item < $min)\
    \ {\n            $sorted[] = $min;\n        } else if ($item > $max) {\n     \
    \       $sorted[] = $max;\n        } else {\n            $sorted[] = $item;\n\
    \        }\n    }\n    return $sorted;\n}\n", "  $sorted = array();\n  foreach\
    \ ($lst as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  array_multisort($sorted,\
    \ SORT_DESC, $lst);\n  return $lst;\n}", "    $min = min($lst);\n    $max = max($lst);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max(", "    $sorted\
    \ = array();\n    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ array_reverse($lst));\n    $sorted = array_merge($sorted, array_reverse($sorted,\
    \ true));\n    return $sorted;\n}", "  $min = min($lst);\n  $max = max($lst);\n\
    \  $lst = array();\n  foreach ($lst as $key => $value) {\n    if ($value < $min)\
    \ {\n      $lst[$key] = $min;\n    } else if ($value > $max) {\n      $lst[$key]\
    \ = $max;\n    } else {\n      $lst[$key] = $value;\n    }\n  }\n  return $lst;\n\
    }\n", "    $sorted = array();\n    $sorted = array_merge($sorted, $lst);\n   \
    \ $sorted = array_merge($sorted, array_reverse($lst));\n    $sorted = array_merge($sorted,\
    \ array_reverse($sorted, true));\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have duplicate values.  It will sort them\
    \ in ascending order.\n<|/ c |>\n<| c |>\nIt does work if you use array_unique\
    \ to remove duplicates.\n<|/ c |>\n<| c |>\nThis doesn't work if you have duplicate\
    \ values.  It will sort them in ascending order.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have duplicate values.  It will sort them in ascending order.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have duplicate values.  It will sort\
    \ them in ascending order.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $min_key = array_search($min, $lst);\n  $max_key = array_search($max,\
    \ $lst);\n  $lst[$min_key] = $min;\n  $lst[$max_key] = $max;\n  ksort($lst);\n\
    \  return $lst;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to\
    \ work for me. `strange_sort_list(array(1,2,3,4,5,6,7,8,9))` returns `array(1,2,3,4,5,6,7,8,9)`\
    \ instead of `array(1,2,3,4,5,6,7,8,9)`\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. Are you sure you copied the code correctly? It works for me on PHP 5.3.10\n\
    <|/ c |>\n<| c |>\nI copied the code exactly as you wrote it. I also tested it\
    \ on PHP 5.3.10 and it didn't work. I'm running PHP 5.3.8 on Ubuntu 12.04 LTS\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works. Are you sure you copied\
    \ the code correctly? It works for me on PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and it works. Are you sure you copied the code correctly? It\
    \ works for me on PHP 5.3.10\n<|/ c |>\n<| a tags=php,sorting |>\nI wrote a quick\
    \ function that does this for me:\n<code>", "  $min = min($lst);\n  $max = max($lst);\n\
    \  $mid = $min + ($max - $min) / 2;\n  $lst_sorted = array();\n  foreach ($lst\
    \ as $key => $value) {\n    if ($value < $mid) {\n      $lst_sorted[$key] = $value;\n\
    \    } else if ($value == $mid) {\n      $lst_sorted[$key] = $min;\n    } else\
    \ {\n      $lst_sorted[$key] = $max;\n    }\n  }\n  return $lst_sorted;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are two equal numbers in\
    \ the list. For example, `strange_sort_list(array(2, 2, 2, 2))` returns `array(2,\
    \ 2, 2, 2)`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing\
    \ that out. I've updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php",
  "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach ($lst as\
    \ $v) {\n    if ($v == $min) {\n      $lst[] = $v;\n    } else if ($v == $max)\
    \ {\n      $lst[] = $v;\n    } else {\n      $lst[] = $min;\n      $lst[] = $max;\n\
    \    }\n  }\n  return $lst;\n}\n", "    $sorted = array();\n    foreach ($lst\
    \ as $key => $value) {\n        $sorted[$key] = $value;\n    }\n    array_multisort($sorted,\
    \ SORT_DESC, $lst);\n    return $lst;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    I like this solution, but I prefer to use `array_multisort` because it's more\
    \ flexible. For example, if you wanted to sort by multiple keys, you could do\
    \ `array_multisort($sorted, SORT_DESC, SORT_ASC, SORT_ASC, SORT_DESC, $lst);`\n\
    <|/ c |>\n<| c |>\nI like this solution, but I prefer to use `array_multisort`\
    \ because it's more flexible. For example, if you wanted to sort by multiple keys,\
    \ you could do `array_multisort($sorted, SORT_DESC, SORT_ASC, SORT_ASC, SORT_DESC,\
    \ $lst);`\n<|/ c |>\n<| c |>\nI like this solution, but I prefer to use `array_multisort`\
    \ because it's more flexible. For example, if you wanted to sort by multiple keys,\
    \ you could do `array_multisort($sorted, SORT_DESC, SORT_ASC, SORT_ASC, SORT_DESC,\
    \ $lst);`\n<|/ c |>\n<| c |>\nI like this solution, but I prefer to use `array_multisort`\
    \ because it's more flexible. For example, if you wanted to sort by multiple keys,\
    \ you could do `array_multisort($sorted, SORT_DESC, SORT_ASC, SORT_ASC, SORT_DESC,\
    \ $lst);`\n<|/ c |>\n<| c |>\nI like this solution, but I prefer to use `array_multisort`\
    \ because it's more flexible. For example, if you wanted to sort by multiple keys,\
    \ you could do `array_multisort($sorted, SORT_DESC, SORT_ASC, SORT_ASC, SORT_DESC,\
    \ $lst);`\n<|/ c |>\n<| a tags=sorting,arrays,php |>\n<code>", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $lst = array_merge($lst, array($min, $max));\n  sort($lst);\n\
    \  return $lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php",
  "  $sorted = array();\n  foreach ($lst as $key => $value) {\n    $sorted[$key] =\
    \ $value;\n  }\n  asort($sorted);\n  return $sorted;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a |>\n<code>\n$array = array(\n    array('name' => 'John', 'age' => 25),\n\
    \    array('name' => 'Jane', 'age' => 30),\n    array('name' => 'Jack', 'age'\
    \ => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name' => 'Jack',\
    \ 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name' =>\
    \ 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 30),\n    array('name'\
    \ => '", "    $sorted = array();\n    foreach ($lst as $key => $value) {\n   \
    \     $sorted[$key] = $value;\n    }\n    array_multisort($sorted, SORT_ASC, $lst);\n\
    \    return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis\
    \ doesn't work for me. `array_multisort` doesn't sort by key but by value.\n<|/\
    \ c |>\n<| c |>\nIt does sort by key. Try it out yourself and see for yourself.\n\
    <|/ c |>\n<| c |>\nI tested it and it doesn't sort by key. Try it out yourself\
    \ and see for yourself.\n<|/ c |>\n<| c |>\nIt does sort by key. Try it out yourself\
    \ and see for yourself.\n<|/ c |>\n<| c |>\nIt does sort by key. Try it out yourself\
    \ and see for yourself.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", " \
    \ $sorted = array();\n  foreach ($lst as $key => $value) {\n    $sorted[$key]\
    \ = $value;\n  }\n  foreach ($sorted as $key => $value) {\n    $sorted[$key] =\
    \ $value - 1;\n  }\n  return $sorted;\n}\n", "    $sorted = array();\n    $sorted\
    \ = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted, $lst);\n \
    \   $sorted = array_merge($sorted, $lst);\n    return $sorted;\n}", "  $min =\
    \ min($lst);\n  $max = max($lst);\n  $result = array();\n  foreach ($lst as $k\
    \ => $v) {\n    if ($v == $min) {\n      $result[] = $v;\n    } else if ($v ==\
    \ $max) {\n      $result[] = $v;\n    } else {\n      $result[] = $min;\n    \
    \  $result[] = $max;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array = array_reverse($array);\n$array = array_merge($array,$array);\n$array\
    \ = array_unique($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array",
  "    $min = min($lst);\n    $max = max($lst);\n    $result = array();\n    foreach\
    \ ($lst as $key => $value) {\n        if ($value < $min) {\n            $result[]\
    \ = $min;\n        } else if ($value > $max) {\n            $result[] = $max;\n\
    \        } else {\n            $result[] = $value;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work for me. `strange_sort_list(array(1, 2, 3, 4))` returns `array(4, 3, 2,\
    \ 1)`\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. What PHP version\
    \ are you using?\n<|/ c |>\n<| c |>\nPHP 5.3.10-1ubuntu3.10 with Suhosin-Patch\
    \ (cli) (built: Jan 18 2013 12:04:27)\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10-1ubuntu3.10\
    \ with Suhosin-Patch (cli) (built: Jan 18 2013 12:04:27)\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10-1ubuntu3.10 with Suhosin-Patch (cli) (built: Jan 18\
    \ 2013 12:04:27)\n<|/ c |>\n<| a |>\n<code>\n$arr = array(1, 2, 3, 4);\n$arr =\
    \ array_reverse($arr);\n$arr = array_merge($arr, array($arr[0]));\n</code>\n<|/\
    \ a tags=php,sorting,arrays dscore=4 |>\n<| c |>\nThis doesn't work for me. `strange_sort_list(array(1,\
    \ 2, 3, 4))` returns `array(4, 3, 2, 1)`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `strange_sort_list(array(1, 2, 3, 4))` returns `array(4, 3, 2, 1)`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `strange_sort_list(array(1, 2, 3,\
    \ 4))` returns `array(4, 3, 2, 1)`\n<|/ c |>\n<| c |>\nThis doesn't work for me.\
    \ `strange_sort_list(array(1, 2, 3, 4))` returns `array(4, 3, 2, 1)`\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>", "    $min = min($lst);\n    $max = max($lst);\n   \
    \ $result = array();\n    foreach ($lst as $item) {\n        if ($item == $min)\
    \ {\n            $result[] = $min;\n        } else if ($item == $max) {\n    \
    \        $result[] = $max;\n        } else {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>", "    $lst = array_reverse($lst);\n    $lst = array_merge($lst);\n\
    \    return $lst;\n}\n", "    $min = min($lst);\n    $max = max($lst);\n    $lst\
    \ = array();\n    foreach ($lst as $key => $value) {\n        if ($value < $min)\
    \ {\n            $lst[$key] = $min;\n        } else if ($value > $max) {\n   \
    \         $lst[$key] = $max;\n        } else {\n            $lst[$key] = $value;\n\
    \        }\n    }\n    return $lst;\n}\n", "    $sorted = array();\n    $min =\
    \ min($lst);\n    $max = max($lst);\n    foreach ($lst as $item) {\n        if\
    \ ($item == $min) {\n            $sorted[] = $min;\n        } else if ($item ==\
    \ $max) {\n            $sorted[] = $max;\n        } else {\n            $sorted[]\
    \ = $item;\n        }\n    }\n    return $sorted;\n}\n", "    $sorted = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    foreach ($lst as $key => $value)\
    \ {\n        if ($value < $min) {\n            $sorted[] = $min;\n           \
    \ $min = $value;\n        } elseif ($value > $max) {\n            $sorted[] =\
    \ $max;\n            $max = $value;\n        } else {\n            $sorted[] =\
    \ $value;\n        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$arr = array(1, 2, 3, 4);\n$arr1 = array(1, 4,\
    \ 2, 3);\n$arr2 = array(5, 5, 5, 5);\n$arr3 = array();\n\n$arr3 = array_merge($arr1,\
    \ $arr2, $arr);\n$arr3 = array_unique($arr3);\n$arr3 = array_values($arr3);\n\
    print_r($arr3);", "    $sorted = array();\n    $sorted = array_merge($sorted,\
    \ $lst);\n    array_multisort($sorted, SORT_DESC, $lst);\n    return $lst;\n}",
  "    $lst = array_reverse($lst);\n    $min = array_shift($lst);\n    $max = array_pop($lst);\n\
    \    foreach ($lst as $key => $value) {\n        if ($value < $min) {\n      \
    \      $lst[$key] = $min;\n            $min = $value;\n        } elseif ($value\
    \ > $max) {\n            $lst[$key] = $max;\n            $max = $value;\n    \
    \    }\n    }\n    return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| a tags=php,arrays,sorting |>\n<code>", "    $min = min($lst);\n    $max = max($lst);\n\
    \    $lst = array_reverse($lst);\n    $lst = array_merge($lst);\n    $lst = array_merge($lst,\
    \ array($min, $max));\n    return $lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n$arr2 = array();\n$arr2[] =\
    \ $arr[0];\n$arr2[] = $arr[1];\n$arr2[] = $arr[2];\n$arr2[] = $arr[3];\n$arr2[]\
    \ = $arr[4];\n$arr2[] = $arr[5];\n$arr2[] = $arr[6];\n$arr2[] = $arr[7];\n$arr2[]\
    \ = $arr[8];\n$arr2[] = $arr[9];\n$arr2[] = $arr[10];\n$arr2[] = $arr[11];\n$arr2[]\
    \ = $arr[12];\n$arr2[] = $arr[13];\n$arr2[] = $arr[14];\n$arr2[] = $arr[15];\n\
    $arr2[] = $arr[16];\n$arr2[] = $arr[17];\n$arr2[] = $arr[18];\n$arr2[] = $arr[19];\n\
    $arr2[] = $arr[20];\n$arr2[] = $arr[21];\n$arr2[] = $arr[22];\n$arr2[] = $arr[23];\n\
    $arr2[] = $arr[24];\n$arr2[] = $arr[25];\n$arr2[] = $arr[26];\n$arr2[] = $arr[27];\n\
    $arr2[] = $arr[28];\n$arr2[] = $arr[29];\n$arr2[] = $arr[30];\n$arr2[] = $arr[31];\n\
    $arr2[] = $arr[32];\n$arr2[] = $arr[33];\n$arr2[] = $arr[34];\n$arr2[] = $arr[35];\n\
    $arr2[] = $arr[36];\n$arr2[] = $arr[37];\n$arr2[] = $arr[38];\n$arr2[] = $arr[39];\n\
    $arr2[] = $arr[40];\n$arr2[] = $arr[41];\n$arr2[] = $arr[42];\n$arr2[] = $arr[43];\n\
    $arr2[] = $arr[44];\n$arr2[] = $arr[45];\n$arr2[] = $arr[46", "    $sorted = array();\n\
    \    $sorted = array_merge($sorted, $lst);\n    sort($sorted);\n    return $sorted;\n\
    }", "    $lst = array_reverse($lst);\n    sort($lst);\n    return $lst;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    $sorted = array();\n    $min\
    \ = $max = reset($lst);\n    foreach ($lst as $item) {\n        if ($item < $min)\
    \ {\n            $min = $item;\n        } else if ($item > $max) {\n         \
    \   $max = $item;\n        }\n        $sorted[] = $item;\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nI like this solution, but\
    \ I wonder if it will perform better than the other solutions posted here (especially\
    \ since it uses `array_multisort`).\n<|/ c |>\n<| c |>\nI agree with you, this\
    \ is probably the best solution. I've added a benchmark test to my answer.\n<|/\
    \ c |>\n<| c |>\nI like this solution, but I wonder if it will perform better\
    \ than the other solutions posted here (especially since it uses `array_multisort`).\n\
    <|/ c |>\n<| c |>\nI agree with you, this is probably the best solution. I've\
    \ added a benchmark test to my answer.\n<|/ c |>\n<| c |>\nI like this solution,\
    \ but I wonder if it will perform better than the other solutions posted here\
    \ (especially since it uses `array_multisort`).\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => 25);\n\
    $array[] = array('name' => 'Jane', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jane', 'age' => 25);\n$array[] = array('name'\
    \ => 'John', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jane', 'age' => 25);\n$array[] = array('name' => 'John', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack", "  $sorted = array();\n  foreach\
    \ ($lst as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  array_multisort($sorted,\
    \ SORT_ASC, $lst);\n  return $lst;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI\
    \ like this solution, but I wonder if there is a way to make it more efficient.\
    \ Sorting twice is expensive.\n<|/ c |>\n<| c |>\nI believe that sorting twice\
    \ is more efficient than sorting once and using array_multisort.\n<|/ c |>\n<|\
    \ c |>\nI believe that sorting twice is more efficient than sorting once and using\
    \ array_multisort.\n<|/ c |>\n<| c |>\nI believe that sorting twice is more efficient\
    \ than sorting once and using array_multisort.\n<|/ c |>\n<| c |>\nI believe that\
    \ sorting twice is more efficient than sorting once and using array_multisort.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "    $min = min($lst);\n \
    \   $max = max($lst);\n    $min_pos = array_search($min, $lst);\n    $max_pos\
    \ = array_search($max, $lst);\n    $tmp = $lst;\n    $lst = array();\n    for\
    \ ($i = 0; $i < count($tmp); $i++) {\n        if ($i == $min_pos) {\n        \
    \    $lst[] = $tmp[$i];\n        } else if ($i == $max_pos) {\n            $lst[]\
    \ = $tmp[$i];\n        } else if ($i < $min_pos) {\n            $lst[] = $tmp[$i];\n\
    \        } else if ($i > $max_pos) {\n            $lst[] = $tmp[$i];\n       \
    \ }\n    }\n    return $lst;\n}\n", "    $min = min($lst);\n    $max = max($lst);\n\
    \    $result = array();\n    foreach ($lst as $item) {\n        if ($item == $min)\
    \ {\n            $result[] = $min;\n        } else if ($item == $max) {\n    \
    \        $result[] = $max;\n        } else {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n", "    $sorted = array();\n    $sorted\
    \ = array_merge($sorted, $lst);\n    sort($sorted);\n    return $sorted;\n}\n",
  "    $min = min($lst);\n    $max = max($lst);\n    $lst = array();\n    foreach\
    \ ($lst as $k => $v) {\n        if ($v == $min) {\n            $lst[$k] = $max;\n\
    \        } else if ($v == $max) {\n            $lst[$k] = $min;\n        } else\
    \ {\n            $lst[$k] = $v;\n        }\n    }\n    return $lst;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have negative numbers in\
    \ the array.\n<|/ c |>\n<| c |>\nIt doesn't work if you have negative numbers\
    \ in the array. Try it with `strange_sort_list(array(-5, -4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4, 5))`\n<|/ c |>\n<| c |>\nI see what you mean. I've added a version\
    \ that doesn't have that problem.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $sorted\
    \ = array();\n    foreach ($lst as $key => $value) {\n        $sorted[$key] =\
    \ $value;\n    }\n    array_multisort($sorted, SORT_DESC, $lst);\n    return $lst;\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if you\
    \ have duplicate values in the array. For example, if your array is `array(1,\
    \ 2, 2, 3)`, it will return `array(1, 2, 3)`.\n<|/ c |>\n<| c |>\n: It works fine\
    \ for me. Can you give an example where it fails?\n<|/ c |>\n<| c |>\n: It works\
    \ fine for me too. Can you give an example where it fails?\n<|/ c |>\n<| c |>\n\
    : It works fine for me too. Can you give an example where it fails?\n<|/ c |>\n\
    <| c |>\n: It works fine for me too. Can you give an example where it fails?\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  $sorted = array();\n  $min = min($lst);\n\
    \  $max = max($lst);\n  foreach ($lst as $item) {\n    if ($item == $min) {\n\
    \      $sorted[] = $min;\n    } else if ($item == $max) {\n      $sorted[] = $max;\n\
    \    } else {\n      $sorted[] = $item;\n    }\n  }\n  return $sorted;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [\n\
    \    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n\
    \    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 =>\
    \ 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n\
    \    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n \
    \   23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n  \
    \  28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n   \
    \ 33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38\
    \ => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n    43 =>\
    \ 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n\
    \    49 => 49,\n    50 => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n \
    \   54 => 54,\n    55 => 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n  \
    \  59 => 59,\n    60 => 60,\n    61 => 61,\n    62 => 62,\n    63 => 63,\n   \
    \ 64 => 64,\n    65 => 65,\n    66 => 66,\n    67 => 67,\n    68 => 68,\n    69\
    \ => 69,\n    70 => 70,\n    71 => ", "    $lst = array_reverse($lst);\n    $lst\
    \ = array_merge($lst);\n    return $lst;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are duplicate values in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are duplicate values in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are duplicate values in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are duplicate values in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are duplicate values in the array\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\n\
    $array = array_merge($array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c\
    \ |>\nThis doesn't work if there are duplicate values in the array\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are duplicate values in the array\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are duplicate values in the array\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are duplicate values in the array\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are duplicate values in the array\n<|/ c |>\n\
    <| a tags=php,sorting,arrays |>\n<code>\n$array = array(1, 2, 3, 4);\n$array =\
    \ array_reverse($array);\n$array = array_merge($array);\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if there are duplicate values in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are duplicate values in the array\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\n\
    $array = array_merge($array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c\
    \ |>\nThis doesn't work if there are duplicate values in the array\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are duplicate values in the array\n<|/ c |>\n\
    <| a tags=php,sorting,arrays |>\n<code>\n$array = array(1, 2, 3, 4);\n$array =\
    \ array_reverse($array);\n$array = array_merge($array);\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if there are duplicate values in the array\n\
    <|/ c |>\n", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array_merge($lst,\
    \ array($min, $max));\n  sort($lst);\n  return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. Try `strange_sort_list(array(-4,\
    \ -5, -6, -7, -8))`\n<|/ c |>\n<| c |>\n: It does work, just not as expected.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work. Try `strange_sort_list(array(-4,\
    \ -5, -6, -7, -8))`\n<|/ c |>\n<| c |>\n: It does work, just not as expected.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work. Try `strange_sort_list(array(-4,\
    \ -5, -6, -7, -8))`\n<|/ c |>\n<| a |>\n<code>", "  $sorted = array();\n  foreach\
    \ ($lst as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  array_multisort($sorted,\
    \ SORT_ASC, $lst);\n  return $lst;\n}\n", "    $sorted = array();\n    foreach\
    \ ($lst as $key => $value) {\n        $sorted[$key] = $value;\n    }\n    array_multisort($sorted,\
    \ SORT_ASC, $lst);\n    return $lst;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to do it without using array_multisort?\n\
    <|/ c |>\n<| c |>\nI guess you could do it with a recursive function, but that\
    \ would be a lot more complicated than just using array_multisort.\n<|/ c |>\n\
    <| c |>\nI guess you could do it with a recursive function, but that would be\
    \ a lot more complicated than just using array_multisort. - I guess you could\
    \ do it with a recursive function, but that would be a lot more complicated than\
    \ just using array_multisort. - I guess you could do it with a recursive function,\
    \ but that would be a lot more complicated than just using array_multisort. -\
    \ I guess you could do it with a recursive function, but that would be a lot more\
    \ complicated than just using array_multisort. - I guess you could do it with\
    \ a recursive function, but that would be a lot more complicated than just using\
    \ array_multisort. - I guess you could do it with a recursive function, but that\
    \ would be a lot more complicated than just using array_multisort. - I guess you\
    \ could do it with a recursive function, but that would be a lot more complicated\
    \ than just using array_multisort. - I guess you could do it with a recursive\
    \ function, but that would be a lot more complicated than just using array_multisort.\
    \ - I guess you could do it with a recursive function, but that would be a lot\
    \ more complicated than just using array_multisort. - I guess you could do it\
    \ with a recursive function, but that would be a lot more complicated than just\
    \ using array_multisort. - I guess you could do it with a recursive function,\
    \ but that would be a lot more complicated than just using array_multisort. -\
    \ I guess you could do it with a recursive function, but that would be a lot more\
    \ complicated than just using array_multisort. - I guess you could do it with\
    \ a recursive function, but that would be a lot more complicated than just using\
    \ array_multisort. - I guess you could do it with a recursive function, but that\
    \ would be a lot more complicated than just using array_multisort. - I guess you\
    \ could do it with a recursive function, but that would be a lot more complicated\
    \ than just using array_multisort. - I guess you could do it with a recursive\
    \ function, but that would be a lot more complicated than just using array_multisort.\
    \ - I guess you could do it with a recursive function, but that would be a lot\
    \ more complicated than just using array_", "    $sorted = array();\n    $min\
    \ = min($lst);\n    $max = max($lst);\n    foreach ($lst as $val) {\n        if\
    \ ($val < $min) {\n            $sorted[] = $min;\n            $min = $val;\n \
    \       } elseif ($val > $max) {\n            $sorted[] = $max;\n            $max\
    \ = $val;\n        } else {\n            $sorted[] = $val;\n        }\n    }\n\
    \    return $sorted;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI like\
    \ using array_multisort for sorting arrays of different types. \n<code>\n$a =\
    \ array(1,2,3,4,5,6,7,8,9,10);\n$b = array(10,9,8,7,6,5,4,3,2,1);\narray_multisort($a,\
    \ SORT_DESC, $b, SORT_DESC, $a);\nprint_r($a);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "    $min = reset($lst);\n    $max = end($lst);\n\
    \    $lst = array_map(function($x) use ($min, $max) {\n        return $min > $x\
    \ ? $min : $x > $max ? $max : $x;\n    }, $lst);\n    return $lst;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>", "    $sorted = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    foreach ($lst as $key => $val)\
    \ {\n        if ($val == $min) {\n            $sorted[] = $min;\n        } else\
    \ if ($val == $max) {\n            $sorted[] = $max;\n        } else {\n     \
    \       $sorted[] = $val;\n        }\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if there are duplicate values\
    \ in the array\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  $min = min($lst);\n  $max\
    \ = max($lst);\n  $lst = array();\n  foreach ($lst as $key => $value) {\n    if\
    \ ($min > $value) {\n      $lst[$key] = $value;\n    } else if ($max < $value)\
    \ {\n      $lst[$key] = $value;\n    } else {\n      $lst[$key] = $min + $key;\n\
    \    }\n  }\n  return $lst;\n}\n", "  $sorted_lst = array();\n  $sorted_lst[]\
    \ = $lst[0];\n  $sorted_lst[] = $lst[count($lst) - 1];\n  for ($i = 1; $i < count($lst);\
    \ $i++) {\n    $sorted_lst[] = $lst[$i];\n  }\n  return $sorted_lst;\n}\n", " \
    \ $min = min($lst);\n  $max = max($lst);\n  $lst = array_merge($lst);\n  sort($lst);\n\
    \  array_splice($lst, $min, $max - $min + 1);\n  return $lst;\n}\n", "    $sorted\
    \ = array();\n    $min = array_shift($lst);\n    $max = array_pop($lst);\n   \
    \ foreach ($lst as $item) {\n        if ($item < $min) {\n            $sorted[]\
    \ = $min;\n            $min = $item;\n        } elseif ($item > $max) {\n    \
    \        $sorted[] = $max;\n            $max = $item;\n        } else {\n    \
    \        $sorted[] = $item;\n        }\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n\
    $arr1 = array();\n$arr2 = array();\n$arr3 = array();\n$arr4 = array();\n$arr5\
    \ = array();\n$arr6 = array();\n$arr7 = array();\n$arr8 = array();\n$arr9 = array();\n\
    $arr10 = array();\n$arr11 = array();\n$arr12 = array();\n$arr13 = array();\n$arr14\
    \ = array();\n$arr15 = array();\n$arr16 = array();\n$arr17 = array();\n$arr18\
    \ = array();\n$arr19 = array();\n$arr20 = array();\n$arr21 = array();\n$arr22\
    \ = array();\n$arr23 = array();\n$arr24 = array();\n$arr25 = array();\n$arr26\
    \ = array();\n$arr27 = array();\n$arr28 = array();\n$arr29 = array();\n$arr30\
    \ = array();\n$arr31 = array();\n$arr32 = array();\n$arr33 = array();\n$arr34\
    \ = array();\n$arr35 = array();\n$arr36 = array();\n$arr37 = array();\n$arr38\
    \ = array();\n$arr39 = array();\n$arr40 = array();\n$arr41 = array();\n$arr42\
    \ = array();\n$arr43 = array();\n$arr44 = array();\n$arr45 = array();\n$arr46\
    \ = array();\n$arr47 = array();\n$arr48 = array();\n$arr49 = array();\n$arr50\
    \ = array();\n$arr51 = array();\n$arr52 = array();\n$arr53 = array();\n$arr54\
    \ = array();\n$arr55 = array();\n$arr56 = array();\n$arr57", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $lst = array();\n  foreach ($lst as $key => $value) {\n\
    \    if ($value < $min) {\n      $lst[$key] = $min;\n    } else if ($value > $max)\
    \ {\n      $lst[$key] = $max;\n    } else {\n      $lst[$key] = $value;\n    }\n\
    \  }\n  return $lst;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so much for this!\
    \ I ended up using it in a project I'm working on and it's working great.\n<|/\
    \ c |>\n<| a tags=php,sorting |>\n<code>", "  $min = min($lst);\n  $max = max($lst);\n\
    \  $lst = array();\n  foreach ($lst as $i) {\n    if ($i < $min) {\n      $lst[]\
    \ = $min;\n    } else if ($i > $max) {\n      $lst[] = $max;\n    } else {\n \
    \     $lst[] = $i;\n    }\n  }\n  return $lst;\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThis doesn't work for me. `strange_sort_list(array(1, 2, 3, 4))` returns\
    \ `array(4, 1, 2, 3)`\n<|/ c |>\n<| c |>\n: It works for me (PHP 5.3.3). Maybe\
    \ you didn't copy the code correctly? Try `strange_sort_list(array(1, 2, 3, 4))`\
    \ instead.\n<|/ c |>\n<| c |>\n: I added a link to a working example. Maybe you\
    \ didn't copy the code correctly?\n<|/ c |>\n<| c |>\n: I added a link to a working\
    \ example. Maybe you didn't copy the code correctly?\n<|/ c |>\n<| c |>\n: I added\
    \ a link to a working example. Maybe you didn't copy the code correctly?\n<|/\
    \ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$arr = array(1, 2, 3, 4);\n$arr2\
    \ = array();\nforeach ($arr as $key => $value) {\n    $arr2[$value] = $key;\n\
    }\nksort($arr2);\nprint_r($arr2);", "    $sorted = array();\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ $lst);\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a |>\n<code>\n<?php\n$array = array(\n    0 => 1,\n    1 => 2,\n    2 => 3,\n\
    \    3 => 4,\n    4 => 5,\n    5 => 6,\n    6 => 7,\n    7 => 8,\n    8 => 9,\n\
    \    9 => 10,\n    10 => 11,\n    11 => 12,\n    12 => 13,\n    13 => 14,\n  \
    \  14 => 15,\n    15 => 16,\n    16 => 17,\n    17 => 18,\n    18 => 19,\n   \
    \ 19 => 20,\n    20 => 21,\n    21 => 22,\n    22 => 23,\n    23 => 24,\n    24\
    \ => 25,\n    25 => 26,\n    26 => 27,\n    27 => 28,\n    28 => 29,\n    29 =>\
    \ 30,\n    30 => 31,\n    31 => 32,\n    32 => 33,\n    33 => 34,\n    34 => 35,\n\
    \    35 => 36,\n    36 => 37,\n    37 => 38,\n    38 => 39,\n    39 => 40,\n \
    \   40 => 41,\n    41 => 42,\n    42 => 43,\n    43 => 44,\n    44 => 45,\n  \
    \  45 => 46,\n    46 => 47,\n    47 => 48,\n    48 => 49,\n    49 => 50,\n   \
    \ 50 => 51,\n    51 => 52,\n    52 => 53,\n    53 => 54,\n    54 => 55,\n    55\
    \ => 56,\n    56 => 57,\n    57 => 58,\n    58 => 59,\n    59 => 60,\n    60 =>\
    \ 61,\n    61 => 62,\n    62 => 63,\n    63 => 64,\n    64 => 65,\n    65 => 66,\n\
    \    66 => 67,\n    67 => 68,\n    68 => 69,\n    69 => 70,\n    70 => 71,\n \
    \   71 => 72,\n    72 => 73,\n    73 => 74,\n    74 => 75,\n    75 => ", "   \
    \ $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n    foreach\
    \ ($lst as $key => $value) {\n        if ($value < $min) {\n            $sorted[]\
    \ = $min;\n            $min = $value;\n        } elseif ($value > $max) {\n  \
    \          $sorted[] = $max;\n            $max = $value;\n        } else {\n \
    \           $sorted[] = $value;\n        }\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI love this solution. Very elegant. Thanks!\n<|/ c\
    \ |>\n<| c |>\nI love this solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\n\
    I love this solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\nI love this solution.\
    \ Very elegant. Thanks!\n<|/ c |>\n<| c |>\nI love this solution. Very elegant.\
    \ Thanks!\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $sorted = array();\n\
    \  foreach ($lst as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  array_multisort($sorted,\
    \ SORT_DESC, $lst);\n  return $lst;\n}\n", "    $min = min($lst);\n    $max =\
    \ max($lst);\n    $lst = array_reverse($lst);\n    $lst = array_merge($lst, [$min,\
    \ $max]);\n    return $lst;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_merge($array, array_reverse($array));\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array =\
    \ array(1, 2, 3, 4);\n$array = array_merge($array, array_reverse($array));\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(1,\
    \ 2, 3, 4);\n$array = array_merge($array, array_reverse($array));\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_merge($array, array_reverse($array));\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_merge($array, array_reverse($array));\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_merge($array,\
    \ array_reverse($array));\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_merge($array, array_reverse($array));\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array =\
    \ array(1, 2, 3, 4);\n$array = array_merge($array, array_reverse($array));\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_merge($array, array_reverse($array));\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_merge($array,\
    \ array_reverse($array));\n</code>\n<|/ a tags=php,sorting,arrays dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_merge($array,\
    \ array_reverse($array));", "  $min = min($lst);\n  $max = max($lst);\n  $lst\
    \ = array();\n  foreach ($lst as $val) {\n    if ($val < $min) {\n      $lst[]\
    \ = $min;\n    } else if ($val > $max) {\n      $lst[] = $max;\n    } else {\n\
    \      $lst[] = $val;\n    }\n  }\n  return $lst;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nI like this one, but I wonder if there is a way to do this without\
    \ creating a new array?\n<|/ c |>\n<| c |>\nI guess you could use array_walk to\
    \ modify the original array in place, but that would be a lot more complicated\
    \ than just creating a new array. I'd stick with the new array unless you have\
    \ a good reason not to.\n<|/ c |>\n<| c |>\nI guess this would work, but I wonder\
    \ if there is a way to do this without creating a new array. I'm going to try\
    \ this out and see how it works.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ create a new array.\n<|/ c |>\n<| c |>\nI added a version that doesn't create\
    \ a new array.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $sorted = array();\n\
    \    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, $lst);\n    return $sorted;\n}\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post.\n<|/ c |>\n<| c |>\nI believe this does answer the\
    \ question. He wants to sort a list by ascending order of the minimum value first,\
    \ then the maximum value, then minimum and so on. He has provided a solution that\
    \ does exactly that.\n<|/ c |>\n<| c |>\nThe question was \"how to sort a list\
    \ by ascending order of the minimum value first, then the maximum value, then\
    \ minimum and so on\". This answer does exactly that. He has provided a solution\
    \ that does exactly that.\n<|/ c |>\n<| c |>\nI believe this does answer the question.\
    \ He wants to sort a list by ascending order of the minimum value first, then\
    \ the maximum value, then minimum and so on. He has provided a solution that does\
    \ exactly that.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| a |>\n<code>", "  $min = min($lst);\n  $max = max($lst);\n\
    \  $lst = array();\n  foreach ($lst as $v) {\n    if ($v == $min) {\n      $lst[]\
    \ = $v;\n    } else if ($v == $max) {\n      $lst[] = $v;\n    } else {\n    \
    \  $lst[] = $min;\n      $lst[] = $max;\n    }\n  }\n  return $lst;\n}\n", " \
    \ $sorted = array();\n  foreach ($lst as $key => $value) {\n    $sorted[$key]\
    \ = $value;\n  }\n  array_multisort($sorted, SORT_DESC, $lst);\n  return $lst;\n\
    }\n", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array_reverse($lst);\n\
    \  sort($lst);\n  return array_merge($lst, array($min, $max));\n}\n", "    $min\
    \ = min($lst);\n    $max = max($lst);\n    $lst = array_map(function($v) use ($min,\
    \ $max) {\n        return $v < $min ? $min : $v > $max ? $max : $v;\n    }, $lst);\n\
    \    return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis\
    \ doesn't work if the array is empty or contains only a single element\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work because of the `array_map` function. It doesn't\
    \ return anything if the array is empty or contains only a single element. `array_map`\
    \ will just return an empty array if the array is empty or contains only a single\
    \ element. `array_map` will also return an empty array if the array contains only\
    \ a single element. `array_map` will also return an empty array if the array contains\
    \ only a single element. `array_map` will also return an empty array if the array\
    \ contains only a single element. `array_map` will also return an empty array\
    \ if the array contains only a single element. `array_map` will also return an\
    \ empty array if the array contains only a single element. `array_map` will also\
    \ return an empty array if the array contains only a single element. `array_map`\
    \ will also return an empty array if the array contains only a single element.\
    \ `array_map` will also return an empty array if the array contains only a single\
    \ element. `array_map` will also return an empty array if the array contains only\
    \ a single element. `array_map` will also return an empty array if the array contains\
    \ only a single element. `array_map` will also return an empty array if the array\
    \ contains only a single element. `array_map` will also return an empty array\
    \ if the array contains only a single element. `array_map` will also return an\
    \ empty array if the array contains only a single element. `array_map` will also\
    \ return an empty array if the array contains only a single element. `array_map`\
    \ will also return an empty array if the array contains only a single element.\
    \ `array_map` will also return an empty array if the array contains only a single\
    \ element. `array_map` will also return an empty array if the array contains only\
    \ a single element. `array_map` will also return an empty array if the array contains\
    \ only a single element. `array_map` will also return an empty array if the array\
    \ contains only a single element. `array_map` will also return an empty array\
    \ if the array contains only a single element. `array_map` will also return an\
    \ empty array if the array contains only a single element. `array_map` will also\
    \ return an empty array if the array contains only a single element. `array_map`\
    \ will also return an empty array if the array contains only a single element",
  "    $min = min($lst);\n    $max = max($lst);\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if ($item == $min) {\n            $result[] = $min;\n\
    \        } else if ($item == $max) {\n            $result[] = $max;\n        }\
    \ else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array\
    \ = array(1, 2, 3, 4);\n$array = array_reverse($array);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_reverse($array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_reverse($array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(1,\
    \ 2, 3, 4);\n$array = array_reverse($array);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_reverse($array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $array = array(1, 2, 3, 4);\n$array = array_reverse($array);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_reverse($array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(1,\
    \ 2, 3, 4);\n$array = array_reverse($array);\n</code>\n<|/ a dscore", "  $sorted\
    \ = array();\n  $sorted = array_merge($sorted, $lst);\n  $sorted = array_merge($sorted,\
    \ $lst);\n  $sorted = array_merge($sorted, $lst);\n  return $sorted;\n}\n", " \
    \   $sorted = array();\n    foreach ($lst as $key => $value) {\n        $sorted[$key]\
    \ = $value;\n    }\n    array_multisort($sorted, SORT_ASC, $lst);\n    return\
    \ $lst;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>",
  "  $sorted = array();\n  foreach ($lst as $key => $value) {\n    $sorted[$key] =\
    \ $value;\n  }\n  array_multisort($sorted, SORT_DESC, $lst);\n  return $lst;\n\
    }\n", "    $sorted = array();\n    foreach ($lst as $key => $value) {\n      \
    \  $sorted[$key] = $value;\n    }\n    array_multisort($sorted, SORT_DESC, $lst);\n\
    \    return $lst;\n}\n", "    $sorted = array();\n    foreach ($lst as $key =>\
    \ $value) {\n        $sorted[$key] = $value;\n    }\n    array_multisort($sorted,\
    \ SORT_DESC, $lst);\n    return $lst;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and doesn't require any additional\
    \ libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and doesn't require any additional libraries.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and doesn't require any additional libraries.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(\n    array('name'\
    \ => 'John', 'age' => 25),\n    array('name' => 'Jane', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => '", "  $sorted = array();\n  foreach ($lst as $key => $value) {\n    $sorted[$key]\
    \ = $value;\n  }\n  array_multisort($sorted, SORT_ASC, $lst);\n  return $lst;\n\
    }\n", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach\
    \ ($lst as $i) {\n    if ($i < $min) {\n      $lst[] = $min;\n    } else if ($i\
    \ > $max) {\n      $lst[] = $max;\n    } else {\n      $lst[] = $i;\n    }\n \
    \ }\n  return $lst;\n}\n", "    $min = min($lst);\n    $max = max($lst);\n   \
    \ $result = array();\n    foreach ($lst as $item) {\n        if ($item == $min)\
    \ {\n            $result[] = $min;\n        } else if ($item == $max) {\n    \
    \        $result[] = $max;\n        } else {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your solution, however it fails when there are two equal numbers in the list.\
    \ Example: array(1,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    $min = min($lst);\n    $max = max($lst);\n    $mid = $min + ($max - $min) /\
    \ 2;\n    $lst = array();\n    foreach ($lst as $i => $val) {\n        if ($val\
    \ < $mid) {\n            $lst[$i] = $mid;\n        } else if ($val > $mid) {\n\
    \            $lst[$i] = $max;\n        } else {\n            $lst[$i] = $min;\n\
    \        }\n    }\n    return $lst;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nI made a little function which sorts any array in any way you want.\n<code>",
  "    $min = reset($lst);\n    $max = end($lst);\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if ($item < $min) {\n            $result[] = $min;\n\
    \            $min = $item;\n        } elseif ($item > $max) {\n            $result[]\
    \ = $max;\n            $max = $item;\n        } else {\n            $result[]\
    \ = $item;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=sorting,php,arrays |>\n<code>\n<?php\n$array = array(\n    0 =>\
    \ 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n    6 =>\
    \ 7,\n    7 => 8,\n    8 => 9,\n    9 => 10,\n    10 => 11,\n    11 => 12,\n \
    \   12 => 13,\n    13 => 14,\n    14 => 15,\n    15 => 16,\n    16 => 17,\n  \
    \  17 => 18,\n    18 => 19,\n    19 => 20,\n    20 => 21,\n    21 => 22,\n   \
    \ 22 => 23,\n    23 => 24,\n    24 => 25,\n    25 => 26,\n    26 => 27,\n    27\
    \ => 28,\n    28 => 29,\n    29 => 30,\n    30 => 31,\n    31 => 32,\n    32 =>\
    \ 33,\n    33 => 34,\n    34 => 35,\n    35 => 36,\n    36 => 37,\n    37 => 38,\n\
    \    38 => 39,\n    39 => 40,\n    40 => 41,\n    41 => 42,\n    42 => 43,\n \
    \   43 => 44,\n    44 => 45,\n    45 => 46,\n    46 => 47,\n    47 => 48,\n  \
    \  48 => 49,\n    49 => 50,\n    50 => 51,\n    51 => 52,\n    52 => 53,\n   \
    \ 53 => 54,\n    54 => 55,\n    55 => 56,\n    56 => 57,\n    57 => 58,\n    58\
    \ => 59,\n    59 => 60,\n    60 => 61,\n    61 => 62,\n    62 => 63,\n    63 =>\
    \ 64,\n    64 => 65,\n    65 => 66,\n    66 => 67,\n    67 => 68,\n    68 => 69",
  "  $sorted = array();\n  foreach ($lst as $key => $value) {\n    $sorted[$key] =\
    \ $value;\n  }\n  array_multisort($sorted, SORT_DESC, $lst);\n  return $lst;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>", "  $min = min($lst);\n  $max\
    \ = max($lst);\n  $lst = array();\n  foreach ($lst as $val) {\n    if ($val <\
    \ $min) {\n      $lst[] = $min;\n    } else if ($val > $max) {\n      $lst[] =\
    \ $max;\n    } else {\n      $lst[] = $val;\n    }\n  }\n  return $lst;\n}\n",
  "    $sorted = array();\n    $min = $lst[0];\n    $max = $lst[0];\n    foreach ($lst\
    \ as $item) {\n        if ($item < $min) {\n            $min = $item;\n      \
    \  } else if ($item > $max) {\n            $max = $item;\n        }\n    }\n \
    \   $sorted = array_merge($sorted, range($min, $max));\n    foreach ($lst as $item)\
    \ {\n        if ($item < $min) {\n            $sorted[] = $min;\n        } else\
    \ if ($item > $max) {\n            $sorted[] = $max;\n        } else {\n     \
    \       $sorted[] = $item;\n        }\n    }\n    return $sorted;\n}\n", "  $min\
    \ = min($lst);\n  $max = max($lst);\n  $lst = array_map(function($v) use ($min,\
    \ $max) {\n    return $v < $min ? $min : $v > $max ? $max : $v;\n  }, $lst);\n\
    \  return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't\
    \ seem to work for me. Can you please explain how it works?\n<|/ c |>\n<| c |>\n\
    This doesn't seem to work for me. Can you please explain how it works?\n<|/ c\
    \ |>\n<| c |>\nThis doesn't seem to work for me. Can you please explain how it\
    \ works?\n<|/ c |>\n<| c |>\nThis doesn't seem to work for me. Can you please\
    \ explain how it works?\n<|/ c |>\n<| c |>\nThis doesn't seem to work for me.\
    \ Can you please explain how it works?\n<|/ c |>\n<| a dscore=5 |>\n<code>", " \
    \ $sorted = array();\n  $min = $lst[0];\n  $max = $lst[0];\n  foreach ($lst as\
    \ $item) {\n    if ($item < $min) {\n      $min = $item;\n    }\n    if ($item\
    \ > $max) {\n      $max = $item;\n    }\n  }\n  while ($min < $max) {\n    $sorted[]\
    \ = $min;\n    $min++;\n  }\n  while ($min > $max) {\n    $sorted[] = $max;\n\
    \    $max--;\n  }\n  while ($min < $max) {\n    $sorted[] = $min;\n    $min++;\n\
    \  }\n  while ($min > $max) {\n    $sorted[] = $max;\n    $max--;\n  }\n  return\
    \ $sorted;\n}\n", "    $sorted = array();\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, array_reverse($lst));\n    return\
    \ $sorted;\n}\n", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n\
    \  foreach ($lst as $v) {\n    if ($v == $min) {\n      $lst[] = $v;\n    } else\
    \ if ($v == $max) {\n      $lst[] = $v;\n    } else {\n      $lst[] = $min;\n\
    \      $lst[] = $max;\n    }\n  }\n  return $lst;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work if the array is empty. Try it with `array(0)`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work when the array is empty because `min` and `max`\
    \ return `null`. So the code doesn't work if the array is empty.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work when the array is empty because `min` and `max` return\
    \ `null`. So the code doesn't work if the array is empty.\n<|/ c |>\n<| c |>\n\
    It doesn't work when the array is empty because `min` and `max` return `null`.\
    \ So the code doesn't work if the array is empty.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work when the array is empty because `min` and `max` return `null`. So the code\
    \ doesn't work if the array is empty.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $arr = array(1,2,3,4,5,6,7,8,9,10);\n$arr1 = array();\n$arr2 = array();\n$arr3\
    \ = array();\n$arr4 = array();\n$arr5 = array();\n$arr6 = array();\n$arr7 = array();\n\
    $arr8 = array();\n$arr9 = array();\n$arr10 = array();\n$arr11 = array();\n$arr12\
    \ = array();\n$arr13 = array();\n$arr14 = array();\n$arr15 = array();\n$arr16\
    \ = array();\n$arr17 = array();\n$arr18 = array();\n$arr19 = array();\n$arr20\
    \ = array();\n$arr21 = array();\n$arr22 = array();\n$arr23 = array();\n$arr24\
    \ = array();\n$arr25 = array();\n$arr26 = array();\n$arr27 = array();\n$arr28\
    \ = array();\n$arr29 = array();\n$arr30 = array();\n$arr31 = array();\n$arr32\
    \ = array();\n$arr33 = array();\n$arr", "    $lst = array_reverse($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n", "    $sorted = array();\n    $min = min($lst);\n\
    \    $max = max($lst);\n    foreach ($lst as $item) {\n        if ($item == $min)\
    \ {\n            $sorted[] = $min;\n        } else if ($item == $max) {\n    \
    \        $sorted[] = $max;\n        } else {\n            $sorted[] = $item;\n\
    \        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n\
    <| c |>\nThis doesn't work if the array is empty or contains only a single element.\
    \ Try it with `array(1)`.\n<|/ c |>\n<| c |>\nI added a check for empty arrays\
    \ and single elements. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the array contains only a single element. Try it with `array(1)`.\n\
    <|/ c |>\n<| c |>\nI added a check for single elements. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $sorted = array();\n  foreach\
    \ ($lst as $key => $value) {\n    $sorted[$key] = $value;\n  }\n  array_multisort($sorted,\
    \ SORT_DESC, $lst);\n  return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `array_multisort` sorts by the first\
    \ value, then by the second value, then by the third, etc.\n<|/ c |>\n<| c |>\n\
    It does work for me. I've added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    It doesn't work for me either. `array_multisort` sorts by the first value, then\
    \ by the second value, then by the third, etc.\n<|/ c |>\n<| c |>\nIt does work\
    \ for me. I've added a test case to my answer.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for me either. `array_multisort` sorts by the first value, then by the\
    \ second value, then by the third, etc.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$arr = array(\n    array('id'=>1,'name'=>'a'),\n    array('id'=>2,'name'=>'b'),\n\
    \    array('id'=>3,'name'=>'c'),\n    array('id'=>4,'name'=>'d'),\n    array('id'=>5,'name'=>'e'),\n\
    \    array('id'=>6,'name'=>'f'),\n    array('id'=>7,'name'=>'g'),\n    array('id'=>8,'name'=>'h'),\n\
    \    array('id'=>9,'name'=>'i'),\n    array('id'=>10,'name'=>'j'),\n    array('id'=>11,'name'=>'k'),\n\
    \    array('id'=>12,'name'=>'l'),\n    array('id'=>13,'name'=>'m'),\n    array('id'=>14,'name'=>'n'),\n\
    \    array('id'=>15,'name'=>'o'),\n    array('id'=>16,'name'=>'p'),\n    array('id'=>17,'name'=>'q'),\n\
    \    array('id'=>18,'name'=>'r'),\n    array('id'=>19,'name'=>'s'),\n    array('id'=>20,'name'=>'t'),\n\
    \    array('id'=>21,'name'=>'u'),\n    array('id'=>22,'name'=>'", "    $sorted\
    \ = array();\n    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, $lst);\n    return $sorted;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have duplicate values in\
    \ your array. For example, `strange_sort_list(array(1,2,2,3,4))` returns `array(1,2,2,4,3)`\
    \ instead of `array(1,2,2,3,4)`.\n<|/ c |>\n<| c |>\nI agree with you, my solution\
    \ was a quick fix and I didn't think about duplicates. I edited my answer to fix\
    \ this issue.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $sorted = array();\n\
    \    foreach ($lst as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort($sorted, SORT_DESC, $lst);\n    return $lst;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,php |>\n<| a dscore=2 |>\n<code>", "  $min_value = min($lst);\n\
    \  $max_value = max($lst);\n  $min_key = array_search($min_value, $lst);\n  $max_key\
    \ = array_search($max_value, $lst);\n  while ($min_key !== $max_key) {\n    $swap\
    \ = $lst[$min_key];\n    $lst[$min_key] = $lst[$max_key];\n    $lst[$max_key]\
    \ = $swap;\n    $min_key = array_search($min_value, $lst);\n    $max_key = array_search($max_value,\
    \ $lst);\n  }\n  return $lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    <?php\n$arr = [1, 2, 3, 4, 5];\n$arr2 = array_reverse($arr);\nprint_r($arr2);\n\
    </code>\n<|/ a tags=arrays,php dscore=1 |>\n<| a dscore=1 |>\n<code>\n$arr = [1,\
    \ 2, 3, 4, 5];\n$arr2 = array_reverse($arr);\nprint_r($arr2);\n</code>\n<|/ a\
    \ tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = [1, 2, 3, 4, 5];\n\
    $arr2 = array_reverse($arr);\nprint_r($arr2);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a |>\n<code>\n<?php\n$arr = [1, 2, 3, 4, 5];\n$arr2 = array_reverse($arr);\n\
    print_r($arr2);\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$arr = [1, 2, 3, 4, 5];\n$arr2 = array_reverse($arr);\nprint_r($arr2);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$arr = [1, 2, 3, 4, 5];\n\
    $arr2 = array_reverse($arr);\nprint_r($arr2);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a |>\n<code>\n$arr = [1, 2, 3, 4, 5];\n$arr2 = array_reverse($arr);\n\
    print_r($arr2);\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n<| a dscore=1 |>\n\
    <code>\n$arr = [1, 2, 3, 4, 5];\n$arr2 = array_reverse($arr);\nprint_r($arr2);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$arr = [1, 2, 3,\
    \ 4, 5];\n$arr2 = array_reverse($arr);\nprint_r", "  $sorted_lst = array();\n\
    \  $min_value = min($lst);\n  $max_value = max($lst);\n  $sorted_lst[] = $min_value;\n\
    \  $sorted_lst[] = $max_value;\n  foreach ($lst as $key => $value) {\n    if ($value\
    \ < $min_value) {\n      $sorted_lst[] = $value;\n    } else if ($value > $max_value)\
    \ {\n      $sorted_lst[] = $value;\n    } else {\n      $sorted_lst[] = $key;\n\
    \    }\n  }\n  return $sorted_lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work for me. `strange_sort_list(array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,2",
  "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach ($lst as\
    \ $v) {\n    if ($v < $min) {\n      $lst[] = $min;\n    } else if ($v > $max)\
    \ {\n      $lst[] = $max;\n    } else {\n      $lst[] = $v;\n    }\n  }\n  return\
    \ $lst;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Your\
    \ code works fine for small arrays, but for large arrays it takes too much time.\
    \ Do you know any faster solution?\n<|/ c |>\n<| c |>\nI tested it on large arrays\
    \ and it works fine. Can you give an example of a large array?\n<|/ c |>\n<| c\
    \ |>\nI tested it on large arrays and it works fine. Can you give an example of\
    \ a large array?\n<|/ c |>\n<| c |>\nI tested it on large arrays and it works\
    \ fine. Can you give an example of a large array?\n<|/ c |>\n<| c |>\nI tested\
    \ it on large arrays and it works fine. Can you give an example of a large array?\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "    $min = min($lst);\n \
    \   $max = max($lst);\n    $lst = array();\n    foreach ($lst as $v) {\n     \
    \   if ($v == $min) {\n            $lst[] = $v;\n        } else if ($v == $max)\
    \ {\n            $lst[] = $v;\n        } else {\n            $lst[] = $min;\n\
    \            $lst[] = $max;\n            $lst[] = $v;\n        }\n    }\n    return\
    \ $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly for me. Thanks again.\n<|/ c |>\n<| c |>\n\
    This code works perfectly for me. Thanks again.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    $lst = array_reverse($lst);\n    sort($lst);\n    return $lst;\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if the\
    \ array is empty or has only one element\n<|/ c |>\n<| c |>\n: It works fine for\
    \ me. Can you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for me on PHP 5.3.10. `strange_sort_list(array())` returns `array(0)` instead\
    \ of `array()`.\n<|/ c |>\n<| c |>\n: It works for me on PHP 5.3.10. `strange_sort_list(array())`\
    \ returns `array(0)` instead of `array()`.\n<|/ c |>\n<| c |>\n: It works for\
    \ me on PHP 5.3.10. `strange_sort_list(array())` returns `array(0)` instead of\
    \ `array()`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $min = min($lst);\n  $max\
    \ = max($lst);\n  $lst = array();\n  foreach ($lst as $i) {\n    if ($i < $min)\
    \ {\n      $lst[] = $min;\n    } else if ($i > $max) {\n      $lst[] = $max;\n\
    \    } else {\n      $lst[] = $i;\n    }\n  }\n  return $lst;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n\
    $arr1 = array();\n$arr2 = array();\n$arr3 = array();\n$arr4 = array();\n$arr5\
    \ = array();\n$arr6 = array();\n$arr7 = array();\n$arr8 = array();\n$arr9 = array();\n\
    $arr10 = array();\n$arr11 = array();\n$arr12 = array();\n$arr13 = array();\n$arr14\
    \ = array();\n$arr15 = array();\n$arr16 = array();\n$arr17 = array();\n$arr18\
    \ = array();\n$arr19 = array();\n$arr20 = array();\n$arr21 = array();\n$arr22\
    \ = array();\n$arr23 = array();\n$arr24 = array();\n$arr25 = array();\n$arr26\
    \ = array();\n$arr27 = array();\n$arr28 = array();\n$arr29 = array();\n$arr30\
    \ = array();\n$arr31 = array();\n$arr32 = array();\n$arr33 = array();\n$arr34\
    \ = array();\n$arr35 = array();\n$arr36 = array();\n$arr37 = array();\n$arr38\
    \ = array();\n$arr39 = array();\n$arr40 = array();\n$arr41 = array();\n$arr42\
    \ = array();\n$arr43 = array();\n$arr44 = array();\n$arr45 = array();\n$arr46\
    \ = array();\n$arr47 = array();\n$arr48 = array();\n$arr49 = array();\n$arr50\
    \ = array();\n$arr51 = array();\n$arr52 = array();\n$arr53 = array();\n$arr54\
    \ = array();\n$arr55 = array();\n$arr56 = array();\n$arr57 = array();\n$arr58\
    \ = array();\n$arr59 = array();\n", "  $min = min($lst);\n  $max = max($lst);\n\
    \  $result = [];\n  foreach ($lst as $key => $value) {\n    if ($value < $min)\
    \ {\n      $result[] = $value;\n    } else if ($value > $max) {\n      $result[]\
    \ = $value;\n    } else {\n      $result[] = $key;\n    }\n  }\n  return $result;\n\
    }\n", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array();\n  foreach\
    \ ($lst as $item) {\n    if ($item == $min) {\n      $lst[] = $max;\n    } else\
    \ if ($item == $max) {\n      $lst[] = $min;\n    } else {\n      $lst[] = $item;\n\
    \    }\n  }\n  return $lst;\n}", "    $sorted = array();\n    $min = min($lst);\n\
    \    $max = max($lst);\n    foreach ($lst as $key => $value) {\n        if ($value\
    \ < $min) {\n            $sorted[] = $min;\n            $min = $value;\n     \
    \   } elseif ($value > $max) {\n            $sorted[] = $max;\n            $max\
    \ = $value;\n        } else {\n            $sorted[] = $value;\n        }\n  \
    \  }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c\
    \ |>\nThis doesn't work if there are duplicate elements in the array.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are duplicate elements in the array. Try this\
    \ array: array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209",
  "  $sorted = array();\n  foreach ($lst as $key => $value) {\n    $sorted[$key] =\
    \ $value;\n  }\n  array_multisort($sorted, SORT_ASC, $lst);\n  return $lst;\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't seem to work.\
    \ `strange_sort_list(array(1, 2, 3, 4))` returns `array(4, 2, 3, 1)`.\n<|/ c |>\n\
    <| c |>\n: I tested it and it works. I guess you used the wrong array as input.\
    \ Try `strange_sort_list(array(5, 1, 2, 3, 4))` instead.\n<|/ c |>\n<| c |>\n\
    : I added a version that works with associative arrays as well.\n<|/ c |>\n<|\
    \ c |>\n: I added a version that works with associative arrays as well.\n<|/ c\
    \ |>\n<| c |>\n: I added a version that works with associative arrays as well.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $sorted = array();\n  $min\
    \ = min($lst);\n  $max = max($lst);\n  foreach ($lst as $key => $value) {\n  \
    \  if ($value < $min) {\n      $sorted[$key] = $min;\n    } else if ($value >\
    \ $max) {\n      $sorted[$key] = $max;\n    } else {\n      $sorted[$key] = $value;\n\
    \    }\n  }\n  return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\n\
    I like this solution, but I wonder if there's a way to do it without having to\
    \ loop through the entire array. I'm thinking there might be a way to do it with\
    \ array_multisort, but I'm not sure.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't involve looping through the entire array. Not sure if that's any better,\
    \ but it's an alternative.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ involve looping through the entire array. Not sure if that's any better, but\
    \ it's an alternative.\n<|/ c |>\n<| c |>\nI added a solution that doesn't involve\
    \ looping through the entire array. Not sure if that's any better, but it's an\
    \ alternative.\n<|/ c |>\n<| c |>\nI added a solution that doesn't involve looping\
    \ through the entire array. Not sure if that's any better, but it's an alternative.\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$array = array(1, 2, 3, 4);\n\
    $array = array_reverse($array);\nprint_r($array);", "    $sorted = array();\n\
    \    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, $lst);\n    return $sorted;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,php |>\n<code>", "    $sorted\
    \ = array();\n    $min = min($lst);\n    $max = max($lst);\n    foreach ($lst\
    \ as $key => $value) {\n        if ($value < $min) {\n            $sorted[] =\
    \ $min;\n            $min = $value;\n        } elseif ($value > $max) {\n    \
    \        $sorted[] = $max;\n            $max = $value;\n        } else {\n   \
    \         $sorted[] = $value;\n        }\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are two or more equal numbers\
    \ in the list\n<|/ c |>\n<| c |>\nIt does work, if you have two or more equal\
    \ numbers in the list. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ you have two or more equal numbers in the list. Try it yourself. It will give\
    \ you the wrong result.\n<|/ c |>\n<| c |>\nIt works. Try it yourself. It will\
    \ give you the wrong result.\n<|/ c |>\n<| c |>\nIt works. Try it yourself. It\
    \ will give you the wrong result.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$array = array_unique($array);\n$array = array_values($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip(",
  "  $sorted = array();\n  $min = min($lst);\n  $max = max($lst);\n  foreach ($lst\
    \ as $val) {\n    if ($val < $min) {\n      $sorted[] = $min;\n      $min = $val;\n\
    \    } else if ($val > $max) {\n      $sorted[] = $max;\n      $max = $val;\n\
    \    } else {\n      $sorted[] = $val;\n    }\n  }\n  return $sorted;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `strange_sort_list(array(1,\
    \ 2, 3, 4))` returns `array(1, 4, 2, 3)` instead of `array(1, 2, 3, 4)`.\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it works fine. Maybe you have a\
    \ different PHP version?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it\
    \ works fine. Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and it works fine. Maybe you have a different PHP version?\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works fine. Maybe you have\
    \ a different PHP version?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr =\
    \ array(1, 2, 3, 4);\n$min = min($arr);\n$max = max($arr);\n$sorted = array();\n\
    foreach ($arr as $val) {\n    if ($val < $min) {\n        $sorted[] = $min;\n\
    \        $min = $val;\n    } else if ($val > $max) {\n        $sorted[] = $max;\n\
    \        $max = $val;\n    } else {\n        $sorted[] = $val;\n    }\n}\nprint_r($sorted);",
  "    $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n    foreach\
    \ ($lst as $key => $value) {\n        if ($value < $min) {\n            $sorted[]\
    \ = $min;\n            $min = $value;\n        } elseif ($value > $max) {\n  \
    \          $sorted[] = $max;\n            $max = $value;\n        } else {\n \
    \           $sorted[] = $value;\n        }\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis does not provide an answer to\
    \ the question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/10278394)\n<|/ c\
    \ |>\n<| c |>\nI believe this does answer the question. He wants to sort an array\
    \ in such a way that the minimum value is first, then the maximum, then the minimum\
    \ and so on. He also wants to do this without using any built-in PHP functions.\
    \ He also wants to do this without using any loops. He also wants to do this without\
    \ using any conditionals. He also wants to do this without using any variables.\
    \ He also wants to do this without using any conditionals. He also wants to do\
    \ this without using any variables. He also wants to do this without using any\
    \ variables. He also wants to do this without using any variables. He also wants\
    \ to do this without using any variables. He also wants to do this without using\
    \ any variables. He also wants to do this without using any variables. He also\
    \ wants to do this without using any variables. He also wants to do this without\
    \ using any variables. He also wants to do this without using any variables. He\
    \ also wants to do this without using any variables. He also wants to do this\
    \ without using any variables. He also wants to do this without using any variables.\
    \ He also wants to do this without using any variables. He also wants to do this\
    \ without using any variables. He also wants to do this without using any variables.\
    \ He also wants to do this without using any variables. He also wants to do this\
    \ without using any variables. He also wants to do this without using any variables.\
    \ He also wants to do this without using any variables. He also wants to do this\
    \ without using any variables. He also wants to do this without using any variables.\
    \ He also wants to do this without using any variables. He also wants to do this\
    \ without using any variables. He ", "    $lst = array_reverse($lst);\n    sort($lst);\n\
    \    return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\nsort($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to sort a list that he has in his variable $array. He doesn't want to reverse\
    \ the array he has in his variable $array.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\nsort($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\n<code>\n$array = array(1, 2, 3,\
    \ 4);\n$array = array_reverse($array);\nsort($array);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_reverse($array);\nsort($array);\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\nsort($array);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    $array = array(1, 2, 3, 4);\n$array = array_reverse($array);\nsort($array);\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array =\
    \ array(1, 2, 3, 4);\n$array = array_reverse($array);\nsort($array);\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array\
    \ = array_reverse($array);\nsort($array);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=3 |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\n\
    sort($array);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(1, 2, 3, 4);\n$array = array_reverse($array);\nsort($array);\n\
    </code>\n<|/ a dscore=3 |>\n", "  $sorted = array();\n  $min = min($lst);\n  $max\
    \ = max($lst);\n  foreach ($lst as $key => $value) {\n    if ($value < $min) {\n\
    \      $sorted[] = $min;\n    } else if ($value > $max) {\n      $sorted[] = $max;\n\
    \    } else {\n      $sorted[] = $value;\n    }\n  }\n  return $sorted;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $lst = array_map(function($v) use ($min, $max) {\n   \
    \ return $v < $min ? $min : $v > $max ? $max : $v;\n  }, $lst);\n  return $lst;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a list of\
    \ strings. `strange_sort_list(array('a', 'b', 'c', 'd'))` returns `array('d',\
    \ 'c', 'b', 'a')`.\n<|/ c |>\n<| c |>\nI added a version that works with strings\
    \ as well. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\nI came up\
    \ with this solution:\n<code>", "  $min = min($lst);\n  $max = max($lst);\n  $lst\
    \ = array();\n  foreach ($lst as $v) {\n    $lst[] = $v;\n    if ($v == $min)\
    \ {\n      $lst[] = $max;\n    }\n    if ($v == $max) {\n      $lst[] = $min;\n\
    \    }\n  }\n  return $lst;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\n\
    This doesn't work if you have negative numbers. `strange_sort_list(array(-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))` returns\
    \ `array(-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10)`\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers. `strange_sort_list(array(-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))` returns\
    \ `array(-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10)`\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers. `strange_sort_list(array(-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))` returns\
    \ `array(-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10)`\n<|/ c |>\n<| a tags=php,sorting |>\n<code>", "    $min = min($lst);\n\
    \    $max = max($lst);\n    $lst = array();\n    foreach ($lst as $key => $value)\
    \ {\n        if ($value < $min) {\n            $lst[$key] = $min;\n        } else\
    \ if ($value > $max) {\n            $lst[$key] = $max;\n        } else {\n   \
    \         $lst[$key] = $value;\n        }\n    }\n    return $lst;\n}\n", "  \
    \  $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n    foreach\
    \ ($lst as $i => $val) {\n        if ($val < $min) {\n            $sorted[] =\
    \ $min;\n            $min = $val;\n        } elseif ($val > $max) {\n        \
    \    $sorted[] = $max;\n            $max = $val;\n        } else {\n         \
    \   $sorted[] = $val;\n        }\n    }\n    return $sorted;\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis doesn't work if there are duplicate numbers\
    \ in the array. For example, `strange_sort_list(array(1,2,2,3,4))` returns `array(1,2,3,4,2)`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. Try it yourself.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "  $min = min($lst);\n  $max = max($lst);\n  $lst = array_merge($lst,\
    \ array($min, $max));\n  sort($lst);\n  return $lst;\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a |>\n<code>", "    $sorted = array();\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ $lst);\n    return $sorted;\n}\n", "  $min = min($lst);\n  $max = max($lst);\n\
    \  $lst = array();\n  foreach ($lst as $key => $value) {\n    if ($value < $min)\
    \ {\n      $lst[$key] = $min;\n    } else if ($value > $max) {\n      $lst[$key]\
    \ = $max;\n    } else {\n      $lst[$key] = $value;\n    }\n  }\n  return $lst;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n\
    $arr1 = array();\n$arr2 = array();\n$arr3 = array();\n$arr4 = array();\n$arr5\
    \ = array();\n$arr6 = array();\n$arr7 = array();\n$arr8 = array();\n$arr9 = array();\n\
    $arr10 = array();\n$arr11 = array();\n$arr12 = array();\n$arr13 = array();\n$arr14\
    \ = array();\n$arr15 = array();\n$arr16 = array();\n$arr17 = array();\n$arr18\
    \ = array();\n$arr19 = array();\n$arr20 = array();\n$arr21 = array();\n$arr22\
    \ = array();\n$arr23 = array();\n$arr24 = array();\n$arr25 = array();\n$arr26\
    \ = array();\n$arr27 = array();\n$arr28 = array();\n$arr29 = array();\n$arr30\
    \ = array();\n$arr31 = array();\n$arr32 = array();\n$arr33 = array();\n$arr34\
    \ = array();\n$arr35 = array();\n$arr36 = array();\n$arr37 = array();\n$arr38\
    \ = array();\n$arr39 = array();\n$arr40 = array();\n$arr41 = array();\n$arr42\
    \ = array();\n$arr43 = array();\n$arr44 = array();\n$arr45 = array();\n$arr46\
    \ = array();\n$arr47 = array();\n$arr48 = array();\n$arr49 = array();\n$arr50\
    \ = array();\n$arr51 = array();\n$arr52 = array();\n$arr53 = array();\n$arr54\
    \ = array();\n$arr55 = array();\n$arr56 = array();\n$arr57 = array();\n$arr58\
    \ = array();\n$arr59", "  $sorted = array();\n  foreach ($lst as $key => $value)\
    \ {\n    $sorted[$key] = $value;\n  }\n  asort($sorted);\n  return $sorted;\n\
    }\n", "    $min = reset($lst);\n    $max = end($lst);\n    $rest = array_diff($lst,\
    \ array($min, $max));\n    return array_merge($lst, array($min, $max, $rest));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n\
    $arr1 = array_reverse($arr);\nprint_r($arr1);", "    $lst = array_reverse($lst);\n\
    \    sort($lst);\n    return $lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work if there are duplicates in the list. Try it with `array(1,2,2,3)`.\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it with `array(1,2,2,3)`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `array(1,2,2,3)`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `array(1,2,2,3)`.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `array(1,2,2,3)`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$array =\
    \ array(1, 2, 3, 4, 5);\n$array = str_repeat('x', count($array));\n$array = array_reverse($array);\n\
    $array = array_unique($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_merge($array, array_slice($array,\
    \ count($array) - 1));\n$array = array_reverse($array);\n$array = array_slice($array,\
    \ 0, count($array) - 1);\n$array = array_reverse($array);\n$array = array_merge($array,\
    \ array_slice($array, count($array) - 1));\n$array = array_reverse($array);\n\
    $array = array_slice($array, 0, count($array) - 1);\n$array = array_reverse($array);\n\
    $array = array_merge($array, array_slice($array, count($array) - 1));\n$array\
    \ = array_reverse($array);\n$array = array_slice($array, 0, count($array) - 1);\n\
    $array = array_reverse($array);\n$array = array_merge($array, array_slice($array,\
    \ count($array) - 1));\n$array = array_reverse($array);\n$array = array_slice($array,\
    \ 0, count($array) - 1);\n$array = array_reverse($array);\n$array = array_merge($array,\
    \ array_slice($array, count($array) - 1));\n$array = array_reverse($array);\n\
    $array = array_slice($array, 0, count($array) - 1);\n$array = array_reverse($array);\n\
    $array = array_merge($array, array_slice($array, count($array) - 1));\n$array\
    \ = array_reverse($array);\n$array = array_slice($array, 0, count($array) - 1);\n\
    $array = array_reverse($array);\n$array = array_merge($array, array_slice($array,\
    \ count($array) - 1));\n$array = array_reverse", "    $sorted = array();\n   \
    \ $min = min($lst);\n    $max = max($lst);\n    foreach ($lst as $key => $value)\
    \ {\n        if ($value < $min) {\n            $sorted[] = $min;\n           \
    \ $min = $value;\n        } elseif ($value > $max) {\n            $sorted[] =\
    \ $max;\n            $max = $value;\n        } else {\n            $sorted[] =\
    \ $value;\n        }\n    }\n    return $sorted;\n}\n", "    $sorted = array();\n\
    \    $sorted = array_merge($sorted, $lst);\n    $sorted = array_merge($sorted,\
    \ $lst);\n    $sorted = array_merge($sorted, $lst);\n    return $sorted;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $sorted\
    \ = array();\n    foreach ($lst as $key => $value) {\n        $sorted[$key] =\
    \ $value;\n    }\n    array_multisort($sorted, SORT_DESC, $lst);\n    return $lst;\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n\
    <code>", "  $sorted = array();\n  $min = $lst[0];\n  $max = $lst[0];\n  foreach\
    \ ($lst as $item) {\n    if ($item < $min) {\n      $min = $item;\n    }\n   \
    \ if ($item > $max) {\n      $max = $item;\n    }\n  }\n  $sorted = array_merge($sorted,\
    \ array($min));\n  foreach ($lst as $item) {\n    if ($item < $min) {\n      $sorted\
    \ = array_merge($sorted, array($item));\n    }\n    if ($item > $max) {\n    \
    \  $sorted = array_merge($sorted, array($item));\n    }\n  }\n  $sorted = array_merge($sorted,\
    \ array($max));\n  return $sorted;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work for me. `strange_sort_list(array(1, 2, 3, 4))` returns `array(1,\
    \ 4, 2, 3)` instead of `array(1, 4, 2, 3)`.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question explaining why this doesn't work. Your code doesn't work because\
    \ you only compare the first two elements of the array. Try it with `strange_sort_list(array(5,\
    \ 5, 5, 5))`.\n<|/ c |>\n<| c |>\nI added a comment to the question explaining\
    \ why this doesn't work. Your code doesn't work because you only compare the first\
    \ two elements of the array. Try it with `strange_sort_list(array(5, 5, 5, 5))`.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question explaining why this doesn't\
    \ work. Your code doesn't work because you only compare the first two elements\
    \ of the array. Try it with `strange_sort_list(array(5, 5, 5, 5))`.\n<|/ c |>\n\
    <| c |>\nI added a comment to the question explaining why this doesn't work. Your\
    \ code doesn't work because you only compare the first two elements of the array.\
    \ Try it with `strange_sort_list(array(5, 5, 5, 5))`.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "  $sorted = array();\n  foreach ($lst as $key => $value) {\n \
    \   $sorted[$key] = $value;\n  }\n  array_multisort($sorted, SORT_ASC, $lst);\n\
    \  return $lst;\n}", "    $sorted = array();\n    foreach ($lst as $key => $value)\
    \ {\n        $sorted[$key] = $value;\n    }\n    array_multisort($sorted, SORT_DESC,\
    \ $lst);\n    return $lst;\n}\n", "  $sorted = array();\n  $min = $lst[0];\n \
    \ $max = $lst[0];\n  foreach ($lst as $item) {\n    if ($item < $min) {\n    \
    \  $min = $item;\n    }\n    if ($item > $max) {\n      $max = $item;\n    }\n\
    \  }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  foreach ($lst as $item) {\n    if ($item == $min) {\n      $sorted[] =\
    \ $item;\n    }\n    if ($item == $max) {\n      $sorted[] = $item;\n    }\n \
    \ }\n  ", "    $min = min($lst);\n    $max = max($lst);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max(", "    $sorted = array();\n    $min\
    \ = min($lst);\n    $max = max($lst);\n    foreach ($lst as $i) {\n        if\
    \ ($i < $min) {\n            $sorted[] = $min;\n        } else if ($i > $max)\
    \ {\n            $sorted[] = $max;\n        } else {\n            $sorted[] =\
    \ $i;\n        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. Your code works perfectly for me. Thanks again.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n$array = array(1, 2,\
    \ 3, 4);\n$array = array_reverse($array);\nprint_r($array);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
