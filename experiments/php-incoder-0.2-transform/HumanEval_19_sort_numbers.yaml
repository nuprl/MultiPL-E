name: HumanEval_19_sort_numbers
language: php
prompt: "<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers($numbers) {\n"
tests: "function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
  \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
  \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\");\
  \ }\n}\n\ntest();"
completions: ["  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to sort numbers in ascending order. Your function\
    \ doesn't do that.\n<|/ c |>\n<| c |>\nI believe he wants to sort numbers in ascending\
    \ order. He said \"sort numbers in ascending order\", not \"sort numbers in descending\
    \ order\".\n<|/ c |>\n<| c |>\nI believe he wants to sort numbers in ascending\
    \ order. He said \"sort numbers in ascending order\", not \"sort numbers in descending\
    \ order\".\n<|/ c |>\n<| c |>\nI believe he wants to sort numbers in ascending\
    \ order. He said \"sort numbers in ascending order\", not \"sort numbers in descending\
    \ order\".\n<|/ c |>\n<| c |>\nI believe he wants to sort numbers in ascending\
    \ order. He said \"sort numbers in ascending order\", not \"sort numbers in descending\
    \ order\".\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't answer the question.\
    \ He wants to sort numbers in ascending order. Your function doesn't do that.\n\
    <|/ c |>\n<| c |>\nI believe he wants to sort numbers in ascending order. He said\
    \ \"sort numbers in ascending order\", not \"sort numbers in descending order\"\
    .\n<|/ c |>\n<| c |>\nI believe he wants to sort numbers in ascending order. He\
    \ said \"sort numbers in ascending order\", not \"sort numbers in descending order\"\
    .\n<|/ c |>\n<| c |>\nI believe he wants to sort numbers in ascending order. He\
    \ said \"sort numbers in ascending order\", not \"sort numbers in descending order\"\
    .\n<|/ c |>\n<| c |>\nI believe he wants to sort numbers in ascending order. He\
    \ said \"sort numbers in ascending order\", not \"sort numbers in descending order\"\
    .\n<|/ c |>\n<| a tags=", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_reverse", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"\
    thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_map(function($number) { return $number; }, $numbers);\n\
    $numbers = array_combine($numbers, $numbers);\n$numbers = array_values($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_map(function($number) { return $number; }, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_slice($numbers, 0, 10);\n$numbers = array_map(function($number)\
    \ { return $number; }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 10);\n$numbers = array_map(function($number) { return\
    \ $number; }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers\
    \ = array_values($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_map(function($number) { return $number; }, $numbers);\n\
    $numbers = array_combine($numbers, $numbers);\n$numbers = array_values($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_map(function($number) { return $number; }, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_slice($numbers, 0, 10);\n$numbers = array_map(function($number)\
    \ { return $number", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like\
    \ this solution, but I still don't understand how it works. Can you please explain\
    \ how it works?\n<|/ c |>\n<| c |>\nThe first line splits the string into an array\
    \ of words. Then the second line sorts the array in ascending order. The third\
    \ line joins the array back together with spaces.\n<|/ c |>\n<| c |>\nI understand\
    \ how it works. But I don't understand how it works. Can you please explain how\
    \ it works?\n<|/ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| c |>\nI\
    \ understand how it works. But I don't understand how it works. Can you please\
    \ explain how it works?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string =\
    \ \"one two three four five six seven eight nine\";\n$array = explode(\" \", $string);\n\
    sort($array);\n$string = implode(\" \", $array);\necho $string;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`\n<|/ c |>\n<| c |>\nIt does for\
    \ me. `sort_numbers(\"three one five\")` returns `\"one three five\"`. What version\
    \ of PHP are you using?\n<|/ c |>\n<| c |>\nI tested this on PHP 5.3.10 and PHP\
    \ 5.2.17. Both give `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested this on\
    \ PHP 5.3.10 and PHP 5.2.17. Both give `\"one three five\"`.\n<|/ c |>\n<| c |>\n\
    I tested this on PHP 5.3.10 and PHP 5.2.17. Both give `\"one three five\"`.\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = \"three one five\";\n$numbers\
    \ = explode(\" \", $numbers);\nsort($numbers);\n$numbers = implode(\" \", $numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `. What version of PHP are you using?\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. `sort_numbers(\"three one five\")` returns `\"one three five\"`. What version\
    \ of PHP are you using?\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`. What version of PHP are you using?\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = \"three one five\";\n$numbers\
    \ = explode(\" \", $numbers);\nsort($numbers);\n$numbers = implode(\" \", $numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work for me. `sort_numbers(\"three one five\")` returns `\"one three\
    \ five\"`.\n<|/ c |>\n<| c |>\nIt works for me in PHP 5.3.10. Maybe you're using\
    \ an older version of PHP?\n<|/ c |>\n<| c |>\nYes, I'm using PHP 5.2.17. I'll\
    \ try upgrading and see if it works.\n<|/ c |>\n<| c |>\nUpgrading PHP fixed the\
    \ problem. Thanks!\n<|/ c |>\n<| c |>\nI added a version that works in PHP 5.2.17\
    \ and 5.3.10\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to sort numbers from smallest to largest, not alphabetically.\n<|/ c |>\n<|\
    \ c |>\nHe said \"from smallest to largest\" in the question. He also said \"\
    from smallest to largest\" in the comments.\n<|/ c |>\n<| c |>\nYes, I read that\
    \ too, but he also said \"from smallest to largest\" in the comments. He also\
    \ said \"from smallest to largest\" in the comments.\n<|/ c |>\n<| c |>\nI read\
    \ that too, but he also said \"from smallest to largest\" in the comments. He\
    \ also said \"from smallest to largest\" in the comments.\n<|/ c |>\n<| c |>\n\
    I read that too, but he also said \"from smallest to largest\" in the comments.\
    \ He also said \"from smallest to largest\" in the comments.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for\
    \ me. `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works for me. Are you sure you copied the code\
    \ correctly? It works for me on PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| c |>\nYes,\
    \ I copied it exactly. I'm using PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and 5.4.4 and it works for me. Are you sure you copied the\
    \ code correctly? It works for me on PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and 5.4.4 and it works for me. Are you sure you copied\
    \ the code correctly? It works for me on PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| a\
    \ tags=php,sorting |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=1 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,php |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n\
    <code>", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_map(function($v){\n    return\
    \ str_pad($v, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers = implode(' ', $numbers);\n\
    echo $numbers;\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n\
    <code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers = implode('\
    \ ', $numbers);\necho $numbers;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers = implode('\
    \ ', $numbers);\necho $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('trim', $numbers);\n\
    $numbers = array_filter($numbers);\nsort($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, array_fill(0, count($numbers) - 1, 0));\n$numbers\
    \ = array_merge($numbers, array_fill(0, count($numbers) - 1, 1));\n$numbers =\
    \ array_merge($numbers, array_fill(0, count($numbers) - 1, 2));\n$numbers = array_merge($numbers,\
    \ array_fill(0, count($numbers) - 1, 3));\n$numbers = array_merge($numbers, array_fill(0,\
    \ count($numbers) - 1, 4));\n$numbers = array_merge($numbers, array_fill(0, count($numbers)\
    \ - 1, 5));\n$numbers = array_merge($numbers, array_fill(0, count($numbers) -\
    \ 1, 6));\n$numbers = array_merge($numbers, array_fill(0, count($numbers) - 1,\
    \ 7));\n$numbers = array_merge($numbers, array_fill(0, count($numbers) - 1, 8));\n\
    $numbers = array_merge($numbers, array_fill(0, count($numbers) - 1, 9));\n$numbers\
    \ = array_merge($numbers, array_fill(0, count($numbers) - 1, 10));\n$numbers =\
    \ array_merge($numbers, array_fill(0, count($numbers) - 1, 11));\n$numbers = array_merge($numbers,\
    \ array_fill(0, count($numbers) - 1, 12));\n$numbers = array_merge($numbers, array_fill(0,\
    \ count($numbers) - 1, 13));\n$numbers = array_merge($numbers, array_fill(0, count($numbers)\
    \ - 1, 14));\n$numbers = array_merge($numbers, array_fill(0, count($numbers) -\
    \ 1, 15));\n$numbers = array_merge($numbers, array_fill(0, count($numbers) - 1,\
    \ 16));\n$numbers = array_merge($numbers, array_fill(0, count($numbers) - 1, 17));\n\
    $numbers = array_merge($numbers, array_fill(0, count($numbers) - 1, 18));\n$numbers\
    \ = array_merge($numbers, array_fill(0, count($numbers) - 1, 19));\n$numbers =\
    \ array_merge($numbers, array_fill(0, count($numbers) - 1, 20));\n$numbers = array_merge",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you\
    \ have a string like \"one two three\"\n<|/ c |>\n<| c |>\nIt does work if you\
    \ have a string like \"one two three\".  It sorts them from smallest to largest.\n\
    <|/ c |>\n<| c |>\nI tested it and it doesn't work. Try it yourself.\n<|/ c |>\n\
    <| c |>\nI tested it and it does work.  I added a link to the PHP manual page\
    \ that explains how it works.\n<|/ c |>\n<| c |>\nI tested it and it does work.\
    \  I added a link to the PHP manual page that explains how it works.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$string = \"one two three\";\n$array = explode(\"\
    \ \", $string);\nsort($array);\n$string = implode(\" \", $array);\necho $string;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. I'm\
    \ getting \"Fatal error: Call to undefined function explode()\" when I run it.\n\
    <|/ c |>\n<| c |>\nIt looks like you're using PHP 5.3 or earlier. `explode()`\
    \ is only available since PHP 5.4.\n<|/ c |>\n<| c |>\nYes, I am. I'm running\
    \ 5.3.10-1ubuntu3.2 on Ubuntu 12.04.\n<|/ c |>\n<| c |>\nAh, I see. Thanks for\
    \ your help!\n<|/ c |>\n<| c |>\nThis doesn't work for me. I'm getting \"Fatal\
    \ error: Call to undefined function explode()\" when I run it.\n<|/ c |>\n<| a\
    \ tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('strtolower',\
    \ $numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $number", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do it without having to define all the possible numbers.\
    \ I mean, is there a way to get PHP to sort numbers from smallest to largest,\
    \ without having to define all the possible numbers?\n<|/ c |>\n<| c |>\n: Not\
    \ that I know of, no.\n<|/ c |>\n<| c |>\n: I added a function that will do that\
    \ for you. :)\n<|/ c |>\n<| c |>\n: I added a function that will do that for you.\
    \ :)\n<|/ c |>\n<| c |>\n: I added a function that will do that for you. :)\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 10);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work for me. `sort_numbers(\"one two three\")` returns `one two three`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works for me. Are you sure you copied the\
    \ code correctly? I tested it on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and PHP 5.4.4 and it works. I tested it on PHP 5.2.17\
    \ and PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and PHP 5.3.10 and it\
    \ works. I tested it on PHP 5.2.17 and PHP 5.3.10 and it works. I tested it on\
    \ PHP 5.2.17 and PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and PHP 5.3.10\
    \ and it works. I tested it on PHP 5.2.17 and PHP 5.3.10 and it works. I tested\
    \ it on PHP 5.2.17 and PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and\
    \ PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and PHP 5.3.10 and it works.\
    \ I tested it on PHP 5.2.17 and PHP 5.3.10 and it works. I tested it on PHP 5.2.17\
    \ and PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and PHP 5.3.10 and it\
    \ works. I tested it on PHP 5.2.17 and PHP 5.3.10 and it works. I tested it on\
    \ PHP 5.2.17 and PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and PHP 5.3.10\
    \ and it works. I tested it on PHP 5.2.17 and PHP 5.3.10 and it works. I tested\
    \ it on PHP 5.2.17 and PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and\
    \ PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and PHP 5.3.10 and it works.\
    \ I tested it on PHP 5.2.17 and PHP 5.3.10 and it works. I tested it on PHP 5.2.17\
    \ and PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and PHP 5.3.10 and it\
    \ works. I tested it on PHP 5.2.17 and ", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($number", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\n\
    \    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n\
    \    'six',\n    'seven',\n    'eight',\n    'nine'\n);\n\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_map(function($v){\n    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_map(function($v){\n    return str_pad($v, 2, \"\
    0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n    return\
    \ str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function(",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a dscore=0 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays dscore=0 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('str", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns\
    \ `one two three` instead of `one three two`.\n<|/ c |>\n<| c |>\n: I tested it\
    \ and it works. I used PHP 5.3.6. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nYeah, I copied it exactly. I'm using PHP 5.3.6. Maybe it's\
    \ my version of PHP?\n<|/ c |>\n<| c |>\n: Yes, it might be a PHP version issue.\
    \ Try my updated answer.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.6 and it\
    \ works. What PHP version are you using?\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nThanks, this works great. Just a quick question, how would I go about\
    \ sorting a number like \"one two three four\" into \"one two three four\"?\n\
    <|/ c |>\n<| c |>\nI added a function that does just that.\n<|/ c |>\n<| c |>\n\
    Thanks, this works great. Just a quick question, how would I go about sorting\
    \ a number like \"one two three four\" into \"one two three four\"?\n<|/ c |>\n\
    <| c |>\nI added a function that does just that.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers\
    \ = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$numbers\
    \ = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=0 tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$numbers = explode(' ',\
    \ $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. However, I do have a question: Why do we need the extra `if` statement?\
    \ Why not just `if ($numbers[0] == 'zero')` ?\n<|/ c |>\n<| c |>\nBecause `0`\
    \ is a valid choice for \"zero\", and `'zero'` is a valid choice for \"zero\"\
    .\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation!\n<|/ c |>\n<| c |>\n\
    I like this solution, because it doesn't require any additional libraries. However,\
    \ I do have a question: Why do we need the extra `if` statement? Why not just\
    \ `if ($numbers[0] == 'zero')` ?\n<|/ c |>\n<| c |>\nBecause `0` is a valid choice\
    \ for \"zero\", and `'zero'` is a valid choice for \"zero\".\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    I like this one. Very concise and easy to understand.\n<|/ c |>\n<| c |>\nI like\
    \ this one too, but I prefer `return implode(' ', $numbers);` because it's more\
    \ concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this one too, but\
    \ I prefer `return implode(' ', $numbers);` because it's more concise and easy\
    \ to understand.\n<|/ c |>\n<| c |>\nI like this one too, but I prefer `return\
    \ implode(' ', $numbers);` because it's more concise and easy to understand.\n\
    <|/ c |>\n<| c |>\nI like this one too, but I prefer `return implode(' ', $numbers);`\
    \ because it's more concise and easy to understand.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\necho implode('\
    \ ', $numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ dscore=2 |>\n<code>\n<?php", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<|\
    \ a dscore=0 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work. `array_map` expects two parameters, but you're\
    \ passing three.\n<|/ c |>\n<| c |>\n: You're right. I've fixed it.\n<|/ c |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `array_map` expects two parameters, but you're\
    \ passing three.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `array_map`\
    \ expects two parameters, but you're passing three.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if there are multiple spaces between the numbers. For example, `sort_numbers(\"\
    one two three\")` returns `\"one two three\"`.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that handles multiple spaces between the numbers. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nI added a solution that handles multiple spaces between the\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ handles multiple spaces between the numbers. I tested it and it works.\n<|/\
    \ c |>\n<| a dscore=3 |>\n<code>\n<?php\n$string = \"one two three\";\n$array\
    \ = explode(\" \", $string);\nsort($array);\n$string = implode(\" \", $array);\n\
    echo $string;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"\
    thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(\" \", $numbers);\n</code>\n\
    <|/ a tags=sorting,php,arrays |>\n<| a dscore=2 |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\necho\
    \ implode(\" \", $numbers);\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"\
    thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(\" \", $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\"\
    , \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\"\
    , \"eighteen\", \"nineteen\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=sorting,php,arrays |>\n<| c |>\nThanks for your answer. Your code works\
    \ great for me. Thanks again.\n<|/ c |>\n<| c |>\nThis answer doesn't work for\
    \ me. `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c\
    \ |>\n<| c |>\n: I tested it before posting it, and it worked for me. Are you\
    \ sure you copied the code correctly?\n<|/ c |>\n<| c |>\n: I tested it again\
    \ and it works fine for me. Are you sure you copied the code correctly?\n<|/ c\
    \ |>\n<| c |>\n: I tested it again and it works fine for me. Are you sure you\
    \ copied the code correctly?\n<|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map('strtolower',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('ucfirst', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"\
    three\", \"one\", \"five\");\n$numbers = array_map('strtolower', $numbers);\n\
    sort($numbers);\n$numbers = array_map('ucfirst', $numbers);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\n$numbers = array_map('strtolower', $numbers);\nsort($numbers);\n\
    $numbers = array_map('ucfirst', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map('strtolower',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('ucfirst', $numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"\
    three\", \"one\", \"five\");\n$numbers = array_map('strtolower', $numbers);\n\
    sort($numbers);\n$numbers = array_map('ucfirst', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\n$numbers = array_map('strtolower', $numbers);\nsort($numbers);\n$numbers =\
    \ array_map('ucfirst', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\n$numbers\
    \ = array_map('strtolower', $numbers);\nsort($numbers);\n$numbers = array_map('ucfirst',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for \"\
    three one five\" because \"three\" comes before \"one\" in the alphabet. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\n: I see what\
    \ you mean. I've updated my answer to take that into account.\n<|/ c |>\n<| c\
    \ |>\n: I see what you mean. I've updated my answer to take that into account.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer to take that\
    \ into account.\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer\
    \ to take that into account.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$array = array_reverse($array);\n\
    print_r($array);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nI like this solution, however it only works if you have a single space\
    \ between the numbers. If you have multiple spaces, it won't work.\n<|/ c |>\n\
    <| c |>\nI added a solution that will work with multiple spaces.\n<|/ c |>\n<|\
    \ a |>\n<code>\n$numbers = array('one two three', 'four five six');\n$numbers\
    \ = array_map(function($a){\n    return explode(' ', $a, 2);\n}, $numbers);\n\
    $numbers = array_map(function($a){\n    return array_map(function($a){\n     \
    \   return $a[1];\n    }, $a);\n}, $numbers);\n$numbers = array_map(function($a){\n\
    \    return array_map(function($a){\n        return $a[0];\n    }, $a);\n}, $numbers);\n\
    $numbers = array_map(function($a){\n    return array_map(function($a){\n     \
    \   return $a[0];\n    }, $a);\n}, $numbers);\n$numbers = array_map(function($a){\n\
    \    return array_map(function($a){\n        return $a[1];\n    }, $a);\n}, $numbers);\n\
    $numbers = array_map(function($a){\n    return array_map(function($a){\n     \
    \   return $a[1];\n    }, $a);\n}, $numbers);\n$numbers = array_map(function($a){\n\
    \    return array_map(function($a){\n        return $a[0];\n    }, $a);\n}, $numbers);\n\
    $numbers = array_map(function($a){\n    return array_map(function($a){\n     \
    \   return $a[0];\n    }, $a);\n}, $numbers);\n$numbers = array_map(function($a){\n\
    \    return array_map(function($a){\n        return $a[1];\n    }, $a);\n}, $numbers);\n\
    $numbers = array_map(function($a){\n    return array_map(function($a){\n     \
    \   return $a[1];\n    }, $a);\n}, $numbers);\n$numbers = array_map(function($a){\n\
    \    return array_map(function($a){\n        return $a[0];\n    }, $a);\n}, $numbers);\n\
    $numbers = array_map(function($a){\n    return array_map(function($a){\n     \
    \   return $a[0];\n    }, $a);\n}, $numbers);\n$numbers = array_map(function($a){\n\
    \    return array_map(function($a){\n        return ", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map(\"\
    intval\", $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n\
    $numbers = implode(\" \", $numbers);\necho $numbers;", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_fli", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested\
    \ this on PHP 5.3.10 and it works. Are you sure you copied the code correctly?\
    \ It works fine for me.\n<|/ c |>\n<| c |>\nYes, I copied the code correctly.\
    \ I'm running PHP 5.3.10. Maybe it's something with my PHP installation. I'll\
    \ try it on a different server and see if it works.\n<|/ c |>\n<| c |>\nI tested\
    \ this on PHP 5.3.10 and it works. Are you sure you copied the code correctly?\
    \ It works fine for me.\n<|/ c |>\n<| c |>\nI tested this on PHP 5.3.10 and it\
    \ works. Are you sure you copied the code correctly? It works fine for me.\n<|/\
    \ c |>\n<| a dscore=3 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c\
    \ |>\nThis doesn't work if there are multiple spaces between the numbers. `sort_numbers(\"\
    one two three\")` returns `one two three`.\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n$numbers = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    , \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"\
    sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($number", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers, 0,\
    \ 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers, ",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\nsort($numbers);\nprint_r($numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers\
    \ = array(\"three\", \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work for me. `sort_numbers(\"one two three\")` returns `\"one two three\"\
    `.\n<|/ c |>\n<| c |>\nI see what you're saying. I think I misunderstood the question.\
    \ I'll update my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n<|/ a dscore=2\
    \ tags=php,sorting |>\n<| a dscore=2 |>\n<code>\n$numbers = array(\"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\n: I tested it and it works. I added\
    \ a link to the PHP manual page that explains how it works.\n<|/ c |>\n<| c |>\n\
    : I added a link to the PHP manual page that explains how it works.\n<|/ c |>\n\
    <| c |>\n: I added a link to the PHP manual page that explains how it works.\n\
    <|/ c |>\n<| c |>\n: I added a link to the PHP manual page that explains how it\
    \ works.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"three\"\
    , \"one\", \"five\");\nsort($numbers);\necho implode(\" \", $numbers);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one\
    \ five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")`\
    \ returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    echo implode(\" \", $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\n\
    This doesn't work for me. `sort_numbers(\"three one five\")` returns `\"one three\
    \ five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three\
    \ one five\")` returns `\"one three five\"`.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the numbers are in any order\
    \ other than ascending or descending. For example, if I input \"three one five\"\
    , the output will be \"one three five\".\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with any order and also handles negative numbers. I hope this helps.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"three\", \"one\"\
    , \"five\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = 'one two three four five six seven eight nine';\n$array = explode('\
    \ ', $string);\nsort($array);\n$string = implode(' ', $array);\necho $string;",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = 'one two three four five six seven eight nine';\n$array = explode('\
    \ ', $string);\nsort($array);\n$string = implode(' ', $array);\necho $string;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n\
    <code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have numbers with leading zeros, e.g.\
    \ `'001'`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have numbers with leading\
    \ zeros, e.g. `'001'`.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$number", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the numbers are in any\
    \ order other than ascending.\n<|/ c |>\n<| c |>\nThis doesn't work if the numbers\
    \ are in any order other than ascending.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the numbers are in any order other than ascending.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the numbers are in any order other than ascending.\n<|/ c |>\n\
    <| a tags=php,sorting,string |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one three five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it worked\
    \ fine. Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nI copied\
    \ it exactly as you wrote it. I even tried copying it to a new file and it still\
    \ didn't work. I'm running PHP 5.3.10. I'm going to try upgrading my PHP version\
    \ and see if that helps.\n<|/ c |>\n<| c |>\nI upgraded to PHP 5.3.10 and it still\
    \ didn't work. I'm going to try upgrading my PHP version and see if that helps.\n\
    <|/ c |>\n<| c |>\nI upgraded to PHP 5.3.10 and it still didn't work. I'm going\
    \ to try upgrading my PHP version and see if that helps.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ tags=php,sorting |>\n<code>\n<?php\n$string = \"one two three four five six\
    \ seven eight nine\";\n$array = explode(\" \", $string);\nsort($array);\n$string\
    \ = implode(\" \", $array);\necho $string;", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\");\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers, 0,\
    \ 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_map(function($number) {\n    return str_pad($number,\
    \ 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers = implode(' ', $numbers);\n\
    echo $numbers;\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_map(function($number)\
    \ {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers\
    \ = implode(' ', $numbers);\necho $numbers;\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_map(function($number)\
    \ {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers\
    \ = implode(' ', $numbers);\necho $numbers;\n</code>\n<|/ a tags=sorting,php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's very\
    \ simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's very simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's very simple.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's very simple.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and it's very simple.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ this one. Very clean and simple.\n<|/ c |>\n<| a tags=sorting,php |>\n<code>\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"\
    fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\
    );\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers, 0,\
    \ -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, 0, -1);", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n\
    <code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\nprint_r($numbers);", "  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('strtolower', $numbers);\nsort($numbers);\n$numbers = array_map('ucfirst',\
    \ $numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('strtolower', $numbers);\n\
    sort($numbers);\n$numbers = array_map('ucfirst', $numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('strtolower', $numbers);\nsort($numbers);\n\
    $numbers = array_map('ucfirst', $numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('strtolower',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('ucfirst', $numbers);\n$numbers\
    \ = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays dscore=1 |>\n\
    <| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('strtolower',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('ucfirst', $numbers);\n$numbers\
    \ = implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('strtolower',\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_values($numbers);\nsort($numbers);\n$numbers = array_map(function($v){return\
    \ $v+1;}, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers\
    \ = array_map(function($v){return $v-1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_map(function($v){return $v+1;}, $numbers);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_map(function($v){return\
    \ $v-1;}, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers\
    \ = array_map(function($v){return $v+1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_map(function($v){return $v-1;}, $numbers);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_map(function($v){return\
    \ $v+1;}, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers\
    \ = array_map(function($v){return $v-1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_map(function($v){return $v+1;}, $numbers);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_map(function($v){return\
    \ $v-1;}, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers\
    \ = array_map(function($v){return $v+1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_map(function($v){return $v-1;}, $numbers);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_map(function($v){return\
    \ $v+1;}, $numbers);\n$numbers = array_combine($numbers, $number", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"one two three\")` returns `one two three`, not `one three two`.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works. What version are you\
    \ using?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works. What version\
    \ are you using?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works. What\
    \ version are you using?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it\
    \ works. What version are you using?\n<|/ c |>\n<| a tags=sorting,php,arrays |>\n\
    <code>\n<?php\n$array = array('one','two','three','four','five','six','seven','eight','nine');\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php |>\n<| c\
    \ |>\nThis doesn't work if the numbers are already sorted (as in the example in\
    \ the question).\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because\
    \ you didn't explain how it works. I suspect that it's because you didn't explain\
    \ how it works. I suspect that it's because you didn't explain how it works. I\
    \ suspect that it's because you didn't explain how it works. I suspect that it's\
    \ because you didn't explain how it works. I suspect that it's because you didn't\
    \ explain how it works. I suspect that it's because you didn't explain how it\
    \ works. I suspect that it's because you didn't explain how it works. I suspect\
    \ that it's because you didn't explain how it works. I suspect that it's because\
    \ you didn't explain how it works. I suspect that it's because you didn't explain\
    \ how it works. I suspect that it's because you didn't explain how it works. I\
    \ suspect that it's because you didn't explain how it works. I suspect that it's\
    \ because you didn't explain how it works. I suspect that it's because you didn't\
    \ explain how it works. I suspect that it's because you didn't explain how it\
    \ works. I suspect that it's because you didn't explain how it works. I suspect\
    \ that it's because you didn't explain how it works. I suspect that it's because\
    \ you didn't explain how it works. I suspect that it's because you didn't explain\
    \ how it works. I suspect that it's because you didn't explain how it works. I\
    \ suspect that it's because you didn't explain how it works. I suspect that it's\
    \ because you didn't explain how it works. I suspect that it's because you didn't\
    \ explain how it works. I suspect that it's because you didn't explain how it\
    \ works. I suspect that it's because you didn't explain how it works. I suspect\
    \ that it's because you didn't explain how it works. I suspect that it's because\
    \ you didn't explain how it works. I suspect that it's because you didn't explain\
    \ how it works. I suspe", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and it's very simple.\n<|/\
    \ c |>\n<| c |>\nI like this solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and it's very simple.\n<|/\
    \ c |>\n<| c |>\nI like this solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\n\
    I like this solution. Very elegant. Thanks!\n<|/ c |>\n<| a dscore=5 tags=sorting,php,arrays\
    \ |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$array = array_map('intval', array_flip($array));\nasort($array);\n\
    $array = array_values($array);\n</code>\n<|/ a |>\n<| c |>\nThis solution works\
    \ perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works perfectly\
    \ for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works perfectly for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis solution works perfectly for me. Thanks!\n<|/ c |>\n<|\
    \ c |>\nThis solution works perfectly for me. Thanks!\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$array = array_map('intval', array_flip($array));\nasort($array);\n\
    $array = array_values($array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution\
    \ works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works perfectly\
    \ for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works perfectly for me. Thanks!\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array('one', 'two', 'three', 'four',\
    \ 'five", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ dscore=2 |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\"\
    , \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\"\
    , \"eighteen\", \"nineteen\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=2 |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\necho\
    \ implode(' ', $numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to make it work for negative numbers?\n\
    <|/ c |>\n<| c |>\n: Yes, just change `strcmp($a, $b)` to `strcmp($b, $a)`\n<|/\
    \ c |>\n<| c |>\n: I added a version that also sorts negative numbers. I tested\
    \ it and it works.\n<|/ c |>\n<| c |>\n: I added a version that also sorts negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ also sorts negative numbers. I tested it and it works.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('strtolower',\
    \ $numbers);\n$numbers = array_filter($numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    , \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\"\
    , \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 10);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){return\
    \ str_pad($n, 3, '0', STR_PAD_LEFT);}, $numbers);\n$numbers = array_map(function($n){",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nI like this solution, but I wonder if there is a way to make it work for\
    \ any number of digits, not just three.\n<|/ c |>\n<| c |>\n: Yes, it can be made\
    \ to work for any number of digits. I'll post an answer in a minute.\n<|/ c |>\n\
    <| c |>\n: I've posted an answer that works for any number of digits. I hope it\
    \ helps.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip(",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `sort_numbers(\"three one five two\")` returns `\"\
    one two three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `sort_numbers(\"three one five two\")` returns `\"one two three five\"`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for negative numbers. `sort_numbers(\"three\
    \ one five two\")` returns `\"one two three five\"`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `sort_numbers(\"three one five two\")` returns\
    \ `\"one two three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `sort_numbers(\"three one five two\")` returns `\"one two three five\"\
    `.\n<|/ c |>\n<| a tags=php,sorting,string |>\n<code>\n$numbers = explode(' ',\
    \ $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't work for negative numbers. `sort_numbers(\"\
    three one five two\")` returns `\"one two three five\"`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. `sort_numbers(\"three one five two\")`\
    \ returns `\"one two three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `sort_numbers(\"three one five two\")` returns `\"one two\
    \ three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `sort_numbers(\"\
    three one five two\")` returns `\"one two three five\"`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. `sort_numbers(\"three one five two\")`\
    \ returns `\"one two three five\"`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers\
    \ = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting,string |>\n<| c |>\n", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_map(function($number)\
    \ {\n    return $number . ' ';\n}, $numbers);\n$numbers = implode($numbers);\n\
    echo $numbers;\n</code>\n<|/ a dscore=0 tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n$numbers =\
    \ array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_map(function($number) {\n \
    \   return $number . ' ';\n}, $numbers);\n$numbers = implode($numbers);\necho\
    \ $numbers;\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_map(function($number) {\n    return $number . ' ';\n}, $numbers);\n\
    $numbers = implode($numbers);\necho $numbers;", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('strtolower',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('ucfirst', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_map('strtolower', $numbers);\nsort($numbers);\n$numbers = array_map('ucfirst',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_map('strtolower', $numbers);\nsort($numbers);\n\
    $numbers = array_map('ucfirst', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_map('strtolower', $numbers);\nsort($numbers);\n$numbers =\
    \ array_map('ucfirst', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('strtolower',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('ucfirst', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_map('strtolower', $numbers);\nsort($numbers);\n\
    $numbers = array_map('uc", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if you have a number like \"one two three\"\n\
    <|/ c |>\n<| c |>\n: It works fine for me. Try it yourself.\n<|/ c |>\n<| c |>\n\
    It doesn't work for \"one two three\"\n<|/ c |>\n<| c |>\n: It works fine for\
    \ me. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work for\
    \ \"one two three\"\n<|/ c |>\n<| a tags=php,sorting |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_values($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_slice($numbers, 0, -1);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_values($numbers);\n$numbers = array_slice($numbers, 0, -1);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers = array_values($numbers);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_slice($numbers, 0, -1);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_values($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_slice($numbers, 0, -1);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers =\
    \ array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\necho implode(' ', $numbers);\n</code>\n<|/\
    \ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n\
    $numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array('zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$string = \"three one five\";\n$array = explode(\" \", $string);\nsort($array);\n\
    $string = implode(\" \", $array);\necho $string;", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. Your code is working but i want to know why my code is not\
    \ working and why my code is working with my code but not with your code. Can\
    \ you please explain me why my code is not working and why my code is working\
    \ with your code.\n<|/ c |>\n<| c |>\nThe reason why your code is not working\
    \ is because you were not using explode() correctly. Your code was trying to split\
    \ a string into an array by spaces, but you were using it incorrectly. Your code\
    \ was trying to split a string into an array by spaces, but you were using it\
    \ incorrectly. Your code was trying to split a string into an array by spaces,\
    \ but you were using it incorrectly. Your code was trying to split a string into\
    \ an array by spaces, but you were using it incorrectly. Your code was trying\
    \ to split a string into an array by spaces, but you were using it incorrectly.\
    \ Your code was trying to split a string into an array by spaces, but you were\
    \ using it incorrectly. Your code was trying to split a string into an array by\
    \ spaces, but you were using it incorrectly.\n<|/ c |>\n<| c |>\nYour code was\
    \ trying to split a string into an array by spaces, but you were using it incorrectly.\
    \ Your code was trying to split a string into an array by spaces, but you were\
    \ using it incorrectly. Your code was trying to split a string into an array by\
    \ spaces, but you were using it incorrectly. Your code was trying to split a string\
    \ into an array by spaces, but you were using it incorrectly. Your code was trying\
    \ to split a string into an array by spaces, but you were using it incorrectly.\
    \ Your code was trying to split a string into an array by spaces, but you were\
    \ using it incorrectly. Your code was trying to split a string into an array by\
    \ spaces, but you were using it incorrectly.\n<|/ c |>\n<| c |>\nYour code was\
    \ trying to split a string into an array by spaces, but you were using it incorrectly.\
    \ Your code was trying to split a string into an array by spaces, but you were\
    \ using it incorrectly. Your code was trying to split a string into an array by\
    \ spaces, but you were using it incorrectly. Your code was trying to split a string\
    \ into an array by spaces, but you were using it incorrectly. Your code was trying\
    \ to split a string into an array by spaces, but you were using it incorrectly.\
    \ Your code was trying to split a string into an array by spaces, but you were\
    \ using it incorrectly. Your code was trying to split a string into an array by\
    \ spaces, but you were ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `one\
    \ two three` instead of `one three two`.\n<|/ c |>\n<| c |>\n: It works for me\
    \ in PHP 5.3.10. Try `print_r(sort_numbers(\"one two three\"));` instead.\n<|/\
    \ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17. Both worked fine.\n\
    <|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17. Both worked fine.\n\
    <|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17. Both worked fine.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "  $numbers = explode(' ', $numbers);\n \
    \ sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three four\")` returns `one two three four` instead of `one four three\
    \ two`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my\
    \ answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to\
    \ my answer.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one\
    \ two three four\")` returns `one two three four` instead of `one four three two`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  $numbers = explode(' ', $numbers);\n \
    \ sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    , \"eleven\", \"twelve\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_map('strtolower', $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n\
    $numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_values($numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_values($numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n\
    $numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_values($numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_values($numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n\
    $numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    print_r($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis\
    \ doesn't work if there are more than 9 numbers in the string\n<|/ c |>\n<| c\
    \ |>\nIt does work if there are more than 9 numbers in the string. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me on PHP 5.3.10. `sort_numbers(\"three\
    \ one five\")` returns `\"one three five\"`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. I tested it on PHP 5.3.10 and PHP 5.3.8. Both work.\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try it yourself. I tested it on PHP 5.3.10 and PHP\
    \ 5.3.8. Both work.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = \"\
    three one five\";\n$numbers = explode(\" \", $numbers);\nsort($numbers);\n$numbers\
    \ = implode(\" \", $numbers);\necho $numbers;\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis doesn't work if there are more than 9 numbers in the string\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if there are more than 9 numbers in the string\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = \"three one five\";\n$numbers\
    \ = explode(\" \", $numbers);\nsort($numbers);\n$numbers = implode(\" \", $numbers);\n\
    echo $numbers;\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if there\
    \ are more than 9 numbers in the string\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $numbers = \"three one five\";\n$numbers = explode(\" \", $numbers);\nsort($numbers);\n\
    $numbers = implode(\" \", $numbers);\necho $numbers;\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are more than 9 numbers in the string\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = \"three one five\";\n$numbers\
    \ = explode(\" \", $numbers);\nsort($numbers);\n$numbers = ", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers =\
    \ array(\"three\", \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\nsort($numbers);\nprint_r($numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three\")` returns `one two three`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"one two three\")` returns `one two three`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `one\
    \ two three`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one\
    \ two three\")` returns `one two three`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"one two three\")` returns `one two three`.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 5);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 5);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 5);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 5);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', '", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n$numbers = implode(' ', $numbers);\n\
    echo $numbers;\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n$numbers = implode(' ', $numbers);\n\
    echo $numbers;\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map('intval',\
    \ explode(' ', $numbers));\nsort($numbers);\necho implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(\"three\"\
    , \"one\", \"five\");\n$numbers = array_map('intval', explode(' ', $numbers));\n\
    sort($numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"three\", \"one\", \"\
    five\");\n$numbers = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n\
    echo implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map('intval',\
    \ explode(' ', $numbers));\nsort($numbers);\necho implode(' ', $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"\
    three\", \"one\", \"five\");\n$numbers = array_map('intval', explode(' ', $numbers));\n\
    sort($numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"three\", \"one\", \"\
    five\");\n$numbers = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n\
    echo implode(' ', $numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ answer doesn't work for me. `sort_numbers(\"three one five\")` returns `\"one\
    \ three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used PHP 5.3.10.\
    \ Maybe you have a typo or something in your code?\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and 5.3.8 and it works. Maybe you have a typo or something\
    \ in your code?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and 5.3.8 and it\
    \ works. Maybe you have a typo or something in your code?\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and 5.3.8 and it works. Maybe you have a typo or something\
    \ in your code?\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map('strtolower',\
    \ $numbers);\n$numbers = array_map('trim', $numbers);\n$numbers = array_filter($numbers);\n\
    $numbers = array_map('strrev', $numbers);\n$numbers = array_map('trim', $numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_map('strrev', $numbers);\n\
    $numbers = array_map('trim', $numbers);\n$numbers = array_filter($numbers);\n\
    $numbers = array_map('strrev', $numbers);\n$numbers = array_map('trim', $numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_map('strrev', $numbers);\n\
    $numbers = array_map('trim', $numbers);\n$numbers = array_filter($numbers);\n\
    $numbers = array_map('strrev', $numbers);\n$numbers = array_map('trim', $numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_map('strrev', $numbers);\n\
    $numbers = array_map('trim', $numbers);\n$numbers = array_filter($numbers);\n\
    $numbers = array_map('strrev', $numbers);\n$numbers = array_map('trim', $numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_map('strrev', $numbers);\n\
    $numbers = array_map('trim', $numbers);\n$numbers = array_filter($numbers);\n\
    $numbers = array_map('strrev', $numbers);\n$numbers = array_map('trim', $numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_map('strrev', $numbers);\n\
    $numbers = array_map('trim', $numbers);\n$numbers = array_filter($numbers);\n\
    $numbers = array_map('strrev', $numbers);\n$numbers = array_map('trim', $numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_map('strrev', $numbers);\n\
    $numbers = array_map('", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<|\
    \ a dscore=1 |>\n<code>\n<?php\n$string = 'one two three four five six seven eight\
    \ nine';\n$array = explode(' ', $string);\nsort($array);\n$string = implode('\
    \ ', $array);\necho $string;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n\
    <code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers = array(\"three\"\
    , \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tag", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    , \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\"\
    , \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 10);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_map(function($v){return $v*10;},\
    \ $numbers);\n$numbers = array_map(function($v){return $v*100;}, $numbers);\n\
    $numbers = array_map(function($v){return $v*1000;}, $numbers);\n$numbers = array_map(function($v){return\
    \ $v*10000;}, $numbers);\n$numbers = array_map(function($v){return $v*100000;},\
    \ $numbers);\n$numbers = array_map(function($v){return $v*1000000;}, $numbers);\n\
    $numbers = array_map(function($v){return $v*10000000;}, $numbers);\n$numbers =\
    \ array_map(function($v){return $v*100000000;}, $numbers);\n$numbers = array_map(function($v){return\
    \ $v*1000000000;}, $numbers);\n$numbers = array_map(function($v){return $v*10000000000;},\
    \ $numbers);\n$numbers = array_map(function($v){return $v*100000000000;}, $numbers);\n\
    $numbers = array_map(function($v){return $v*1000000000000;}, $numbers);\n$numbers\
    \ = array_map(function($v){return $v*10000000000000;}, $numbers);\n$numbers =\
    \ array_map(function($v){return $v*100000000000000;}, $numbers);\n$numbers = array_map(function($v){return\
    \ $v*1000000000000000;}, $numbers);\n$numbers = array_map(function($v){return\
    \ $v*100000000000000000;}, $numbers);\n$numbers = array_map(function($v){return ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$string = \"one two three four five six seven eight nine\";\n$array = explode(\"\
    \ \", $string);\nsort($array);\n$string = implode(\" \", $array);\necho $string;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$array = array_map('intval', array_flip($array));\n\
    asort($array);\n$array = array_map('strval', $array);\n$array = array_reverse($array);\n\
    $array = array_combine($array, $array);\nprint_r($array);", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=sorting,php |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I used PHP 5.3.10. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it exactly. I'm using\
    \ PHP 5.3.10 as well. Maybe it's because I'm running it on a Mac?\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.3.10 and it works. Are you sure you copied the code\
    \ correctly? Maybe you didn't copy the function definition correctly?\n<|/ c |>\n\
    <| c |>\nI copied the function definition exactly as you wrote it. I'm running\
    \ it on a Mac.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the numbers are in\
    \ any order other than ascending or descending. For example, `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\n- I see what\
    \ you mean. I've updated my answer to include a function that sorts numbers in\
    \ any order you like.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($number", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n\
    <| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = ", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| a tags=sorting,php,string |>\n\
    <code>\n$numbers = \"one two three four five six seven eight nine\";\n$numbers\
    \ = explode(\" \", $numbers);\nsort($numbers);\n$numbers = implode(\" \", $numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly and doesn't require any additional libraries.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and doesn't require any additional\
    \ libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and doesn't require any additional libraries.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and doesn't require any additional libraries.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers\
    \ = \"one two three four five six seven eight nine\";\n$numbers = explode(\" \"\
    , $numbers);\nsort($numbers);\n$numbers = implode(\" \", $numbers);\n</code>\n\
    <|/ a tags=sorting,php,string |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and doesn't require any additional libraries.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$number", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\");\nsort($numbers);\n\
    print_r($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=2 |>\n\
    <code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers = explode(' ',\
    \ $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,php,arrays |>\n\
    <code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ so much! This was exactly what I was looking for. :)\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `.\n<|/ c |>\n<| c |>\nIt works for me on PHP 5.3.10. Are you sure you copied\
    \ the code correctly? I tested it on PHP 5.3.10 and PHP 5.2.17. Maybe you didn't\
    \ copy the code correctly?\n<|/ c |>\n<| c |>\nI copied the code exactly as you\
    \ wrote it. I don't know why it isn't working for me. I'm using PHP 5.3.10. Maybe\
    \ it's because I'm running it on Windows?\n<|/ c |>\n<| c |>\nI tested it on PHP\
    \ 5.2.17 and it works fine. Maybe you didn't copy the code correctly? I tested\
    \ it on PHP 5.3.10 and PHP 5.2.17. Maybe you didn't copy the code correctly?\n\
    <|/ c |>\n<| c |>\nI copied the code exactly as you wrote it. I don't know why\
    \ it isn't working for me. I'm using PHP 5.3.10. Maybe it's because I'm running\
    \ it on Windows?\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = explode", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    print_r($numbers);", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<|\
    \ c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `one\
    \ two three`.\n<|/ c |>\n<| c |>\nI tested it and it worked for me. Maybe you\
    \ didn't copy the code correctly? I edited my answer to include the code I tested.\n\
    <|/ c |>\n<| c |>\nI copied your code exactly, and it still returns `one two three`.\n\
    <|/ c |>\n<| c |>\nI tested it again and it worked for me. Maybe you didn't copy\
    \ the code correctly? I edited my answer to include the code I tested.\n<|/ c\
    \ |>\n<| c |>\nI copied your code exactly, and it still returns `one two three`.\n\
    <|/ c |>\n<| a dscore=4 tags=php,sorting |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| a dscore=2 |>\n\
    <code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\nprint_r($numbers);",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n<?php\n\
    $string = 'one two three four five six seven eight nine';\n$array = explode('\
    \ ', $string);\nsort($array);\n$string = implode(' ', $array);\necho $string;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work if the numbers are in descending order. Try `sort_numbers(\"three\
    \ one five two\")`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It sorts\
    \ numbers in ascending order.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself.\
    \ It sorts numbers in ascending order.\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it yourself. It sorts numbers in ascending order.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it yourself. It sorts numbers in ascending order.\n<|/ c |>\n<| a\
    \ tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\n\
    $numbers = implode($numbers);\necho $numbers;", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\n\
    \    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n\
    \    'six',\n    'seven',\n    'eight',\n    'nine',\n);\n\n$numbers = array_flip($numbers);\n\
    ksort($numbers);\n$numbers = array_flip($numbers);\n\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\n    'zero',\n\
    \    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n\
    \    'seven',\n    'eight',\n    'nine',\n);\n\n$numbers = array_flip($numbers);\n\
    ksort($numbers);\n$numbers = array_flip($numbers);\n\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\n    'zero',\n\
    \    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n\
    \    'seven',\n    'eight',\n    'nine',\n);\n\n$numbers = array_flip($numbers);\n\
    ksort($numbers);\n$numbers = array_flip($numbers);\n\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\n    'zero',\n\
    \    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n\
    \    'seven',\n    'eight',\n    'nine',\n);\n\n$numbers = array_flip($numbers);\n\
    ksort($numbers);\n$numbers = array_flip($numbers);\n\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\n    'zero',\n\
    \    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n\
    \    'seven',\n    'eight',\n    'nine", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php |>\n<| a tags=sorting,php\
    \ |>\n<code>\n$numbers = array(\n    'zero',\n    'one',\n    'two',\n    'three',\n\
    \    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n\
    );\n\n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n\
    $numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers\
    \ = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\
    \n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers\
    \ = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\
    \n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers\
    \ = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\
    \n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers\
    \ = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\
    \n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers\
    \ = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\
    \n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers\
    \ = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\
    \n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers\
    \ = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\
    \n$numbers = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n$numbers\
    \ = array_flip($numbers);\n\n$numbers = array_flip($numbers);\n\n", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work. `array_map` will convert\
    \ all values to integers, not just the ones that are numbers. Try it with `\"\
    one two three\"`.\n<|/ c |>\n<| c |>\n: It will convert all values to integers,\
    \ not just the ones that are numbers. Try it with `\"one two three\"`.\n<|/ c\
    \ |>\n<| c |>\n: It will convert all values to integers, not just the ones that\
    \ are numbers. Try it with `\"one two three\"`.\n<|/ c |>\n<| c |>\n: It will\
    \ convert all values to integers, not just the ones that are numbers. Try it with\
    \ `\"one two three\"`.\n<|/ c |>\n<| c |>\n: It will convert all values to integers,\
    \ not just the ones that are numbers. Try it with `\"one two three\"`.\n<|/ c\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `array_map`\
    \ will convert all values to integers, not just the ones that are numbers. Try\
    \ it with `\"one two three\"`.\n<|/ c |>\n<| c |>\n: It will convert all values\
    \ to integers, not just the ones that are numbers. Try it with `\"one two three\"\
    `.\n<|/ c |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a d", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `.\n<|/ c |>\n<| c |>\n: It works for me (PHP 5.3.5). Are you sure you're using\
    \ PHP 5.3?\n<|/ c |>\n<| c |>\n: I added a version that works in PHP 5.2.\n<|/\
    \ c |>\n<| c |>\n: I added a version that works in PHP 5.2.\n<|/ c |>\n<| c |>\n\
    : I added a version that works in PHP 5.2.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    print_r($numbers);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for\
    \ me. `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\"\
    )` returns `\"one three five\"`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work if the numbers\
    \ are in descending order. `sort_numbers(\"one two three\")` returns `one three\
    \ two`.\n<|/ c |>\n<| c |>\n: It doesn't work if you use spaces to separate numbers.\
    \ Try `sort_numbers(\"one two three\")`.\n<|/ c |>\n<| c |>\n: It doesn't work\
    \ if you use spaces to separate numbers. Try `sort_numbers(\"one two three\")`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if you use spaces to separate numbers. Try\
    \ `sort_numbers(\"one two three\")`.\n<|/ c |>\n<| c |>\n: It doesn't work if\
    \ you use spaces to separate numbers. Try `sort_numbers(\"one two three\")`.\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c |>\n\
    <| c |>\n: I tested it and it works. What version of PHP are you using?\n<|/ c\
    \ |>\n<| c |>\n: I tested it again and it works. I must have made a mistake when\
    \ I first tested it.\n<|/ c |>\n<| c |>\n: I tested it again and it works. I must\
    \ have made a mistake when I first tested it.\n<|/ c |>\n<| c |>\n: I tested it\
    \ again and it works. I must have made a mistake when I first tested it.\n<|/\
    \ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n$numbers = array(\"three\"\
    , \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", " \
    \   $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\n$numbers = array_map(\"intval\", $numbers);\n\
    sort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\",\
    \ \"five\");\n$numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n$numbers\
    \ = array_map(\"strval\", $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ tags=php,sorting |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\n\
    $numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n$numbers = array_map(\"\
    strval\", $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map(\"intval\"\
    , $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\"\
    , \"five\");\n$numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n$numbers\
    \ = array_map(\"strval\", $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ dscore=1 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\n$numbers\
    \ = array_map(\"intval\", $numbers);\nsort($numbers);\n$numbers = array_map(\"\
    strval\", $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map(\"intval\"\
    , $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"\
    three\", \"one", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\"\
    , \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map('strtolower', $numbers);\n$numbers = array_filter($numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 2, \"0\", STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 2, \"0\", STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 2, \"0\", STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 2, \"0\", STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$number", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = array(\n    'one',\n    'two',\n\
    \    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n\
    \    'nine',\n    'ten',\n    'eleven',\n    'twelve',\n    'thirteen',\n    'fourteen',\n\
    \    'fifteen',\n    'sixteen',\n    'seventeen',\n    'eighteen',\n    'nineteen',\n\
    \    'twenty',\n    'thirty',\n    'forty',\n    'fifty',\n    'sixty',\n    'seventy',\n\
    \    'eighty',\n    'ninety',\n    'hundred',\n    'thousand',\n    'million',\n\
    \    'billion',\n    'trillion',\n    'quadrillion',\n    'quintillion',\n   \
    \ 'sextillion',\n    'septillion',\n    'octillion',\n    'nonillion',\n    'decillion',\n\
    \    'undecillion',\n    'duodecillion',\n    'tredecillion',\n    'quattuordecillion',\n\
    \    'quindecillion',\n    'sexdecillion',\n    'septendecillion',\n    'octodecillion',\n\
    \    'novemdecillion',\n    'vigintillion',\n    'unvigintillion',\n    'duovigintillion',\n\
    \    'trevigintillion',\n    'quattuorvigintillion',\n    'quinvigintillion',\n\
    \    'sexvigintillion',\n    'septenvigintillion',\n    'octovigintillion',\n\
    \    'novemvigintillion',\n    'unvigintillion',\n    'duovigintillion',\n   \
    \ 'trevigintillion',\n    'quattuorvigintillion',\n    'quinvigintillion',\n \
    \   'sexvigintillion',\n    'septenvigintillion',\n    'octovigintillion',\n \
    \   'novemvigintillion',\n    'vigintillion',\n    'unvigintillion',\n    'duovigintillion',\n\
    \    'trevigintillion',\n    'qu", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ this solution, but I believe it would be better to use a `for` loop instead\
    \ of `foreach`\n<|/ c |>\n<| c |>\nI agree with you, although I didn't want to\
    \ change too much of the OP's code. I'll add an example using `for` loops.\n<|/\
    \ c |>\n<| c |>\nI added an example using `for` loops.\n<|/ c |>\n<| c |>\nI added\
    \ an example using `for` loops.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,php,arrays |>\n<code>\n<?php\n$numbers =\
    \ array(\"three\", \"one\", \"five\");\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\necho implode(' ',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$numbers = array(\"\
    three\", \"one\", \"five\");\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work if you have numbers like \"one two three\"\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have numbers like \"one two three\"\
    \n<|/ c |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting dscore=5 |>\n\
    <| c |>\nThis doesn't work if you have numbers like \"one two three\"\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have numbers like \"one two three\"\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\n\
    This doesn't work if you have numbers like \"one two three\"\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=4 |>\n\
    <code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=4 |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=4 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=4 |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = imp", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so much for your\
    \ answer! I appreciate it! I did try it out and it worked perfectly! I appreciate\
    \ your help and I hope you have a great day!\n<|/ c |>\n<| c |>\nNo problem! Glad\
    \ I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for the answer. I am not able to understand how this works. Can you please explain\
    \ it a little bit?\n<|/ c |>\n<| c |>\nThe function `sort_numbers` takes the string\
    \ `three one five` and splits it into an array of strings `[\"three\", \"one\"\
    , \"five\"]`. The `sort` function sorts the array in ascending order (smallest\
    \ to largest). Then the function `implode` joins the array back into a string\
    \ `one three five`.\n<|/ c |>\n<| c |>\nThanks for the explanation. I am still\
    \ not able to understand how this works. Can you please explain it a little bit?\n\
    <|/ c |>\n<| c |>\nThe `explode` function splits the string into an array of strings.\
    \ `sort` sorts the array in ascending order (smallest to largest). `implode` joins\
    \ the array back into a string `one three five`.\n<|/ c |>\n<| c |>\nThanks for\
    \ the explanation. I am still not able to understand how this works. Can you please\
    \ explain it a little bit?\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n\
    $string = \"three one five\";\n$array = explode(\" \", $string);\nsort($array);\n\
    $string = implode(\" \", $array);\necho $string;", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$string =\
    \ \"one two three four five six seven eight nine\";\n$array = explode(\" \", $string);\n\
    sort($array);\n$string = implode(\" \", $array);\necho $string;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_LEFT);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_BOTH);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_LEFT);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_BOTH);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_LEFT);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_BOTH);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_LEFT);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_BOTH);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_LEFT);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_BOTH);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_LEFT);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_BOTH);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_LEFT);},\
    \ $numbers);\n$numbers = array_map(function($n){return str_pad($n, 3, '0', STR_PAD_BOTH);},\
    \ $numbers);\n$numbers = array_map(function($n){return "]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
