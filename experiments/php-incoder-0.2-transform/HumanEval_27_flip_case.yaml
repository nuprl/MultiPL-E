name: HumanEval_27_flip_case
language: php
prompt: "<?php\n// For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case($string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
  ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    return strtoupper(strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\'')));\n}\n", "    return preg_replace('/([a-z])/', '$U$1$1', $string);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for all cases, e.g.\
    \ `flip_case(\"\xC6\")` returns `\xD8`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for all cases, e.g. `flip_case(\"\xC6\")` returns `\xD8`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for all cases, e.g. `flip_case(\"\xC6\")` returns `\xD8`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for all cases, e.g. `flip_case(\"\xC6\")`\
    \ returns `\xD8`.\n<|/ c |>\n<| c |>\nThis doesn't work for all cases, e.g. `flip_case(\"\
    \xC6\")` returns `\xD8`.\n<|/ c |>\n<| a |>\n<code>\n<?php", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], '', strtolower($string))));\n\
    }\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'')));\n}\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C',\
    \ 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K',\
    \ 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\
    \ 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '')));\n}", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\\\\\'', \"\\n\" =>\
    \ '\\\\n', \"\\r\" => '\\\\r', \"\\t\" => '\\\\t', \"\\x00\" => '\\\\x00', \"\\\
    x01\" => '\\\\x01', \"\\x02\" => '\\\\x02', \"\\x03\" => '\\\\x03', \"\\x04\"\
    \ => '\\\\x04', \"\\x05\" => '\\\\x05', \"\\x06\" => '\\\\x06', \"\\x07\" => '\\\
    \\x07', \"\\x08\" => '\\\\x08', \"\\x09\" => '\\\\x09', \"\\x0a\" => '\\\\x0a',\
    \ \"\\x0b\" => '\\\\x0b', \"\\x0c\" => '\\\\x0c', \"\\x0d\" => '\\\\x0c', \"\\\
    x0e\" => '\\\\x0c', \"\\x0f\" => '\\\\x0c', \"\\x10\" => '\\\\x0c', \"\\x11\"\
    \ => '\\\\x0c', \"\\x12\" => '\\\\x0c', \"\\x13\" => '\\\\x0c', \"\\x14\" => '\\\
    \\x0c', \"\\x15\" => '\\\\x0c', \"\\x16\" => '\\\\x0c', \"\\x17\" => '\\\\x0c',\
    \ \"\\x18\" => '\\\\x0c', \"\\x19\" => '\\\\x0c', \"\\x1a\" => '\\\\x0c', \"\\\
    x1b\" => '\\\\x0c', \"\\x1c\" => '\\\\x0c', \"\\x1d\" => '\\\\x0c', \"\\x1e\"\
    \ => '\\\\x0c', \"\\x1f\" => '\\\\x0c', \"\\x20\" => '\\\\x0c', \"\\x21\" => '\\\
    \\x0c', \"\\x22\" => '\\\\x0c', \"\\x23\" => '\\\\x0c', \"\\x24\" => '\\\\x0c',\
    \ \"\\x25\" => '\\\\x0c', \"\\x26\" => '\\\\x0c', \"\\x27\" => '\\\\x0c', \"\\\
    x28\" => '\\\\x0c', \"\\x29\" => '\\\\x0c', \"\\x2a\" => '\\\\x0c', \"\\x2b\"\
    \ => '\\\\x0c', \"\\x2c\" => '\\\\x0c', \"\\x2d\" => '\\\\x0c', \"\\x2e\" => '\\\
    \\x0c', \"\\x2f\" => '\\\\x0c', \"\\x30\" => '\\\\x0c', \"\\x31\" => '\\\\x0c',\
    \ \"\\x32\" => '\\\\x0c', \"\\x33\" => '\\\\x0c', \"\\x34\" => '\\\\x0c', \"\\\
    x35\" => '\\\\x0c', \"\\x36\" => '\\\\x0c', \"\\x37\" => '\\\\x0c', \"\\x38\"\
    \ => '\\\\x0c', \"\\x39\" => '\\\\x0c', \"\\x3a\" => '\\\\x0c', \"\\x3b\" => '\\\
    \\x0c', \"\\x3c\" => '\\\\x0c', \"\\x3d\" => '\\\\x0c', \"\\x3e\" => '\\\\x0c',\
    \ \"\\x3f\" => '\\\\x0c', \"\\x40\" => '\\\\x0c', \"\\x41\" => '\\\\x0c', \"\\\
    x42\" => '\\\\x0c', \"\\x43\" => '\\\\x0c', \"\\x44\" => '\\\\x0c', \"\\x45\"\
    \ => '\\\\x0c', \"\\x46\" => '\\\\x0c', \"\\x47\" => '\\\\x0c', \"\\x48\" => '\\\
    \\x0c', \"\\x49\" => '\\\\x0c', \"\\x4a\" => '\\\\x0c', \"\\x4b\" => '\\\\x0c',\
    \ \"\\x4c", "    return strtr(strtolower($string), array('!' => '!', '?' => '?'));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "   \
    \ return strtoupper(preg_replace('/./u', '',\n        str_replace(['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z'],\n        $string)));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '\\\\' => '\\\\\\\\', \"\
    '\" => '\\\\\\'', \"\\n\" => '\\\\n', '\\r' => '\\\\r', \"\\t\" => '\\\\t', \"\
    \\x00\" => '\\\\x00', \"\\x01\" => '\\\\x01', \"\\x02\" => '\\\\x02', \"\\x03\"\
    \ => '\\\\x03', \"\\x04\" => '\\\\x04', \"\\x05\" => '\\\\x05', \"\\x06\" => '\\\
    \\x06', \"\\x07\" => '\\\\x07', \"\\x08\" => '\\\\x08', \"\\x09\" => '\\\\x09',\
    \ \"\\x0a\" => '\\\\x0a', \"\\x0b\" => '\\\\x0b', \"\\x0c\" => '\\\\x0c', \"\\\
    x0d\" => '\\\\x0c', \"\\x0e\" => '\\\\x0e', \"\\x0f\" => '\\\\x0f', \"\\x10\"\
    \ => '\\\\x10', \"\\x11\" => '\\\\x11', \"\\x12\" => '\\\\x12', \"\\x13\" => '\\\
    \\x13', \"\\x14\" => '\\\\x14', \"\\x15\" => '\\\\x15', \"\\x16\" => '\\\\x16',\
    \ \"\\x17\" => '\\\\x17', \"\\x18\" => '\\\\x18', \"\\x19\" => '\\\\x19', \"\\\
    x1a\" => '\\\\x1a', \"\\x1b\" => '\\\\x1b', \"\\x1c\" => '\\\\x1c', \"\\x1d\"\
    \ => '\\\\x1d', \"\\x1e\" => '\\\\x1e', \"\\x1f\" => '\\\\x1f', \"'\" => '\\'')));\n\
    }\n", "    return strtoupper(preg_replace('/./u', '',\n        strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'))\n    ));\n}\n", "    return preg_replace('/./u',\
    \ 'u', $string);\n}\n", "    return preg_replace('/./u', 'u', strtoupper($string));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'')));\n}", "    return strtoupper(preg_replace('/./u', '',\n       \
    \ str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'],\n\
    \        $string)));\n}", "    return strtoupper(preg_replace('/./u', '',\n  \
    \      str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}\n", "    return strtoupper(preg_replace('/./u', '',\n\
    \        str_replace(' ', '', ucwords(strtolower($string)))));\n}\n", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI love this solution. Very elegant. Thanks!\n\
    <|/ c |>\n<| c |>\nI love this solution. Very elegant. Thanks!\n<|/ c |>\n<| c\
    \ |>\nI love this solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\nI love this\
    \ solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\nI love this solution. Very\
    \ elegant. Thanks!\n<|/ c |>\n<| a tags=string,php,replace |>\n<code>\n$string\
    \ = \"Hello World!\";\n$string = strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\''))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if\
    \ you have a string like \"He said 'Hello!'\"\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"He said 'Hello!'\"\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a string like \"He said 'Hello!'\"\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have a string like \"He said 'Hello!'\"\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"He said 'Hello!'\"\
    \n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = strtr($string, array(\"!\" =>\
    \ \"!!\", \"?\" => \"??\", \"'\" => \"\\'\"));\n</code>\n<|/ a tags=string,php,replace\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"He said 'Hello!'\"\
    \n<|/ c |>\n<| c |>\nThis doesn't work if you have a string like \"He said 'Hello!'\"\
    \n<|/ c |>\n<| c |>\nThis doesn't work if you have a string like \"He said 'Hello!'\"\
    \n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = strtr($string, array(\"!\" =>\
    \ \"!!\", \"?\" => \"??\", \"'\" => \"\\'\"));\n</code>\n<|/ a ", "    return\
    \ strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/', '$1', $string));\n}\n",
  "    return strtoupper(preg_replace('/([a-z])/', '$1', $string));\n}\n", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', '',\n  \
    \      str_replace(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\
    \ 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n   \
    \     ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        $string)));\n\
    }", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\n\
    \            'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\n\
    \            'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\n\
    \            't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z',\n\
    \            'A'=>'a', 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g',\n\
    \            'H'=>'h', 'I'=>'i', 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n',\n\
    \            'O'=>'o', 'P'=>'p', 'Q'=>'q', 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u',\n\
    \            'V'=>'v', 'W'=>'w', 'X'=>'x', 'Y'=>'y', 'Z'=>'z')));\n}", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '", "    return\
    \ preg_replace('/([a-z])/i', '\\U$1', $string);\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '\\\\' => '\\\\\\\\', \"\
    '\" => '\\\\\\'', \"\\r\" => '\\\\r', \"\\n\" => '\\\\n', \"\\t\" => '\\\\t',\
    \ \"\\x00\" => '\\\\x00', \"\\x01\" => '\\\\x01', \"\\x02\" => '\\\\x02', \"\\\
    x03\" => '\\\\x03', \"\\x04\" => '\\\\x04', \"\\x05\" => '\\\\x05', \"\\x06\"\
    \ => '\\\\x06', \"\\x07\" => '\\\\x07', \"\\x08\" => '\\\\x08', \"\\x09\" => '\\\
    \\x09', \"\\x0a\" => '\\\\x0a', \"\\x0b\" => '\\\\x0b', \"\\x0c\" => '\\\\x0c',\
    \ \"\\x0d\" => '\\\\x0c', \"\\x0e\" => '\\\\x0e', \"\\x0f\" => '\\\\x0f', \"\\\
    x10\" => '\\\\x10', \"\\x11\" => '\\\\x11', \"\\x12\" => '\\\\x12', \"\\x13\"\
    \ => '\\\\x13', \"\\x14\" => '\\\\x14', \"\\x15\" => '\\\\x15', \"\\x16\" => '\\\
    \\x16', \"\\x17\" => '\\\\x17', \"\\x18\" => '\\\\x18', \"\\x19\" => '\\\\x19',\
    \ \"\\x1a\" => '\\\\x1a', \"\\x1b\" => '\\\\x1b', \"\\x1c\" => '\\\\x1c', \"\\\
    x1d\" => '\\\\x1d', \"\\x1e\" => '\\\\x1e', \"\\x1f\" => '\\\\x1f', \"\\xff\"\
    \ => '\\\\xff', \"\\x80\" => '\\\\x80', \"\\x81\" => '\\\\x81', \"\\x82\" => '\\\
    \\x82', \"\\x83\" => '\\\\x83', \"\\x84\" => '\\\\x84', \"\\x85\" => '\\\\x85',\
    \ \"\\x86\" => '\\\\x86', \"\\x87\" => '\\\\x87', \"\\x88\" => '\\\\x88', \"\\\
    x89\" => '\\\\x89', \"\\x8a\" => '\\\\x8a', \"\\x8b\" => '\\\\x8b', \"\\x8c\"\
    \ => '\\\\x8c', \"\\x8d\" => '\\\\x8d', \"\\x8e\" => '\\\\x8e', \"\\x8f\" => '\\\
    \\x8f', \"\\x90\" => '\\\\x90', \"\\x91\" => '\\\\x91', \"\\x92\" => '\\\\x92',\
    \ \"\\x93\" => '\\\\x93', \"\\x94\" => '\\\\x94', \"\\x95\" => '\\\\x95', \"\\\
    x96\" => '\\\\x96', \"\\x97\" => '\\\\x97', \"\\x98\" => '\\\\x98', \"\\x99\"\
    \ => '\\\\x99', \"\\x9a\" => '\\\\x9a', \"\\x9b\" => '\\\\x9b', \"\\x9c\" => '\\\
    \\x9c', \"\\x9d\" => '\\\\x9d', \"\\x9e\" => '\\\\x9e', \"\\x9f\" => '\\\\x9f',\
    \ \"\\xa0\" => '\\\\xa0', \"\\xa1\" => '\\\\xa1', \"\\xa2\" => '\\\\xa2', \"\\\
    xa3\" => '\\\\xa3', \"\\xa4\" => '\\\\xa4', \"\\xa5\" => '\\\\xa5', \"\\xa6\"\
    \ => '\\\\xa6', \"\\xa7\" => '\\\\xa7', \"\\xa8\" => '\\\\xa8', \"\\xa9\" => '\\\
    \\xa9', \"\\xaa\" => '\\\\xaa', \"\\xab", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'A', 'I', 'O', 'U'], \n        ['A', 'a', 'I',\
    \ 'o', 'U'], $string)));\n}\n", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\\
    '' => '\\'\\'', '(' => '(', ')' => ')', ';' => ';', ',' => '', \"'\" => '\\'',\
    \ ':' => '::', ';' => '', '=' => '=', '+' => '+', '*' => '*', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' =>\
    \ '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '\\'')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\'\\'\\'',\
    \ '(' => '(', ')' => ')', '{' => '{', '}' => '}')));\n}", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        strtr($string, array('h' => 'H', 'i' => 'I', 'l' => 'L', 'o' =>\
    \ 'O', 'u' => 'U', 'y' => 'Y', 'o' => 'O', 'a' => 'a', 'e' => 'e', 'y' => 'y',\
    \ 'i' => 'i', 'o' => 'o', 'u' => 'u', 's' => 'S', 't' => 'T', 'a' => 'a', 'e'\
    \ => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o', 'u' => 'u', 's' => 'S', 't' => 'T',\
    \ 'a' => 'a', 'e' => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o', 'u' => 'u', 's'\
    \ => 'S', 't' => 'T', 'a' => 'a', 'e' => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o',\
    \ 'u' => 'u', 's' => 'S', 't' => 'T', 'a' => 'a', 'e' => 'e', 'y' => 'y', 'i'\
    \ => 'i', 'o' => 'o', 'u' => 'u', 's' => 'S', 't' => 'T', 'a' => 'a', 'e' => 'e',\
    \ 'y' => 'y', 'i' => 'i', 'o' => 'o', 'u' => 'u', 's' => 'S', 't' => 'T', 'a'\
    \ => 'a', 'e' => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o', 'u' => 'u', 's' => 'S',\
    \ 't' => 'T', 'a' => 'a', 'e' => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o', 'u'\
    \ => 'u', 's' => 'S', 't' => 'T', 'a' => 'a', 'e' => 'e', 'y' => 'y', 'i' => 'i',\
    \ 'o' => 'o', 'u' => 'u', 's' => 'S', 't' => 'T', 'a' => 'a', 'e' => 'e', 'y'\
    \ => 'y', 'i' => 'i', 'o' => 'o', 'u' => 'u', 's' => 'S', 't' => 'T', 'a' => 'a',\
    \ 'e' => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o', 'u' => 'u', 's' => 'S', 't'\
    \ => 'T', 'a' => 'a', 'e' => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o', 'u' => 'u',\
    \ 's' => 'S', 't' => 'T', 'a' => 'a', 'e' => 'e', 'y' => 'y', 'i' => 'i', 'o'\
    \ => 'o', 'u' => 'u', 's' => 'S', 't' => 'T', 'a' => 'a', 'e' => 'e', 'y' => 'y',\
    \ 'i' => 'i', 'o' => 'o', 'u' => 'u', 's' => 'S', 't' => 'T', 'a' => 'a', 'e'\
    \ => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o', 'u' => 'u', 's' => 'S', 't' => 'T',\
    \ 'a' => 'a', 'e' => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o', 'u' => 'u', 's'\
    \ => 'S', 't' => 'T', 'a' => 'a', 'e' => 'e', 'y' => 'y', 'i' => 'i', 'o' => 'o',\
    \ 'u' => '", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' =>\
    \ '(', ')' => ')', '*' => '*', ',' => '', ')' => '', ';' => '', ':' => '', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '", "    return strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '\\U$1', $string));\n}", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z'],\n        $string)));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '\\U$1', $string));\n}", "    return strtoupper(strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' =>\
    \ '&&', '\\'' => '\\'\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', \"'\"\
    \ => '\\'', ':' => '', ';' => '', '=' => '', '+' => '+', ',' => '', '=' => '',\
    \ '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+',\
    \ ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '',\
    \ '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '',\
    \ '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+',\
    \ ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '',\
    \ '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '',\
    \ '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+',\
    \ ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '',\
    \ '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '',\
    \ '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+',\
    \ ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '',\
    \ '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '',\
    \ '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+',\
    \ ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '',\
    \ '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '',\
    \ '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+',\
    \ ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '',\
    \ '=' => '', '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '', '=' => '',\
    \ '+' => '+', ',' => '', '=' => '', '+' => '+', ',' => '", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}", " \
    \   return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '(' =>\
    \ '(', ')' => ')', '*' => '***', '+' => '++', ',' => '+++', '/' => '//', ':' =>\
    \ '::', ';' => ';;', '<' => '<<', '=' => '==', '>' => '>>', '?' => '??', '@' =>\
    \ '@@', '[' => '[', ']' => ']', '{' => '{', '}' => '}', '|' => '|', '\\\\' =>\
    \ '\\\\\\\\', '^' => '^', '~' => '~'));\n}", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return preg_replace('/\\B([A-Z])/', '\\U$1', $string);\n\
    }", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        $string)));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '\\\
    U$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'\\'',\
    \ '\"' => '\\\"\\\"', '(' => '(', ')' => ')', '{' => '{', '}' => '}')));\n}\n",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\', \"'\" => \"\\'\\'\")));\n}\n",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '')));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' =>\
    \ '??', '\\'' => '\\'')));\n}\n", "    return preg_replace('/./u', 'u', $string);\n\
    }\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(',\
    \ ')' => ')', '*' => '*', ',' => '', ')' => '', ';' => '', ':' => '', '=' => '',\
    \ '+' => '++', '=' => '', '>' => '', '<' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '',\
    \ '=' => '', '=' => '', '", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}",
  "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtr($string, array('a'=>'A', 'b'=>'B',\
    \ 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J',\
    \ 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R',\
    \ 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n",
  "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C',\
    \ 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K',\
    \ 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\
    \ 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n",
  "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like this solution, but I feel like it could be improved\
    \ by using preg_replace_callback() instead of preg_replace(). preg_replace_callback()\
    \ allows you to specify a callback function that will perform the replacement\
    \ for you. preg_replace() will perform the replacement on the entire string and\
    \ return the modified string. preg_replace_callback() will perform the replacement\
    \ on the entire string and return the modified string and perform the replacement\
    \ on the returned string.\n<|/ c |>\n<| c |>\nI agree with you, preg_replace_callback()\
    \ is more elegant and probably more efficient. I've updated my answer accordingly.\n\
    <|/ c |>\n<| c |>\nI like this solution, but I feel like it could be improved\
    \ by using preg_replace_callback() instead of preg_replace(). preg_replace_callback()\
    \ allows you to specify a callback function that will perform the replacement\
    \ for you. preg_replace() will perform the replacement on the entire string and\
    \ return the modified string. preg_replace_callback() will perform the replacement\
    \ on the entire string and return the modified string and perform the replacement\
    \ on the returned string.\n<|/ c |>\n<| a dscore=5 tags=php,string |>\n<code>\n\
    $string = strtoupper($string);\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to convert all lowercase characters to uppercase and\
    \ all uppercase characters to lowercase.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to convert all lowercase characters to uppercase and\
    \ all uppercase characters to lowercase.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to convert all lowercase characters to uppercase and\
    \ all uppercase characters to lowercase.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to convert all lowercase characters to uppercase and\
    \ all uppercase characters to lowercase.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to convert all lowercase characters to uppercase and\
    \ all uppercase characters to lowercase.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $string = strtoupper($string);\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis\
    \ doesn't answer the question. He wants to convert all lowercase characters to\
    \ uppercase and all ", "    return strtoupper(preg_replace('/./u', '',\n     \
    \   str_replace(['a', 'A', 'I', 'I', 'i', 'I', 'o', 'O', 'O', 'u', 'U'], \n  \
    \      ['A', 'a', 'I', 'i', 'I', 'o', 'O', 'o', 'U', 'U'], $string)));\n}\n",
  "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a', 'A',\
    \ 'b', 'B', 'c', 'C', 'd', 'D', 'e','E', 'f','F', 'g', 'G', 'h','H', 'i','I',\
    \ 'j','J', 'k','K', 'l','L', 'm','M', 'n','N', 'o','O', 'p','P', 'q','Q', 'r','R',\
    \ 's','S', 't','T', 'u','U', 'v','V', 'w','W', 'x','X', 'y','Y', 'z','Z', ' '],\
    \ \n        ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e','E', 'f','F', 'g', 'G',\
    \ 'h','H', 'i','I', 'j','J', 'k','K', 'l','L', 'm','M', 'n','N', 'o','O', 'p','P',\
    \ 'q','Q', 'r','R', 's','S', 't','T', 'u','U', 'v','V', 'w','W', 'x','X', 'y','Y',\
    \ 'z','Z'], $string)));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\')));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a',\
    \ 'A', 'I', 'O', 'U'], \n            ['b', 'B', 'c', 'C', 'd'], $string)));\n\
    }\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'')));\n}\n", "    return strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '(' => '(', ')' => ')', '[' => '[', ']'\
    \ => ']', '{' => '{', '}' => '}'));\n}\n", "    return strtoupper(strtr($string,\
    \ 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n\
    }\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return\
    \ strtoupper(preg_replace('/([a-z])/i', '\\U$1', $string));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '\\\\1',\
    \ $string));\n}\n", "    return strtoupper(mb_convert_case($string, MB_CASE_TITLE,\
    \ \"UTF-8\"));\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| a dscore=5 |>\n<code>", "    return strtoupper(preg_replace('/./u', 'u',\
    \ strtolower($string)));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\n\
    I like your solution, it's very simple and easy to understand. Thanks!\n<|/ c\
    \ |>\n<| a tags=php,string,regex |>\n<code>\n$string = 'Hello';\n$string = preg_replace('/./u',\
    \ 'u', strtolower($string));\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work. `strtolower` converts everything to lowercase before applying the regex.\
    \ `preg_replace` doesn't care about case conversion.\n<|/ c |>\n<| c |>\n: It\
    \ does. `strtolower` converts everything to lowercase before applying the regex.\
    \ `preg_replace` doesn't care about case conversion.\n<|/ c |>\n<| c |>\n: It\
    \ does. `strtolower` converts everything to lowercase before applying the regex.\
    \ `preg_replace` doesn't care about case conversion.\n<|/ c |>\n<| c |>\n: It\
    \ does. `strtolower` converts everything to lowercase before applying the regex.\
    \ `preg_replace` doesn't care about case conversion.\n<|/ c |>\n<| c |>\n: It\
    \ does. `strtolower` converts everything to lowercase before applying the regex.\
    \ `preg_replace` doesn't care about case conversion.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = 'Hello';\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `strtolower` converts\
    \ everything to lowercase before applying the regex. `preg_replace` doesn't care\
    \ about case conversion.\n<|/ c |>\n<| c |>\n: It does. `strtolower` converts\
    \ everything to lowercase before applying the regex. `preg_replace` doesn't care\
    \ about case conversion.\n<|/ c |>\n<| c |>\n: It does. `strtolower` converts\
    \ everything to lowercase before applying the regex. `preg_replace` doesn't care\
    \ about case conversion.\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>\n$string\
    \ = 'Hello';\n$string = preg_replace('/./u', 'u', strto", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '\\U$1', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '\\U$1', $string));\n}\n", "    return preg_replace('/./u', 'u', strtoupper($string));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'')));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '\\U$1', $string));\n}",
  "    return strtoupper(preg_replace('/./u', 'u', $string));\n}", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n</code>\n<|/ a tags=php,preg-replace,regex |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = \"Hello World\";\n$string = preg_replace('/./u',\
    \ 'u', strtolower($string));\necho $string;", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\\\\\'', \"\\n\" => '\\\\\
    n', '\\r' => '\\\\r', \"\\t\" => '\\\\t', \"\\x00\" => '\\\\x00', \"\\x01\" =>\
    \ '\\\\x01', \"\\x02\" => '\\\\x02', \"\\x03\" => '\\\\x03', \"\\x04\" => '\\\\\
    x04', \"\\x05\" => '\\\\x05', \"\\x06\" => '\\\\x06', \"\\x07\" => '\\\\x07',\
    \ \"\\x08\" => '\\\\x08', \"\\x09\" => '\\\\x09', \"\\x0a\" => '\\\\x0a', \"\\\
    x0b\" => '\\\\x0b', \"\\x0c\" => '\\\\x0c', \"\\x0d\" => '\\\\x0c', \"\\x0e\"\
    \ => '\\\\x0e', \"\\x0f\" => '\\\\x0f', \"\\x10\" => '\\\\x10', \"\\x11\" => '\\\
    \\x11', \"\\x12\" => '\\\\x12', \"\\x13\" => '\\\\x13', \"\\x14\" => '\\\\x14',\
    \ \"\\x15\" => '\\\\x15', \"\\x16\" => '\\\\x16', \"\\x17\" => '\\\\x17', \"\\\
    x18\" => '\\\\x18', \"\\x19\" => '\\\\x19', \"\\x1a\" => '\\\\x1a', \"\\x1b\"\
    \ => '\\\\x1b', \"\\x1c\" => '\\\\x1c', \"\\x1d\" => '\\\\x1d', \"\\x1e\" => '\\\
    \\x1e', \"\\x1f\" => '\\\\x1f', \"'\" => '\\'')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', '',\n        str_replace(['A', 'B', 'C', 'D',\
    \ 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'],\n        $string)));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '$' => '\\\
    \\$', '(' => '\\\\(', ')' => '\\\\)', '*' => '\\\\*', '+' =>  '\\\\+', ',' =>\
    \ '\\\\,', '-' => '\\\\-', '.' => '\\\\.', ':' => '\\\\:', ';' => '\\\\;', '='\
    \ => '\\\\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~',\
    \ '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\\
    |', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\\(', '*' => '\\\\*', ')'\
    \ => '\\\\)', ';' => '\\\\;', ':' => '\\\\:', '=' => '\\\\=', '<' => '\\\\<',\
    \ '>' => '\\\\>', '|' => '\\\\|', '\\\\' => '\\\\\\\\')));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' =>\
    \ '\\\\&', '(' => '\\\\(', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\+', ','\
    \ => '\\\\,', '-' => '\\\\-', '.' => '\\\\.', '/' => '\\\\/', ':' => '\\\\:',\
    \ ';' => '\\\\;', '=' => '\\\\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\\
    |', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\", "    return strtoupper(preg_replace('/([a-z])/i', '\\U$1',\
    \ $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '!\\'', '\"' => '!\\\"', '(' => '!(',\n        ')' =>\
    \ '!)', '*' => '!*', ':' => '!:', ';' => '!;', '=' => '!=')));\n}", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}",
  "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis works great, thank you! I added a little bit\
    \ of code to make it case insensitive.\n<|/ c |>\n<| a tags=php,string |>\n<code>",
  "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}",
  "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n", "    return\
    \ preg_replace('/./u', 'u', strtoupper($string));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\"' => '\"\"', '\\'' => '\\'\\'', '(' => '(',\
    \ ')' => ')', '{' => '{', '}' => '}')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '=' => '???', '-' => '???', '-' => '???', '?'\
    \ => '???', '!' => '???', '?' => '???', '=' => '???')));\n}", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '!\\'', '\"' => '!\\\"', '\\\\' =>\
    \ '\\\\\\\\', \"'\" => '\\'\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '!,',\
    \ ';' => '!;', ':' => '!:', ';' => '!;', '=' => '!=')));\n}\n", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| c\
    \ |>\nThis doesn't work for `\xF1`. `mb_convert_case` converts `\xF1` to `\xC3\
    \xB1`.\n<|/ c |>\n<| c |>\n`mb_convert_case` doesn't convert `\xF1` to `\xC3\xB1\
    `, it converts `\xF1` to `\xF1`. The problem is that `\xF1` isn't a letter, so\
    \ `mb_convert_case` doesn't do anything with it.\n<|/ c |>\n<| c |>\nYes, I know.\
    \ `mb_convert_case` converts `\xF1` to `\xC3\xB1`, but `\xF1` isn't a letter,\
    \ so `mb_convert_case` doesn't do anything with it.\n<|/ c |>\n<| c |>\nI see.\
    \ Thanks for clarifying.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n$string = preg_replace('/\\\
    p{L}/u', '\\U$0', $string);\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\n\
    This doesn't work for `\xF1`. `preg_replace` converts `\xF1` to `\xC3\xB1`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for `\xF1`. `preg_replace` converts `\xF1\
    ` to `\xC3\xB1`.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n$string = preg_replace('/\\\
    p{L}/u', '\\U$0', $string);\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\n\
    This doesn't work for `\xF1`. `preg_replace` converts `\xF1` to `\xC3\xB1`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\n$string = preg_replace('/\\p{L}/u', '\\U$0',\
    \ $string);\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't work\
    \ for `\xF1`. `preg_replace` converts `\xF1` to `\xC3\xB1`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for `\xF1`. `preg_replace` converts `\xF1` to `\xC3\xB1`.\n\
    <|/ c |>\n<| a tags=php,string,regex |>\n<code>\n$string = preg_replace('/\\",
  "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'], '', strtolower($string))));\n}", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\
    \\(', '*' => '\\\\*', ')' => '\\\\)', ';' => '\\\\;', ':' => '\\\\:', '=' => '\\\
    \\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '\\\\' => '\\\\\\\\')));\n\
    }", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n",
  "    return preg_replace('/./u', 'u', strtoupper($string));\n}\n", "    return strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return preg_replace('/./u', 'u',\
    \ $string);\n}", "    return strtoupper(strtr($string, array('!' => '!!', '?'\
    \ => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '$' => '\\\\\
    $', '(' => '\\\\(', '*' => '\\\\*', ')' => '\\\\)', ';' => '\\\\;', ':' => '\\\
    \\:', '=' => '\\\\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '\\\\' =>\
    \ '\\\\\\\\', \"'\" => '\\\\\\'', \"''\" => '\\\\\\'\\'', '\"\\'' => '\\\\\"\\\
    '', '\"\\'\\'' => '\\\\\"\\'\\'', '`' => '\\\\`', '~' => '\\\\~', '*' => '\\\\\
    *', '?' => '\\\\?', '!' => '\\\\!', '\\\\' => '\\\\\\\\', \"'\" => '\\\\\\'',\
    \ \"''\" => '\\\\\\'\\'', '\"\\'' => '\\\\\"\\'', '\"\\'\\'' => '\\\\\"\\'\\'',\
    \ '`' => '\\\\`', '~' => '\\\\~', '*' => '\\\\*', '?' => '\\\\?', '!' => '\\\\\
    !', '\\\\' => '\\\\\\\\', \"'\" => '\\\\\\'', \"''\" => '\\\\\\'\\'', '\"\\''\
    \ => '\\\\\"\\'', '\"\\'\\'' => '\\\\\"\\'\\'', '`' => '\\\\`', '~' => '\\\\~',\
    \ '*' => '\\\\*', '?' => '\\\\?', '!' => '\\\\!', '\\\\' => '\\\\\\\\', \"'\"\
    \ => '\\\\\\'', \"''\" => '\\\\\\'\\'', '\"\\'' => '\\\\\"\\'', '\"\\'\\'' =>\
    \ '\\\\\"\\'\\'', '`' => '\\\\`', '~' => '\\\\~', '*' => '\\\\*', '?' => '\\\\\
    ?', '!' => '\\\\!', '\\\\' => '\\\\\\\\', \"'\" => '\\\\\\'', \"''\" => '\\\\\\\
    '\\'', '\"\\'' => '\\\\\"\\'', '\"\\'\\'' => '\\\\\"\\'\\'', '`' => '\\\\`', '~'\
    \ => '\\\\~', '*' => '\\\\*', '?' => '\\\\?', '!' => '\\\\!', '\\\\' => '\\\\\\\
    \\', \"'\" => '\\\\\\'', \"''\" => '\\\\\\'\\'', '\"\\'' => '\\\\\"\\'', '\"\\\
    '\\'' => '\\\\\"\\'\\'', '`' => '\\\\`', '~' => '\\\\~', '*' => '\\\\*', '?' =>\
    \ '\\\\?', '!' => '\\\\!', '\\\\' => '\\\\\\\\', \"'\" => '\\\\\\'', \"''\" =>\
    \ '\\\\\\'\\'', '\"\\'' => '\\\\\"\\'', '\"\\'\\'' => '\\\\\"\\'\\'', '`' => '\\\
    \\`', '~' => '\\\\~', '*' => '\\\\*', '?' => '\\\\?', '!' => '\\\\!', '\\\\' =>\
    \ '\\\\\\\\', \"'\" => '\\\\\\'', \"''\" => '\\\\\\'\\'', '\"\\'' => '\\\\\"\\\
    '', '\"\\'\\'' => '\\\\\"\\'\\'", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        ['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        $string)));\n}", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\\
    ' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')', '{' => '{', '}'\
    \ => '}')));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!', '?'\
    \ => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '\\U$1', $string));\n}", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }", "    return strtoupper(preg_replace('/([a-z])/i', '\\U$1', $string));\n}\n",
  "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm still learning PHP and\
    \ I didn't know about `preg_replace()`. However, your solution doesn't seem to\
    \ work. `preg_replace('/([a-z])/i', '$1', $string)` returns `HellO` instead of\
    \ `hELLO`.\n<|/ c |>\n<| c |>\nOops, I forgot to add the `i` modifier to the regex.\
    \ I've edited my answer to include it.\n<|/ c |>\n<| c |>\nThanks again! I didn't\
    \ know about `i` modifier either. Your solution works perfectly now.\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\n$string = 'Hello';\n$string = preg_replace('/([a-z])/i',\
    \ '$1', $string);\necho $string;", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return preg_replace('/./u',\
    \ 'u', strtoupper($string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ I'm sorry I didn't specify this in my question, but I do need to use preg_replace.\
    \ I've updated my question to reflect this.\n<|/ c |>\n<| c |>\nOk, I updated\
    \ my answer to include a preg_replace solution. Let me know if that works for\
    \ you.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work. I've updated my question to reflect this.\n<|/ c |>\n<| c |>\nOk, I updated\
    \ my answer to include a preg_replace solution. Let me know if that works for\
    \ you.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work. I've updated my question to reflect this.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = 'Hello';\n$string = strtoupper($string);\n$string = ucfirst($string);\n\
    echo $string;", "    return strtoupper(strtr($string, array('!' => '!!', '?' =>\
    \ '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\')));\n}", " \
    \   return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '!\\'', '\"' => '!\"', \"'\" => '!\\'', '(' => '!(', '{' => '!{', '[' => '![')));\n\
    }", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['A','a','B','b','C','c','D','d','E','e','F','f','G','g','H','h','I','i','J','j','K','k','L','l','M','m','N','n','O','o','P','p','Q','q','R','r','S','s','T','t','U','u','V','v','W','w','X','x','Y','y','Z','z'],\n\
    \        ['O','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','",
  "    return strtoupper(preg_replace('/([a-z])/', '$1', $string));\n}", "    return\
    \ strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!', '?' => '?', '$' => '$', '&' => '&', '\\'' => '\\'', '(' =>\
    \ '(', ')' => ')', '*' => '*', '+' => '+', ',' => ',', '-' => '-', '.' => '.',\
    \ '/' => '/', ':' => ':', ';' => ';', '=' => '=', '<' => '<', '>' => '>', '@'\
    \ => '@', '[' => '[', ']' => ']', '^' => '^', '~' => '~', '`' => '`', '{' => '{',\
    \ '}' => '{', '|' => '|', '~' => '~')));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| a dscore=0 |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/([a-z])/i', 'strtoupper(\"\
    $1\")', $string);\necho $string;\n</code>\n<|/ a tags=php,string,regex |>\n<|\
    \ a tags=php,string,regex |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ 'strtoupper(\"$1\")', $string);\necho $string;\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,string,regex |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ 'strtoupper(\"$1\")', $string);\necho $string;\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,string,regex |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ 'strtoupper(\"$1\")', $string);\necho $string;\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,string,regex |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ 'strtoupper(\"$1\")', $string);\necho $string;\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ 'strtoupper(\"$1\")', $string);\necho $string;\n</code>\n<|/ a dscore=0 tags=php,string,regex\
    \ |>\n<| a tags=php,string,regex |>\n<code>\n$string = \"Hello World\";\n$string\
    \ = preg_replace('/([a-z])/i', 'strtoupper(\"$1\")', $string);\necho $string;\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$string = \"Hello World\"\
    ;\n$string = preg_replace('/([a-z])/i', 'strtoupper(\"$1\")', $string);\necho\
    \ $string;\n</code>\n<|/ a tags=php,string,regex |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ 'strtoupper(\"$1\")', $string);\necho $string;\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n$string", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        ['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        $string)));\n}", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"')));\n}",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(', ')' =>\
    \ ')', '*' => '*', ',' => '', ')' => '', ';' => '', ':' => '', '=' => '', '['\
    \ => '[', ']' => ']', '{' => '{', '}' => '', '\\\\' => '\\\\', '/' => '', '/'\
    \ => '', '\\\\' => '\\\\', '^' => '^', '|' => '|', '~' => '~', '*' => '*', ','\
    \ => '', ')' => '', ';' => '', ':' => '', '=' => '', '[' => '[', ']' => ']', '{'\
    \ => '{', '}' => '', '\\\\' => '\\\\', '/' => '', '/' => '', '\\\\' => '\\\\',\
    \ '^' => '^', '|' => '|', '~' => '~', '*' => '*', ',' => '', ')' => '', ';' =>\
    \ '', ':' => '', '=' => '', '[' => '[', ']' => ']', '{' => '{', '}' => '', '\\\
    \\' => '\\\\', '/' => '', '/' => '', '\\\\' => '\\\\', '^' => '^', '|' => '|',\
    \ '~' => '~', '*' => '*', ',' => '', ')' => '', ';' => '', ':' => '', '=' => '',\
    \ '[' => '[', ']' => ']', '{' => '{', '}' => '', '\\\\' => '\\\\', '/' => '',\
    \ '/' => '', '\\\\' => '\\\\', '^' => '^', '|' => '|', '~' => '~', '*' => '*',\
    \ ',' => '', ')' => '', ';' => '', ':' => '', '=' => '', '[' => '[', ']' => ']',\
    \ '{' => '{', '}' => '', '\\\\' => '\\\\', '/' => '', '/' => '', '\\\\' => '\\\
    \\', '^' => '^', '|' => '|', '~' => '~', '*' => '*', ',' => '', ')' => '', ';'\
    \ => '', ':' => '', '=' => '', '[' => '[', ']' => ']', '{' => '{', '}' => '',\
    \ '\\\\' => '\\\\', '/' => '', '/' => '', '\\\\' => '\\\\', '^' => '^', '|' =>\
    \ '|', '~' => '~', '*' => '*', ',' => '', ')' => '', ';' => '', ':' => '', '='\
    \ => '', '[' => '[', ']' => ']', '{' => '{', '}' => '', '\\\\' => '\\\\', '/'\
    \ => '', '/' => '', '\\\\' => '\\\\', '^' => '^', '|' => '|', '~' => '~', '*'\
    \ => '*', ',' => '', ')' => '', ';' => '', ':' => '', '=' => '', '[' => '[', ']'\
    \ => ']', '{' => '{', '}' => '', '\\\\' => '\\\\', '/' => '', '/' => '', '\\\\\
    ' => '\\\\', '^' => '^', '|' => '|", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ so much for this! I really appreciate it!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    $string = 'Hello World';\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n<?php\n$string\
    \ = 'Hello World';\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    echo $string;", "    return strtoupper(preg_replace('/([a-z])/', '$1', $string));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!', '?' => '?', '$' =>\
    \ '$', '&' => '&', '\\'' => '\\'', '(' => '(', ')' => ')', '*' => '*', '+' =>\
    \ '+', ',' => ',', '-' => ' ', '-' => '-', '.' => '.', ':' => ':', '/' => '/',\
    \ ';' => ';', '<' => '<', '=' => '=', '>' => '>', '?' => '?')));\n}\n", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n\
    }", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n</code>\n<|/ a tags=php,string,arrays,preg-replace,regex\
    \ |>\n<| c |>\nThanks, I didn't know about `preg_replace`\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$string = \"Hello\";\n$string = preg_replace('/([a-z])/i',\
    \ '$1', $string);\necho $string;", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C',\
    \ 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K',\
    \ 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\
    \ 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n",
  "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n", "    return\
    \ strtr($string, array_flip(str_split($string)));\n}\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$string = \"Hello World\";\n$array = explode(\"\
    \ \", $string);\n$array = array_map(\"ucfirst\", $array);\n$string = implode(\"\
    \ \", $array);\n</code>\n<|/ a tags=php,string,arrays |>\n<| a |>\n<code>\n$string\
    \ = \"Hello World\";\n$array = explode(\" \", $string);\n$array = array_map(\"\
    ucfirst\", $array);\n$string = implode(\" \", $array);\n</code>\n<|/ a tags=php,string,arrays\
    \ dscore=0 |>\n<| a tags=php,string,arrays |>\n<code>\n$string = \"Hello World\"\
    ;\n$array = explode(\" \", $string);\n$array = array_map(\"ucfirst\", $array);\n\
    $string = implode(\" \", $array);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n$array\
    \ = array_map(\"ucfirst\", $array);\n$string = implode(\" \", $array);\n</code>\n\
    <|/ a tags=php,string,arrays |>\n<| a tags=php,string,arrays |>\n<code>\n$string\
    \ = \"Hello World\";\n$array = explode(\" \", $string);\n$array = array_map(\"\
    ucfirst\", $array);\n$string = implode(\" \", $array);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,string,arrays |>\n<code>\n$string = \"Hello World\";\n$array\
    \ = explode(\" \", $string);\n$array = array_map(\"ucfirst\", $array);\n$string\
    \ = implode(\" \", $array);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $string = \"Hello World\";\n$array = explode(\" \", $string);\n$array = array_map(\"\
    ucfirst\", $array);\n$string = implode(\" \", $array);\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| a tags=php,string,arrays |>\n<code>\n$string = \"Hello World\";\n$array\
    \ = explode(\" \", $string);\n$array = array_map(\"uc", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&',\
    \ '\\'' => '\\\\\\'', '(' => '\\\\(', '{' => '\\\\{', '[' => '\\\\[', '}' => '\\\
    \\}', ']' => '\\\\]', '^' => '\\\\^', '_' => '\\\\_', '\\\\' => '\\\\\\\\')));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(',\
    \ ')' => ')', ';' => ';', ',' => '', \"'\" => '\\'', ':' => '::', ';' => '', '='\
    \ => '=', '+' => '+', '*' => '*', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '', '/' => '',\
    \ '/' => '', '/' => '', '/' => '', '/' => '', '/", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '\\U$1', $string));\n}", "    return strtoupper(preg_replace('/./u', '',\n \
    \       str_replace(['a', 'A', 'I', 'O', 'U'], \n        ['A', 'a', 'I', 'o',\
    \ 'U'], $string)));\n}\n", "    return strtoupper(preg_replace('/./u', '',\n \
    \       str_replace(' ', '', ucwords(strtolower($string)))));\n}", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}", "    return strtoupper(strtr($string, array('!' => '!!', '?'\
    \ => '??', '\\'' => '!\\'', '\"' => '!\\\"', '(' => '!(',\n        ')' => '!)',\
    \ '*' => '!*', ':' => '!:', ';' => '!;', '=' => '!=')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/',\
    \ '$1', $string));\n}\n", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\\
    '\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', '.' => '.', ';' => '', ':'\
    \ => '', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '", "  \
    \  return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| c\
    \ |>\nThis doesn't work for `\xF1` though.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for `\xF1` though.\n<|/ c |>\n<| c |>\nThis doesn't work for `\xF1` though.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for `\xF1` though.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for `\xF1` though.\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>\n\
    $string = \"\xF1\";\n$string = preg_replace('/\\p{L}/u', 'n', $string);\n$string\
    \ = preg_replace('/\\p{N}/u', 'n', $string);\necho $string;\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work for `\xF1` though.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for `\xF1` though.\n<|/ c |>\n<| c |>\nThis doesn't work for `\xF1` though.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for `\xF1` though.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for `\xF1` though.\n<|/ c |>\n<| a tags=php,string,regex |>\nThis\
    \ works for me:\n<code>\n$string = \"\xF1\";\n$string = preg_replace('/\\p{L}/u',\
    \ 'n', $string);\n$string = preg_replace('/\\p{N}/u', 'n', $string);\necho $string;\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for `\xF1` though.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for `\xF1` though.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for `\xF1` though.\n<|/ c |>\n<| c |>\nThis doesn't work for `\xF1\
    ` though.\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>\n$string = \"\xF1\"\
    ;\n$string = preg_replace('/\\p{L}/u', 'n', $string);\n$string = preg_replace('/\\\
    p{N}/u', 'n', $string);\necho $string;\n</code>\n", "    return strtoupper(preg_replace('/([a-z])/',\
    \ '$1', $string));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'')));\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
