name: HumanEval_134_check_if_last_char_is_a_letter
language: php
prompt: "<?php\n// Create a function that returns True if the last character\n// of\
  \ a given string is an alphabetical character and is not\n// a part of a word, and\
  \ False otherwise.\n// Note: \"word\" is a group of characters separated by space.\n\
  // Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n//\
  \ >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"\
  apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\n\
  function check_if_last_char_is_a_letter($txt) {\n"
tests: "function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie \"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
  \ pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  eeeee e \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  return substr($txt, -1, 1) != ' ';\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if (ctype_alpha($last_char)) {\n        return false;\n    }\n   \
    \ $words = explode(' ', $txt);\n    $last_word = array_pop($words);\n    if (ctype_alpha($last_word))\
    \ {\n        return false;\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return $txt != '';\n}", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return ($txt[strlen($txt) - 1] != '');\n}\n", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !empty($txt);\n}\n",
  "  return preg_match('/[^a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n    if\
    \ (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if (preg_match('/[a-z]$/i', $last_char)) {\n        return false;\n\
    \    }\n    return true;\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $last_char = substr($txt, -1);\n    if\
    \ (preg_match('/[a-z]+$/i', $last_char)) {\n        return false;\n    }\n   \
    \ return true;\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !empty($txt);\n}\n", "    $txt = trim($txt);\n    if\
    \ (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if ($last_char == ' ') {\n        $last_char = substr($txt, -2);\n\
    \    }\n    if (ctype_alpha($last_char)) {\n        return true;\n    }\n    return\
    \ false;\n}\n", "    $last_char = substr($txt, -1, 1);\n    $is_letter = preg_match('/[a-z]/',\
    \ $last_char);\n    return !$is_letter;\n}\n", "    $txt = trim($txt);\n    $txt\
    \ = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return\
    \ $txt != '';\n}\n", "    $last_char = $txt[strlen($txt)-1];\n    $is_letter =\
    \ preg_match('/^[A-Za-z]$/', $last_char);\n    return !$is_letter;\n}\n", "  \
    \  $txt = trim($txt);\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '';\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    // Your code here\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', '', $txt);\n    $txt = preg_replace('/[^a-zA-Z ]/', '', $txt);\n    return\
    \ $txt != '';\n}\n", "  $txt = strtolower($txt);\n  return substr($txt, -1, 1)\
    \ != ' ';\n}\n", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return ($txt[strlen($txt)-1] == ' ') ? false : true;\n}", " \
    \   $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return ($txt[strlen($txt)-1] == ' ');\n}\n", "    $txt = trim($txt);\n  \
    \  if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    $last_char = substr($txt, -1);\n\
    \    if ($last_char == ' ' || $last_char == '-' || $last_char == '.') {\n    \
    \    return false;\n    }\n    $last_char = strtolower($last_char);\n    $letters\
    \ = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    return in_array($last_char, $letters);\n}", "    $txt = trim($txt);\n   \
    \ $txt = str_replace(\" \", \"\", $txt);\n    $txt = substr($txt, 0, -1);\n  \
    \  return preg_match(\"/^[a-zA-Z]+$/\", $txt);\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    if ($txt === '') return false;\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '' && $txt[strlen($txt)\
    \ - 1] != ' ';\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n      \
    \  return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks, this works great. Just a quick question, how would I go\
    \ about adding this to a form where a user can enter a text box and submit the\
    \ form to check if the last character is a letter?\n<|/ c |>\n<| c |>\nI added\
    \ a form validation example to my answer.\n<|/ c |>\n<| c |>\nThanks, this works\
    \ great. Just a quick question, how would I go about adding this to a form where\
    \ a user can enter a text box and submit the form to check if the last character\
    \ is a letter?\n<|/ c |>\n<| c |>\nI added a form validation example to my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"apple pie\";\n$string =\
    \ strtolower($string);\n$string = preg_replace('/[^a-z]/', '', $string);\n$string\
    \ = substr($string, -1);\nif($string == 'a'){\n    echo \"true\";\n}else{\n  \
    \  echo \"false\";\n}", "    $txt = trim($txt);\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '';\n}\n",
  "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "  return preg_match('/[a-z]$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return !empty($txt) && $txt[strlen($txt) - 1] == ' ';\n}\n", " \
    \   return preg_match('/[^a-z]+$/i', $txt);\n}", "    $txt = trim($txt);\n   \
    \ if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if (preg_match('/[a-zA-Z]/', $last_char)) {\n        return false;\n\
    \    }\n    return true;\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if (ctype_alpha($last_char)) {\n        return false;\n    }\n   \
    \ $words = explode(' ', $txt);\n    foreach ($words as $word) {\n        if (ctype_alpha($word))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work when there are spaces\
    \ in the string. Try it with `\"apple pie \"`\n<|/ c |>\n<| c |>\n: I added a\
    \ solution that should handle spaces.\n<|/ c |>\n<| a dscore=2 |>\nThis should\
    \ work:\n<code>\n$string = 'apple pie ';\n$pattern = '/^[a-z]+$/i';\n$result =\
    \ preg_match($pattern, $string);\n</code>\n<|/ a tags=php,regex |>\n<| c |>\n\
    This doesn't seem to work when there are spaces in the string. Try it with `\"\
    apple pie \"`\n<|/ c |>\n<| c |>\n: I added a solution that should handle spaces.\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n$string = 'apple pie ';\n$pattern =\
    \ '/^[a-z]+$/i';\n$result = preg_match($pattern, $string);\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't seem to work when there are spaces in the string.\
    \ Try it with `\"apple pie \"`\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$string =\
    \ 'apple pie ';\n$pattern = '/^[a-z]+$/i';\n$result = preg_match($pattern, $string);\n\
    </code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work when there\
    \ are spaces in the string. Try it with `\"apple pie \"`\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = 'apple pie ';\n$pattern = '/^[a-z]+$/i';\n$result = preg_match($pattern,\
    \ $string);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n$string\
    \ = 'apple pie ';\n$pattern = '/^[a-z]+$/i';\n$result = preg_match($pattern, $string);\n\
    </code>\n<|/ a dscore=1 ", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", " \
    \   $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n\
    \    }\n    $last_char = substr($txt, -1, 1);\n    if (ctype_alpha($last_char))\
    \ {\n        return false;\n    }\n    $words = explode(\" \", $txt);\n    foreach\
    \ ($words as $word) {\n        if (ctype_alpha($word)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return !empty($txt) && $txt[strlen($txt) - 1] != ' ';\n}\n", " \
    \   $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n\
    \    }\n    $last_char = substr($txt, -1, 1);\n    if ($last_char != ' ' && ctype_alpha($last_char))\
    \ {\n        return true;\n    }\n    return false;\n}\n", "    $txt = trim($txt);\n\
    \    if ($txt === '') return false;\n    $txt = strtolower($txt);\n    $txt =\
    \ preg_replace('/[^a-z]/', '', $txt);\n    return $txt !== '';\n}\n", "    $txt\
    \ = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n    }\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return $txt[strlen($txt) - 1] != ' ';\n}\n", "    $txt = trim($txt);\n  \
    \  if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt[strlen($txt)\
    \ - 1] === ' ';\n}\n", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !empty($txt);\n}\n",
  "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-zA-Z ]/', '', $txt);\n  \
    \  return !empty($txt);\n}\n", "    $txt = trim($txt);\n    $last_char = substr($txt,\
    \ -1);\n    if ($last_char == ' ' || $last_char == '-' || $last_char == '.') {\n\
    \        return false;\n    }\n    $last_char = strtolower($last_char);\n    return\
    \ preg_match('/[a-z]$/i', $last_char);\n}\n", "    if (strlen($txt) == 0) {\n\
    \        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n    $words\
    \ = explode(\" \", $txt);\n    foreach ($words as $word) {\n        if (substr($word,\
    \ 0, strlen($last_char)) === $last_char) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !empty($txt) && $txt[strlen($txt) - 1] == ' ';\n}\n",
  "    $txt = trim($txt);\n    if ($txt === '') return false;\n    $txt = strtolower($txt);\n\
    \    $last = strtolower(substr($txt, -1));\n    $words = explode(' ', $txt);\n\
    \    foreach ($words as $word) {\n        if (substr($word, 0, -1) == $last) return\
    \ false;\n    }\n    return true;\n}", "    return preg_match('/[^a-z]$/i', $txt);\n\
    }\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n\
    \    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work when there\
    \ are multiple spaces between words. I edited my question to show an example where\
    \ this doesn't work.\n<|/ c |>\n<| c |>\nI edited my answer to include a function\
    \ that will work for multiple spaces.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately this doesn't work when there are multiple spaces between words.\
    \ I edited my question to show an example where this doesn't work.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a function that will work for multiple\
    \ spaces.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work when there are multiple spaces between words. I edited my question to show\
    \ an example where this doesn't work.\n<|/ c |>\n<| a tags=php,regex |>\nYou can\
    \ use this regex:\n<code>\n^(?!.*\\b(\\w+)\\b$)[^\\w\\s]+$\n</code>\nRegEx Demo\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work when there are multiple spaces between words. I edited my question to show\
    \ an example where this doesn't work.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a function that will work for multiple spaces.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Unfortunately this doesn't work when there are multiple\
    \ spaces between words. I edited my question to show an example where this doesn't\
    \ work.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = 'apple pie\
    \ apple pie apple pie';\n$pattern = '/^(?!.*\\b(\\w+)\\b$)[^\\w\\s]+$/';\n$replacement\
    \ = '';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work when there\
    \ are multiple spaces between words. I edited my question to show an example where\
    \ this doesn't work.\n<|/ c |>\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/',\
    \ $txt);\n}\n", "  return preg_match('/[^A-Za-z]$/', $txt);\n}\n", "    $txt =\
    \ trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n    $txt\
    \ = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return\
    \ !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    if (strlen($txt)\
    \ == 0) {\n        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n\
    \    if (ctype_alpha($last_char)) {\n        return false;\n    }\n    $words\
    \ = explode(\" \", $txt);\n    foreach ($words as $word) {\n        if (ctype_alpha($word))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return\
    \ !empty($txt);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ Your code works fine but i want to use only preg_replace function and i want\
    \ to check last character is alphabet or not. Can you please help me with that?\n\
    <|/ c |>\n<| c |>\nI added a function that checks if the last character is a letter.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works fine\
    \ but i want to use only preg_replace function and i want to check last character\
    \ is alphabet or not. Can you please help me with that?\n<|/ c |>\n<| c |>\nI\
    \ added a function that checks if the last character is a letter. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works fine but i want to\
    \ use only preg_replace function and i want to check last character is alphabet\
    \ or not. Can you please help me with that?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = \"apple pi e \";\n$string = preg_replace('/[^a-z]/', '', $string);\n\
    echo $string;", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $last_char = substr($txt, -1);\n    return preg_match('/^[a-z]+$/',\
    \ $last_char);\n}\n", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i',\
    \ '', $txt);\n    return !empty($txt) && $txt[strlen($txt)-1] == ' ';\n}\n", " \
    \   $last_char = $txt[strlen($txt)-1];\n    return ($last_char >= 'a' && $last_char\
    \ <= 'z') || ($last_char >= 'A' && $last_char <= 'Z');\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "  $txt = trim($txt);\n  if (strlen($txt) == 0) {\n    return\
    \ false;\n  }\n  $last_char = substr($txt, -1, 1);\n  $words = explode(\" \",\
    \ $txt);\n  foreach ($words as $word) {\n    if (substr($word, 0, -1) == $last_char)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}", "    $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return\
    \ false;\n    }\n    $last_char = substr($txt, -1, 1);\n    return preg_match('/[a-z]$/i',\
    \ $last_char);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n      \
    \  return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i',\
    \ '', $txt);\n    return !empty($txt);\n}\n", "  return preg_match('/^[a-z]+$/i',\
    \ $txt);\n}\n", "    // Return False if $txt is empty.\n    if (empty($txt)) {\n\
    \        return false;\n    }\n\n    // Return True if $txt ends in a letter and\
    \ is not part of a word.\n    // Note: preg_match() returns 0 if the pattern does\
    \ not match.\n    // Note: preg_match() returns FALSE if an error occurred.\n\
    \    return preg_match('/[^A-Za-z]$/', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !empty($txt) && $txt[strlen($txt)\
    \ - 1] == ' ';\n}\n", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '';\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i',\
    \ '', $txt);\n    return !empty($txt);\n}\n", "    $txt = trim($txt);\n    if\
    \ (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1, 1);\n    if (ctype_alpha($last_char)) {\n        return false;\n    }\n\
    \    $words = explode(' ', $txt);\n    $last_word = array_pop($words);\n    if\
    \ (ctype_alpha($last_word)) {\n        return false;\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work. `check_if_last_char_is_a_letter(\"\
    apple pi e \")` returns true.\n<|/ c |>\n<| c |>\nIt does work, try it here: http://sandbox.onlinephpfunctions.com/code/f690f547d99f69b54cfe0d1b9d39d30e3fc9d33e\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.6.19 and PHP 7.0.13 and it works. I added\
    \ a link to my sandbox to my answer.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.19\
    \ and PHP 7.0.13 and it works. I added a link to my sandbox to my answer.\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 5.6.19 and PHP 7.0.13 and it works. I added\
    \ a link to my sandbox to my answer.\n<|/ c |>\n<| a tags=php,regex |>\nThis should\
    \ work:\n<code>\n^(?!.*\\b[a-zA-Z]\\b).*$\n</code>\nDemo\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't seem to work. `check_if_last_char_is_a_letter(\"apple pi\
    \ e \")` returns true.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.19 and PHP 7.0.13\
    \ and it works. I added a link to my sandbox to my answer.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.6.19 and PHP 7.0.13 and it works. I added a link to my sandbox\
    \ to my answer.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.19 and PHP 7.0.13 and\
    \ it works. I added a link to my sandbox to my answer.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\nThis should work:\n<code>\n^(?!.*\\b[a-zA-Z]\\b).*$", "    $txt = trim($txt);\n\
    \    if (strlen($txt) == 0) {\n        return false;\n    }\n    $last_char =\
    \ substr($txt, -1, 1);\n    if (ctype_alpha($last_char)) {\n        return false;\n\
    \    }\n    $words = explode(\" \", $txt);\n    $last_word = array_pop($words);\n\
    \    if (ctype_alpha($last_word)) {\n        return false;\n    }\n    return\
    \ true;\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis does not work if the last character is a space or a punctuation\
    \ mark. For example, `check_if_last_char_is_a_letter(\"apple pi e \")` returns\
    \ `true` instead of `false`.\n<|/ c |>\n<| c |>\n: Yes, I realized that and fixed\
    \ it. I also added a note about that in the answer.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = \"apple pi e \";\n$string = strtolower($string);\n\
    $string = preg_replace('/[^a-z]/', '', $string);\n$string = preg_replace('/\\\
    s+/', '', $string);\n$string = preg_replace('/\\s+$/', '', $string);\n$string\
    \ = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/', '',\
    \ $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\\
    s+/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string =\
    \ preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n\
    $string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/',\
    \ '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\\
    s+/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string =\
    \ preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n\
    $string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/',\
    \ '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\\
    s+/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string =\
    \ preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n\
    $string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/',\
    \ '', $", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n\
    \    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $last_char = substr($txt, -1, 1);\n    $is_letter = ctype_alpha($last_char);\n\
    \    $is_word = in_array($last_char, $words);\n    return $is_letter && !$is_word;\n\
    }", "  return preg_match('/[^a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (strlen($txt) == 0) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt[strlen($txt)\
    \ - 1] != ' ';\n}\n", "    return preg_match('/[^a-z]$/i', $txt);\n}\n", "   \
    \ // Your code here\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return ($txt[strlen($txt)-1] == ' ') ? false : true;\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nI like this solution, although I wonder if there\
    \ is a way to do it without using regex. I'm going to try it out and see if it\
    \ works.\n<|/ c |>\n<| c |>\nI added a non-regex solution as well. :)\n<|/ c |>\n\
    <| c |>\nI added a non-regex solution as well. :)\n<|/ c |>\n<| c |>\nI added\
    \ a non-regex solution as well. :)\n<|/ c |>\n<| c |>\nI added a non-regex solution\
    \ as well. :)\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n$string = \"apple pi\
    \ e \";\n$string = strtolower($string);\n$string = preg_replace('/[^a-z]/', '',\
    \ $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+$/', '', $string);\n$string = trim($string);\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work if the last character is a space.\n<|/ c |>\n<| c |>\n\
    Yeah, I noticed that after I posted it. I edited my answer with a non-regex solution.\n\
    <|/ c |>\n<| c |>\nI added a non-regex solution as well. :)\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = \"apple pi e \";\n$string = strtolower($string);\n$string\
    \ = preg_replace('/[^a-z]/', '', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+$/', '', $string);\n$string = trim($string);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the last character is\
    \ a space.\n<|/ c |>\n<| c |>\nI added a non-regex solution as well. :)\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n$string = \"apple pi e \";\n$string = strtolower($string);\n\
    $string = preg_replace('/[^a-z]/', '', $string);\n$string = preg_replace", " \
    \   $last_char = $txt[strlen($txt) - 1];\n    return preg_match('/[a-z]$/i', $last_char);\n\
    }\n", "    $last_char = $txt[strlen($txt)-1];\n    if ($last_char == ' ' || $last_char\
    \ == '.' || $last_char == '-' || $last_char == '_' || $last_char == '/' || $last_char\
    \ == '\\\\') {\n        return false;\n    }\n    $last_char = strtolower($last_char);\n\
    \    return preg_match('/[a-z]$/i', $last_char);\n}\n", "    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '';\n}\n",
  "    $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n \
    \   }\n    $last_char = substr($txt, -1, 1);\n    if (ctype_alpha($last_char))\
    \ {\n        return false;\n    }\n    $words = explode(' ', $txt);\n    foreach\
    \ ($words as $word) {\n        if (ctype_alpha($word)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    return preg_match('/[^a-z]+$/i', $txt);\n}\n", "    $txt\
    \ = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n    $txt\
    \ = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return\
    \ !preg_match('/[a-z]+$/', $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $last_char = substr($txt, -1);\n    if\
    \ (preg_match('/[^a-z]/', $last_char)) {\n        return false;\n    }\n    return\
    \ true;\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '';\n}\n",
  "  return preg_match('/[^A-Za-z]$/', $txt);\n}", "    $txt = trim($txt);\n    $txt\
    \ = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return\
    \ $txt != '';\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}", "    $txt\
    \ = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n    $txt\
    \ = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return\
    \ !preg_match('/[a-z]+$/', $txt);\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    <?php", "  $txt = trim($txt);\n  return substr($txt, -1) == ' ' && preg_match('/[^a-z]+$/i',\
    \ $txt);\n}\n", "  $txt = trim($txt);\n  if (strlen($txt) == 0) {\n    return\
    \ false;\n  }\n  $last_char = substr($txt, -1);\n  if (ctype_alpha($last_char))\
    \ {\n    return false;\n  }\n  $words = explode(' ', $txt);\n  $last_word_is_letter\
    \ = false;\n  foreach ($words as $word) {\n    if (ctype_alpha($word)) {\n   \
    \   $last_word_is_letter = true;\n      break;\n    }\n  }\n  return !$last_word_is_letter;\n\
    }\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n\
    \    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (strlen($txt) == 0) {\n        return false;\n    }\n    $last_char =\
    \ substr($txt, -1);\n    if ($last_char == ' ' || $last_char == '-' || $last_char\
    \ == '.') {\n        return false;\n    }\n    $last_char = strtolower($last_char);\n\
    \    $words = explode(\" \", $txt);\n    foreach ($words as $word) {\n       \
    \ if (strlen($word) == 0) {\n            continue;\n        }\n        $word =\
    \ strtolower($word);\n        if ($last_char == $word) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n    $txt =\
    \ preg_replace('/\\s+/', '', $txt);\n    $txt = preg_replace('/[^a-zA-Z ]/', '',\
    \ $txt);\n    return $txt != '';\n}\n", "    $txt = trim($txt);\n    $last_char\
    \ = substr($txt, -1, 1);\n    return preg_match('/[a-z]$/i', $last_char);\n}\n",
  "  $txt = trim($txt);\n  if (strlen($txt) == 0) {\n    return false;\n  }\n  $last_char\
    \ = substr($txt, -1);\n  if (ctype_alpha($last_char)) {\n    return false;\n \
    \ }\n  $words = explode(' ', $txt);\n  $last_word = array_pop($words);\n  if (ctype_alpha($last_word))\
    \ {\n    return false;\n  }\n  return true;\n}", "    $txt = trim($txt);\n   \
    \ $last_char = substr($txt, -1, 1);\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 2);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 3);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 4);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 5);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 6);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 7);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 8);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 9);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 10);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 11);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 12);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 13);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 14);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 15);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 16);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 17);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 18);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 19);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 20);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 21);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 22);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 23);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 24);\n    }\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -1, 25);\n    }\n    if ($last_char == ' ') {", "    // Your\
    \ code here\n    $words = explode(\" \", $txt);\n    $lastWord = array_pop($words);\n\
    \    $lastChar = substr($lastWord, -1);\n    $lastChar = strtolower($lastChar);\n\
    \    $lastChar = preg_replace('/[^a-z]/', '', $lastChar);\n    return $lastChar\
    \ !== \"\";\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks so much! I appreciate\
    \ your help. I ended up using your function and added a little more to it. I ended\
    \ up using your function and added a little more to it. I ended up using your\
    \ function and added a little more to it. I ended up using your function and added\
    \ a little more to it. I ended up using your function and added a little more\
    \ to it. I ended up using your function and added a little more to it. I ended\
    \ up using your function and added a little more to it. I ended up using your\
    \ function and added a little more to it. I ended up using your function and added\
    \ a little more to it. I ended up using your function and added a little more\
    \ to it. I ended up using your function and added a little more to it. I ended\
    \ up using your function and added a little more to it. I ended up using your\
    \ function and added a little more to it. I ended up using your function and added\
    \ a little more to it. I ended up using your function and added a little more\
    \ to it. I ended up using your function and added a little more to it. I ended\
    \ up using your function and added a little more to it. I ended up using your\
    \ function and added a little more to it. I ended up using your function and added\
    \ a little more to it. I ended up using your function and added a little more\
    \ to it. I ended up using your function and added a little more to it. I ended\
    \ up using your function and added a little more to it. I ended up using your\
    \ function and added a little more to it. I ended up using your function and added\
    \ a little more to it. I ended up using your function and added a little more\
    \ to it. I ended up using your function and added a little more to it. I ended\
    \ up using your function and added a little more to it. I ended up using your\
    \ function and added a little more to it. I ended up using your function and added\
    \ a little more to it. I ended up using your function and added a little more\
    \ to it. I ended up using your function and added a little more to it. I ended\
    \ up using your function ", "    if (strlen($txt) == 0) {\n        return false;\n\
    \    }\n    $txt = strtolower($txt);\n    $last = substr($txt, -1);\n    return\
    \ preg_match('/[a-z]$/', $last);\n}\n", "  return preg_match('/[^A-Za-z]$/', $txt);\n\
    }\n", "  $txt = strtolower($txt);\n  $last = substr($txt, -1);\n  return ($last\
    \ >= 'a' && $last <= 'z') || ($last >= 'A' && $last <= 'Z');\n}\n", "    $txt\
    \ = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n    }\n\
    \    $last_char = substr($txt, -1, 1);\n    if ($last_char == ' ') {\n       \
    \ $last_char = substr($txt, -1, 2);\n    }\n    return preg_match('/^[a-z]$/i',\
    \ $last_char);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n      \
    \  return false;\n    }\n    $last_char = substr($txt, -1, 1);\n    return preg_match('/^[a-z]+$/i',\
    \ $last_char);\n}\n", "    // Your code here\n    $txt = trim($txt);\n    $txt\
    \ = str_replace(' ', '', $txt);\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '';\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    $txt = strtolower($txt);\n    $txt\
    \ = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '';\n}\n", "    $txt\
    \ = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n    $last_char\
    \ = substr($txt, -1, 1);\n    if (ctype_alpha($last_char)) {\n        return false;\n\
    \    }\n    $words = explode(' ', $txt);\n    foreach ($words as $word) {\n  \
    \      if (ctype_alpha($word)) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n   \
    \     return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    $last_char = $txt[strlen($txt)-1];\n    return preg_match('/[a-z]$/i',\
    \ $last_char);\n}", "    // Your code here\n    $words = explode(\" \", $txt);\n\
    \    $last_word = array_pop($words);\n    $last_char = $last_word[strlen($last_word)\
    \ - 1];\n    return preg_match('/^[a-z]$/i', $last_char);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks so much for your help. I really appreciate it. I tried your code,\
    \ but I got this error \"Warning: preg_match(): Unknown modifier '[' in C:\\xampp\\\
    htdocs\\test\\test.php on line 10\"\n<|/ c |>\n<| c |>\nI changed my code a little\
    \ bit. Try it now.\n<|/ c |>\n<| c |>\nThanks so much for your help. I really\
    \ appreciate it. I tried your code, but I got this error \"Warning: preg_match():\
    \ Unknown modifier '[' in C:\\xampp\\htdocs\\test\\test.php on line 10\"\n<|/\
    \ c |>\n<| c |>\nI changed my code a little bit. Try it now.\n<|/ c |>\n<| c |>\n\
    Thanks so much for your help. I really appreciate it. I tried your code, but I\
    \ got this error \"Warning: preg_match(): Unknown modifier '[' in C:\\xampp\\\
    htdocs\\test\\test.php on line 10\"\n<|/ c |>\n<| a tags=php,preg-match,regex\
    \ |>\n<code>\n<?php\n$string = \"apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie ", "    if (strlen($txt)\
    \ == 0) {\n        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n\
    \    $is_letter = preg_match('/^[a-z]+$/i', $last_char);\n    return !$is_letter;\n\
    }\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n\
    \    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "  $txt = trim($txt);\n\
    \  return substr($txt, -1, 1) != ' ' &&\n         substr($txt, -1, 1) != '.' &&\n\
    \         substr($txt, -1, 1) != '!' &&\n         substr($txt, -1, 1) != '?' &&\n\
    \         substr($txt, -1, 1) != '-' &&\n         substr($txt, -1, 1) != '_' &&\n\
    \         substr($txt, -1, 1) != '*' &&\n         substr($txt, -1, 1) != '/' &&\n\
    \         substr($txt, -1, 1) != '\"' &&\n         substr($txt, -1, 1) != '\\\
    '';\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}", "  $txt = trim($txt);\n  if (empty($txt)) {\n    return false;\n\
    \  }\n  return ctype_alpha($txt[strlen($txt) - 1]);\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "  return preg_match('/[a-z]$/i', $txt);\n}\n", "    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    $txt = str_replace(' ', '', $txt);\n\
    \    return substr($txt, -1, 1) != substr($txt, 0, 1);\n}\n", "    $txt = trim($txt);\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return $txt != '';\n}\n", "    $txt = trim($txt);\n    if ($txt === '') return\
    \ false;\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return $txt === '';\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-zA-Z\
    \ ]/', '', $txt);\n    return !empty($txt);\n}\n", "    // Your code here\n  \
    \  $txt = trim($txt);\n    $txt = str_replace(\" \", \"\", $txt);\n    $txt =\
    \ substr($txt, 0, -1);\n    $txt = strtolower($txt);\n    $txt = preg_replace(\"\
    /[^a-z]/\", \"\", $txt);\n    return $txt !== \"\";\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if ($txt === '') return false;\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return $txt === '';\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]+/i', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (strlen($txt) == 0) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt[strlen($txt)\
    \ - 1] != ' ';\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n      \
    \  return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "  $txt = trim($txt);\n  if (strlen($txt) == 0) {\n    return\
    \ false;\n  }\n  $last_char = substr($txt, -1, 1);\n  return ctype_alpha($last_char);\n\
    }\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n\
    \    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}", "    $txt = trim($txt);\n\
    \    $txt = str_replace(\" \", \"\", $txt);\n    $txt = substr($txt, 0, -1);\n\
    \    return preg_match(\"/^[a-zA-Z]+$/\", $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "  return preg_match('/[a-z]$/i', $txt);\n}", "    // Your code\
    \ here\n    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !empty($txt);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly for me. Thanks again.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for me. Thanks again.\n<|/ c |>\n<| a\
    \ |>\n<code>\n<?php\n$string = \"apple pi e \";\n$string = preg_replace('/[^a-z]/',\
    \ '', $string);\necho $string;", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-zA-Z\
    \ ]/', '', $txt);\n    return !empty($txt) && $txt[strlen($txt) - 1] == ' ';\n\
    }\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '';\n}\n",
  "    if (strlen($txt) == 0) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $last_char = substr($txt, -1, 1);\n    if (ctype_alpha($last_char))\
    \ {\n        return false;\n    }\n    $words = explode(' ', $txt);\n    foreach\
    \ ($words as $word) {\n        if (ctype_alpha($word)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n    $txt =\
    \ str_replace(' ', '', $txt);\n    $txt = substr($txt, -1);\n    return preg_match('/^[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (strlen($txt) == 0) {\n        return false;\n    }\n    $last_char =\
    \ substr($txt, -1, 1);\n    if ($last_char != ' ' && ctype_alpha($last_char))\
    \ {\n        return true;\n    }\n    return false;\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if ($last_char === ' ') {\n        $last_char = substr($txt, -2);\n\
    \    }\n    return preg_match('/^[a-z]$/i', $last_char);\n}\n", "    $txt = trim($txt);\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return $txt != '';\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n",
  "    $txt = trim($txt);\n    $last_char = substr($txt, -1, 1);\n    return preg_match('/^[a-z]+$/i',\
    \ $last_char);\n}\n", "    $last_char = $txt[strlen($txt)-1];\n    return preg_match('/[a-z]$/i',\
    \ $last_char);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n      \
    \  return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1, 1);\n    if (preg_match('/[a-z]$/i', $last_char)) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '';\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n   \
    \ if (preg_match('/[a-z]$/i', $last_char)) {\n        return true;\n    }\n  \
    \  return false;\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "   \
    \ $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n \
    \   $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !empty($txt) && $txt[strlen($txt)\
    \ - 1] == ' ';\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "    $txt\
    \ = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n    $txt\
    \ = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return\
    \ $txt[strlen($txt) - 1] === ' ';\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't seem to work. `check_if_last_char_is_a_letter(\"apple\
    \ pi e \")` returns true.\n<|/ c |>\n<| c |>\nI added a test case to my answer.\
    \ `check_if_last_char_is_a_letter(\"apple pi e \")` returns true.\n<|/ c |>\n\
    <| c |>\nI added a test case to my answer. `check_if_last_char_is_a_letter(\"\
    apple pi e \")` returns true.\n<|/ c |>\n<| c |>\nI added a test case to my answer.\
    \ `check_if_last_char_is_a_letter(\"apple pi e \")` returns true.\n<|/ c |>\n\
    <| c |>\nI added a test case to my answer. `check_if_last_char_is_a_letter(\"\
    apple pi e \")` returns true.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string\
    \ = \"apple pi e \";\n$string = strtolower($string);\n$string = preg_replace('/[^a-z]/',\
    \ '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\\
    s+$/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string\
    \ = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/', '',\
    \ $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\\
    s+/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string =\
    \ preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n\
    $string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\s+/',\
    \ '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\\
    s+/', '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string =\
    \ preg_replace('/\\s+/', '', $string);\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if ($last_char == ' ') {\n        $last_char = substr($txt, -2);\n\
    \    }\n    if (ctype_alpha($last_char)) {\n        return false;\n    }\n   \
    \ return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  \
    \  $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n \
    \   }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return $txt[strlen($txt) - 1] != ' ';\n}\n", "    $txt = trim($txt);\n  \
    \  if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if (preg_match('/[a-z]$/i', $last_char)) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    $txt = trim($txt);\n    if (strlen($txt)\
    \ == 0) {\n        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n\
    \    if (preg_match('/[a-z]$/i', $last_char)) {\n        return true;\n    }\n\
    \    return false;\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n  \
    \      return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    if (strlen($txt) == 0) {\n        return false;\n    }\n\
    \    $last_char = substr($txt, -1, 1);\n    $last_char_is_a_letter = ctype_alpha($last_char);\n\
    \    $last_char_is_not_a_word = strpos($txt, ' ') === false;\n    return $last_char_is_a_letter\
    \ && !$last_char_is_not_a_word;\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n\
    }\n", "    // Your code here\n    $words = explode(\" \", $txt);\n    $last_word\
    \ = array_pop($words);\n    $last_char = $last_word[strlen($last_word) - 1];\n\
    \    $is_letter = ctype_alpha($last_char);\n    return $is_letter;\n}\n</code>\n\
    <|/ a tags=php,string,regex |>\n<| c |>\nThanks so much for this! I ended up using\
    \ your first solution and it worked perfectly. Thanks again!\n<|/ c |>\n<| a |>\n\
    <code>\n<?php\n$string = \"apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\
    \ pie apple pie apple pie apple pie apple pie apple ", "    $last_char = $txt[strlen($txt)-1];\n\
    \    return !preg_match('/[^A-Za-z]$/', $last_char);\n}\n", "  $txt = trim($txt);\n\
    \  if (strlen($txt) == 0) {\n    return false;\n  }\n  $last_char = substr($txt,\
    \ -1, 1);\n  return preg_match('/^[A-Za-z]$/', $last_char);\n}\n", "  return preg_match('/[^A-Za-z]$/',\
    \ $txt);\n}\n", "    if (strlen($txt) == 0)\n        return false;\n    $last_char\
    \ = substr($txt, -1, 1);\n    if (preg_match('/[a-z]$/i', $last_char))\n     \
    \   return true;\n    return false;\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '';\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if the last character is a space or punctuation\
    \ mark.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself. It works.\n<|/ c\
    \ |>\n<| c |>\n: It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it yourself. It works. Try it yourself. It works.\
    \ Try it yourself. It works. Try it ", "    $txt = trim($txt);\n    $last_char\
    \ = substr($txt, -1, 1);\n    $is_letter = ctype_alpha($last_char);\n    return\
    \ !$is_letter;\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n      \
    \  return false;\n    }\n    $last_char = substr($txt, -1, 1);\n    $is_letter\
    \ = preg_match('/^[a-z]+$/i', $last_char);\n    return !$is_letter;\n}\n", " \
    \   $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !preg_match('/[a-z]+$/', $txt);\n}\n", "    $txt = trim($txt);\n \
    \   if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if ($txt === '') return false;\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return $txt === '';\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if ($txt === '') return false;\n    $txt = strtolower($txt);\n    $txt =\
    \ preg_replace('/[^a-z]+/i', '', $txt);\n    return $txt === '';\n}\n", "    $txt\
    \ = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n    }\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !preg_match('/[a-z]+$/', $txt);\n}\n", "  return preg_match('/^[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    $txt = strtolower($txt);\n    $txt\
    \ = preg_replace('/[^a-z]/', '', $txt);\n    return !empty($txt) && $txt[strlen($txt)\
    \ - 1] == ' ';\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n      \
    \  return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if (preg_match('/[a-zA-Z]/', $last_char)) {\n        return false;\n\
    \    }\n    return true;\n}\n", "    // Your code here\n    $txt = trim($txt);\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i', '', $txt);\n\
    \    return !empty($txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt[strlen($txt) - 1] === ' ';\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
