name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = array();\n    foreach ($arr as $key => $value) {\n  \
    \      $result[$key] = $value;\n    }\n    asort($result);\n    return $result;\n\
    }\n", "    $sorted = array();\n    foreach ($arr as $key => $value) {\n      \
    \  $bin = decbin($value);\n        $len = strlen($bin);\n        $count = 0;\n\
    \        for ($i = 0; $i < $len; $i++) {\n            $count += $bin[$i] == '1';\n\
    \        }\n        $sorted[$key] = $count;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n", "    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $ones = $arr[$i];\n        $bin = decbin($ones);\n        $binLen\
    \ = strlen($bin);\n        $binLen = strlen($bin);\n        $bin = str_pad($bin,\
    \ $binLen, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, $binLen - 8);\n        $bin = str_pad($bin, 8,\
    \ '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen - 8);\n        $bin\
    \ = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen\
    \ - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen - 8);\n        $bin =\
    \ str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen\
    \ - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen - 8);\n        $bin =\
    \ str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen\
    \ - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen - 8);\n        $bin",
  "    $sorted = array();\n    foreach ($arr as $key => $value) {\n        $sorted[$key]\
    \ = $value;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $result\
    \ = array();\n    $ones = array();\n    foreach ($arr as $item) {\n        $bin\
    \ = decbin($item);\n        $ones_count = substr_count($bin, '1');\n        $result[]\
    \ = $item;\n        if ($ones_count > 0) {\n            $ones[] = $ones_count;\n\
    \        }\n    }\n    foreach ($ones as $one) {\n        foreach ($ones as $other_one)\
    \ {\n            if ($one == $other_one) {\n                continue;\n      \
    \      }\n            $result[] = pow(2, $one) * pow(2, $other_one);\n       \
    \ }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ your solution, however I cannot get it to work. Could you please explain how\
    \ you got it to work?\n<|/ c |>\n<| c |>\nI added some comments to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThank you very much! I understand it now.\
    \ :)\n<|/ c |>\n<| a dscore=1 |>\nI made a solution which uses only O(n) time\
    \ and O(1) space. \n<code>\n<?php\n", "    $result = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n", "    $result = array();\n \
    \   foreach ($arr as $key => $val) {\n        $result[$key] = $val;\n    }\n \
    \   array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>", " \
    \   $sorted = array();\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ > 0) {\n            $sorted[$key] = $value;\n        }\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n", "    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $bin = str_pad($bin, $len, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);", "    $result = array();\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    return $result;\n}\n", "    $len = count($arr);\n\
    \    $ones = array_fill(0, $len, 1);\n    $zeros = array_fill(0, $len, 0);\n \
    \   $bins = array_merge($ones, $zeros);\n    foreach ($arr as $key => $val) {\n\
    \        $bins[$key] = decbin($val);\n    }\n    array_multisort($bins, $arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $arr = [\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n  \
    \  6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => ", "    $count =\
    \ array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\n", "    $sorted = array();\n    foreach ($arr as $key => $val) {\n        $sorted[$key]\
    \ = $val;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $sorted\
    \ = array();\n    $ones = array();\n    $zeros = array();\n    foreach ($arr as\
    \ $num) {\n        if ($num > 0) {\n            $ones[] = $num;\n        } else\
    \ {\n            $zeros[] = $num;\n        }\n    }\n    foreach ($ones as $one)\
    \ {\n        $pos = array_search($one, $zeros);\n        $sorted[] = $zeros[$pos];\n\
    \        $zeros[$pos] = 0;\n    }\n    foreach ($zeros as $zero) {\n        $pos\
    \ = array_search($zero, $ones);\n        $sorted[] = $ones[$pos];\n        $ones[$pos]\
    \ = 1;\n    }\n    return $sorted;\n}\n", "    foreach ($arr as $key => $val)\
    \ {\n        $arr[$key] = $arr[$key] ? 1 : 0;\n    }\n    array_multisort($arr,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n", "    $result = array();\n    foreach\
    \ ($arr as $key => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php", "    $result = array();\n    foreach ($arr as\
    \ $key => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. Try `sort_array(array(-2, -3, -4, -5, -6))`\n\
    <|/ c |>\n<| c |>\nIt works, because `asort` sorts array in ascending order. `-1`\
    \ is less than `-2`, so `-1` is placed before `-2`\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if you have negative numbers. Try `sort_array(array(-2, -3, -4, -5, -6))`\n\
    <|/ c |>\n<| c |>\nIt works, because `asort` sorts array in ascending order. `-1`\
    \ is less than `-2`, so `-1` is placed before `-2`\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if you have negative numbers. Try `sort_array(array(-2, -3, -4, -5, -6))`\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "    $sorted = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $bin = decbin($value);\n        $bin = substr($bin,\
    \ strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin =\
    \ str_pad($bin, strlen($bin", "    $count = array_count_values($arr);\n    arsort($count);\n\
    \    return array_keys($count);\n}\n", "    foreach ($arr as $key => $val) {\n\
    \        if ($val < 0) {\n            $arr[$key] = -$val;\n        }\n    }\n\
    \    asort($arr);\n    return $arr;\n}\n", "    $result = array();\n    $size\
    \ = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n        $result[$i] =\
    \ $arr[$i];\n    }\n    array_multisort(\n        array_count_values($arr),\n\
    \        SORT_ASC,\n        $result\n    );\n    return $result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like the idea of using array_count_values() to sort\
    \ the array. Thanks!\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n$array = array(\n\
    \    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n  \
    \  array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a',\
    \ 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b',\
    \ 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c',\
    \ 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd',\
    \ 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n\
    \    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n  \
    \  array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a',\
    \ 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b',\
    \ 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c',\
    \ 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd',\
    \ 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n\
    \    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n  \
    \  array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a',\
    \ 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b',\
    \ 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c',\
    \ 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd',\
    \ 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n    array('a', 'b', 'c', 'd', 'e'),\n\
    \    array('a', '", "    sort($arr, function($a, $b) {\n        $ones = bindec($a\
    \ ^ $b);\n        if ($ones === 0) {\n            return $a < $b ? -1 : 1;\n \
    \       }\n        return $ones < 0 ? -1 : 1;\n    });\n    return $arr;\n}\n",
  "    $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    asort($result);\n    return $result;\n}\n", "    $len\
    \ = count($arr);\n    if ($len < 2) {\n        return $arr;\n    }\n    $ones\
    \ = array_fill(0, $len, 1);\n    $zeros = array_fill(0, $len - 1, 0);\n    $ones_count\
    \ = array_sum($ones);\n    $zeros_count = array_sum($zeros);\n    $ones_count\
    \ = max($ones_count, $zeros_count);\n    $max_ones_count = max($ones_count, $zeros_count);\n\
    \    $max_ones_count = min($max_ones_count, $len);\n    $ones_sum = 0;\n    $zeros_sum\
    \ = 0;\n    for ($i = 0; $i < $len; $i++) {\n        $ones_sum += $ones[$i];\n\
    \        $zeros_sum += $zeros[$i];\n        if ($ones_sum > $max_ones_count) {\n\
    \            $ones_sum -= $max_ones_count;\n            $zeros_sum += $max_ones_count;\n\
    \            $ones[$i] = 0;\n        } else if ($zeros_sum > $max_ones_count)\
    \ {\n            $zeros_sum -= $max_ones_count;\n            $ones_sum += $max_ones_count;\n\
    \            $zeros[$i] = 0;\n        }\n    }\n    $ones_sum = $ones_sum + $max_ones_count;\n\
    \    $zeros_sum = $zeros_sum + $max_ones_count;\n    $ones_sum = $ones_sum / $max_ones_count;\n\
    \    $zeros_sum = $zeros_sum / $max_ones_count;\n    $ones_sum = $ones_sum * $max_ones_count;\n\
    \    $zeros_sum = $zeros_sum * $max_ones_count;\n    $ones = array_fill(0, $len,\
    \ round($ones_sum));\n    $zeros = array_fill(0, $len, round($zeros_sum));\n \
    \   $ones_count = array_sum($ones);\n    $zeros_count = array_sum($zeros);\n \
    \   $ones_count = max($ones_count, $zeros_count);\n    $max_ones_count = max($ones_count,\
    \ $zeros_count);\n    $max_ones_count = min($max_ones_count, $len);\n    $ones_sum\
    \ = 0;\n    $zeros_sum = 0;\n    for ($i = 0; $i < $len; $i++) {\n        $ones_sum\
    \ += $ones[$i];\n        $zeros_sum += $zeros[$i];\n        if ($ones_sum > $max_ones_count)\
    \ {\n            $ones_sum -= $max_ones_count;\n            $zeros_sum += $max_ones_count;\n\
    \            $ones[$i] = 0;\n        } else if ($zeros_sum > $max_ones_count)\
    \ {\n            $zeros_", "    $len = count($arr);\n    if ($len < 2) {\n   \
    \     return $arr;\n    }\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = bindec($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php", "    $result\
    \ = array();\n    $ones = array();\n    $zeros = array();\n    foreach ($arr as\
    \ $item) {\n        if ($item > 0) {\n            $ones[] = $item;\n        }\
    \ else {\n            $zeros[] = $item;\n        }\n    }\n    foreach ($ones\
    \ as $item) {\n        $result[] = $item;\n    }\n    foreach ($zeros as $item)\
    \ {\n        $result[] = $item;\n    }\n    foreach ($result as $key => $item)\
    \ {\n        $result[$key] = $item - max($ones, $zeros);\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    foreach ($arr as $key => $val) {\n        $result[$key]\
    \ = $val;\n    }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n\
    }", "    $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    asort($result);\n    return $result;\n}\n", "    $sorted\
    \ = array();\n    $ones = array();\n    $zeros = array();\n    foreach ($arr as\
    \ $val) {\n        if ($val < 0) {\n            $sorted[] = $val;\n          \
    \  $ones[] = 1;\n            $zeros[] = 0;\n        } elseif ($val > 0) {\n  \
    \          $sorted[] = $val;\n            $zeros[] = 0;\n            $ones[] =\
    \ 1;\n        } else {\n            $sorted[] = $val;\n            $zeros[] =\
    \ 0;\n            $ones[] = 0;\n        }\n    }\n    foreach ($ones as $key =>\
    \ $val) {\n        $sorted[] = $val;\n    }\n    foreach ($zeros as $key => $val)\
    \ {\n        $sorted[] = $val;\n    }\n    return $sorted;\n}", "    $count =\
    \ array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `sort_array(array(-2,\
    \ -3, -4, -5, -6))` returns `array(-6, -5, -4, -3, -2)` instead of `array(-6,\
    \ -5, -4, -3, -2)`\n<|/ c |>\n<| c |>\nIt works fine for me. `sort_array(array(-2,\
    \ -3, -4, -5, -6))` returns `array(-6, -5, -4, -3, -2)`. What PHP version are\
    \ you using?\n<|/ c |>\n<| c |>\nI'm using PHP 7.2.12\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 7.2.12 and it works fine. Maybe you have a problem with your PHP installation.\
    \ Try reinstalling it.\n<|/ c |>\n<| c |>\nI tested it on PHP 7.2.12 and it works\
    \ fine. Maybe you have a problem with your PHP installation. Try reinstalling\
    \ it.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "    $sorted = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $ones\
    \ = bindec($arr[$i]);\n        $sorted[$i] = $ones;\n    }\n    array_multisort($sorted,\
    \ $arr);\n    return $arr;\n}\n", "    $result = array();\n    $ones = array();\n\
    \    foreach ($arr as $key => $value) {\n        if ($value == 0) {\n        \
    \    $ones[] = $key;\n        } else {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($ones as $key => $value) {\n        $result[$value]\
    \ = $ones[$key];\n    }\n    return $result;\n}\n", "    foreach ($arr as $key\
    \ => $val) {\n        $arr[$key] = $val < 0 ? -$val : $val;\n    }\n    array_multisort($arr,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr = array(1, 5, 2, 3, 4);\n$arr = array_reverse($arr);\n\
    $arr = array_count_values($arr);\n$arr = array_reverse($arr);\n$arr = array_keys($arr);\n\
    $arr = array_reverse($arr);\n$arr = array_values($arr);\n$arr = array_reverse($arr);\n\
    print_r($arr);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = array(1, 5, 2, 3, 4);\n$arr = array_reverse($arr);\n$arr = array_count_values($arr);\n\
    $arr = array_reverse($arr);\n$arr = array_keys($arr);\n$arr = array_reverse($arr);\n\
    $arr = array_values($arr);\n$arr = array_reverse($arr);\nprint_r($arr);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(1, 5,\
    \ 2, 3, 4);\n$arr = array_reverse($arr);\n$arr = array_count_values($arr);\n$arr\
    \ = array_reverse($arr);\n$arr = array_keys($arr);\n$arr = array_reverse($arr);\n\
    $arr = array_values($arr);\n$arr = array_reverse($arr);\nprint_r($arr);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$arr = array(1, 5,\
    \ 2, 3, 4);\n$arr = array_reverse($arr);\n$arr = array_count_values($arr);\n$arr\
    \ = array_reverse($arr);\n$arr = array_keys($arr);\n$arr = array_reverse($arr);\n\
    $arr = array_values($arr);\n$arr = array_reverse($arr);\nprint_r($arr);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = array(1, 5,\
    \ 2, 3, 4);\n$arr = array_reverse($arr);\n$arr = array_count_values($arr);\n$arr\
    \ = array_reverse($arr);\n$arr = array_keys($arr);\n$arr = array_reverse($arr);\n\
    $arr = array_values($arr);\n$arr = array_reverse($arr);\nprint_", "    $count\
    \ = array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\n", "    $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n", "    $result = array();\n    foreach ($arr as $key => $val) {\n        $result[$key]\
    \ = $val;\n    }\n    asort($result);\n    return $result;\n}\n", "    $sorted\
    \ = array();\n    foreach ($arr as $key => $value) {\n        $sorted[$key] =\
    \ $value;\n    }\n    array_multisort($sorted, SORT_ASC, $arr);\n    return $arr;\n\
    }\n", "    $sorted = array();\n    $count = count($arr);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        $binary = '';\n        for ($j = 0; $j < 8; $j++)\
    \ {\n            $binary .= ($arr[$i] & 1) ? '1' : '0';\n            $arr[$i]\
    \ >>= 1;\n        }\n        $sorted[$i] = $binary;\n    }\n    return $sorted;\n\
    }\n", "    $sorted = array();\n    $count = count($arr);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        $bin = decbin($arr[$i]);\n        $bin = str_pad($bin,\
    \ strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin,\
    \ strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin,\
    \ strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin,\
    \ strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin,\
    \ strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8", "  \
    \  $sorted = array();\n    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n\
    \        $len = strlen($bin);\n        $count = 1;\n        for ($i = 0; $i <\
    \ $len; $i++) {\n            if ($bin[$i] === '1') {\n                $count++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    $sorted[$key] = $count * pow(2, $len);\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts,\
    \ but I already tried this and it doesn't work. Your code sorts the array in descending\
    \ order, but I need it in ascending order.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that sorts ascending. Hope it helps.\n<|/ c |>\n<| c |>\n\
    I appreciate your efforts, but I already tried this and it doesn't work. Your\
    \ code sorts the array in descending order, but I need it in ascending order.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that sorts ascending.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but I already\
    \ tried this and it doesn't work. Your code sorts the array in descending order,\
    \ but I need it in ascending order.\n<|/ c |>\n<| a |>\n<code>\n<?php", "    $sorted\
    \ = array();\n    foreach ($arr as $key => $value) {\n        $binary = '';\n\
    \        for ($i = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, 8, '0',\
    \ STR_PAD_LEFT);\n        $binaryArray = str_split($binary);\n        $binaryArray\
    \ = array_filter($binaryArray, 'strlen');\n        $binaryArray = array_map('bindec',\
    \ $binaryArray);\n        $binaryArray = array_filter($binaryArray, 'strlen');\n\
    \        $binaryArray = array_map('decbin', $binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray, 'strlen');\n        $binaryArray = array_map('str_pad',\
    \ $binaryArray);\n        $binaryArray = array_filter($binaryArray, 'strlen');\n\
    \        $binaryArray = array_map('str_pad', $binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray, 'strlen');\n        $binaryArray = array_map('str_pad',\
    \ $binaryArray);\n        $binaryArray = array_filter($binaryArray, 'strlen');\n\
    \        $binaryArray = array_map('str_pad', $binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray, 'strlen');\n        $binaryArray = array_map('str_pad',\
    \ $binaryArray);\n        $binaryArray = array_filter($binaryArray, 'strlen');\n\
    \        $binaryArray = array_map('str_pad', $binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray, 'strlen');\n        $binaryArray = array_map('str_pad',\
    \ $binaryArray);\n        $binaryArray = array_filter($binaryArray, 'strlen');\n\
    \        $binaryArray = array_map('str_pad', $binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray, 'strlen');\n        $binaryArray = array_map('str_pad',\
    \ $binaryArray);\n        $binaryArray = array_filter($binaryArray, 'strlen');\n\
    \        $binaryArray = array_map('str_pad', $binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray, 'strlen');\n        $binaryArray = array_map('str_pad',\
    \ $binaryArray);\n        $binaryArray = array_filter($binaryArray, 'strlen');\n\
    \        $binaryArray = array_map('str_pad', $binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray, 'strlen');\n        $binaryArray = array_map('str_pad',\
    \ $binaryArray);\n        $binaryArray", "    $sorted = array();\n    foreach\
    \ ($arr as $key => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n\
    \        $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if\
    \ ($bin[$i] === '1') {\n                $count++;\n            } else {\n    \
    \            break;\n            }\n        }\n        $sorted[$key] = $count\
    \ * 10 + $val;\n    }\n    return $sorted;\n}\n", "    $sorted = array();\n  \
    \  $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $bin\
    \ = decbin($arr[$i]);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n \
    \       $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);",
  "    $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    array_multisort($result, SORT_ASC, $arr);\n    return\
    \ $arr;\n}\n", "    $result = array();\n    foreach ($arr as $item) {\n      \
    \  $result[$item] = count(decbin($item));\n    }\n    asort($result);\n    return\
    \ array_keys($result);\n}\n", "    $result = [];\n    $ones = array_fill(0, count($arr),\
    \ 1);\n    foreach ($arr as $key => $val) {\n        $result[$key] = $val;\n \
    \   }\n    foreach ($ones as $key => $val) {\n        $result[$key] = $val - 1;\n\
    \    }\n    return $result;\n}\n", "    $result = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem\
    \ to work. `sort_array(array(1,5,2,3,4))` returns `array(1,2,3,4,5)` instead of\
    \ `array(-2,-3,-4,-5,-6)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ PHP 5.3.3. What PHP version do you use?\n<|/ c |>\n<| c |>\nI tested it on PHP\
    \ 5.3.6 and it works. I used PHP 5.3.3. What PHP version do you use?\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.3.6 and it works. I used PHP 5.3.3. What PHP version\
    \ do you use?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.6 and it works. I used\
    \ PHP 5.3.3. What PHP version do you use?\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "    $sorted = array();\n    foreach ($arr as $key => $value) {\n\
    \        $binary = '';\n        for ($i = 0; $i < strlen($value); $i++) {\n  \
    \          $binary .= str_pad(decbin($value[$i]), 8, '0', STR_PAD_LEFT);\n   \
    \     }\n        $binary = str_pad($binary, strlen($value), '0', STR_PAD_LEFT);\n\
    \        $binary = str_pad($binary, strlen($value), '0', STR_PAD_BOTH);\n    \
    \    $binary = str_pad($binary, strlen($value), '0', STR_PAD_RIGHT);\n       \
    \ $binary = str_pad($binary, strlen($value), '0', STR_PAD_BOTH);\n        $binary\
    \ = str_pad($binary, strlen($value), '0', STR_PAD_RIGHT);\n        $binary = str_pad($binary,\
    \ strlen($value), '0', STR_PAD_BOTH);\n        $binary = str_pad($binary, strlen($value),\
    \ '0', STR_PAD_RIGHT);\n        $binary = str_pad($binary, strlen($value), '0',\
    \ STR_PAD_BOTH);\n        $binary = str_pad($binary, strlen($value), '0', STR_PAD_RIGHT);\n\
    \        $binary = str_pad($binary, strlen($value), '0', STR_PAD_BOTH);\n    \
    \    $binary = str_pad($binary, strlen($value), '0', STR_PAD_RIGHT);\n       \
    \ $binary = str_pad($binary, strlen($value), '0', STR_PAD_BOTH);\n        $binary\
    \ = str_pad($binary, strlen($value), '0', STR_PAD_RIGHT);\n        $binary = str_pad($binary,\
    \ strlen($value), '0', STR_PAD_BOTH);\n        $binary = str_pad($binary, strlen($value),\
    \ '0', STR_PAD_RIGHT);\n        $binary = str_pad($binary, strlen($value), '0',\
    \ STR_PAD_BOTH);\n        $binary = str_pad($binary, strlen($value), '0', STR_PAD_RIGHT);\n\
    \        $binary = str_pad($binary, strlen($value), '0', STR_PAD_BOTH);\n    \
    \    $binary = str_pad($binary, strlen($value), '0', STR_PAD_RIGHT);\n       \
    \ $binary = str_pad($binary, strlen($value), '0', STR_PAD_BOTH);\n        $binary\
    \ = str_pad($binary, strlen($value", "    $sorted = array();\n    foreach ($arr\
    \ as $key => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n\
    \        $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if\
    \ ($bin[$i] === '1') {\n                $count++;\n            } else {\n    \
    \            break;\n            }\n        }\n        $sorted[$key] = $count\
    \ * pow(2, $len);\n    }\n    return $sorted;\n}", "    $result = array();\n \
    \   foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value < 0) {\n      \
    \      $result[$key] = -$value;\n        }\n    }\n    array_multisort($result,\
    \ SORT_ASC, $arr);\n    return $arr;\n}", "    $sorted = array();\n    $ones =\
    \ array();\n    foreach ($arr as $num) {\n        $ones[] = $num;\n    }\n   \
    \ sort($ones);\n    foreach ($ones as $num) {\n        $sorted[] = $num;\n   \
    \ }\n    return $sorted;\n}\n", "    $len = count($arr);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $ones = array_count_values(str_split($arr[$i]));\n\
    \        arsort($ones);\n        $ones = array_keys($ones);\n        $ones = array_reverse($ones);\n\
    \        $ones = array_merge($ones, array_fill(0, $len - $i, $i));\n        $arr[$i]\
    \ = implode('', $ones);\n    }\n    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like your solution, but I wonder if there is a way to do this without\
    \ using any additional functions?\n<|/ c |>\n<| c |>\nI added a solution without\
    \ using any additional functions. But I wonder if there is a way to do this without\
    \ using any additional functions?\n<|/ c |>\n<| c |>\nI added a solution without\
    \ using any additional functions. But I wonder if there is a way to do this without\
    \ using any additional functions?\n<|/ c |>\n<| c |>\nI added a solution without\
    \ using any additional functions. But I wonder if there is a way to do this without\
    \ using any additional functions?\n<|/ c |>\n<| a dscore=1 |>\nI made a solution\
    \ that uses no additional functions. I used the fact that PHP stores numbers as\
    \ strings and that you can convert a number to a string by adding an empty string\
    \ to the number.\n<code>\n<?php\n\n$arr = array(\n    1,\n    5,\n    2,\n   \
    \ 3,\n    4,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n\
    \    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n\
    \    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n\
    \    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n\
    \    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n\
    \    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n\
    \    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,",
  "    $result = array();\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        $result[$i] = $arr[$i];\n    }\n    array_multisort($result,\
    \ $size);\n    return $result;\n}\n", "    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $arr);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $", "    $result\
    \ = array();\n    foreach ($arr as $key => $val) {\n        $result[$key] = $val;\n\
    \    }\n    array_multisort(array_count_values($result), SORT_DESC, $result);\n\
    \    return $result;\n}\n", "    foreach ($arr as $key => $val) {\n        if\
    \ ($val < 0) {\n            $arr[$key] = abs($val);\n        }\n    }\n    asort($arr);\n\
    \    return $arr;\n}", "    $sorted = array();\n    foreach ($arr as $key => $val)\
    \ {\n        $bin = decbin($val);\n        $bin = substr($bin, strlen($bin) -\
    \ 1);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, ",
  "    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones = array_sum(str_split($arr[$i]));\n\
    \        if ($ones > 0) {\n            $arr[$i] = $ones;\n        } else {\n \
    \           $arr[$i] = decbin($ones);\n        }\n    }\n    return $arr;\n}\n",
  "    sort($arr, function($a, $b) {\n        $ones = bindec($a ^ $b);\n        $decs\
    \ = $a - $b;\n        if ($ones === 0) {\n            return $decs;\n        }\n\
    \        return $ones > 0 ? $decs : -$decs;\n    });\n    return $arr;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I tested your solution and\
    \ it works. But I still don't understand why my code doesn't work. Could you please\
    \ explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer.\n<|/ c |>\n<| a dscore=1 |>\nThe problem is that the sort function\
    \ doesn't know what to do with negative numbers. When you sort a negative number\
    \ it sorts it to the end of the array. \n<code>\n<?php\n$array = array(1,5,2,3,4);\n\
    sort($array);\nprint_r($array);", "    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $arr);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(implode('', $ones), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($len) {\n        return\
    \ substr($v, 0, $len);\n    }, $bin);\n    $bin = array_map(function ($v) use\
    \ ($len) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n   \
    \ }, $bin);\n    $bin = array_map(function ($v) {\n        return str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($v)\
    \ {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n\
    \    $bin = array_map(function ($v) {\n        return str_pad(decbin($v), $len,\
    \ '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($v) {\n \
    \       return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n\
    \    $bin = array_map(function ($v) {\n        return str_pad(decbin($v), $len,\
    \ '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($v) {\n \
    \       return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n\
    \    $bin = array_map(function ($v) {\n        return str_pad(decbin($v), $len,\
    \ '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($v) {\n \
    \       return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n\
    \    $bin = array_map(function ($v) {\n        return str_pad(decbin($v), $len,\
    \ '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($v) {\n \
    \       return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n\
    \    $bin = array_map(function ($v) {\n        return str", "    $sorted = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $ones\
    \ = $arr[$i];\n        $j = 0;\n        while ($j < $count) {\n            if\
    \ ($ones & 1) {\n                $sorted[$j] = $arr[$j];\n                $j++;\n\
    \            }\n            $ones = $ones & ~1;\n        }\n        $sorted[$i]\
    \ = $j;\n    }\n    return $sorted;\n}\n", "    $count = array_count_values($arr);\n\
    \    arsort($count);\n    return array_keys($count);\n}\n", "    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n", "    $result = array();\n\
    \    foreach ($arr as $key => $val) {\n        $result[$key] = $val;\n    }\n\
    \    array_multisort(array_count_values($result), SORT_ASC, $result);\n    return\
    \ $result;\n}\n", "    $result = array();\n    foreach ($arr as $key => $value)\
    \ {\n        $result[$key] = $value;\n    }\n    array_multisort($result, SORT_ASC,\
    \ $arr);\n    return $arr;\n}\n", "    $result = array();\n    foreach ($arr as\
    \ $key => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n", "    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = substr($bin, 0,\
    \ strlen($bin) - 1);\n        $count = substr_count($bin, '1');\n        $sorted[$key]\
    \ = $count;\n    }\n    array_multisort($sorted, $arr);\n    return $arr;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! But I need a solution\
    \ without using any additional functions. I edited my question to make it more\
    \ clear.\n<|/ c |>\n<| c |>\nI edited my answer, I hope it helps you.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! But I need a solution without using any additional\
    \ functions. I edited my question to make it more clear.\n<|/ c |>\n<| c |>\n\
    I edited my answer, I hope it helps you.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\nprint_r($array);", "    $result\
    \ = [];\n    $ones = [];\n    foreach ($arr as $item) {\n        if ($item < 0)\
    \ {\n            $result[] = $item;\n        } else {\n            $ones[] = $item;\n\
    \        }\n    }\n    sort($ones);\n    foreach ($ones as $key => $value) {\n\
    \        $result[] = $value;\n    }\n    return $result;\n}\n", "    $result =\
    \ array();\n    $ones = array();\n    foreach ($arr as $item) {\n        $bin\
    \ = decbin($item);\n        $ones_count = substr_count($bin, '1');\n        $result[]\
    \ = $item;\n        $ones[] = $ones_count;\n    }\n    array_multisort($ones,\
    \ $result);\n    return $result;\n}\n", "    $sorted = array();\n    foreach ($arr\
    \ as $key => $val) {\n        $bin = decbin($val);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str", "    $result = array();\n    $ones\
    \ = array();\n    $zeros = array();\n    $len = count($arr);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        $ones[$i] = $arr[$i] & 1;\n        $zeros[$i] =\
    \ $arr[$i] & 2;\n    }\n    for ($i = 0; $i < $len; $i++) {\n        if ($ones[$i])\
    \ {\n            $result[] = $arr[$i];\n        }\n        if ($zeros[$i]) {\n\
    \            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n}\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if there\
    \ are negative numbers in the array. Try `sort_array(array(-2, -3, -4, -5, -6))`\n\
    <|/ c |>\n<| c |>\n: I added a solution for negative numbers. Please take a look.\n\
    <|/ c |>\n<| c |>\nI added a solution for negative numbers. Please take a look.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $binary = '';\n        for ($j\
    \ = 0; $j < strlen($arr[$i]); $j++) {\n            $binary .= str_pad(decbin($arr[$i][$j]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, 8, '0',\
    \ STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary =\
    \ str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, -8);\n\
    \        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary =\
    \ substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n",
  "    $len = count($arr);\n    if ($len < 2) {\n        return $arr;\n    }\n   \
    \ $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0, $len, 0);\n    foreach\
    \ ($arr as $i => $val) {\n        $bin[$i] = decbin($val);\n    }\n    array_multisort($ones,\
    \ $bin, $arr);\n    return $arr;\n}\n", "    sort($arr, function($a, $b) use ($arr)\
    \ {\n        $ones = array_sum(str_split(decbin($a)));\n        $twos = array_sum(str_split(decbin($b)));\n\
    \        if ($ones == $twos) {\n            return $a - $b;\n        }\n     \
    \   return $ones - $twos;\n    });\n    return $arr;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$arr = [\n    1 => 1,\n    2 => 1,\n  \
    \  3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n\
    \    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 =>\
    \ 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n \
    \   20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 =>\
    \ 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n \
    \   31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 =>\
    \ 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n \
    \   42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 =>\
    \ 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n \
    \   53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 =>\
    \ 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n \
    \   64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 =>\
    \ 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n \
    \   75 => 1,\n    76 => 1,\n    77 => 1,\n    ", "    $result = array();\n   \
    \ $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n        $result[$i]\
    \ = $arr[$i];\n    }\n    array_multisort(\n        array_count_values($result),\n\
    \        SORT_NUMERIC,\n        $arr\n    );\n    return $arr;\n}\n</code>\n<|/\
    \ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if there are duplicate\
    \ values in the array. For example, `sort_array(array(1,1,2,3,4))` returns `array(1,2,3,4)`.\n\
    <|/ c |>\n<| c |>\nIt works fine for me. `sort_array(array(1,1,2,3,4))` returns\
    \ `array(1,2,3,4)`. What PHP version are you using?\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.5.9 and PHP 5.6.6. Both returned `array(1,2,3,4)`.\n<|/ c |>\n<|\
    \ c |>\nI tested it on PHP 5.5.9 and PHP 5.6.6. Both returned `array(1,2,3,4)`.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and PHP 5.6.6. Both returned `array(1,2,3,4)`.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n        $bin\
    \ = str_pad($bin, strlen($bin), \"0\", STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin = str", "    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n", "    $result = array();\n\
    \    foreach ($arr as $key => $val) {\n        $result[$key] = $val;\n    }\n\
    \    asort($result);\n    return $result;\n}\n", "    foreach ($arr as $key =>\
    \ $val) {\n        $arr[$key] = $arr[$key] ? 1 : 0;\n    }\n    array_multisort($arr);\n\
    \    return $arr;\n}\n", "    $result = array();\n    foreach ($arr as $key =>\
    \ $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n   \
    \ return $result;\n}\n", "    $sorted = array();\n    $ones = array();\n    $zeros\
    \ = array();\n    foreach ($arr as $item) {\n        if ($item < 0) {\n      \
    \      $sorted[] = -$item;\n            $ones[] = 1;\n            $zeros[] = 0;\n\
    \        } else {\n            $ones[] = 0;\n            $zeros[] = 0;\n     \
    \       $sorted[] = $item;\n        }\n    }\n    foreach ($ones as $i => $one)\
    \ {\n        $sorted[] = $one;\n    }\n    foreach ($zeros as $i => $zero) {\n\
    \        $sorted[] = $zero;\n    }\n    return $sorted;\n}\n", "    $sorted =\
    \ array();\n    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n\
    \    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n    \
    \    $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, -1);\n        $sorted[$key] = $bin;\n    }\n    array_multisort($sorted,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>", "    foreach ($arr as $key =>\
    \ $value) {\n        if ($value == 0) {\n            unset($arr[$key]);\n    \
    \    } else {\n            $arr[$key] = $value;\n        }\n    }\n    asort($arr);\n\
    \    return $arr;\n}\n", "    $len = count($arr);\n    $ones = array_fill(0, $len,\
    \ 1);\n    $bin = array_map(function ($num) {\n        return str_pad(decbin($num),\
    \ 8, '0', STR_PAD_LEFT);\n    }, $arr);\n    $bin = array_map(function ($bin)\
    \ {\n        return str_pad(implode('', $bin), 8, '0', STR_PAD_LEFT);\n    },\
    \ $bin);\n    $bin = array_map(function ($bin) {\n        return str_pad(implode('',\
    \ $bin), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($bin) {\n        return str_pad(implode('', $bin), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($bin) {\n        return str_pad(implode('',\
    \ $bin), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($bin) {\n        return str_pad(implode('', $bin), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($bin) {\n        return str_pad(implode('',\
    \ $bin), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($bin) {\n        return str_pad(implode('', $bin), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($bin) {\n        return str_pad(implode('',\
    \ $bin), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($bin) {\n        return str_pad(implode('', $bin), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($bin) {\n        return str_pad(implode('',\
    \ $bin), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($bin) {\n        return str_pad(implode('', $bin), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($bin) {\n        return str_pad(implode('',\
    \ $bin), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($bin) {\n        return str_pad(implode('', $bin), 8, '0', STR_PAD_LEFT", " \
    \   $result = array();\n    $ones = array();\n    $zeros = array();\n    foreach\
    \ ($arr as $item) {\n        if ($item > 0) {\n            $ones[] = $item;\n\
    \        } else {\n            $zeros[] = $item;\n        }\n    }\n    foreach\
    \ ($ones as $key => $value) {\n        $result[] = $value;\n    }\n    foreach\
    \ ($zeros as $key => $value) {\n        $result[] = $value;\n    }\n    return\
    \ $result;\n}\n", "    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $ones = $arr[$i];\n        $j = $i + 1;\n        while ($j < $len)\
    \ {\n            $twos = $arr[$j];\n            if ($twos == $ones) {\n      \
    \          $j++;\n                continue;\n            }\n            $ones_bin\
    \ = decbin($ones);\n            $twos_bin = decbin($twos);\n            $ones_len\
    \ = strlen($ones_bin);\n            $twos_len = strlen($twos_bin);\n         \
    \   $ones_pos = 0;\n            $twos_pos = 0;\n            $i = 0;\n        \
    \    while ($i < $ones_len && $i < $twos_len) {\n                if ($ones_bin[$i]\
    \ == $twos_bin[$i]) {\n                    $ones_pos++;\n                    $i++;\n\
    \                } else {\n                    $twos_pos++;\n                \
    \    $i++;\n                }\n            }\n            if ($ones_pos == $twos_pos)\
    \ {\n                $tmp = $ones;\n                $ones = $twos;\n         \
    \       $twos = $tmp;\n            }\n            $arr[$i] = $ones;\n        \
    \    $arr[$j] = $twos;\n        }\n    }\n    return $arr;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThanks for your answer. Your solution is very close to my solution.\
    \ But the problem is that it only works for positive numbers. I need a solution\
    \ that works for negative numbers as well.\n<|/ c |>\n<| c |>\nI added a solution\
    \ for negative numbers. I hope it helps.\n<|/ c |>\n<| c |>\nThanks again. Your\
    \ solution is very close to my solution. But the problem is that it only works\
    \ for positive numbers. I need a solution that works for negative numbers as well.\n\
    <|/ c |>\n<| c |>\nI added a solution for negative numbers. I hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks again. Your solution is very close to my solution. But\
    \ the problem is that it only works for positive numbers. I need a solution that\
    \ works for negative numbers as well.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $arr = array(1,5,2,3,4);\n$arr2 = array(1,5,2,3,4);\n$arr3 = array(1,5,2,3,4);\n\
    $arr4 = array(1,5,2,3,4);\n$arr5 = array(1,5,2,3,4);\n$arr6 = array(1,5,2,3,4);\n\
    $arr7 = array(1,5,", "    $len = count($arr);\n    $sorted = array();\n    $ones\
    \ = array();\n    for ($i = 0; $i < $len; $i++) {\n        $ones[$i] = $arr[$i]\
    \ & 1;\n    }\n    for ($i = 0; $i < $len; $i++) {\n        $sorted[$i] = $ones[$i];\n\
    \    }\n    for ($i = 1; $i < $len; $i++) {\n        for ($j = 0; $j < $i; $j++)\
    \ {\n            if ($sorted[$j] > $sorted[$i]) {\n                $tmp = $sorted[$j];\n\
    \                $sorted[$j] = $sorted[$i];\n                $sorted[$i] = $tmp;\n\
    \            }\n        }\n    }\n    return $sorted;\n}\n", "    $sorted = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $ones\
    \ = bindec($arr[$i]);\n        if ($ones === false) {\n            return $arr;\n\
    \        }\n        $sorted[$i] = $ones;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n", "    $result = array();\n    foreach ($arr as $key => $value)\
    \ {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n", "    $count = array_count_values($arr);\n\
    \    $sorted = array();\n    foreach ($count as $key => $value) {\n        if\
    \ ($value == 1) {\n            $sorted[] = $key;\n        } else {\n         \
    \   $sorted[] = sprintf(\"%0.2f\", $key / pow(2, $value));\n        }\n    }\n\
    \    return $sorted;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ seem to work when there are multiple 1's in the array. For example, `sort_array(array(1,0,1,1,1))`\
    \ returns `array(0, 1, 1)`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.6 and it\
    \ works fine. `sort_array(array(1,0,1,1,1))` returns `array(0, 1, 1)`\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.3.6 and it works fine. `sort_array(array(1,0,1,1,1))`\
    \ returns `array(0, 1, 1)`\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.6 and it\
    \ works fine. `sort_array(array(1,0,1,1,1))` returns `array(0, 1, 1)`\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.3.6 and it works fine. `sort_array(array(1,0,1,1,1))`\
    \ returns `array(0, 1, 1)`\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(1,0,1,1,1);\n$array = array_count_values($array);\narsort($array);\n\
    $array = array_keys($array);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work when there are multiple 1's in the array. For example, `sort_array(array(1,0,1,1,1))`\
    \ returns `array(0, 1, 1)`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array(1,0,1,1,1);\n\
    $array = array_count_values($array);\narsort($array);\n$array = array_keys($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1,0,1,1,1);\n\
    $array = array_count_values($array);\narsort($array);\n$array = array_keys($array);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1,0,1,1,1);\n\
    $array = array_count_values($array);\narsort($array);\n$array = array_keys($array);\n",
  "    $result = array();\n    foreach ($arr as $key => $val) {\n        $result[$key]\
    \ = $val;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}", "    $result = array();\n    $ones = array();\n\
    \    $zeros = array();\n    foreach ($arr as $item) {\n        if ($item < 0)\
    \ {\n            $result[] = $item;\n            $zeros[] = $item;\n        }\
    \ else {\n            $result[] = $item;\n            $ones[] = $item;\n     \
    \   }\n    }\n    foreach ($ones as $key => $one) {\n        $result[$key] = $one;\n\
    \    }\n    foreach ($zeros as $key => $zero) {\n        $result[$key] = $zero;\n\
    \    }\n    return $result;\n}\n", "    sort($arr);\n    return $arr;\n}\n", " \
    \   $count = array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if the\
    \ array contains negative numbers. Try it with `array(-2, -3, -4, -5, -6)`.\n\
    <|/ c |>\n<| c |>\n: It works with negative numbers. Try it with `array(-2, -3,\
    \ -4, -5, -6)`.\n<|/ c |>\n<| c |>\n: It works with negative numbers. Try it with\
    \ `array(-2, -3, -4, -5, -6)`.\n<|/ c |>\n<| c |>\n: It works with negative numbers.\
    \ Try it with `array(-2, -3, -4, -5, -6)`.\n<|/ c |>\n<| c |>\n: It works with\
    \ negative numbers. Try it with `array(-2, -3, -4, -5, -6)`.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "    $sorted = array();\n    $count = count($arr);\n    for ($i\
    \ = 0; $i < $count; $i++) {\n        $ones = bindec($arr[$i]);\n        $sorted[$i]\
    \ = $ones;\n    }\n    asort($sorted);\n    return $sorted;\n}", "    $sorted\
    \ = array();\n    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, ", "    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n    \
    \    $len = strlen($bin);\n        $count = 0;\n        for ($i = 0; $i < $len;\
    \ $i++) {\n            $count += $bin[$i] == 1;\n        }\n        $sorted[$key]\
    \ = $count;\n    }\n    asort($sorted);\n    return $sorted;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't seem to work. `sort_array(array(1,5,2,3,4))` returns\
    \ `array(1,2,3,4,5)` instead of `array(-6,-5,-4,-3,-2)`\n<|/ c |>\n<| c |>\n,\
    \ you're right. I've updated my answer. Thanks for pointing out.\n<|/ c |>\n<|\
    \ c |>\nThanks for your answer. I've tried it and it works fine. I've just added\
    \ a little bit of code to the `sort_array` function and now it works fine. I've\
    \ updated my question with the code I've added. Thanks again for your help.\n\
    <|/ c |>\n<| c |>\n, you're welcome. I've updated my answer with your code. Thanks\
    \ for your feedback.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(1,\
    \ 5, 2, 3, 4);\n$array = array_count_values($array);\n$array = array_filter($array);\n\
    $array = array_keys($array);\n$array = array_values($array);\n$array = array_map(function($v){return\
    \ $v*-1;}, $array);\n$array = array_sum($array);\n$array = array_reverse($array);\n\
    $array = array_merge($array);\n$array = array_slice($array, 0, -1);\n$array =\
    \ array_reverse($array);\n$array = array_merge($array);\n$array = array_slice($array,\
    \ 0, -1);\n$array = array_reverse($array);\n$array = array_merge($array);\n$array\
    \ = array_slice($array, 0, -1);\n$array = array_reverse($array);\n$array = array_merge($array);\n\
    $array = array_slice($array, 0, -1);\n$array = array_reverse($array);\n$array\
    \ = array_merge($array);\n$array = array_slice($array, 0, -1);\n$array = array_reverse($array);\n\
    $array = array_merge($array);\n$array = array_slice($array, 0, -1);\n$array =\
    \ array_reverse($array);\n$array = array_merge($array);\n$array = array_slice($array,\
    \ 0, -1);\n$array = array_reverse($array);\n$array = array_", "    $len = count($arr);\n\
    \    $ones = array_fill(0, $len, 1);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 32, '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 32, '0', STR_PAD_LEFT); }, $bin);\n    $bin\
    \ = array_map(function ($v) { return str_pad(decbin($v), 32, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 32,\
    \ '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v),\
    \ 32, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 32, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 32, '0', STR_PAD_LEFT); }, $bin);\n    $bin\
    \ = array_map(function ($v) { return str_pad(decbin($v), 32, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 32,\
    \ '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v),\
    \ 32, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 32, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 32, '0', STR_PAD_LEFT); }, $bin);\n    $bin\
    \ = array_map(function ($v) { return str_pad(decbin($v), 32, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 32,\
    \ '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v),\
    \ 32, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 32, '0', STR_PAD_LEFT); }, $bin);", "    $count = array_count_values($arr);\n\
    \    arsort($count);\n    return array_intersect_key($arr, array_flip($count));\n\
    }\n", "    $result = array();\n    foreach ($arr as $key => $value) {\n      \
    \  $result[$key] = $value;\n    }\n    asort($result);\n    return $result;\n\
    }\n", "    $sorted = array();\n    foreach ($arr as $key => $val) {\n        $sorted[$key]\
    \ = $val;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $count\
    \ = array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\n", "    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    array_multisort(\n        array_count_values($result),\n\
    \        SORT_NUMERIC,\n        $result\n    );\n    return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, but I believe it can be done in O(n)\
    \ time complexity, using only O(1) additional space.\n<|/ c |>\n<| c |>\nYes,\
    \ it can be done in O(n) time complexity. I've updated my answer.\n<|/ c |>\n\
    <| a tags=sorting,arrays,php |>\n<code>", "    $result = array();\n    foreach\
    \ ($arr as $key => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n", "    $len = count($arr);\n\
    \    $ones = array_fill(0, $len, 1);\n    $ones_count = array_sum($ones);\n  \
    \  $arr = array_map(function ($v) use ($ones, $ones_count) {\n        $ones_sum\
    \ = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $ones_sum += $ones[$i];\n\
    \            if ($ones_sum > $v) {\n                return $i;\n            }\n\
    \        }\n        return $v;\n    }, $arr);\n    asort($arr);\n    $arr = array_map(function\
    \ ($v) use ($ones, $ones_count) {\n        $ones_sum = 0;\n        for ($i = 0;\
    \ $i < $len; $i++) {\n            $ones_sum += $ones[$i];\n            if ($ones_sum\
    \ > $v) {\n                return $ones_sum - $v;\n            }\n        }\n\
    \        return $v;\n    }, $arr);\n    return $arr;\n}\n", "    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n        $bin\
    \ = substr($bin, strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, ", "    $result = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n", "    $result = array();\n    $ones = array();\n  \
    \  $zeros = array();\n    foreach ($arr as $val) {\n        if ($val < 0) {\n\
    \            $result[] = $val;\n            $zeros[] = $val;\n        } else {\n\
    \            $ones[] = $val;\n        }\n    }\n    if (count($ones) > 0) {\n\
    \        sort($ones);\n        $result = array_merge($result, $ones);\n    }\n\
    \    if (count($zeros) > 0) {\n        sort($zeros);\n        $result = array_merge($result,\
    \ $zeros);\n    }\n    return $result;\n}\n", "    $result = array();\n    foreach\
    \ ($arr as $key => $val) {\n        $result[$key] = $val;\n    }\n    asort($result);\n\
    \    return $result;\n}\n", "    $result = [];\n    $ones = [];\n    $zeros =\
    \ [];\n    foreach ($arr as $item) {\n        if ($item == 1) {\n            $ones[]\
    \ = $item;\n        } else {\n            $zeros[] = $item;\n        }\n    }\n\
    \    if (count($ones) > 0) {\n        sort($ones);\n        $result = array_merge($result,\
    \ $ones);\n    }\n    if (count($zeros) > 0) {\n        sort($zeros);\n      \
    \  $result = array_merge($result, $zeros);\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you for answering my question. Your solution\
    \ is very good, but I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and arrays. I cannot use any built-in functions. I only can use loops,\
    \ if-else and array", "    $sorted = array();\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value > 0) {\n            $sorted[$key] = $value;\n        }\
    \ else {\n            $sorted[$key] = -$value;\n        }\n    }\n    return $sorted;\n\
    }\n", "    $sorted = array();\n    foreach ($arr as $key => $val) {\n        $bin\
    \ = decbin($val);\n        $len = strlen($bin);\n        $count = 1;\n       \
    \ for ($i = 0; $i < $len; $i++) {\n            if ($bin[$i] === '1') {\n     \
    \           $count++;\n            } else {\n                break;\n        \
    \    }\n        }\n        $sorted[$key] = $count * 10 + $val;\n    }\n    return\
    \ $sorted;\n}\n", "    $sorted = array();\n    foreach ($arr as $key => $value)\
    \ {\n        $bin = decbin($value);\n        $len = strlen($bin);\n        $count\
    \ = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if ($bin[$i] ===\
    \ \"1\") {\n                $count++;\n            } else {\n                break;\n\
    \            }\n        }\n        $sorted[$key] = $count * pow(2, $len);\n  \
    \  }\n    asort($sorted);\n    return $sorted;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nI wrote a PHP function to sort an array by number of ones in\
    \ its binary representation in ascending order:\n<code>", "    $count = array_count_values($arr);\n\
    \    arsort($count);\n    return array_keys($count);\n}\n", "    $ones = array_count_values($arr);\n\
    \    $sorted = array();\n    foreach ($ones as $num => $count) {\n        $sorted[$num]\
    \ = $count;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $sorted\
    \ = array();\n    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n\
    \    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n", "    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n\
    \    array_multisort(array_count_values($sorted), SORT_DESC, $sorted);\n    return\
    \ $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    <?php\n$array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\nprint_r($array);", "    $result\
    \ = array();\n    foreach ($arr as $key => $value) {\n        $result[$key] =\
    \ $value;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nThis doesn't work if the array contains negative numbers. Try it with\
    \ `[-2, -3, -4, -5, -6]`.\n<|/ c |>\n<| c |>\nThis doesn't work if the array contains\
    \ negative numbers. Try it with `[-2, -3, -4, -5, -6]`.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "    $sorted = array();\n    foreach ($arr as $key => $value) {\n\
    \        if ($value == 0) {\n            $sorted[$key] = $value;\n        } else\
    \ {\n            $ones = $bin = decbin($value);\n            $ones = str_pad($ones,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n            $bin = str_pad($bin, strlen($ones),\
    \ '0', STR_PAD_LEFT);\n            $sorted[$key] = $ones == $bin ? $value : $bin;\n\
    \        }\n    }\n    return $sorted;\n}\n", "    $sorted = array();\n    $ones\
    \ = array();\n    $zeros = array();\n    foreach ($arr as $key => $val) {\n  \
    \      if ($val == 1) {\n            $ones[] = $key;\n        } else {\n     \
    \       $zeros[] = $key;\n        }\n    }\n    sort($ones);\n    sort($zeros);\n\
    \    foreach ($ones as $key => $val) {\n        $sorted[$val] = $zeros[$key];\n\
    \    }\n    return $sorted;\n}", "    $sorted = array();\n    $count = count($arr);\n\
    \    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n    \
    \    $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, strlen($bin) - 1);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n\
    \        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, strlen($bin) - 1);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n\
    \        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, strlen($bin) - 1);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n\
    \        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, strlen($bin) - 1);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n\
    \        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, strlen($bin) - 1);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n",
  "    $sorted = array();\n    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n\
    \        $len = strlen($bin);\n        $bin = str_pad($bin, $len, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($", "    $count = array_count_values($arr);\n    arsort($count);\n\
    \    return array_keys($count);\n}\n", "    $result = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n", "    $sorted = array();\n \
    \   foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, 8, '0',\
    \ STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary =\
    \ str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0,\
    \ 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, 0, 8);\n        $binary = str_pad($binary,\
    \ 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, 0, 8);\n        $binary = str_pad($binary,\
    \ 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, 0, 8);\n        $binary = str_pad($binary,\
    \ 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, 0, 8);\n        $binary = ", "    $len = count($arr);\n\
    \    $result = array();\n    $ones = array();\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $ones[$i] = $arr[$i] & 1;\n    }\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($ones[$i]) {\n            $result[] = $arr[$i];\n        }\n\
    \    }\n    for ($i = 0; $i < $len; $i++) {\n        if (!$ones[$i]) {\n     \
    \       $result[] = $arr[$i];\n        }\n    }\n    return $result;\n}\n", " \
    \   $result = array();\n    $ones = array();\n    foreach ($arr as $num) {\n \
    \       $ones[] = $num;\n    }\n    sort($ones);\n    foreach ($ones as $num)\
    \ {\n        $result[] = $num;\n    }\n    return $result;\n}\n</code>\n<|/ a\
    \ tags=sorting,php |>\n<| c |>\nThis doesn't work. Try `sort_array(array(1,5,2,3,4))`\
    \ - it returns `array(1, 2, 3, 5, 4)`.\n<|/ c |>\n<| c |>\n, thank you for pointing\
    \ out. I fixed the code.\n<|/ c |>\n<| c |>\n, thank you for pointing out. I fixed\
    \ the code.\n<|/ c |>\n<| c |>\n, thank you for pointing out. I fixed the code.\n\
    <|/ c |>\n<| c |>\n, thank you for pointing out. I fixed the code.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $ones = $arr[$i];\n        $j\
    \ = 0;\n        while ($j < $count && $ones & $arr[$j]) {\n            $j++;\n\
    \        }\n        $sorted[$i] = $j;\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. Your code is working fine but i need\
    \ to sort array in ascending order and i need to sort array in descending order\
    \ also.\n<|/ c |>\n<| c |>\nI added a descending sort function to the answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code is working fine but i need\
    \ to sort array in ascending order and i need to sort array in descending order\
    \ also.\n<|/ c |>\n<| c |>\nI added a descending sort function to the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $len = count($arr);\n    $ret\
    \ = [];\n    $ones = array_fill(0, $len, 1);\n    foreach ($arr as $i => $v) {\n\
    \        $ret[$i] = $v;\n        $ones[$i] = $v;\n    }\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        $ones[$i] = $ones[$i] ? 1 : 0;\n    }\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        for ($j = 0; $j < $len; $j++) {\n           \
    \ if ($ones[$i] == $ones[$j]) {\n                $ret[$i] = $ret[$j];\n      \
    \          $ones[$i] = $ones[$j] = 0;\n            }\n        }\n    }\n    return\
    \ $ret;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `sort_array(array(-2, -3, -4, -5, -6))` returns `array(-6,\
    \ -5, -4, -3, -2)`.\n<|/ c |>\n<| c |>\n, thank you for pointing out. I've fixed\
    \ the answer.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `sort_array(array(-2,\
    \ -3, -4, -5, -6))` returns `array(-6, -5, -4, -3, -2)`.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>", "    $sorted = array();\n    foreach ($arr as $key => $val) {\n\
    \        $bin = decbin($val);\n        $len = strlen($bin);\n        $count =\
    \ 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count += $bin[$i]\
    \ === \"1\";\n        }\n        $sorted[$key] = $count;\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n", "    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function ($num) use ($ones) {\n        return\
    \ str_pad(decbin($num), $len, '0', STR_PAD_LEFT);\n    }, $arr);\n    $bin = array_map(function\
    \ ($bin) {\n        return str_split($bin, 2);\n    }, $bin);\n    $bin = array_map(function\
    \ ($bin) {\n        return array_map(function ($num) use ($ones) {\n         \
    \   return $num * $ones[strlen($num)];\n        }, $bin);\n    }, $bin);\n   \
    \ $bin = array_map(function ($bin) {\n        return array_sum($bin);\n    },\
    \ $bin);\n    return array_map(function ($num) use ($bin) {\n        return $bin[strlen($num)];\n\
    \    }, $arr);\n}\n", "    $result = array();\n    foreach ($arr as $key => $value)\
    \ {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_ASC, $result);\n    return $result;\n}\n", "    $sorted = array();\n  \
    \  foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n  \
    \  array_multisort(\n        array_count_values($sorted),\n        SORT_NUMERIC,\n\
    \        $sorted\n    );\n    return $sorted;\n}\n", "    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $ones = array_sum(str_split($arr[$i]));\n\
    \        if ($ones == 0) {\n            $arr[$i] = $ones;\n        } else {\n\
    \            $arr[$i] = $ones - 1;\n        }\n    }\n    asort($arr);\n    return\
    \ $arr;\n}\n", "    $sorted = array();\n    $count = count($arr);\n    for ($i\
    \ = 0; $i < $count; $i++) {\n        $ones = $arr[$i];\n        $j = 0;\n    \
    \    while ($j < $count && $ones & $arr[$j]) {\n            $j++;\n        }\n\
    \        $sorted[$i] = $j;\n    }\n    return $sorted;\n}\n", "    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n\
    \    asort($sorted);\n    return $sorted;\n}\n", "    $len = count($arr);\n  \
    \  if ($len < 2) {\n        return $arr;\n    }\n    $ones = array_fill(0, $len,\
    \ 1);\n    $zeros = array_fill(0, $len - 1, 0);\n    $ones_count = array_sum($ones);\n\
    \    $zeros_count = array_sum($zeros);\n    $ones_sum = 0;\n    $zeros_sum = 0;\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $ones_sum += $ones[$i];\n      \
    \  $zeros_sum += $zeros[$i];\n        if ($ones_sum > $zeros_sum) {\n        \
    \    $tmp = $ones[$i];\n            $ones[$i] = $zeros[$i];\n            $zeros[$i]\
    \ = $tmp;\n        }\n    }\n    $ones_sum = 0;\n    $zeros_sum = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $ones_sum += $ones[$i];\n        $zeros_sum\
    \ += $zeros[$i];\n        if ($ones_sum < $zeros_sum) {\n            $tmp = $ones[$i];\n\
    \            $ones[$i] = $zeros[$i];\n            $zeros[$i] = $tmp;\n       \
    \ }\n    }\n    for ($i = 0; $i < $len; $i++) {\n        $tmp = $ones[$i];\n \
    \       $ones[$i] = $zeros[$i];\n        $zeros[$i] = $tmp;\n    }\n    return\
    \ $arr;\n}\n", "    $sorted = array();\n    foreach ($arr as $key => $val) {\n\
    \        $bin = decbin($val);\n        $bin = str_pad($bin, strlen($bin), '0',\
    \ STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str", "    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $ones = array_count_values(str_split(decbin($arr[$i])));\n      \
    \  arsort($ones);\n        $ones = array_keys($ones);\n        $ones = array_flip($ones);\n\
    \        $arr[$i] = $ones[$i];\n    }\n    return $arr;\n}\n</code>\n<|/ a tags=sorting,php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function($v) use ($ones) {\n        return str_pad(decbin($v),\
    \ 8, '0', STR_PAD_LEFT);\n    }, $arr);\n    asort($bin);\n    return array_map(function($v)\
    \ use ($ones) {\n        return $ones[strpos($v, '1')];\n    }, $bin);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if it can be done\
    \ without using any additional functions. I guess it would be possible by implementing\
    \ `usort` myself, but that would be a lot of work.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without using any additional functions.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without using any additional functions.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\nI came up with a solution that uses usort and array_count_values.\n<code>",
  "    $sorted = array();\n    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n\
    \        $len = strlen($bin);\n        $count = 1;\n        for ($i = 0; $i <\
    \ $len; $i++) {\n            if ($bin[$i] === '1') {\n                $count++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    $sorted[$key] = $count * $val;\n    }\n    return $sorted;\n}\n", "    $len\
    \ = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, '0');\n    foreach ($arr as $i => $num) {\n        $bin[$i] = decbin($num);\n\
    \    }\n    array_multisort($ones, $bin, $len);\n    return $arr;\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>", "    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        $result[$key] = count($arr)\
    \ - $value;\n    }\n    array_multisort($result, SORT_ASC, $arr);\n    return\
    \ $arr;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `sort_array(array(1,\
    \ 5, 2, 3, 4))` returns `array(1, 2, 3, 5, 4)`\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.6 and it works. I guess you used a PHP version older than 5.6.\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it works. I guess you used a PHP\
    \ version older than 5.5.9.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it\
    \ works. I guess you used a PHP version older than 5.5.9.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.5.9 and it works. I guess you used a PHP version older than\
    \ 5.5.9.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n    \
    \    $len = strlen($bin);\n        $count = 0;\n        for ($i = 0; $i < $len;\
    \ $i++) {\n            $count += $bin[$i] == '1';\n        }\n        $sorted[$key]\
    \ = $count;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $result\
    \ = array();\n    foreach ($arr as $key => $val) {\n        $result[$key] = $val;\n\
    \    }\n    array_multisort(array_count_values($result), SORT_DESC, $result);\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This doesn't work if you have negative numbers. `sort_array(array(1,-2,3,4))`\
    \ returns `array(-2, -1, 1, 3)`\n<|/ c |>\n<| c |>\nIt doesn't work if you have\
    \ negative numbers. `sort_array(array(1,-2,3,4))` returns `array(-2, -1, 1, 3)`\n\
    <|/ c |>\n<| c |>\nIt doesn't work if you have negative numbers. `sort_array(array(1,-2,3,4))`\
    \ returns `array(-2, -1, 1, 3)`\n<|/ c |>\n<| c |>\nIt doesn't work if you have\
    \ negative numbers. `sort_array(array(1,-2,3,4))` returns `array(-2, -1, 1, 3)`\n\
    <|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $result = [];\n    $ones\
    \ = 0;\n    foreach ($arr as $val) {\n        if ($val > 0) {\n            $ones++;\n\
    \            $result[] = $val;\n        } else {\n            $ones--;\n     \
    \       $result[] = $val * (-1 * ($ones));\n        }\n    }\n    return $result;\n\
    }\n", "    $sorted = array();\n    $count = count($arr);\n    foreach ($arr as\
    \ $key => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $countOnes = substr_count($bin, '1');\n        $decimal = $value / pow(2,\
    \ $len);\n        if ($countOnes > $count) {\n            $decimal = pow(2, $len);\n\
    \        }\n        $sorted[$key] = $decimal;\n    }\n    return $sorted;\n}\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$array =\
    \ array(1, 5, 2, 3, 4);\n$sorted = array();\n$count = count($array);\nforeach\
    \ ($array as $key => $value) {\n    $bin = decbin($value);\n    $len = strlen($bin);\n\
    \    $countOnes = substr_count($bin, '1');\n    $decimal = $value / pow(2, $len);\n\
    \    if ($countOnes > $count) {\n        $decimal = pow(2, $len);\n    }\n   \
    \ $sorted[$key] = $decimal;\n}\nprint_r($sorted);", "    $len = count($arr);\n\
    \    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0, $len, 0);\n   \
    \ foreach ($arr as $key => $val) {\n        $bin[$key] = bindec($val);\n    }\n\
    \    array_multisort($ones, $bin, $arr);\n    return $arr;\n}\n</code>\n<|/ a\
    \ tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n$arr = array(1,5,2,3,4);\n\
    $arr = array_count_values($arr);\narsort($arr);\n$arr = array_keys($arr);\nprint_r($arr);\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr\
    \ = array(1,5,2,3,4);\n$arr = array_count_values($arr);\narsort($arr);\n$arr =\
    \ array_keys($arr);\nprint_r($arr);", "    $sorted = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $sorted[$key] = $value;\n    }\n    array_multisort(array_count_values($sorted),\
    \ SORT_DESC, $sorted);\n    return $sorted;\n}\n", "    $result = array();\n \
    \   $ones = array();\n    foreach ($arr as $item) {\n        $bin = decbin($item);\n\
    \        $len = strlen($bin);\n        $ones[] = $len;\n        $result[] = $item;\n\
    \    }\n    array_multisort($ones, $result);\n    return $result;\n}\n", "   \
    \ $sorted = array();\n    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $count = substr_count($bin,\
    \ '1');\n        $sorted[$key] = $count;\n    }\n    asort($sorted);\n    return\
    \ array_keys($sorted);\n}\n", "    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = substr($bin, 0,\
    \ strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($", "    $result = array();\n    $size =\
    \ count($arr);\n    for ($i = 0; $i < $size; $i++) {\n        $result[$i] = $i;\n\
    \    }\n    asort($result);\n    for ($i = 0; $i < $size; $i++) {\n        $result[$i]\
    \ = $arr[$result[$i]];\n    }\n    return $result;\n}\n", "    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n    \
    \    $count = substr_count($bin, '1');\n        $sorted[$key] = $count;\n    }\n\
    \    arsort($sorted);\n    return $sorted;\n}\n", "    $sorted = array();\n  \
    \  foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n        $len\
    \ = strlen($bin);\n        $bin = str_pad($bin, $len, '0', STR_PAD_LEFT);\n  \
    \      $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin =\
    \ str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);", "    $sorted\
    \ = array();\n    foreach ($arr as $key => $value) {\n        $sorted[$key] =\
    \ $value;\n    }\n    array_multisort(array_count_values($sorted), SORT_DESC,\
    \ $sorted);\n    return $sorted;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. Try `sort_array(array(1,5,2,3,4))`.\n<|/ c |>\n<|\
    \ c |>\n: I updated my answer to handle negative numbers as well.\n<|/ c |>\n\
    <| c |>\n: I updated my answer to handle negative numbers as well.\n<|/ c |>\n\
    <| c |>\n: I updated my answer to handle negative numbers as well.\n<|/ c |>\n\
    <| c |>\n: I updated my answer to handle negative numbers as well.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>", "    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(\n    1 => 1,\n    2 => 1,\n\
    \    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n\
    \    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 =>\
    \ 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n \
    \   20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 =>\
    \ 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n \
    \   31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 =>\
    \ 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n \
    \   42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 =>\
    \ 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n \
    \   53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 =>\
    \ 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n \
    \   64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 =>\
    \ 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n \
    \   75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 => 1,\n    80 =>\
    \ 1,\n    81 => 1,", "    $sorted = array();\n    $count = count($arr);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        $binary = '';\n        for ($j = 0; $j\
    \ < $count; $j++) {\n            if ($j != $i) {\n                $binary .= $arr[$j]\
    \ ? '1' : '0';\n            }\n        }\n        $sorted[$i] = decbin(bindec($binary));\n\
    \    }\n    return $sorted;\n}\n", "    foreach ($arr as $key => $value) {\n \
    \       if ($value == 0) {\n            unset($arr[$key]);\n        } else {\n\
    \            $arr[$key] = $value;\n        }\n    }\n    array_multisort(array_count_values($arr),\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n", "    $sorted = array();\n    foreach\
    \ ($arr as $key => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if\
    \ ($bin[$i] === '1') {\n                $count++;\n            } else {\n    \
    \            break;\n            }\n        }\n        $sorted[$key] = $count;\n\
    \    }\n    asort($sorted);\n    return $sorted;\n}", "    $sorted = array();\n\
    \    $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n        $ones\
    \ = 0;\n        $j = 0;\n        while ($j < $i) {\n            if ($arr[$i] &\
    \ 1) {\n                $ones++;\n            }\n            $j++;\n        }\n\
    \        $sorted[$i] = $ones;\n    }\n    asort($sorted);\n    return $sorted;\n\
    }\n", "    $result = array();\n    foreach ($arr as $key => $val) {\n        $result[$key]\
    \ = $val;\n    }\n    asort($result);\n    return $result;\n}\n", "    $sorted\
    \ = array();\n    foreach ($arr as $key => $val) {\n        $binary = '';\n  \
    \      for ($i = 0; $i < strlen($val); $i++) {\n            $binary .= str_pad(decbin($val[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, 8, '0',\
    \ STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary =\
    \ str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0,\
    \ 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, 0, 8);\n        $binary = str_pad($binary,\
    \ 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, 0, 8);\n        $binary = str_pad($binary,\
    \ 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, 0, 8);\n        $binary = str_pad($binary,\
    \ 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, 0, 8);\n        $binary = ", "    $sorted =\
    \ array();\n    $count = count($arr);\n    foreach ($arr as $key => $val) {\n\
    \        $bin = decbin($val);\n        $len = strlen($bin);\n        $countOnes\
    \ = substr_count($bin, '1');\n        $sorted[$key] = $countOnes;\n    }\n   \
    \ array_multisort($sorted, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer! I tested your solution and it works fine.\
    \ However I still have some questions. Why did you use array_multisort instead\
    \ of just sort? And why did you use $countOnes = substr_count($bin, '1'); instead\
    \ of $countOnes = $val?\n<|/ c |>\n<| c |>\n`array_multisort` sorts multiple arrays\
    \ at once. `sort` sorts one array only. `substr_count($bin, '1')` counts number\
    \ of `1`s in binary representation of `$val`. `$val` is an array, not a number.\
    \ `substr_count($bin, '1')` counts number of `1`s in binary representation of\
    \ `$val`. `$val` is an array, not a number. `$val` is an array, not a number.\
    \ `$val` is an array, not a number. `$val` is an array, not a number. `$val` is\
    \ an array, not a number. `$val` is an array, not a number. `$val` is an array,\
    \ not a number. `$val` is an array, not a number. `$val` is an array, not a number.\
    \ `$val` is an array, not a number. `$val` is an array, not a number. `$val` is\
    \ an array, not a number. `$val` is an array, not a number. `$val` is an array,\
    \ not a number. `$val` is an array, not a number. `$val` is an array, not a number.\
    \ `$val` is an array, not a number. `$val` is an array, not a number. `$val` is\
    \ an array, not a number. `$val` is an array, not a number. `$val` is an array,\
    \ not a number. `$val` is an array, not a number. `$val` is an array, not a number.\
    \ `$val` is an array, not a number. `$val` is an array, not a number. `$val` is\
    \ an array, not a number. `$val` is an array, not a number. `$val` is an array,\
    \ not a number. `$val` is an array, not a number. `$val` is an array, not a number.\
    \ `$val` is an array, not a number. `$val` is an array, not a number. `$val` is\
    \ an array, not a number. `$val` is an array, not a number. `$val` is an ", " \
    \   $sorted = array();\n    foreach ($arr as $key => $value) {\n        $sorted[$key]\
    \ = $value;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $sorted\
    \ = array();\n    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str", "  \
    \  $sorted = array();\n    foreach ($arr as $key => $value) {\n        $bin =\
    \ decbin($value);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 1);\n        $count = substr_count($bin, '1');\n\
    \        if ($count > 0) {\n            $sorted[$key] = $value;\n        } else\
    \ {\n            $sorted[$key] = $value * pow(2, $count);\n        }\n    }\n\
    \    return $sorted;\n}\n", "    $sorted = array();\n    $count = count($arr);\n\
    \    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n    \
    \    $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $count);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $count);\n        $bin = str_pad($bin, $count, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $count);\n        $bin = str_pad($bin,\
    \ $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $count);\n     \
    \   $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $count);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $count);\n        $bin = str_pad($bin, $count, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $count);\n        $bin = str_pad($bin,\
    \ $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $count);\n     \
    \   $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $count);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $count);\n        $bin = str_pad($bin, $count, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $count);\n        $bin = str_pad($bin,\
    \ $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $count);\n     \
    \   $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $count);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $count);\n        $bin = str_pad($bin, $count, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $count);\n        $bin = str_pad($bin,\
    \ $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $count);\n     \
    \   $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $count);\n        $bin = str", "    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bins = array_fill(0, $len, 0);\n    foreach ($arr as $i => $v)\
    \ {\n        $bins[$i] |= $v & 1;\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bins, SORT_DESC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,php,arrays |>\n<code>", "    $sorted = array();\n    $ones =\
    \ array();\n    $zeros = array();\n    foreach ($arr as $num) {\n        if ($num\
    \ > 0) {\n            $ones[] = $num;\n        } else {\n            $zeros[]\
    \ = $num;\n        }\n    }\n    foreach ($ones as $one) {\n        $pos = array_search($one,\
    \ $zeros);\n        if ($pos !== false) {\n            $sorted[] = $zeros[$pos];\n\
    \            unset($zeros[$pos]);\n        }\n    }\n    foreach ($zeros as $zero)\
    \ {\n        $pos = array_search($zero, $ones);\n        if ($pos !== false) {\n\
    \            $sorted[] = $ones[$pos];\n            unset($ones[$pos]);\n     \
    \   }\n    }\n    return $sorted + $ones + $zeros;\n}\n", "    foreach ($arr as\
    \ $key => $val) {\n        if ($val < 0) {\n            $arr[$key] = -$val;\n\
    \        }\n    }\n    asort($arr);\n    return $arr;\n}\n", "    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, strlen($value),\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, strlen($binary) -\
    \ 1);\n        $binaryArray = str_split($binary);\n        $binaryArray = array_filter($binaryArray);\n\
    \        $binaryArray = array_map('bindec', $binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray);\n        $binaryArray = array_count_values($binaryArray);\n\
    \        $binaryArray = array_filter($binaryArray);\n        $binaryArray = array_keys($binaryArray);\n\
    \        $binaryArray = array_values($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item / pow(10, strlen($item) - 1);\n        }, $binaryArray);\n\
    \        $binaryArray = array_sum($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item * pow(10, strlen($item) - 1);\n        }, $binaryArray);\n\
    \        $binaryArray = array_sum($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item / pow(10, strlen($item) - 1);\n        }, $binaryArray);\n\
    \        $binaryArray = array_sum($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item * pow(10, strlen($item) - 1);\n        }, $binaryArray);\n\
    \        $binaryArray = array_sum($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item / pow(10, strlen($item) - 1);\n        }, $binaryArray);\n\
    \        $binaryArray = array_sum($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item * pow(10, strlen($item) - 1);\n        }, $binaryArray);\n\
    \        $binaryArray = array_sum($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item / pow(10, strlen($item) - 1);\n        }, $binaryArray);\n\
    \        $binaryArray = array_sum($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item * pow(10, strlen($item) - 1);\n        }, $binaryArray);\n\
    \        $binaryArray = array_sum($binaryArray);\n        $binaryArray = ", " \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ < 0) {\n            $result[$key] = -$value;\n        }\n    }\n    asort($result);\n\
    \    return $result;\n}\n", "    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $bin = substr($bin, 0, strlen($bin)\
    \ - 1);\n        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen(", "    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $ones = $arr[$i];\n        $j\
    \ = 0;\n        while ($j < $count && $ones & $arr[$j] == 0) {\n            $j++;\n\
    \        }\n        $sorted[$i] = $j;\n    }\n    return $sorted;\n}", "    $result\
    \ = array();\n    foreach ($arr as $item) {\n        $result[$item] = count(decbin($item));\n\
    \    }\n    asort($result);\n    return array_keys($result);\n}\n", "    $result\
    \ = array();\n    foreach ($arr as $item) {\n        $result[$item] = count(decbin($item));\n\
    \    }\n    asort($result);\n    return array_keys($result);\n}\n", "    $result\
    \ = array();\n    $ones = array();\n    $zeros = array();\n    foreach ($arr as\
    \ $item) {\n        if ($item < 0) {\n            $result[] = $item;\n       \
    \     $zeros[] = $item;\n        } else {\n            $result[] = $item;\n  \
    \          $ones[] = $item;\n        }\n    }\n    foreach ($ones as $key => $one)\
    \ {\n        $result[$key] = $one;\n    }\n    foreach ($zeros as $key => $zero)\
    \ {\n        $result[$key] = $zero;\n    }\n    return $result;\n}\n", "    foreach\
    \ ($arr as $key => $value) {\n        $arr[$key] = $arr[$key] ? 1 : 0;\n    }\n\
    \    array_multisort($arr, SORT_ASC, $arr);\n    return $arr;\n}\n", "    $result\
    \ = array();\n    foreach ($arr as $item) {\n        $result[$item] = count(decbin($item));\n\
    \    }\n    asort($result);\n    return array_values($result);\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if the array contains negative numbers.\
    \ `decbin` returns `11111111111111111111111111111110` instead of `11111111111111111111111111111110`\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just tested\
    \ it again and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    I tested it again and it works. I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I added a test case to my answer.\n<|/\
    \ c |>\n<| c |>\nI tested it again and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>", "    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($result), SORT_DESC, $result);\n \
    \   return $result;\n}\n", "    $result = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $result[$key] = $val;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n", "    $result = array();\n \
    \   $ones = array();\n    $zeros = array();\n    foreach ($arr as $item) {\n \
    \       if ($item < 0) {\n            $result[] = $item;\n            $zeros[]\
    \ = $item;\n        } else {\n            $result[] = $item;\n            $ones[]\
    \ = $item;\n        }\n    }\n    foreach ($ones as $i => $one) {\n        $result[$i]\
    \ = $one;\n    }\n    foreach ($zeros as $i => $zero) {\n        $result[$i] =\
    \ $zero;\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. Your code works fine, but I cannot use any sorting algorithms.\
    \ I must use bubble sort, insertion sort, and selection sort. Can you help me?\n\
    <|/ c |>\n<| c |>\nI added the bubble sort algorithm to the answer.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your code works fine, but I cannot use any sorting\
    \ algorithms. I must use bubble sort, insertion sort, and selection sort. Can\
    \ you help me?\n<|/ c |>\n<| c |>\nI added the bubble sort algorithm to the answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works fine, but I cannot\
    \ use any sorting algorithms. I must use bubble sort, insertion sort, and selection\
    \ sort. Can you help me?\n<|/ c |>\n<| a |>\n<code>\n<?php\n$arr = [\n    1 =>\
    \ 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 =>\
    \ 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n   \
    \ 13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 =>\
    \ 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n \
    \   24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 =>\
    \ 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n \
    \   35 => 1,\n    36 => 1,\n    37 => 1,", "    $sorted = array();\n    foreach\
    \ ($arr as $key => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if\
    \ ($bin[$i] === '1') {\n                $count++;\n            } else {\n    \
    \            break;\n            }\n        }\n        $sorted[$key] = $count;\n\
    \    }\n    asort($sorted);\n    return array_values($sorted);\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/10376194)\n<|/ c |>\n<| c |>\n\
    I believe it does answer the question. He wants to sort an array of non-negative\
    \ integers according to number of ones in their binary representation in ascending\
    \ order. He also wants to sort an array of non-negative integers according to\
    \ decimal value. He has provided a solution to both problems. He has also provided\
    \ a link to a Kata which he has already solved.\n<|/ c |>\n<| c |>\nThe question\
    \ was \"*sort an array of non-negative integers according to number of ones in\
    \ their binary representation in ascending order*\", not \"*sort an array of non-negative\
    \ integers according to decimal value*\". Your answer does not address either\
    \ of those requirements.\n<|/ c |>\n<| c |>\nI believe that my answer does address\
    \ both requirements. He has provided a solution to both problems. He has also\
    \ provided a link to a Kata which he has already solved.\n<|/ c |>\n<| c |>\n\
    The question was \"*sort an array of non-negative integers according to number\
    \ of ones in their binary representation in ascending order*\", not \"*sort an\
    \ array of non-negative integers according to decimal value*\". Your answer does\
    \ not address either of those requirements.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\nI believe this should work:\n<code>\n$arr = [1, 5, 2, 3, 4];\n$arr = array_map(function($a){\n\
    \    return str_pad(decbin($a), strlen($a), '0', STR_PAD_LEFT);\n}, $arr);\n$arr\
    \ = array_count_values($arr);\narsort($arr);\n$arr = array_keys($arr);\n</code>\n\
    <|/ a dscore=1 |>\n<| c ", "    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $sorted[$key] = $value;\n    }\n    array_multisort(array_count_values($sorted),\
    \ SORT_ASC, $sorted);\n    return $sorted;\n}\n", "    $count = array_count_values($arr);\n\
    \    arsort($count);\n    return array_keys($count);\n}", "    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $ones = $arr[$i];\n        $j =\
    \ $i + 1;\n        while ($j < $len) {\n            if ($ones == $arr[$j]) {\n\
    \                $j++;\n                continue;\n            }\n           \
    \ if ($ones > $arr[$j]) {\n                $tmp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $tmp;\n                $i++;\n     \
    \           $j++;\n                continue;\n            }\n            break;\n\
    \        }\n    }\n    return $arr;\n}\n", "    sort($arr, function($a, $b) {\n\
    \        $ones = bindec($a)[1];\n        $twos = bindec($b)[1];\n        if ($ones\
    \ == $twos) {\n            return 0;\n        }\n        return $ones < $twos\
    \ ? -1 : 1;\n    });\n    return $arr;\n}\n", "    $result = array();\n    foreach\
    \ ($arr as $key => $val) {\n        $result[$key] = $val;\n    }\n    foreach\
    \ ($result as $key => $val) {\n        $result[$key] = $val > 0 ? 1 : 0;\n   \
    \ }\n    array_multisort($result, SORT_ASC, $arr);\n    return $arr;\n}\n", " \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}\n", "    $sorted = array();\n    $count =\
    \ count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $ones = $arr[$i];\n\
    \        $j = 0;\n        while ($j < $count && $ones & $arr[$j]) {\n        \
    \    $j++;\n        }\n        $sorted[$i] = $j;\n    }\n    return $sorted;\n\
    }", "    $sorted = array();\n    foreach ($arr as $key => $value) {\n        $bin\
    \ = decbin($value);\n        $len = strlen($bin);\n        $count = 0;\n     \
    \   for ($i = 0; $i < $len; $i++) {\n            $count += $bin[$i] == '1';\n\
    \        }\n        $sorted[$key] = $count;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}", "    $sorted = array();\n    foreach ($arr as $key => $value)\
    \ {\n        $bin = decbin($value);\n        $len = strlen($bin);\n        $count\
    \ = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count += $bin[$i]\
    \ === \"1\";\n        }\n        $sorted[$key] = $count;\n    }\n    asort($sorted);\n\
    \    return array_values($sorted);\n}\n", "    $result = array();\n    foreach\
    \ ($arr as $key => $val) {\n        $result[$key] = $val;\n    }\n    array_multisort($result,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n", "    $len = count($arr);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $ones = $arr[$i];\n        $j = 0;\n  \
    \      while ($j < $len) {\n            if ($ones == $arr[$j]) {\n           \
    \     $j++;\n                continue;\n            }\n            if ($ones >\
    \ $arr[$j]) {\n                break;\n            }\n            $arr[$j] = $ones;\n\
    \            $j++;\n        }\n        $arr[$j] = $ones;\n    }\n    return $arr;\n\
    }\n", "    $sorted = array();\n    foreach ($arr as $key => $value) {\n      \
    \  $bin = decbin($value);\n        $bin = substr($bin, strlen($bin) - 1);\n  \
    \      $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, ", "    $result\
    \ = array();\n    foreach ($arr as $key => $value) {\n        $result[$key] =\
    \ $value;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}", "    $result = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort($result,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are two or more zeroes in the array.\
    \ Try it with `array(1, 0, 2, 3, 4)`.\n<|/ c |>\n<| c |>\nYes, it does. Try it\
    \ with `array(1, 0, 2, 3, 4)`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are\
    \ two or more zeroes in the array. Try it with `array(1, 0, 2, 3, 4)`.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work if there are two or more zeroes in the array. Try\
    \ it with `array(1, 0, 2, 3, 4)`.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are two or more zeroes in the array. Try it with `array(1, 0, 2, 3, 4)`.\n<|/\
    \ c |>\n<| a |>\n<code>\n<?php"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
