name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = array();\n    foreach ($arr as $key => $value) {\n  \
    \      $result[$key] = $value;\n    }\n    asort($result);\n    return $result;\n\
    }\n", "    $sorted = array();\n    foreach ($arr as $key => $value) {\n      \
    \  $bin = decbin($value);\n        $len = strlen($bin);\n        $count = 0;\n\
    \        for ($i = 0; $i < $len; $i++) {\n            $count += $bin[$i] == '1';\n\
    \        }\n        $sorted[$key] = $count;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n", "    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $ones = $arr[$i];\n        $bin = decbin($ones);\n        $binLen\
    \ = strlen($bin);\n        $binLen = strlen($bin);\n        $bin = str_pad($bin,\
    \ $binLen, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, $binLen - 8);\n        $bin = str_pad($bin, 8,\
    \ '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen - 8);\n        $bin\
    \ = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen\
    \ - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen - 8);\n        $bin =\
    \ str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen\
    \ - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen - 8);\n        $bin =\
    \ str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen\
    \ - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, $binLen - 8);\n        $bin = str_pad($bin, 8, '0',\
    \ STR_PAD_LEFT);\n        $bin = substr($bin, 0, $binLen - 8);\n        $bin",
  "    $sorted = array();\n    foreach ($arr as $key => $value) {\n        $sorted[$key]\
    \ = $value;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $result\
    \ = array();\n    $ones = array();\n    foreach ($arr as $item) {\n        $bin\
    \ = decbin($item);\n        $ones_count = substr_count($bin, '1');\n        $result[]\
    \ = $item;\n        if ($ones_count > 0) {\n            $ones[] = $ones_count;\n\
    \        }\n    }\n    foreach ($ones as $one) {\n        foreach ($ones as $other_one)\
    \ {\n            if ($one == $other_one) {\n                continue;\n      \
    \      }\n            $result[] = pow(2, $one) * pow(2, $other_one);\n       \
    \ }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ your solution, however I cannot get it to work. Could you please explain how\
    \ you got it to work?\n<|/ c |>\n<| c |>\nI added some comments to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThank you very much! I understand it now.\
    \ :)\n<|/ c |>\n<| a dscore=1 |>\nI made a solution which uses only O(n) time\
    \ and O(1) space. \n<code>\n<?php\n", "    $result = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n", "    $result = array();\n \
    \   foreach ($arr as $key => $val) {\n        $result[$key] = $val;\n    }\n \
    \   array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>", " \
    \   $sorted = array();\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ > 0) {\n            $sorted[$key] = $value;\n        }\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n", "    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $bin = str_pad($bin, $len, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);", "    $result = array();\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    return $result;\n}\n", "    $len = count($arr);\n\
    \    $ones = array_fill(0, $len, 1);\n    $zeros = array_fill(0, $len, 0);\n \
    \   $bins = array_merge($ones, $zeros);\n    foreach ($arr as $key => $val) {\n\
    \        $bins[$key] = decbin($val);\n    }\n    array_multisort($bins, $arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $arr = [\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n  \
    \  6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => ", "    $count =\
    \ array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\n", "    $sorted = array();\n    foreach ($arr as $key => $val) {\n        $sorted[$key]\
    \ = $val;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $sorted\
    \ = array();\n    $ones = array();\n    $zeros = array();\n    foreach ($arr as\
    \ $num) {\n        if ($num > 0) {\n            $ones[] = $num;\n        } else\
    \ {\n            $zeros[] = $num;\n        }\n    }\n    foreach ($ones as $one)\
    \ {\n        $pos = array_search($one, $zeros);\n        $sorted[] = $zeros[$pos];\n\
    \        $zeros[$pos] = 0;\n    }\n    foreach ($zeros as $zero) {\n        $pos\
    \ = array_search($zero, $ones);\n        $sorted[] = $ones[$pos];\n        $ones[$pos]\
    \ = 1;\n    }\n    return $sorted;\n}\n", "    foreach ($arr as $key => $val)\
    \ {\n        $arr[$key] = $arr[$key] ? 1 : 0;\n    }\n    array_multisort($arr,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n", "    $result = array();\n    foreach\
    \ ($arr as $key => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php", "    $result = array();\n    foreach ($arr as\
    \ $key => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. Try `sort_array(array(-2, -3, -4, -5, -6))`\n\
    <|/ c |>\n<| c |>\nIt works, because `asort` sorts array in ascending order. `-1`\
    \ is less than `-2`, so `-1` is placed before `-2`\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if you have negative numbers. Try `sort_array(array(-2, -3, -4, -5, -6))`\n\
    <|/ c |>\n<| c |>\nIt works, because `asort` sorts array in ascending order. `-1`\
    \ is less than `-2`, so `-1` is placed before `-2`\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if you have negative numbers. Try `sort_array(array(-2, -3, -4, -5, -6))`\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "    $sorted = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $bin = decbin($value);\n        $bin = substr($bin,\
    \ strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin =\
    \ str_pad($bin, strlen($bin", "    $count = array_count_values($arr);\n    arsort($count);\n\
    \    return array_keys($count);\n}\n", "    foreach ($arr as $key => $val) {\n\
    \        if ($val < 0) {\n            $arr[$key] = -$val;\n        }\n    }\n\
    \    asort($arr);\n    return $arr;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
