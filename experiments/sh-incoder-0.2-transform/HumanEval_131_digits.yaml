name: HumanEval_131_digits
language: sh
prompt: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
  \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"\
  1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\
  \n#\n# $1 is an integer\ndigits() {\n"
tests: "}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"\
  120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"\
  98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
  \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
completions: ["  local n=$1\n  local product\n  local digit\n  local digits=$(( 10#$n\
    \ ))\n  while [ $digits -gt 0 ]; do\n    digit=$(( 10#$(( digits % 2 )) ))\n \
    \   product=$(( product * digit ))\n    digits=$(( digits / 2 ))\n  done\n  echo\
    \ $product", "  local n=$1\n  local digits=\"\"\n  while (( n > 0 )) ; do\n  \
    \  (( n % 2 )) && digits=\"${digits}1\"\n    (( n /= 2 ))\n  done\n  echo $digits",
  "  local n=$1\n  local digits=\"\"\n  local product=0\n  while (( n > 0 )) ; do\n\
    \    digits=$(( n % 10 ))\n    product=$(( product * 10 ))\n    n=$(( n / 10 ))\n\
    \  done\n  if (( n % 2 )); then\n    product=$(( product * 2 ))\n  fi\n  echo\
    \ $product", "  local n=$1\n  local digits=$2\n  local product=1\n  while (( n\
    \ > 0 )); do\n    digit=$(( n % 10 ))\n    if (( digit % 2 )); then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product", " \
    \ local n=$1\n  local result\n  result=0\n  while (( n > 0 )); do\n    (( n %\
    \ 2 != 0 )) && result=$(( result * 10 ))\n    n=$(( n / 2 ))\n  done\n  echo $result",
  "  local n=$1\n  local digits=\"\"\n  local i\n  for i in $(seq 0 $((n-1)) ); do\n\
    \    digits=$digits\"$((n%10)) \"\n    n=$((n/10))\n  done\n  echo $digits", " \
    \ local n=\"$1\"\n  local d\n  local i\n  local product\n  local digit\n  local\
    \ digits=()\n  local digit\n  local digit\n  local digit\n  local digit\n  local\
    \ digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n\
    \  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n \
    \ local digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local\
    \ digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n\
    \  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n \
    \ local digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local\
    \ digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n\
    \  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n \
    \ local digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local\
    \ digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n\
    \  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n \
    \ local digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local\
    \ digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n\
    \  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n \
    \ local digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local\
    \ digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n\
    \  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n \
    \ local digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local\
    \ digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n\
    \  local digit\n  local digit\n  local digit\n  local digit\n  local digit\n \
    \ local digit\n  local digit\n  local digit\n  local digit\n  local digit\n  local\
    \ digit\n  local digit\n  local digit\n  local digit\n  local digit\n", "  local\
    \ n=$1\n  local d\n  local product\n  local i\n\n  product=1\n  for i in $(seq\
    \ 1 $n); do\n    d=$((n % 10))\n    product=$((product * d))\n    n=$((n / 10))\n\
    \  done\n  echo $product", "  local n=$1\n  local product=1\n  while (( n > 0\
    \ )) ; do\n    (( n % 2 )) && product=0\n    (( product *= n % 10 ))\n    (( n\
    \ /= 10 ))\n  done\n  echo $product", "  local n=$1\n  local d\n  local i\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local ", "  local n=$1\n  local\
    \ digits=\"\"\n  local i\n  for i in $(seq 0 $(( n - 1 ))); do\n    digits=$digits\"\
    ${n%$i}\"\n    n=$(( n / $i ))\n  done\n  echo $digits", "    local n=$1\n   \
    \ local result=0\n    local digit\n    local i\n    for (( i=1; i<=n; i++ ));\
    \ do\n        digit=$(( n % 10 ))\n        result=$(( result * 10 + digit ))\n\
    \        (( n = n / 10 ))\n    done\n    if [ $n -eq 0 ]; then\n        return\
    \ 0\n    fi\n    return $result", "  local n=$1\n  local product=1\n  local digit\n\
    \n  while (( n > 0 )) ; do\n    digit=$(( n % 10 ))\n    if (( digit % 2 )); then\n\
    \      product=$(( product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n\n\
    \  echo $product", "  local n=$1\n  local d\n  local product\n  local i\n  local\
    \ digit\n  local digits=()\n\n  while (( n > 0 )) ; do\n    d=$(( n % 10 ))\n\
    \    digits[${#digits[*]}]=$d\n    n=$(( n / 10 ))\n  done\n\n  product=1\n  for\
    \ i in \"${!digits[@]}\"; do\n    digit=${digits[$i]}\n    if [[ $(( digit % 2\
    \ )) -eq 0 ]]; then\n      product=$(( product * digit ))\n    fi\n  done\n\n\
    \  echo $product", "    local n=$1\n    local product\n    local digit\n    local\
    \ digitCount\n\n    product=1\n    digitCount=0\n\n    while (( n > 0 )) ; do\n\
    \        digit=$(( n % 10 ))\n        product=$(( product * digit ))\n       \
    \ digitCount=$(( digitCount + 1 ))\n        n=$(( n / 10 ))\n    done\n\n    if\
    \ [ $digitCount -eq 1 ] ; then\n        echo $product\n    else\n        echo\
    \ \"0\"\n    fi", "  local n=$1\n  local product\n  local digit\n  local i\n \
    \ local j\n  local digits_string\n  local digits_string_length\n  local digits_string_length_index\n\
    \  local digits_string_length_count\n  local digits_string_length_index_count\n\
    \  local digits_string_length_index_count_index\n  local digits_string_length_index_count_index2\n\
    \  local digits_string_length_index_count_index3\n  local digits_string_length_index_count_index4\n\
    \  local digits_string_length_index_count_index5\n  local digits_string_length_index_count_index6\n\
    \  local digits_string_length_index_count_index7\n  local digits_string_length_index_count_index8\n\
    \  local digits_string_length_index_count_index9\n  local digits_string_length_index_count_index10\n\
    \  local digits_string_length_index_count_index11\n  local digits_string_length_index_count_index12\n\
    \  local digits_string_length_index_count_index13\n  local digits_string_length_index_count_index14\n\
    \  local digits_string_length_index_count_index15\n  local digits_string_length_index_count_index16\n\
    \  local digits_string_length_index_count_index17\n  local digits_string_length_index_count_index18\n\
    \  local digits_string_length_index_count_index19\n  local digits_string_length_index_count_index20\n\
    \  local digits_string_length_index_count_index21\n  local digits_string_length_index_count_index22\n\
    \  local digits_string_length_index_count_index23\n  local digits_string_length_index_count_index24\n\
    \  local digits_string_length_index_count_index25\n  local digits_string_length_index_count_index26\n\
    \  local digits_string_length_index_count_index27\n  local digits_string_length_index_count_index28\n\
    \  local digits_string_length_index_count_index29\n  local digits_string_length_index_count_index30\n\
    \  local digits_string_length_index_count_index31\n  local digits_string_length_index_count_index32\n\
    \  local digits_string_length_index_count_index33\n  local digits_string_length_index_count_index34\n\
    \  local digits_string_length_index_count_index35\n  local digits_string_length_index_count_index36\n\
    \  local digits_string_length_index_count_index37\n  local digits_string_length_index_count_index38\n\
    \  local digits_string_length_index_count_index39\n  local digits_string_length_index_count_index40\n\
    \  local digits_string_length_index_count_index41\n  local ", "  local n=$1\n\
    \  local product\n  local digit\n  local i\n  local digits=$(( 10#$n ))\n  product=1\n\
    \  for i in $(seq 1 $digits); do\n    digit=$(( 10#$i ))\n    if [ $(( 10#$digit\
    \ % 2 )) -eq 0 ]; then\n      product=$(( $product * $digit ))\n    fi\n  done\n\
    \  echo $product", "  local n=\"$1\"\n  local d\n  local p\n  local q\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local ", "  local n=$1\n  local result\n\
    \  local i\n  result=0\n  for i in $(seq 0 $((n-1))); do\n    if [ $((i % 2))\
    \ -eq 0 ]; then\n      result=$((result*$i))\n    fi\n  done\n  echo $result",
  "  local n=$1\n  local result=0\n  local digit\n  while (( n > 0 )) ; do\n    digit=$((\
    \ n % 10 ))\n    result=$(( result * 10 + digit ))\n    n=$(( n / 10 ))\n  done\n\
    \  echo $result"]
stop_tokens:
- "\n}"
