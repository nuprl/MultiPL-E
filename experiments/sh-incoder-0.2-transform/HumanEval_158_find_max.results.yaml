language: sh
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=0\n\
    \        for c in $word; do\n            ((count++))\n        done\n        if\
    \ ((count > max_count)) ; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local i\n \
    \ local j\n  local word\n  local count\n  local max\n  local i\n  local j\n  local\
    \ word\n  local count\n  local max\n  local i\n  local j\n  local word\n  local\
    \ count\n  local max\n  local i\n  local j\n  local word\n  local count\n  local\
    \ max\n  local i\n  local j\n  local word\n  local count\n  local max\n  local\
    \ i\n  local j\n  local word\n  local count\n  local max\n  local i\n  local j\n\
    \  local word\n  local count\n  local max\n  local i\n  local j\n  local word\n\
    \  local count\n  local max\n  local i\n  local j\n  local word\n  local count\n\
    \  local max\n  local i\n  local j\n  local word\n  local count\n  local max\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local i\n \
    \ local j\n  local word\n  local count\n  local max\n  local i\n  local j\n  local\
    \ word\n  local count\n  local max\n  local i\n  local j\n  local word\n  local\
    \ count\n  local max\n  local i\n  local j\n  local word\n  local count\n  local\
    \ max\n  local i\n  local j\n  local word\n  local count\n  local max\n  local\
    \ i\n  local j\n  local word\n  local count\n  local max\n  local i\n  local j\n\
    \  local word\n  local count\n  local max\n  local i\n  local j\n  local word\n\
    \  local count\n  local max\n  local i\n  local j\n  local word\n  local count\n\
    \  local max\n  local i\n  local j\n  local word\n  local count\n  local max\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local i\n \
    \ local j\n  local word\n  local count\n  local max\n  local i\n  local j\n  local\
    \ word\n  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local counts\n    local\
    \ maxcount\n    local wordcount\n    local wordcounts\n    local maxwordcount\n\
    \    local maxword\n    local maxwordcounts\n    local maxwordcount\n    local\
    \ maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n\
    \    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n \
    \   local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n  \
    \  local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n   \
    \ local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local\
    \ maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n\
    \    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n \
    \   local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n  \
    \  local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n   \
    \ local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local\
    \ maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n\
    \    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n \
    \   local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n  \
    \  local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n   \
    \ local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local\
    \ maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n\
    \    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n \
    \   local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n  \
    \  local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n   \
    \ local maxwordcounts\n    local \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=$(echo\
    \ $word | tr \" \" \"\\n\" | sort | uniq -c | sort -n | tail -n 1)\n        if\
    \ [ \"$count\" -gt \"$max\" ]; then\n            word=$word\n            max=$count\n\
    \        fi\n    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvszvlzmq.sh: line 22: [:       1 name: integer expression expected

    /tmp/tmpvszvlzmq.sh: line 22: [:       1 of: integer expression expected

    /tmp/tmpvszvlzmq.sh: line 22: [:       1 string: integer expression expected

    /tmp/tmpvszvlzmq.sh: line 22: [:       1 name: integer expression expected

    /tmp/tmpvszvlzmq.sh: line 22: [:       1 enam: integer expression expected

    /tmp/tmpvszvlzmq.sh: line 22: [:       1 game: integer expression expected

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        (( ${#word} > max )) && max=${#word}\n\
    \    done\n    local i\n    for (( i=0; i<${#words[@]}; i++ )); do\n        ((\
    \ ${#words[$i]} > max )) && max=${#words[$i]}\n    done\n    local word\n    for\
    \ (( i=0; i<${#words[@]}; i++ )); do\n        word=${words[$i]}\n        (( ${#word}\
    \ > max )) && max=${#word}\n    done\n    echo ${words[$i]}\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    for (( i=0; i<${#words[@]};\
    \ i++ )); do\n        word=${words[i]}\n        count=0\n        for (( j=0; j<${#words[@]};\
    \ j++ )); do\n            if [[ ${words[$j]} == $word ]]; then\n             \
    \   (( count++ ))\n            fi\n        done\n        if (( count > max ));\
    \ then\n            max=count\n            word=${words[i]}\n        fi\n    done\n\
    \    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=\"\"\n    local count=0\n\
    \    local word=\"\"\n    local words=()\n    local i=0\n    while read -r word;\
    \ do\n        (( count++ ))\n        words[$i]=\"$word\"\n        (( i++ ))\n\
    \    done <<< \"$list\"\n    for word in \"${words[@]}\"; do\n        (( count--\
    \ ))\n        if (( count > 0 )) ; then\n            (( count-- ))\n         \
    \   continue\n        fi\n        (( i++ ))\n        if (( i == ${#words[@]} ))\
    \ ; then\n            (( i++ ))\n        fi\n        if (( count > 0 )) ; then\n\
    \            (( count-- ))\n            continue\n        fi\n        if (( count\
    \ > ${#max} )) ; then\n            max=\"$word\"\n        fi\n    done\n    echo\
    \ \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=0\n   \
    \     for ((i=0; i<${#word}; i++)); do\n            ((count++))\n            if\
    \ [[ ${word:$i:1} == ${word:$i:1} ]]; then\n                break\n          \
    \  fi\n        done\n        if ((count > max)); then\n            max=count\n\
    \            word=$word\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_word_len=0\n    local max_word_count=0\n    local max_word_len_count=0\n\
    \    local max_word_count2=0\n    local max_word_len_count2=0\n    local max_word_count3=0\n\
    \    local max_word_len_count3=0\n    local max_word_count4=0\n    local max_word_len_count4=0\n\
    \    local max_word_count5=0\n    local max_word_len_count5=0\n    local max_word_count6=0\n\
    \    local max_word_len_count6=0\n    local max_word_count7=0\n    local max_word_len_count7=0\n\
    \    local max_word_count8=0\n    local max_word_len_count8=0\n    local max_word_count9=0\n\
    \    local max_word_len_count9=0\n    local max_word_count10=0\n    local max_word_len_count10=0\n\
    \    local max_word_count11=0\n    local max_word_len_count11=0\n    local max_word_count12=0\n\
    \    local max_word_len_count12=0\n    local max_word_count13=0\n    local max_word_len_count13=0\n\
    \    local max_word_count14=0\n    local max_word_len_count14=0\n    local max_word_count15=0\n\
    \    local max_word_len_count15=0\n    local max_word_count16=0\n    local max_word_len_count16=0\n\
    \    local max_word_count17=0\n    local max_word_len_count17=0\n    local max_word_count18=0\n\
    \    local max_word_len_count18=0\n    local max_word_count19=0\n    local max_word_len_count19=0\n\
    \    local max_word_count20=0\n    local max_word_len_count20=0\n    local max_word_count21=0\n\
    \    local max_word_len_count21=0\n    local max_word_count22=0\n    local max_word_len_count22=0\n\
    \    local max_word_count23=0\n    local max_word_len_count23=0\n    local max_word_count24=0\n\
    \    local max_word_len_count24=0\n    local max_word_count25=0\n    local max_word_len_count25=0\n\
    \    local max_word_count26=0\n    local max_word_len_count26=0\n    local max_word_count27=0\n\
    \    local max_word_len_count27=0\n    local max_word_count28=0\n    local max_word_len_count28=0\n\
    \    local max_word_count29=0\n    local max_word_len\n}\n\ncandidate() {\n  \
    \  find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( $1 )\n    local max=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in \"${words[@]}\"; do\n \
    \       ((count++))\n        if [[ ${count} -gt ${max} ]]; then\n            max=${count}\n\
    \            max_word=${word}\n        fi\n    done\n    echo \"${max_word}\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=$(echo\
    \ $word | tr ' ' '\\n' | sort | uniq -c | wc -l)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_chars=0\n  local max_word=\"\
    \"\n  local max_count=0\n  local max_count2=0\n  local max_count3=0\n  local max_count4=0\n\
    \  local max_count5=0\n  local max_count6=0\n  local max_count7=0\n  local max_count8=0\n\
    \  local max_count9=0\n  local max_count10=0\n  local max_count11=0\n  local max_count12=0\n\
    \  local max_count13=0\n  local max_count14=0\n  local max_count15=0\n  local\
    \ max_count16=0\n  local max_count17=0\n  local max_count18=0\n  local max_count19=0\n\
    \  local max_count20=0\n  local max_count21=0\n  local max_count22=0\n  local\
    \ max_count23=0\n  local max_count24=0\n  local max_count25=0\n  local max_count26=0\n\
    \  local max_count27=0\n  local max_count28=0\n  local max_count29=0\n  local\
    \ max_count30=0\n  local max_count31=0\n  local max_count32=0\n  local max_count33=0\n\
    \  local max_count34=0\n  local max_count35=0\n  local max_count36=0\n  local\
    \ max_count37=0\n  local max_count38=0\n  local max_count39=0\n  local max_count40=0\n\
    \  local max_count41=0\n  local max_count42=0\n  local max_count43=0\n  local\
    \ max_count44=0\n  local max_count45=0\n  local max_count46=0\n  local max_count47=0\n\
    \  local max_count48=0\n  local max_count49=0\n  local max_count50=0\n  local\
    \ max_count51=0\n  local max_count52=0\n  local max_count53=0\n  local max_count54=0\n\
    \  local max_count55=0\n  local max_count56=0\n  local max_count57=0\n  local\
    \ max_count58=0\n  local max_count59=0\n  local max_count60=0\n  local max_count61=0\n\
    \  local max_count62=0\n  local max_count63=0\n  local max_count64=0\n  local\
    \ max_count65=0\n  local max_count66=0\n  local max_count67=0\n  local max_count68=0\n\
    \  local max_count69=0\n  local max_count70=0\n  local max_count\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        (( ${#word} > max )) && max=${#word}\n\
    \    done\n    local i\n    for (( i=0; i<${#words[@]}; i++ )); do\n        ((\
    \ ${#words[$i]} > max )) && max=${#words[$i]}\n    done\n    local word\n    for\
    \ (( i=0; i<${#words[@]}; i++ )); do\n        (( ${#words[$i]} > max )) && word=${words[$i]}\n\
    \    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=\"\"\n  local count=0\n\
    \  local word=\"\"\n  local words=\"\"\n  local wordlen=0\n  local wordcount=0\n\
    \  local wordlens=\"\"\n  local wordlenss=\"\"\n  local wordlensss=\"\"\n  local\
    \ wordlensssss=\"\"\n  local wordlensssssss=\"\"\n  local wordlensssssssss=\"\"\
    \n  local wordlensssssssssss=\"\"\n  local wordlensssssssssssss=\"\"\n  local\
    \ wordlensssssssssssssss=\"\"\n  local wordlensssssssssssssssss=\"\"\n  local\
    \ wordlensssssssssssssssssss=\"\"\n  local wordlensssssssssssssssssssss=\"\"\n\
    \  local wordlensssssssssssssssssssssss=\"\"\n  local wordlensssssssssssssssssssssss=\"\
    \"\n  local wordlensssssssssssssssssssssssss=\"\"\n  local wordlensssssssssssssssssssssssssss=\"\
    \"\n  local wordlensssssssssssssssssssssssssssss=\"\"\n  local wordlensssssssssssssssssssssssssssssss=\"\
    \"\n  local wordlensssssssssssssssssssssssssssssss=\"\"\n  local wordlensssssssssssssssssssssssssssssssss=\"\
    \"\n  local wordlensssssssssssssssssssssssssssssssssss=\"\"\n  local wordlensssssssssssssssssssssssssssssssssssss=\"\
    \"\n  local wordlensssssssssssssssssssssssssssssssssssss=\"\"\n  local wordlensssssssssssssssssssssssssssssssssssssss=\"\
    \"\n  local wordlensssssssssssssssssssssssssssssssssssssssss=\"\"\n  local wordlensssssssssssssssssssssssssssssssssssssssssss=\"\
    \"\n  local wordlenssssssssssssssssssssss\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local wordcount\n  local wordcount2\n  local wordcount3\n\
    \  local wordcount4\n  local wordcount5\n  local wordcount6\n  local wordcount7\n\
    \  local wordcount8\n  local wordcount9\n  local wordcount10\n  local wordcount11\n\
    \  local wordcount12\n  local wordcount13\n  local wordcount14\n  local wordcount15\n\
    \  local wordcount16\n  local wordcount17\n  local wordcount18\n  local wordcount19\n\
    \  local wordcount20\n  local wordcount21\n  local wordcount22\n  local wordcount23\n\
    \  local wordcount24\n  local wordcount25\n  local wordcount26\n  local wordcount27\n\
    \  local wordcount28\n  local wordcount29\n  local wordcount30\n  local wordcount31\n\
    \  local wordcount32\n  local wordcount33\n  local wordcount34\n  local wordcount35\n\
    \  local wordcount36\n  local wordcount37\n  local wordcount38\n  local wordcount39\n\
    \  local wordcount40\n  local wordcount41\n  local wordcount42\n  local wordcount43\n\
    \  local wordcount44\n  local wordcount45\n  local wordcount46\n  local wordcount47\n\
    \  local wordcount48\n  local wordcount49\n  local wordcount50\n  local wordcount51\n\
    \  local wordcount52\n  local wordcount53\n  local wordcount54\n  local wordcount55\n\
    \  local wordcount56\n  local wordcount57\n  local wordcount58\n  local wordcount59\n\
    \  local wordcount60\n  local wordcount61\n  local wordcount62\n  local wordcount63\n\
    \  local wordcount64\n  local wordcount65\n  local wordcount66\n  local wordcount67\n\
    \  local wordcount68\n  local wordcount69\n  local wordcount70\n  local wordcount71\n\
    \  local wordcount72\n  local wordcount73\n  local wordcount74\n  local wordcount75\n\
    \  local wordcount76\n  local wordcount77\n  local wordcount78\n  local wordcount79\n\
    \  local wordcount80\n  local wordcount81\n\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword\n    local i\n    for ((i=0; i < ${#words[@]}; i++)); do\n        local\
    \ len=${#words[$i]}\n        if (( len > maxlen )) ; then\n            maxlen=$len\n\
    \            maxword=$words[$i]\n        fi\n    done\n    echo \"$maxword\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local max_word=\"\
    \"\n    local max_count=0\n    local max_count1=0\n    local max_count2=0\n  \
    \  local max_count3=0\n    local max_count4=0\n    local max_count5=0\n    local\
    \ max_count6=0\n    local max_count7=0\n    local max_count8=0\n    local max_count9=0\n\
    \    local max_count10=0\n    local max_count11=0\n    local max_count12=0\n \
    \   local max_count13=0\n    local max_count14=0\n    local max_count15=0\n  \
    \  local max_count16=0\n    local max_count17=0\n    local max_count18=0\n   \
    \ local max_count19=0\n    local max_count20=0\n    local max_count21=0\n    local\
    \ max_count22=0\n    local max_count23=0\n    local max_count24=0\n    local max_count25=0\n\
    \    local max_count26=0\n    local max_count27=0\n    local max_count28=0\n \
    \   local max_count29=0\n    local max_count30=0\n    local max_count31=0\n  \
    \  local max_count32=0\n    local max_count33=0\n    local max_count34=0\n   \
    \ local max_count35=0\n    local max_count36=0\n    local max_count37=0\n    local\
    \ max_count38=0\n    local max_count39=0\n    local max_count40=0\n    local max_count41=0\n\
    \    local max_count42=0\n    local max_count43=0\n    local max_count44=0\n \
    \   local max_count45=0\n    local max_count46=0\n    local max_count47=0\n  \
    \  local max_count48=0\n    local max_count49=0\n    local max_count50=0\n   \
    \ local max_count51=0\n    local max_count52=0\n    local max_count53=0\n    local\
    \ max_count54=0\n    local max_count55=0\n    local max_count56=0\n    local max_count57=0\n\
    \    local max_count58=0\n    local max_count59=0\n    local max_count60=0\n \
    \   local max_count61=0\n    local max_count62=0\n    local max_count63=0\n  \
    \  local max_count64=0\n    local max_count65=0\n    local max_count66=0\n   \
    \ local max_count67=0\n    local max_count68=0\n    local max_count69=0\n    local\
    \ max_\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local max_word\n\
    \    local max_word_len\n    local max_word_index\n    local max_word_count\n\
    \    local max_word_char_count\n    local max_word_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n    local max_word_char_count\n\
    \    local max_word_char_count\n    local max_word_char_count\n\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local maxword\n  local wordcount\n\
    \  local word\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words count\n  words=( $1 )\n  count=0\n  for i\
    \ in \"${words[@]}\"; do\n    (( count++ ))\n  done\n  echo $i\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local string=\"$1\"\n    local count=0\n    local max=0\n\
    \    local word\n    for word in $string; do\n        ((count++))\n        if\
    \ ((count > max)); then\n            max=count\n            echo \"$word\"\n \
    \       fi\n    done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local tmp\n\n    for word in $words; do\n        count=$(echo $word\
    \ | wc -w)\n        if [ $count -gt $max ]; then\n            max=$count\n   \
    \         word=$word\n        fi\n    done\n\n    for word in $words; do\n   \
    \     count=$(echo $word | wc -w)\n        if [ $count -gt $max ]; then\n    \
    \        max=$count\n            word=$word\n        fi\n    done\n\n    for word\
    \ in $words; do\n        count=$(echo $word | wc -w)\n        if [ $count -gt\
    \ $max ]; then\n            max=$count\n            word=$word\n        fi\n \
    \   done\n\n    for word in $words; do\n        count=$(echo $word | wc -w)\n\
    \        if [ $count -gt $max ]; then\n            max=$count\n            word=$word\n\
    \        fi\n    done\n\n    for word in $words; do\n        count=$(echo $word\
    \ | wc -w)\n        if [ $count -gt $max ]; then\n            max=$count\n   \
    \         word=$word\n        fi\n    done\n\n    for word in $words; do\n   \
    \     count=$(echo $word | wc -w)\n        if [ $count -gt $max ]; then\n    \
    \        max=$count\n            word=$word\n        fi\n    done\n\n    for word\
    \ in $words; do\n        count=$(echo $word | wc -w)\n        if [ $count -gt\
    \ $max ]; then\n            max=$count\n            word=$word\n        fi\n \
    \   done\n\n    for word in $words; do\n        count=$(echo $word | wc -w)\n\
    \        if [ $count -gt $max ]; then\n            max=$count\n            word=$word\n\
    \        fi\n    done\n\n    for word in $words; do\n        count=$(echo $word\
    \ | wc -w)\n        if [ $count -gt $max ]; then\n            max=$count\n   \
    \         word=$word\n        fi\n    done\n\n    for word in $words; do\n   \
    \     count=$(echo $word | wc -w)\n        if [ $count -gt $max ]; then\n    \
    \        max=$count\n            word=$word\n        fi\n    done\n\n    for word\
    \ in $words; do\n        count=$(echo $word | wc -w)\n        if [ $count -gt\
    \ $max ]; then\n            max=$count\n            word=$word\n        fi\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpogqwvwhv.sh: line 112: syntax error near unexpected token `}''

    /tmp/tmpogqwvwhv.sh: line 112: `}''

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local maxword\n  local maxcount\n\
    \  local wordcount\n  local word\n  local count\n  local max\n  local maxlen\n\
    \  local maxword\n  local maxcount\n  local wordcount\n  local word\n  local count\n\
    \  local max\n  local maxlen\n  local maxword\n  local maxcount\n  local wordcount\n\
    \  local word\n  local count\n  local max\n  local maxlen\n  local maxword\n \
    \ local maxcount\n  local wordcount\n  local word\n  local count\n  local max\n\
    \  local maxlen\n  local maxword\n  local maxcount\n  local wordcount\n  local\
    \ word\n  local count\n  local max\n  local maxlen\n  local maxword\n  local maxcount\n\
    \  local wordcount\n  local word\n  local count\n  local max\n  local maxlen\n\
    \  local maxword\n  local maxcount\n  local wordcount\n  local word\n  local count\n\
    \  local max\n  local maxlen\n  local maxword\n  local maxcount\n  local wordcount\n\
    \  local word\n  local count\n  local max\n  local maxlen\n  local maxword\n \
    \ local maxcount\n  local wordcount\n  local word\n  local count\n  local max\n\
    \  local maxlen\n  local maxword\n  local maxcount\n  local wordcount\n  local\
    \ word\n  local count\n  local max\n  local maxlen\n  local maxword\n  local maxcount\n\
    \  local wordcount\n  local word\n  local count\n  local max\n  local maxlen\n\
    \  local maxword\n  local maxcount\n  local wordcount\n  local word\n  local count\n\
    \  local max\n  local maxlen\n  local maxword\n  local maxcount\n  local wordcount\n\
    \  local word\n  local count\n  local max\n  local maxlen\n  local maxword\n \
    \ local maxcount\n  local wordcount\n  local word\n  local count\n  local max\n\
    \  local maxlen\n  local maxword\n  local maxcount\n  local wordcount\n  local\
    \ word\n  local count\n  local max\n  \n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        (( ${#word} > max )) && max=${#word}\n\
    \    done\n    local i\n    for (( i=0; i<${#words[@]}; i++ )); do\n        ((\
    \ ${#words[$i]} > max )) && max=${#words[$i]}\n    done\n    local word\n    for\
    \ (( i=0; i<${#words[@]}; i++ )); do\n        (( ${#words[$i]} > max )) && word=${words[$i]}\n\
    \    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=0\n   \
    \     for ((i=0; i<${#word}; i++)); do\n            ((count++))\n            if\
    \ [[ ${word:$i:1} == ${word:$i:1} ]]; then\n                break\n          \
    \  fi\n        done\n        if ((count > max)) ; then\n            max=count\n\
    \            word=$word\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local max_index2=0\n    local max_index3=0\n  \
    \  local max_index4=0\n    local max_index5=0\n    local max_index6=0\n    local\
    \ max_index7=0\n    local max_index8=0\n    local max_index9=0\n    local max_index10=0\n\
    \    local max_index11=0\n    local max_index12=0\n    local max_index13=0\n \
    \   local max_index14=0\n    local max_index15=0\n    local max_index16=0\n  \
    \  local max_index17=0\n    local max_index18=0\n    local max_index19=0\n   \
    \ local max_index20=0\n    local max_index21=0\n    local max_index22=0\n    local\
    \ max_index23=0\n    local max_index24=0\n    local max_index25=0\n    local max_index26=0\n\
    \    local max_index27=0\n    local max_index28=0\n    local max_index29=0\n \
    \   local max_index30=0\n    local max_index31=0\n    local max_index32=0\n  \
    \  local max_index33=0\n    local max_index34=0\n    local max_index35=0\n   \
    \ local max_index36=0\n    local max_index37=0\n    local max_index38=0\n    local\
    \ max_index39=0\n    local max_index40=0\n    local max_index41=0\n    local max_index42=0\n\
    \    local max_index43=0\n    local max_index44=0\n    local max_index45=0\n \
    \   local max_index46=0\n    local max_index47=0\n    local max_index48=0\n  \
    \  local max_index49=0\n    local max_index50=0\n    local max_index51=0\n   \
    \ local max_index52=0\n    local max_index53=0\n    local max_index54=0\n    local\
    \ max_index55=0\n    local max_index56=0\n    local max_index57=0\n    local max_index58=0\n\
    \    local max_index59=0\n    local max_index60=0\n    local max_index61=0\n \
    \   local max_index62=0\n    local max_index63=0\n    local max_index64=0\n  \
    \  local max_index65=0\n    local max_index66=0\n    local max_index67=0\n   \
    \ local max_index68=0\n    local max_index69=0\n    local max_index70=0\n    local\
    \ max_index71\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local max_index2=0\n    local count=0\n    local\
    \ word\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max\n    local count\n\
    \    local word\n    local i\n    local j\n    local len\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local\
    \ tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n   \
    \ local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n\
    \    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local\
    \ tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n\
    \    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local\
    \ tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n\
    \    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local\
    \ tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n\
    \    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local\
    \ tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n\
    \    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local\
    \ tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n\
    \    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local\
    \ tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n\
    \    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local\
    \ tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n\
    \    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local\
    \ tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n\
    \    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local\
    \ tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local tmp\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n list=$1\n    local max\n    local count\n \
    \   local word\n    local i\n    local j\n    local len\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local\
    \ tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n   \
    \ local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n\
    \    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local\
    \ tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n\
    \    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local\
    \ tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n\
    \    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local\
    \ tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n\
    \    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local\
    \ tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n\
    \    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local\
    \ tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n\
    \    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local\
    \ tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n\
    \    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local\
    \ tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n\
    \    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local\
    \ tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n\
    \    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local\
    \ tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local \n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppej_0rgg.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for ((i=0; i<${#words[@]}; i++)); do\n   \
    \ word=${words[i]}\n    count=$(echo \"${word}\" | tr \" \" \"\\n\" | sort | uniq\
    \ -c | sort -n | tail -1)\n    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n\
    \      word=${word}\n    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnea93aej.sh: line 25: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_index=0\n  local max_index2=0\n  local max_index3=0\n  local max_index4=0\n\
    \  local max_index5=0\n  local max_index6=0\n  local max_index7=0\n  local max_index8=0\n\
    \  local max_index9=0\n  local max_index10=0\n  local max_index11=0\n  local max_index12=0\n\
    \  local max_index13=0\n  local max_index14=0\n  local max_index15=0\n  local\
    \ max_index16=0\n  local max_index17=0\n  local max_index18=0\n  local max_index19=0\n\
    \  local max_index20=0\n  local max_index21=0\n  local max_index22=0\n  local\
    \ max_index23=0\n  local max_index24=0\n  local max_index25=0\n  local max_index26=0\n\
    \  local max_index27=0\n  local max_index28=0\n  local max_index29=0\n  local\
    \ max_index30=0\n  local max_index31=0\n  local max_index32=0\n  local max_index33=0\n\
    \  local max_index34=0\n  local max_index35=0\n  local max_index36=0\n  local\
    \ max_index37=0\n  local max_index38=0\n  local max_index39=0\n  local max_index40=0\n\
    \  local max_index41=0\n  local max_index42=0\n  local max_index43=0\n  local\
    \ max_index44=0\n  local max_index45=0\n  local max_index46=0\n  local max_index47=0\n\
    \  local max_index48=0\n  local max_index49=0\n  local max_index50=0\n  local\
    \ max_index51=0\n  local max_index52=0\n  local max_index53=0\n  local max_index54=0\n\
    \  local max_index55=0\n  local max_index56=0\n  local max_index57=0\n  local\
    \ max_index58=0\n  local max_index59=0\n  local max_index60=0\n  local max_index61=0\n\
    \  local max_index62=0\n  local max_index63=0\n  local max_index64=0\n  local\
    \ max_index65=0\n  local max_index66=0\n  local max_index67=0\n  local max_index68=0\n\
    \  local max_index69=0\n  local max_index70=0\n  local max_index71\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n  local maxlen\n  local maxword\n\
    \  local wordcount\n  local wordcount2\n  local wordcount3\n  local wordcount4\n\
    \  local wordcount5\n  local wordcount6\n  local wordcount7\n  local wordcount8\n\
    \  local wordcount9\n  local wordcount10\n  local wordcount11\n  local wordcount12\n\
    \  local wordcount13\n  local wordcount14\n  local wordcount15\n  local wordcount16\n\
    \  local wordcount17\n  local wordcount18\n  local wordcount19\n  local wordcount20\n\
    \  local wordcount21\n  local wordcount22\n  local wordcount23\n  local wordcount24\n\
    \  local wordcount25\n  local wordcount26\n  local wordcount27\n  local wordcount28\n\
    \  local wordcount29\n  local wordcount30\n  local wordcount31\n  local wordcount32\n\
    \  local wordcount33\n  local wordcount34\n  local wordcount35\n  local wordcount36\n\
    \  local wordcount37\n  local wordcount38\n  local wordcount39\n  local wordcount40\n\
    \  local wordcount41\n  local wordcount42\n  local wordcount43\n  local wordcount44\n\
    \  local wordcount45\n  local wordcount46\n  local wordcount47\n  local wordcount48\n\
    \  local wordcount49\n  local wordcount50\n  local wordcount51\n  local wordcount52\n\
    \  local wordcount53\n  local wordcount54\n  local wordcount55\n  local wordcount56\n\
    \  local wordcount57\n  local wordcount58\n  local wordcount59\n  local wordcount60\n\
    \  local wordcount61\n  local wordcount62\n  local wordcount63\n  local wordcount64\n\
    \  local wordcount65\n  local wordcount66\n  local wordcount67\n  local wordcount68\n\
    \  local wordcount69\n  local wordcount70\n  local wordcount71\n  local wordcount72\n\
    \  local wordcount73\n  local wordcount74\n  local wordcount75\n  local wordcount76\n\
    \  local wordcount77\n  local wordcount78\n\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_chars=0\n    local max_word=\"\
    \"\n    local max_word_len=0\n    local max_word_index=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    \    local max_word_count=0\n    local max_word_chars=0\n    local max_word_count=0\n\
    \    local max_word_chars=0\n    local max_word_count=0\n    local max_word_chars=0\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword=\"\"\n    for word in \"${words[@]}\"; do\n        local len=\"${#word}\"\
    \n        if (( len > maxlen )) ; then\n            maxlen=$len\n            maxword=$word\n\
    \        fi\n    done\n    echo \"$maxword\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr \"\
    \ \" \"\\n\" | sort | uniq -c | sort -n | tail -n 1)\n        if [ \"$count\"\
    \ -gt \"$max\" ]; then\n            word=$word\n            max=$count\n     \
    \   fi\n    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8sgaeg5_.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmp8sgaeg5_.sh: line 21: [:       1 of: integer expression expected

    /tmp/tmp8sgaeg5_.sh: line 21: [:       1 string: integer expression expected

    /tmp/tmp8sgaeg5_.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmp8sgaeg5_.sh: line 21: [:       1 enam: integer expression expected

    /tmp/tmp8sgaeg5_.sh: line 21: [:       1 game: integer expression expected

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local len\n    local\
    \ tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local\
    \ tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local\
    \ tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n\
    \    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local\
    \ tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n\
    \    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local\
    \ tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n\
    \    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local\
    \ tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n\
    \    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local\
    \ tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n\
    \    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local\
    \ tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n\
    \    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local\
    \ tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n\
    \    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local\
    \ tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n\
    \    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local\
    \ tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n\
    \    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local\
    \ tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local tmp\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local maxcount\n  local wordcount\n\
    \  local wordcounts\n  local wordcount\n  local maxword\n  local maxwordcount\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcount\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxword\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local counts\n    local\
    \ maxcount\n    local wordcount\n    local maxword\n    local maxwordcount\n \
    \   local maxwordlength\n    local maxwordlengthcount\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcount\n    local maxwordlengthcounts\n    local maxwordlengthcount\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxwordlengthcounts\n    local maxwordlengthcounts\n    local maxwordlengthcounts\n\
    \    local maxword\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local counts\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcounts\n    local maxwords\n    local\
    \ maxcount\n    local maxword\n    local maxcount\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_chars=0\n    local max_word=\"\
    \"\n    local max_count=0\n    local max_index=0\n    local max_count_index=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index=0\n    local max_count_chars=0\n\
    \    local max_count_word=\"\"\n    local max_count_index\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo \"$word\" | tr\
    \ \" \" \"\\n\" | sort | uniq -c | sort -n | tail -n 1)\n        if [[ $count\
    \ -gt $max ]]; then\n            max=$(echo \"$count\" | cut -d \" \" -f 1)\n\
    \        fi\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0ywz0r1r.sh: line 21: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmp0ywz0r1r.sh: line 21: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmp0ywz0r1r.sh: line 21: [[: 1 string: syntax error in expression (error
    token is "string")

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( \"$@\" )\n  local maxlen=0\n  local maxword=\"\
    \"\n  local maxcount=0\n  local maxindex=0\n  local maxwords=()\n  local maxcounts=()\n\
    \  local maxindexs=()\n  local maxword=()\n  local maxcount=()\n  local maxindex=()\n\
    \  local maxwords=()\n  local maxcounts=()\n  local maxindexs=()\n  local maxword=()\n\
    \  local maxcount=()\n  local maxindex=()\n  local maxwords=()\n  local maxcounts=()\n\
    \  local maxindexs=()\n  local maxword=()\n  local maxcount=()\n  local maxindex=()\n\
    \  local maxwords=()\n  local maxcounts=()\n  local maxindexs=()\n  local maxword=()\n\
    \  local maxcount=()\n  local maxindex=()\n  local maxwords=()\n  local maxcounts=()\n\
    \  local maxindexs=()\n  local maxword=()\n  local maxcount=()\n  local maxindex=()\n\
    \  local maxwords=()\n  local maxcounts=()\n  local maxindexs=()\n  local maxword=()\n\
    \  local maxcount=()\n  local maxindex=()\n  local maxwords=()\n  local maxcounts=()\n\
    \  local maxindexs=()\n  local maxword=()\n  local maxcount=()\n  local maxindex=()\n\
    \  local maxwords=()\n  local maxcounts=()\n  local maxindexs=()\n  local maxword=()\n\
    \  local maxcount=()\n  local maxindex=()\n  local maxwords=()\n  local maxcounts=()\n\
    \  local maxindexs=()\n  local maxword=()\n  local maxcount=()\n  local maxindex=()\n\
    \  local maxwords=()\n  local maxcounts=()\n  local maxindexs=()\n  local maxword=()\n\
    \  local maxcount=()\n  local maxindex=()\n  local maxwords=()\n  local maxcounts=()\n\
    \  local maxindexs=()\n  local maxword=()\n  local maxcount=()\n  local maxindex=()\n\
    \  local maxwords=()\n  local maxcounts=()\n  local maxindexs=()\n  local maxword=()\n\
    \  local maxcount=()\n  local maxindex=()\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n\n  for word in $words; do\n    count=$(echo\
    \ $word | wc -c)\n    if [ $count -gt $max ]; then\n      max=$count\n      word=$word\n\
    \    fi\n  done\n\n  len=${#word}\n  for ((i=0; i<$len; i++)); do\n    for ((j=$i+1;\
    \ j<$len; j++)); do\n      if [[ $word[$i] -gt $word[$j] ]]; then\n        word=${word:$i:1}\n\
    \        break\n      fi\n    done\n  done\n\n  echo $word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_char=0\n    local max_word=\"\"\n    local\
    \ max_count=0\n    local word\n    local count\n    local i\n    local j\n   \
    \ local words=$1\n    for word in $words; do\n        count=0\n        for ((i=0;\
    \ i<${#word}; i++)); do\n            ((count++))\n            if [[ ${word:$i:1}\
    \ == ${word:$i:1} ]]; then\n                ((count--))\n            fi\n    \
    \    done\n        if ((count > max_count)) {\n            max_char=0\n      \
    \      max_word=\"\"\n            max_count=0\n        fi\n        if ((count\
    \ > max_count)) {\n            max_char=${word:$i:1}\n            max_word=${word:0:$i}\n\
    \            max_count=${count}\n        fi\n    done\n    echo \"${max_word}\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppzybtdq5.sh: line 31: syntax error near unexpected token `{''

    /tmp/tmppzybtdq5.sh: line 31: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local wordlen\n  local maxword\n\
    \  local wordcount\n  local maxcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n\
    \  local maxwordlen\n  local maxwordcount\n\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local maxword\n\
    \  local maxcount\n  local maxcountword\n  local maxcountwordcount\n  local maxcountwordcountword\n\
    \  local maxcountwordcountwordcount\n  local maxcountwordcountwordcountword\n\
    \  local maxcountwordcountwordcountwordcount\n  local maxcountwordcountwordcountwordcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcount\n  local maxcountwordcountwordcountwordcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcount\n  local maxcountwordcountwordcountwordcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcount\n \
    \ local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    \  local maxcountwordcountwordcountwordcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    local\
    \ word\n    for word in $1; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max_count))\
    \ {\n            max_count=$count\n            max_word=$word\n        }\n   \
    \ done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphre80t3l.sh: line 23: syntax error near unexpected token `{''

    /tmp/tmphre80t3l.sh: line 23: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max_count=0\n    local\
    \ max_word=\"\"\n    local word\n    for word in $list; do\n        local count=0\n\
    \        for c in $word; do\n            ((count++))\n        done\n        if\
    \ ((count > max_count)) {\n            max_count=$count\n            max_word=$word\n\
    \        }\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp30mwgrw8.sh: line 24: syntax error near unexpected token `{''

    /tmp/tmp30mwgrw8.sh: line 24: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local max_index2=0\n    local count=0\n    local\
    \ word\n    local index\n    local index2\n    local word\n    local count\n \
    \   local word\n    local index\n    local index2\n    local word\n    local count\n\
    \    local word\n    local index\n    local index2\n    local word\n    local\
    \ count\n    local word\n    local index\n    local index2\n    local word\n \
    \   local count\n    local word\n    local index\n    local index2\n    local\
    \ word\n    local count\n    local word\n    local index\n    local index2\n \
    \   local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    local word\n    local count\n    local word\n    local index\n    local index2\n\
    \    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name\
    \ enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n arr=$1\n    local max=0\n    local word\n \
    \   for word in ${arr[@]}; do\n        (( ${#word} > max )) && max=${#word}\n\
    \    done\n    local i\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        (( ${#arr[$i]}\
    \ > max )) && max=${#arr[$i]}\n    done\n    echo ${arr[$(( ${#arr[@]} - 1 ))]}\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqruel_rf.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmpqruel_rf.sh: line 25: arr: bad array subscript

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local len\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local\
    \ tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n   \
    \ local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n\
    \    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local\
    \ tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n\
    \    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local\
    \ tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n\
    \    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local\
    \ tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n\
    \    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local\
    \ tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n\
    \    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local\
    \ tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n\
    \    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local\
    \ tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n\
    \    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local\
    \ tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n\
    \    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local\
    \ tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n\
    \    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local\
    \ tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local \n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword=\"\"\n    local count=0\n    local word\n    for word in \"${words[@]}\"\
    ; do\n        ((count++))\n        local len=\"${#word}\"\n        if ((len >\
    \ maxlen)) ; then\n            maxlen=$len\n            maxword=$word\n      \
    \  fi\n    done\n    echo \"$maxword\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local max_word=\"\
    \"\n    local count=0\n    for word in $words; do\n        ((count++))\n     \
    \   local count2=$(echo $word | wc -c)\n        if ((count2 > max)) ; then\n \
    \           max=count2\n            max_word=$word\n        fi\n    done\n   \
    \ echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=0\n   \
    \     for ((i=0; i<${#word}; i++)); do\n            ((count++))\n            if\
    \ [[ ${word:$i:1} == \"$word\" ]] && [[ ${word:$i:1} != \" \" ]] && [[ ${word:$i:1}\
    \ != \".\" ]] && [[ ${word:$i:1} != \",\" ]] && [[ ${word:$i:1} != \"-\" ]] &&\
    \ [[ ${word:$i:1} != \"_\" ]] && [[ ${word:$i:1} != \"~\" ]]; then\n         \
    \       break\n            fi\n        done\n        if (( count > max )); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for c in\
    \ $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$1\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        local count=0\n        for c in\
    \ $word; do\n            (( count++ ))\n        done\n        if (( count > max\
    \ )); then\n            max=count\n            word=$word\n        fi\n    done\n\
    \    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_string=\"\"\n    local\
    \ strings=$@\n    for string in $strings; do\n        local count=0\n        for\
    \ char in $string; do\n            ((count++))\n        done\n        if ((count\
    \ > max_count)) {\n            max_count=$count\n            max_string=$string\n\
    \        }\n    done\n    echo \"$max_string\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvymzr6us.sh: line 23: syntax error near unexpected token `{''

    /tmp/tmpvymzr6us.sh: line 23: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        (( ${#word} > max )) && max=${#word}\n\
    \    done\n    local i\n    for (( i=0; i<${#words[@]}; i++ )); do\n        ((\
    \ ${#words[$i]} > max )) && max=${#words[$i]}\n    done\n    local j\n    for\
    \ (( j=0; j<${#words[@]}; j++ )); do\n        (( ${#words[$j]} > max )) && max=${#words[$j]}\n\
    \    done\n    local word\n    for (( i=0; i<${#words[@]}; i++ )); do\n      \
    \  word=${words[$i]}\n        (( ${#word} > max )) && max=${#word}\n    done\n\
    \    local word\n    for (( j=0; j<${#words[@]}; j++ )); do\n        word=${words[$j]}\n\
    \        (( ${#word} > max )) && max=${#word}\n    done\n    local word\n    for\
    \ (( i=0; i<${#words[@]}; i++ )); do\n        word=${words[$i]}\n        (( ${#word}\
    \ > max )) && max=${#word}\n    done\n    local word\n    for (( j=0; j<${#words[@]};\
    \ j++ )); do\n        word=${words[$j]}\n        (( ${#word} > max )) && max=${#word}\n\
    \    done\n    local word\n    for (( i=0; i<${#words[@]}; i++ )); do\n      \
    \  word=${words[$i]}\n        (( ${#word} > max )) && max=${#word}\n    done\n\
    \    local word\n    for (( j=0; j<${#words[@]}; j++ )); do\n        word=${words[$j]}\n\
    \        (( ${#word} > max )) && max=${#word}\n    done\n    local word\n    for\
    \ (( i=0; i<${#words[@]}; i++ )); do\n        word=${words[$i]}\n        (( ${#word}\
    \ > max )) && max=${#word}\n    done\n    local word\n    for (( j=0; j<${#words[@]};\
    \ j++ )); \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe51q4qkd.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpe51q4qkd.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local max_word=\"\"\n\
    \  local max_count=0\n  local max_count2=0\n  local max_count3=0\n  local max_count4=0\n\
    \  local max_count5=0\n  local max_count6=0\n  local max_count7=0\n  local max_count8=0\n\
    \  local max_count9=0\n  local max_count10=0\n  local max_count11=0\n  local max_count12=0\n\
    \  local max_count13=0\n  local max_count14=0\n  local max_count15=0\n  local\
    \ max_count16=0\n  local max_count17=0\n  local max_count18=0\n  local max_count19=0\n\
    \  local max_count20=0\n  local max_count21=0\n  local max_count22=0\n  local\
    \ max_count23=0\n  local max_count24=0\n  local max_count25=0\n  local max_count26=0\n\
    \  local max_count27=0\n  local max_count28=0\n  local max_count29=0\n  local\
    \ max_count30=0\n  local max_count31=0\n  local max_count32=0\n  local max_count33=0\n\
    \  local max_count34=0\n  local max_count35=0\n  local max_count36=0\n  local\
    \ max_count37=0\n  local max_count38=0\n  local max_count39=0\n  local max_count40=0\n\
    \  local max_count41=0\n  local max_count42=0\n  local max_count43=0\n  local\
    \ max_count44=0\n  local max_count45=0\n  local max_count46=0\n  local max_count47=0\n\
    \  local max_count48=0\n  local max_count49=0\n  local max_count50=0\n  local\
    \ max_count51=0\n  local max_count52=0\n  local max_count53=0\n  local max_count54=0\n\
    \  local max_count55=0\n  local max_count56=0\n  local max_count57=0\n  local\
    \ max_count58=0\n  local max_count59=0\n  local max_count60=0\n  local max_count61=0\n\
    \  local max_count62=0\n  local max_count63=0\n  local max_count64=0\n  local\
    \ max_count65=0\n  local max_count66=0\n  local max_count67=0\n  local max_count68=0\n\
    \  local max_count69=0\n  local max_count70=0\n  local max_count71=0\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words count\n    words=( $1 )\n    count=0\n \
    \   for word in \"${words[@]}\"; do\n        (( count++ ))\n    done\n    local\
    \ max\n    max=$count\n    for word in \"${words[@]}\"; do\n        (( count--\
    \ ))\n        if (( count < max )); then\n            max=count\n        fi\n\
    \    done\n    echo \"${words[$max]}\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local word\n    local count\n  \
    \  local max\n    local word\n    local count\n    local i\n    local j\n    local\
    \ word\n    local count\n    local max\n    local word\n    local count\n    local\
    \ i\n    local j\n    local word\n    local count\n    local max\n    local word\n\
    \    local count\n    local i\n    local j\n    local word\n    local count\n\
    \    local max\n    local word\n    local count\n    local i\n    local j\n  \
    \  local word\n    local count\n    local max\n    local word\n    local count\n\
    \    local i\n    local j\n    local word\n    local count\n    local max\n  \
    \  local word\n    local count\n    local i\n    local j\n    local word\n   \
    \ local count\n    local max\n    local word\n    local count\n    local i\n \
    \   local j\n    local word\n    local count\n    local max\n    local word\n\
    \    local count\n    local i\n    local j\n    local word\n    local count\n\
    \    local max\n    local word\n    local count\n    local i\n    local j\n  \
    \  local word\n    local count\n    local max\n    local word\n    local count\n\
    \    local i\n    local j\n    local word\n    local count\n    local max\n  \
    \  local word\n    local count\n    local i\n    local j\n    local word\n   \
    \ local count\n    local max\n    local word\n    local count\n    local i\n \
    \   local j\n    local word\n    local count\n    local max\n    local word\n\
    \    local count\n    local i\n    local j\n    local word\n    local count\n\
    \    local max\n    local word\n    local count\n    local i\n    local j\n  \
    \  local word\n    local count\n    local max\n    local word\n    local count\n\
    \    local i\n    local j\n    local word\n    local count\n    local max\n  \
    \  local word\n    local count\n    local i\n    local j\n    local word\n   \
    \ local count\n    local max\n    local word\n    local count\n    local i\n \
    \   local j\n    local word\n    local count\n    \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local word\n    local count\n  \
    \  local max\n    local maxword\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local maxcount\n    local maxi\n    local maxj\n    local maxcount\n\
    \    local maxi\n    local maxj\n    local maxcount\n    local maxi\n    local\
    \ maxj\n    local max\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local maxword\n\
    \  local maxcount\n  local maxi\n  local maxj\n  local maxcount\n  local maxi\n\
    \  local maxj\n  local maxcount\n  local maxi\n  local maxj\n  local maxcount\n\
    \  local maxi\n  local maxj\n  local maxcount\n  local maxi\n  local maxj\n  local\
    \ maxcount\n  local maxi\n  local maxj\n  local maxcount\n  local maxi\n  local\
    \ maxj\n  local maxcount\n  local maxi\n  local maxj\n  local maxcount\n  local\
    \ maxi\n  local maxj\n  local maxcount\n  local maxi\n  local maxj\n  local maxcount\n\
    \  local maxi\n  local maxj\n  local maxcount\n  local maxi\n  local maxj\n  local\
    \ maxcount\n  local maxi\n  local maxj\n  local maxcount\n  local maxi\n  local\
    \ maxj\n  local maxcount\n  local maxi\n  local maxj\n  local maxcount\n  local\
    \ maxi\n  local maxj\n  local maxcount\n  local maxi\n  local maxj\n  local maxcount\n\
    \  local maxi\n  local maxj\n  local maxcount\n  local maxi\n  local maxj\n  local\
    \ maxcount\n  local maxi\n  local maxj\n  local maxcount\n  local maxi\n  local\
    \ maxj\n  local maxcount\n  local maxi\n  local maxj\n  local maxcount\n  local\
    \ maxi\n  local maxj\n  local maxcount\n  local maxi\n  local maxj\n  local maxcount\n\
    \  local maxi\n  local maxj\n  local maxcount\n  local maxi\n  local maxj\n  local\
    \ maxcount\n  local maxi\n  local maxj\n  local maxcount\n  local maxi\n  local\
    \ maxj\n  local maxcount\n  local maxi\n  local maxj\n  local maxcount\n  local\
    \ maxi\n  local maxj\n  local maxcount\n  local maxi\n  local maxj\n  local max\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | wc -c)\n\
    \        if [ \"$count\" -gt \"$max\" ]; then\n            word=$word\n      \
    \      max=$count\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local counts\n    local\
    \ maxcount\n    local maxword\n    local maxcountword\n    local maxcountwordcount\n\
    \    local maxcountwordcounts\n    local maxcountwordcountscount\n    local maxcountwordcountscounts\n\
    \    local maxcountwordcountscountscount\n    local maxcountwordcountscountscounts\n\
    \    local maxcountwordcountscountscountscount\n    local maxcountwordcountscountscountscounts\n\
    \    local maxcountwordcountscountscountscountscount\n    local maxcountwordcountscountscountscountscounts\n\
    \    local maxcountwordcountscountscountscountscountscount\n    local maxcountwordcountscountscountscountscountscountscount\n\
    \    local maxcountwordcountscountscountscountscountscountscountscount\n    local\
    \ maxcountwordcountscountscountscountscountscountscountscountscount\n    local\
    \ maxcountwordcountscountscountscountscountscountscountscountscountscount\n  \
    \  local maxcountwordcountscountscountscountscountscountscountscountscountscountscount\n\
    \    local maxcountwordcountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local maxcountwordcountscountscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local maxcountwordcountscountscountscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local maxcountwordcountscountscountscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local maxcountwordcountscountscountscountscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local maxcountwordcountscountscountscountscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local maxcountwordcounts\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    local\
    \ words=$1\n    for word in $words; do\n        local count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max_count))\
    \ ; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=$1\n  local max\n  local count\n  local\
    \ word\n  local i\n  local j\n  local len\n  local tmp\n  local tmp2\n  local\
    \ tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n\
    \  local tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local\
    \ tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n\
    \  local tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n \
    \ local tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local\
    \ tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n\
    \  local tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n \
    \ local tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local\
    \ tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n\
    \  local tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n \
    \ local tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local\
    \ tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n\
    \  local tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n \
    \ local tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local\
    \ tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n\
    \  local tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n \
    \ local tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n  local\
    \ tmp94\n  local tmp95\n  local tmp96\n  local \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6h66an51.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local i\n \
    \ local j\n  local word\n  local count\n  local max\n  local i\n  local j\n  local\
    \ word\n  local count\n  local max\n  local i\n  local j\n  local word\n  local\
    \ count\n  local max\n  local i\n  local j\n  local word\n  local count\n  local\
    \ max\n  local i\n  local j\n  local word\n  local count\n  local max\n  local\
    \ i\n  local j\n  local word\n  local count\n  local max\n  local i\n  local j\n\
    \  local word\n  local count\n  local max\n  local i\n  local j\n  local word\n\
    \  local count\n  local max\n  local i\n  local j\n  local word\n  local count\n\
    \  local max\n  local i\n  local j\n  local word\n  local count\n  local max\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local i\n \
    \ local j\n  local word\n  local count\n  local max\n  local i\n  local j\n  local\
    \ word\n  local count\n  local max\n  local i\n  local j\n  local word\n  local\
    \ count\n  local max\n  local i\n  local j\n  local word\n  local count\n  local\
    \ max\n  local i\n  local j\n  local word\n  local count\n  local max\n  local\
    \ i\n  local j\n  local word\n  local count\n  local max\n  local i\n  local j\n\
    \  local word\n  local count\n  local max\n  local i\n  local j\n  local word\n\
    \  local count\n  local max\n  local i\n  local j\n  local word\n  local count\n\
    \  local max\n  local i\n  local j\n  local word\n  local count\n  local max\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local i\n \
    \ local j\n  local word\n  local count\n  local max\n  local i\n  local j\n  local\
    \ word\n  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for word in $words; do\n    count=0\n    for ((i=0; i<${#word};\
    \ i++)); do\n      ((count+=${#word:i:1}))\n    done\n    if [[ $count -gt $max\
    \ ]]; then\n      max=$count\n      echo $word\n    fi\n  done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu19o6a6u.sh: line 23: count+=${#word:i:1}: bad substitution

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local wordcounts\n  local maxwordcount\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
    \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
    \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this\
    \ game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\"\
    ) = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n\
    \    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\"\
    ) = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=0\n   \
    \     for (( i=0; i<${#word}; i++ )); do\n            (( count++ ))\n        \
    \    if [[ ${word:$i:1} == ${word:$i:1} ]]; then\n                (( count-- ))\n\
    \            fi\n        done\n        if (( count > max )); then\n          \
    \  max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  local j\n  local len\n  local tmp\n  local maxlen\n  local\
    \ wordlen\n  local wordcount\n  local word\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local maxwordcount\n  local maxword\n  local maxcount\n\
    \  local maxwordlen\n  local \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for i in $words; do\n    word=${i%% *}\n    count=$(echo $i | tr\
    \ ' ' '\\n' | sort | uniq -c | sort -n | tail -n 1)\n    if [[ $count -gt $max\
    \ ]]; then\n      max=$count\n    fi\n  done\n  echo $word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwnuqvc2c.sh: line 23: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmpwnuqvc2c.sh: line 23: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmpwnuqvc2c.sh: line 23: [[: 1 string: syntax error in expression (error
    token is "string")

    /tmp/tmpwnuqvc2c.sh: line 23: [[: 1 name: syntax error in expression (error token
    is "name")

    /tmp/tmpwnuqvc2c.sh: line 23: [[: 1 enam: syntax error in expression (error token
    is "enam")

    /tmp/tmpwnuqvc2c.sh: line 23: [[: 1 game: syntax error in expression (error token
    is "game")

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n\n  len=${#words[@]}\n  for ((i=0; i<len;\
    \ i++)); do\n    word=${words[i]}\n    count=$(echo \"${word}\" | tr \" \" \"\\\
    n\" | sort | uniq -c | sort -n | tail -1)\n    if [[ ${count} -gt ${max} ]]; then\n\
    \      max=${count}\n      word=${word}\n    fi\n  done\n  echo \"${word}\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr6x3qd9a.sh: line 27: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n\n  len=${#words}\n  for (( i=0;\
    \ i<len; i++ )); do\n    word=${words[i]}\n    count=$(echo \"$word\" | tr ' '\
    \ '\\n' | sort | uniq -c | sort -n | tail -n 1)\n    if [[ ${count} -gt $max ]];\
    \ then\n      max=${count}\n      word=${words[i]}\n    fi\n  done\n  echo $word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgkzdgq74.sh: line 28: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  local j\n  local len\n  local word\n  local wordcount\n\
    \  local wordlen\n  local maxword\n  local maxcount\n  local maxlen\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n  local maxlen\n  local maxword\n\
    \  local wordcount\n  local word\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max_chars=0\n  local max_word=\"\
    \"\n  local max_word_len=0\n  local max_word_index=0\n  local max_word_count=0\n\
    \  local max_word_counts=()\n  local max_word_counts_len=0\n  local max_word_counts_index=0\n\
    \  local max_word_counts_count=0\n  local max_word_counts_counts=()\n  local max_word_counts_counts_len=0\n\
    \  local max_word_counts_counts_index=0\n  local max_word_counts_counts_count=0\n\
    \  local max_word_counts_counts_counts=()\n  local max_word_counts_counts_counts_len=0\n\
    \  local max_word_counts_counts_counts_index=0\n  local max_word_counts_counts_counts_count=0\n\
    \  local max_word_counts_counts_counts_counts=()\n  local max_word_counts_counts_counts_counts_len=0\n\
    \  local max_word_counts_counts_counts_counts_index=0\n  local max_word_counts_counts_counts_counts_count=0\n\
    \  local max_word_counts_counts_counts_counts_counts=()\n  local max_word_counts_counts_counts_counts_counts_len=0\n\
    \  local max_word_counts_counts_counts_counts_counts_index=0\n  local max_word_counts_counts_counts_counts_counts_count=0\n\
    \  local max_word_counts_counts_counts_counts_counts_counts=()\n  local max_word_counts_counts_counts_counts_counts_counts_len=0\n\
    \  local max_word_counts_counts_counts_counts_counts_counts_index=0\n  local max_word_counts_counts_counts_counts_counts_counts_count=0\n\
    \  local max_word_counts_counts_counts_counts_counts_counts_counts=()\n  local\
    \ max_word_counts_counts_counts_counts_counts_counts_counts_len=0\n  local max_word_counts_counts_counts_counts_counts_counts_counts_index=0\n\
    \  local max_word_counts_counts_counts_counts_counts_counts_counts_count=0\n \
    \ local max_word_counts_counts_counts_counts_counts_counts_counts_counts=()\n\
    \  local max_word_counts_counts_counts_counts_counts_counts_counts_counts_len=0\n\
    \  local max_word_counts_counts_counts_counts_counts_\n}\n\ncandidate() {\n  \
    \  find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n  local tmp\n  local len2\n  local\
    \ len3\n  local len4\n  local len5\n  local len6\n  local len7\n  local len8\n\
    \  local len9\n  local len10\n  local len11\n  local len12\n  local len13\n  local\
    \ len14\n  local len15\n  local len16\n  local len17\n  local len18\n  local len19\n\
    \  local len20\n  local len21\n  local len22\n  local len23\n  local len24\n \
    \ local len25\n  local len26\n  local len27\n  local len28\n  local len29\n  local\
    \ len30\n  local len31\n  local len32\n  local len33\n  local len34\n  local len35\n\
    \  local len36\n  local len37\n  local len38\n  local len39\n  local len40\n \
    \ local len41\n  local len42\n  local len43\n  local len44\n  local len45\n  local\
    \ len46\n  local len47\n  local len48\n  local len49\n  local len50\n  local len51\n\
    \  local len52\n  local len53\n  local len54\n  local len55\n  local len56\n \
    \ local len57\n  local len58\n  local len59\n  local len60\n  local len61\n  local\
    \ len62\n  local len63\n  local len64\n  local len65\n  local len66\n  local len67\n\
    \  local len68\n  local len69\n  local len70\n  local len71\n  local len72\n \
    \ local len73\n  local len74\n  local len75\n  local len76\n  local len77\n  local\
    \ len78\n  local len79\n  local len80\n  local len81\n  local len82\n  local len83\n\
    \  local len84\n  local len85\n  local len86\n  local len87\n  local len88\n \
    \ local len89\n  local len90\n  local len91\n  local len92\n  local len93\n  local\
    \ len94\n  local len95\n  local len\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local maxlen=0\n    local maxword=\"\
    \"\n    local count=0\n    local word\n    for word in $list; do\n        ((count++))\n\
    \        local len=\"${#word}\"\n        if ((len > maxlen)) ; then\n        \
    \    maxlen=$len\n            maxword=$word\n        fi\n    done\n    echo \"\
    $maxword\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=$1\n  local -n max=0\n  local -n maxstr=\"\
    \"\n  local -n maxlen=0\n  local -n maxlenstr=\"\"\n  local -n maxlenstrlen=0\n\
    \  local -n maxlenstrlen2=0\n  local -n maxlenstrlen3=0\n  local -n maxlenstrlen4=0\n\
    \  local -n maxlenstrlen5=0\n  local -n maxlenstrlen6=0\n  local -n maxlenstrlen7=0\n\
    \  local -n maxlenstrlen8=0\n  local -n maxlenstrlen9=0\n  local -n maxlenstrlen10=0\n\
    \  local -n maxlenstrlen11=0\n  local -n maxlenstrlen12=0\n  local -n maxlenstrlen13=0\n\
    \  local -n maxlenstrlen14=0\n  local -n maxlenstrlen15=0\n  local -n maxlenstrlen16=0\n\
    \  local -n maxlenstrlen17=0\n  local -n maxlenstrlen18=0\n  local -n maxlenstrlen19=0\n\
    \  local -n maxlenstrlen20=0\n  local -n maxlenstrlen21=0\n  local -n maxlenstrlen22=0\n\
    \  local -n maxlenstrlen23=0\n  local -n maxlenstrlen24=0\n  local -n maxlenstrlen25=0\n\
    \  local -n maxlenstrlen26=0\n  local -n maxlenstrlen27=0\n  local -n maxlenstrlen28=0\n\
    \  local -n maxlenstrlen29=0\n  local -n maxlenstrlen30=0\n  local -n maxlenstrlen31=0\n\
    \  local -n maxlenstrlen32=0\n  local -n maxlenstrlen33=0\n  local -n maxlenstrlen34=0\n\
    \  local -n maxlenstrlen35=0\n  local -n maxlenstrlen36=0\n  local -n maxlenstrlen37=0\n\
    \  local -n maxlenstrlen38=0\n  local -n maxlenstrlen39=0\n  local -n maxlenstrlen40=0\n\
    \  local -n maxlenstrlen41=0\n  local -n maxlenstrlen42=0\n  local -n maxlenstrlen43=0\n\
    \  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
    \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
    \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this\
    \ game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\"\
    ) = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n\
    \    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\"\
    ) = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4yin6381.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmp4yin6381.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp4yin6381.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp4yin6381.sh: line 20: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 26: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 32: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 38: local: `0'': invalid variable name for name reference

    /tmp/tmp4yin6381.sh: line 39: local: `0'': invalid variable name for name referenc'
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n\n  for (( i=0; i<${#words[@]};\
    \ i++ )); do\n    word=${words[i]}\n    count=$(echo \"${word}\" | tr ' ' '\\\
    n' | sort | uniq -c | sort -n | tail -1)\n    if [[ ${count} -gt ${max} ]]; then\n\
    \      max=${count}\n      word=${word}\n    fi\n  done\n  echo \"${word}\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbnmhe2hx.sh: line 27: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo \"$word\" | wc\
    \ -c)\n        if [ \"$count\" -gt \"$max\" ]; then\n            word=$word\n\
    \            max=$count\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=$(echo\
    \ $word | wc -c)\n        if [ \"$count\" -gt \"$max\" ]; then\n            max=$(echo\
    \ $count | bc)\n            max_word=$word\n        fi\n    done\n    echo \"\
    $max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=$(echo\
    \ $word | tr \" \" \"\\n\" | sort | uniq -c | wc -l)\n        if (( count > max_count\
    \ )); then\n            max_count=$count\n            max_word=$word\n       \
    \ fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    local count\n    local i\n    local j\n    local word\n    for word in $list;\
    \ do\n        count=0\n        for ((i=0; i<${#word}; i++)); do\n            ((count++))\n\
    \            if [[ ${word:$i:1} == \"$word\" ]]; then\n                break\n\
    \            fi\n        done\n        if ((count > max)); then\n            max=count\n\
    \            word=$word\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local tmp\n  local tmp2\n  local tmp3\n\
    \  local tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n  local\
    \ tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local tmp14\n\
    \  local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n \
    \ local tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n  local\
    \ tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local tmp30\n\
    \  local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n \
    \ local tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n  local\
    \ tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local tmp46\n\
    \  local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n \
    \ local tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n  local\
    \ tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local tmp62\n\
    \  local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n \
    \ local tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n  local\
    \ tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local tmp78\n\
    \  local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n \
    \ local tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n  local\
    \ tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n  local tmp94\n\
    \  local tmp95\n  local tmp96\n  local \n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=\"\"\n    local count=0\n\
    \    local word=\"\"\n    local words=()\n    for word in $list; do\n        words=(\"\
    ${words[@]}\" \"$word\")\n    done\n    for word in \"${words[@]}\"; do\n    \
    \    count=$(( ${#words[@]} - 1 ))\n        if (( count > max )); then\n     \
    \       max=count\n            word=$word\n        fi\n    done\n    echo \"$word\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        (( ${#word} > max )) && max=${#word}\n\
    \    done\n    local i\n    for (( i=0; i<${#words[@]}; i++ )); do\n        ((\
    \ ${#words[$i]} > max )) && max=${#words[$i]}\n    done\n    local word\n    for\
    \ (( i=0; i<${#words[@]}; i++ )); do\n        (( ${#words[$i]} > max )) && word=${words[$i]}\n\
    \    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    \n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local maxword\n  local maxcount\n  local maxindex\n\
    \  local maxchar\n  local maxcharcount\n  local maxcharindex\n  local maxcharcount2\n\
    \  local maxcharindex2\n  local maxcharcount3\n  local maxcharindex3\n  local\
    \ maxcharcount4\n  local maxcharindex4\n  local maxcharcount5\n  local maxcharindex5\n\
    \  local maxcharcount6\n  local maxcharindex6\n  local maxcharcount7\n  local\
    \ maxcharindex7\n  local maxcharcount8\n  local maxcharindex8\n  local maxcharcount9\n\
    \  local maxcharindex9\n  local maxcharcount10\n  local maxcharindex10\n  local\
    \ maxcharcount11\n  local maxcharindex11\n  local maxcharcount12\n  local maxcharindex12\n\
    \  local maxcharcount13\n  local maxcharindex13\n  local maxcharcount14\n  local\
    \ maxcharindex14\n  local maxcharcount15\n  local maxcharindex15\n  local maxcharcount16\n\
    \  local maxcharindex16\n  local maxcharcount17\n  local maxcharindex17\n  local\
    \ maxcharcount18\n  local maxcharindex18\n  local maxcharcount19\n  local maxcharindex19\n\
    \  local maxcharcount20\n  local maxcharindex20\n  local maxcharcount21\n  local\
    \ maxcharindex21\n  local maxcharcount22\n  local maxcharindex22\n  local maxcharcount23\n\
    \  local maxcharindex23\n  local maxcharcount24\n  local maxcharindex24\n  local\
    \ maxcharcount25\n  local maxcharindex25\n  local maxcharcount26\n  local maxcharindex26\n\
    \  local maxcharcount27\n  local maxcharindex27\n  local maxcharcount28\n  local\
    \ maxcharindex28\n  local maxcharcount29\n  local maxcharindex29\n  local maxcharcount30\n\
    \  local maxcharindex30\n  local maxcharcount31\n  local maxcharindex31\n  local\
    \ maxcharcount32\n  local maxcharindex32\n  local maxcharcount33\n  local maxcharindex33\n\
    \  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
    \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
    \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this\
    \ game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\"\
    ) = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n\
    \    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\"\
    ) = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n\n  for ((i=0; i<${#words[@]}; i++)); do\n\
    \    word=${words[i]}\n    count=$(echo \"${word}\" | tr \" \" \"\\n\" | sort\
    \ | uniq -c | sort -n | tail -n 1)\n    len=${#count}\n    if [[ ${len} -gt ${max}\
    \ ]]; then\n      max=${len}\n      word=${word}\n    fi\n  done\n  echo \"${word}\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local wordcounts\n  local maxwordcount\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
    \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
    \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this\
    \ game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\"\
    ) = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n\
    \    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\"\
    ) = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local count=0\n    local word=\"\"\n    local index=0\n\
    \    for word in $words; do\n        count=$(echo $word | wc -w)\n        if [\
    \ $count -gt $max_count ]; then\n            max_count=$count\n            max_word=$word\n\
    \            max_index=$index\n        fi\n        ((index++))\n    done\n   \
    \ echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n list=$1\n    local max=0\n    local word\n\
    \    local count\n    for word in $list; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            word=$word\n        fi\n    done\n\
    \    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvexk2htu.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword=\"\"\n    local maxcount=0\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local maxcountword=\"\"\n    local maxcountword=\"\
    \"\n    local maxcountword=\"\"\n    local \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        local count=0\n        for char\
    \ in \"${word}\"; do\n            ((count++))\n        done\n        if (( count\
    \ > max )); then\n            max=count\n            word=$word\n        fi\n\
    \    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_word_count=0\n  local word\n  local word_count\n  local i\n  local\
    \ j\n  for word in $list; do\n    word_count=$(echo \"$word\" | wc -c)\n    if\
    \ [ \"$word_count\" -gt \"$max_word_count\" ]; then\n      max_word=\"$word\"\n\
    \      max_word_count=\"$word_count\"\n    fi\n  done\n  echo \"$max_word\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local max\n\
    \  local word\n  local count\n  local i\n  local j\n  local word\n  local count\n\
    \  local max\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local max\n  local word\n  local count\n  local i\n  local j\n\
    \  local word\n  local count\n  local max\n  local word\n  local count\n  local\
    \ i\n  local j\n  local word\n  local count\n  local max\n  local word\n  local\
    \ count\n  local i\n  local j\n  local word\n  local count\n  local max\n  local\
    \ word\n  local count\n  local i\n  local j\n  local word\n  local count\n  local\
    \ max\n  local word\n  local count\n  local i\n  local j\n  local word\n  local\
    \ count\n  local max\n  local word\n  local count\n  local i\n  local j\n  local\
    \ word\n  local count\n  local max\n  local word\n  local count\n  local i\n \
    \ local j\n  local word\n  local count\n  local max\n  local word\n  local count\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local max\n\
    \  local word\n  local count\n  local i\n  local j\n  local word\n  local count\n\
    \  local max\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local max\n  local word\n  local count\n  local i\n  local j\n\
    \  local word\n  local count\n  local max\n  local word\n  local count\n  local\
    \ i\n  local j\n  local word\n  local count\n  local max\n  local word\n  local\
    \ count\n  local i\n  local j\n  local word\n  local count\n  \n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local string=\"$1\"\n    local count=0\n    local max=0\n\
    \    local word\n    local i\n    local j\n    local words=()\n    local word\n\
    \    for word in $string; do\n        words[${#words[@]}]=\"$word\"\n    done\n\
    \    for ((i=0; i<${#words[@]}; i++)); do\n        word=${words[$i]}\n       \
    \ count=${#word}\n        if (( count > max )); then\n            max=count\n\
    \            word=$word\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for (( i=0; i<${#words[@]}; i++ )); do\n \
    \   word=${words[i]}\n    count=$(echo \"${word}\" | tr -cd '[:alnum:]' | wc -c)\n\
    \    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n      word=${word}\n\
    \    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( \"$@\" )\n  local max=0\n  local word\n\
    \  local count\n  for word in \"${words[@]}\"; do\n    count=0\n    for char in\
    \ \"${word}\"; do\n      ((count++))\n    done\n    if [[ $count -gt $max ]];\
    \ then\n      max=$count\n      word=$word\n    fi\n  done\n  echo \"$word\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( $1 )\n  local maxlen=0\n  local maxword=\"\
    \"\n  local count=0\n  local word\n  local i\n\n  for word in \"${words[@]}\"\
    ; do\n    count=0\n    for (( i=0; i<${#word}; i++ )); do\n      (( count++ ))\n\
    \      if [[ ${word:$i:1} == \"$word\" ]]; then\n        (( count-- ))\n     \
    \ fi\n    done\n    if [[ $count -gt $maxlen ]]; then\n      maxlen=$count\n \
    \     maxword=$word\n    fi\n  done\n  echo \"$maxword\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local word\n    for word in $words; do\n        local count=0\n      \
    \  for char in $word; do\n            ((count++))\n        done\n        if ((count\
    \ > max_count)) ; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  local j\n  local len\n  local tmp\n  local tmp2\n  local\
    \ tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n\
    \  local tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local\
    \ tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n\
    \  local tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n \
    \ local tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local\
    \ tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n\
    \  local tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n \
    \ local tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local\
    \ tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n\
    \  local tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n \
    \ local tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local\
    \ tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n\
    \  local tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n \
    \ local tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local\
    \ tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n\
    \  local tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n \
    \ local tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n  local\
    \ tmp94\n  local tmp95\n  local tmp96\n  local \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local count=0\n    local word\n    local i\n  \
    \  local j\n    local k\n    local count\n    local word\n    local i\n    local\
    \ j\n    local k\n    local count\n    local word\n    local i\n    local j\n\
    \    local k\n    local count\n    local word\n    local i\n    local j\n    local\
    \ k\n    local count\n    local word\n    local i\n    local j\n    local k\n\
    \    local count\n    local word\n    local i\n    local j\n    local k\n    local\
    \ count\n    local word\n    local i\n    local j\n    local k\n    local count\n\
    \    local word\n    local i\n    local j\n    local k\n    local count\n    local\
    \ word\n    local i\n    local j\n    local k\n    local count\n    local word\n\
    \    local i\n    local j\n    local k\n    local count\n    local word\n    local\
    \ i\n    local j\n    local k\n    local count\n    local word\n    local i\n\
    \    local j\n    local k\n    local count\n    local word\n    local i\n    local\
    \ j\n    local k\n    local count\n    local word\n    local i\n    local j\n\
    \    local k\n    local count\n    local word\n    local i\n    local j\n    local\
    \ k\n    local count\n    local word\n    local i\n    local j\n    local k\n\
    \    local count\n    local word\n    local i\n    local j\n    local k\n    local\
    \ count\n    local word\n    local i\n    local j\n    local k\n    local count\n\
    \    local word\n    local i\n    local j\n    local k\n    local count\n    local\
    \ word\n    local i\n    local j\n    local k\n    local count\n    local word\n\
    \    local i\n    local j\n    local k\n    local count\n    local word\n    local\
    \ i\n    local j\n    local k\n    local count\n    local word\n    local i\n\
    \    local j\n    local k\n    local count\n    local word\n    local i\n    local\
    \ j\n    local k\n    local count\n    local word\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        local count=\"${#word}\"\n     \
    \   if [ \"$count\" -gt \"$max\" ]; then\n            word=\"$word\"\n       \
    \     max=\"$count\"\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local tmp\n  local tmp2\n  local tmp3\n\
    \  local tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n  local\
    \ tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local tmp14\n\
    \  local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n \
    \ local tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n  local\
    \ tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local tmp30\n\
    \  local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n \
    \ local tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n  local\
    \ tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local tmp46\n\
    \  local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n \
    \ local tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n  local\
    \ tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local tmp62\n\
    \  local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n \
    \ local tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n  local\
    \ tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local tmp78\n\
    \  local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n \
    \ local tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n  local\
    \ tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n  local tmp94\n\
    \  local tmp95\n  local tmp96\n  local \n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for word in $words; do\n    count=0\n    for ((i=0; i<${#word};\
    \ i++)); do\n      ((count++))\n      if [[ ${word:$i:1} == \"$word\" ]]; then\n\
    \        ((count--))\n      fi\n    done\n    if [[ $count -gt $max ]]; then\n\
    \      max=$count\n      echo \"$word\"\n    fi\n  done\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( $1 )\n    local max=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in \"${words[@]}\"; do\n \
    \       ((count++))\n        if (( count > max )); then\n            max=count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    local\
    \ words=$1\n    for word in $words; do\n        local count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max_count))\
    \ ; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr '\
    \ ' '\\n' | sort | uniq -c | sort -n | tail -1)\n        if [ \"$count\" -gt \"\
    $max\" ]; then\n            word=$count\n            max=$count\n        fi\n\
    \    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjuhm6xky.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmpjuhm6xky.sh: line 21: [:       1 of: integer expression expected

    /tmp/tmpjuhm6xky.sh: line 21: [:       1 string: integer expression expected

    /tmp/tmpjuhm6xky.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmpjuhm6xky.sh: line 21: [:       1 enam: integer expression expected

    /tmp/tmpjuhm6xky.sh: line 21: [:       1 game: integer expression expected

    '
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( \"$@\" )\n  local max=0\n  local maxword=\"\
    \"\n  local maxcount=0\n  local word\n  local count\n  for word in \"${words[@]}\"\
    ; do\n    count=$(echo \"$word\" | wc -c)\n    if [ \"$count\" -gt \"$maxcount\"\
    \ ]; then\n      maxcount=$count\n      maxword=$word\n    fi\n  done\n  echo\
    \ \"$maxword\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    for ((i=0; i<${#words[@]};\
    \ i++)); do\n        word=${words[i]}\n        count=$(echo \"${word}\" | tr \"\
    \ \" \"\\n\" | sort | uniq -c | sort -n | tail -n 1)\n        if [[ ${count} ==\
    \ \"1\" ]]; then\n            word=${word}\n        else\n            word=${words[$((i+1))]}\n\
    \        fi\n        ((max+=${#word}))\n    done\n    echo \"${words[$((i-1))]}\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr \"\
    \ \" \"\\n\" | sort | uniq -c | sort -n | tail -n 1)\n        if [[ $count -gt\
    \ $max ]]; then\n            max=$(echo $count | cut -d \" \" -f 1)\n        fi\n\
    \    done\n    echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51v1lwa2.sh: line 21: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmp51v1lwa2.sh: line 21: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmp51v1lwa2.sh: line 21: [[: 1 string: syntax error in expression (error
    token is "string")

    '
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n list=$1\n    local -n max=$2\n    local -n\
    \ count\n    local -n word\n    local -n count\n    local -n max\n    local -n\
    \ max\n    local -n max\n    local -n max\n    local -n max\n    local -n max\n\
    \    local -n max\n    local -n max\n    local -n max\n    local -n max\n    local\
    \ -n max\n    local -n max\n    local -n max\n    local -n max\n    local -n max\n\
    \    local -n max\n    local -n max\n    local -n max\n    local -n max\n    local\
    \ -n max\n    local -n max\n    local -n max\n    local -n max\n    local -n max\n\
    \    local -n max\n    local -n max\n    local -n max\n    local -n max\n    local\
    \ -n max\n    local -n max\n    local -n max\n    local -n max\n    local -n max\n\
    \    local -n max\n    local -n max\n    local -n max\n    local -n max\n    local\
    \ -n max\n    local -n max\n    local -n max\n    local -n max\n    local -n max\n\
    \    local -n max\n    local -n max\n    local -n max\n    local -n max\n    local\
    \ -n max\n    local -n max\n    local -n max\n    local -n max\n    local -n max\n\
    \    local -n max\n    local -n max\n    local -n max\n    local -n max\n    local\
    \ -n max\n    local -n max\n    local -n max\n    local -n max\n    local -n max\n\
    \    local -n max\n    local -n max\n    local -n max\n    local -n max\n    local\
    \ -n max\n    local -n max\n    local -n max\n    local -n max\n    local -n max\n\
    \    local -n max\n    local -n max\n    local -n max\n    local -n max\n    local\
    \ -n max\n    local -n max\n    local -n max\n    local -n max\n    local -n max\n\
    \    local -n max\n    local -n max\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9xxjapyz.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmp9xxjapyz.sh: line 16: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local string=\"$1\"\n    local max=0\n    local word\n\
    \    local count\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    \n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048593
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660048592
