language: sh
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name extensions\
    \ strength extension_name extension_strength extension_count extension_name extension_strength\n\
    \    local -i strength_count strength_count strength_count strength_count strength_count\
    \ strength_count strength_count strength_count\n    local -i strength_count strength_count\
    \ strength_count strength_count strength_count strength_count strength_count strength_count\n\
    \    local -i strength_count strength_count strength_count strength_count strength_count\
    \ strength_count strength_count strength_count\n    local -i strength_count strength_count\
    \ strength_count strength_count strength_count strength_count strength_count strength_count\n\
    \    local -i strength_count strength_count strength_count strength_count strength_count\
    \ strength_count strength_count strength_count\n    local -i strength_count strength_count\
    \ strength_count strength_count strength_count strength_count strength_count strength_count\n\
    \    local -i strength_count strength_count strength_count strength_count strength_count\
    \ strength_count strength_count strength_count\n    local -i strength_count strength_count\
    \ strength_count strength_count strength_count strength_count strength_count strength_count\n\
    \    local -i strength_count strength_count strength_count strength_count strength_count\
    \ strength_count strength_count strength_count\n    local -i strength_count strength_count\
    \ strength_count strength_count strength_count strength_count strength_count strength_count\n\
    \    local -i strength_count strength_count strength_count strength_count strength_count\
    \ strength_count strength_count strength_count\n    local -i strength_count strength_count\
    \ strength_count strength_count strength_count strength_count strength_count strength_count\n\
    \    local -i strength_count strength_count strength_count strength_count strength_count\
    \ strength_count strength_count strength_count\n    local -i strength_count strength_count\
    \ strength_count strength_count strength_count strength_count strength_count strength_count\n\
    \    local -i strength_count strength_count strength_count strength_count strength_count\
    \ strength_count strength_count strength_count\n    local -i strength_count strength_count\
    \ strength_count strength_count strength_count strength_count strength_count strength_count\n\
    \    local -i strength_count strength_count strength_count strength_count strength_count\
    \ strength_count strength_count strength_count\n    local -i strength_count strength_count\
    \ strength_count strength_count strength_count strength_count strength_count strength_count\n\
    \    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_\n}\n\
    \ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local strongest\n\
    \  local extension_length\n  local extension_strength\n  local extension_class\n\
    \  local extension_class_length\n  local extension_class_strength\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local k\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local extensions_count=$(echo $extensions | wc -w)\n    local\
    \ extensions_count=$(echo $extensions_count | cut -d \" \" -f1)\n    local extensions_count=$(echo\
    \ $extensions_count | cut -d \" \" -f2)\n    local extensions_count=$(echo $extensions_count\
    \ | cut -d \" \" -f3)\n    local extensions_count=$(echo $extensions_count | cut\
    \ -d \" \" -f4)\n    local extensions_count=$(echo $extensions_count | cut -d\
    \ \" \" -f5)\n    local extensions_count=$(echo $extensions_count | cut -d \"\
    \ \" -f6)\n    local extensions_count=$(echo $extensions_count | cut -d \" \"\
    \ -f7)\n    local extensions_count=$(echo $extensions_count | cut -d \" \" -f8)\n\
    \    local extensions_count=$(echo $extensions_count | cut -d \" \" -f9)\n   \
    \ local extensions_count=$(echo $extensions_count | cut -d \" \" -f10)\n    local\
    \ extensions_count=$(echo $extensions_count | cut -d \" \" -f11)\n    local extensions_count=$(echo\
    \ $extensions_count | cut -d \" \" -f12)\n    local extensions_count=$(echo $extensions_count\
    \ | cut -d \" \" -f13)\n    local extensions_count=$(echo $extensions_count |\
    \ cut -d \" \" -f14)\n    local extensions_count=$(echo $extensions_count | cut\
    \ -d \" \" -f15)\n    local extensions_count=$(echo $extensions_count | cut -d\
    \ \" \" -f16)\n    local extensions_count=$(echo $extensions_count | cut -d \"\
    \ \" -f17)\n    local extensions_count=$(echo $extensions_count | cut -d \" \"\
    \ -f18)\n    local extensions_count=$(echo $extensions_count | cut -d \" \" -f19)\n\
    \    local extensions_count=$(echo $extensions_count | cut -d \" \" -f20)\n  \
    \  local extensions_count=$(echo $extensions_count | cut -d \" \" -f21)\n    local\
    \ extensions_count=$(echo $extensions_count | cut -d \" \" -f22)\n    local extensions_count=$(echo\
    \ $extensions_count | cut -d \" \" -f23)\n    local extensions_count=$(echo $extensions_count\
    \ | cut -d \" \" -f24)\n    local extensions_count=$(echo $extensions_count |\
    \ cut -d \" \" -f25)\n    local extensions_count=$(echo $extensions_count | cut\
    \ -d \" \" -f26)\n    local extensions_count=$(echo $extensions_count | cut -d\
    \ \" \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwgemz1p9.sh: line 68: unexpected EOF while looking for matching
    `"''

    /tmp/tmpwgemz1p9.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension_strongest=''\n\
    \    local extension_strength=''\n    local extension_strongest_index=0\n    local\
    \ extension_strength_index=0\n    local extension_strongest_count=0\n    local\
    \ extension_strength_count=0\n    local extension_strongest_count2=0\n    local\
    \ extension_strength_count2=0\n    local extension_strongest_count3=0\n    local\
    \ extension_strength_count3=0\n    local extension_strongest_count4=0\n    local\
    \ extension_strength_count4=0\n    local extension_strongest_count5=0\n    local\
    \ extension_strength_count5=0\n    local extension_strongest_count6=0\n    local\
    \ extension_strength_count6=0\n    local extension_strongest_count7=0\n    local\
    \ extension_strength_count7=0\n    local extension_strongest_count8=0\n    local\
    \ extension_strength_count8=0\n    local extension_strongest_count9=0\n    local\
    \ extension_strength_count9=0\n    local extension_strongest_count10=0\n    local\
    \ extension_strength_count10=0\n    local extension_strongest_count11=0\n    local\
    \ extension_strength_count11=0\n    local extension_strongest_count12=0\n    local\
    \ extension_strength_count12=0\n    local extension_strongest_count13=0\n    local\
    \ extension_strength_count13=0\n    local extension_strongest_count14=0\n    local\
    \ extension_strength_count14=0\n    local extension_strongest_count15=0\n    local\
    \ extension_strength_count15=0\n    local extension_strongest_count16=0\n    local\
    \ extension_strength_count16=0\n    local extension_strongest_count17=0\n    local\
    \ extension_strength_count17=0\n    local extension_strongest_count18=0\n    local\
    \ extension_strength_count18=0\n    local extension_strongest_count19=0\n    local\
    \ extension_strength_count19=0\n    local extension_strongest_count20=0\n    local\
    \ extension_strength_count20=0\n    local extension_strongest_count21=0\n    local\
    \ extension_strength_count21=0\n    local extension_strongest_count22=0\n    local\
    \ extension_strength_count22=0\n    local extension_strongest_count23=0\n    local\
    \ extension_strength_count23=0\n    local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local extension_strength\n  local extension_strongest\n\
    \  local extension_first\n  local extension_last\n  local extension_length\n \
    \ local extension_length2\n  local extension_length3\n  local extension_length4\n\
    \  local extension_length5\n  local extension_length6\n  local extension_length7\n\
    \  local extension_length8\n  local extension_length9\n  local extension_length10\n\
    \  local extension_length11\n  local extension_length12\n  local extension_length13\n\
    \  local extension_length14\n  local extension_length15\n  local extension_length16\n\
    \  local extension_length17\n  local extension_length18\n  local extension_length19\n\
    \  local extension_length20\n  local extension_length21\n  local extension_length22\n\
    \  local extension_length23\n  local extension_length24\n  local extension_length25\n\
    \  local extension_length26\n  local extension_length27\n  local extension_length28\n\
    \  local extension_length29\n  local extension_length30\n  local extension_length31\n\
    \  local extension_length32\n  local extension_length33\n  local extension_length34\n\
    \  local extension_length35\n  local extension_length36\n  local extension_length37\n\
    \  local extension_length38\n  local extension_length39\n  local extension_length40\n\
    \  local extension_length41\n  local extension_length42\n  local extension_length43\n\
    \  local extension_length44\n  local extension_length45\n  local extension_length46\n\
    \  local extension_length47\n  local extension_length48\n  local extension_length49\n\
    \  local extension_length50\n  local extension_length51\n  local extension_length52\n\
    \  local extension_length53\n  local extension_length54\n  local extension_length55\n\
    \  local extension_length56\n  local extension_length57\n  local extension_length58\n\
    \  local extension_length59\n  local extension_length60\n  local extension_length61\n\
    \  local extension_length62\n  local extension_length63\n  local extension_length64\n\
    \  local extension_length65\n  local extension_length66\n  local extension_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength\n  local extension\n  local i\n  local j\n \
    \ local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local count\n    local count2\n    local count3\n    local\
    \ count4\n    local count5\n    local count6\n    local count7\n    local count8\n\
    \    local count9\n    local count10\n    local count11\n    local count12\n \
    \   local count13\n    local count14\n    local count15\n    local count16\n \
    \   local count17\n    local count18\n    local count19\n    local count20\n \
    \   local count21\n    local count22\n    local count23\n    local count24\n \
    \   local count25\n    local count26\n    local count27\n    local count28\n \
    \   local count29\n    local count30\n    local count31\n    local count32\n \
    \   local count33\n    local count34\n    local count35\n    local count36\n \
    \   local count37\n    local count38\n    local count39\n    local count40\n \
    \   local count41\n    local count42\n    local count43\n    local count44\n \
    \   local count45\n    local count46\n    local count47\n    local count48\n \
    \   local count49\n    local count50\n    local count51\n    local count52\n \
    \   local count53\n    local count54\n    local count55\n    local count56\n \
    \   local count57\n    local count58\n    local count59\n    local count60\n \
    \   local count61\n    local count62\n    local count63\n    local count64\n \
    \   local count65\n    local count66\n    local count67\n    local count68\n \
    \   local count69\n    local count70\n    local count71\n    local count72\n \
    \   local count73\n    local count74\n    local count75\n    local count76\n \
    \   local count77\n    local count78\n    local count79\n    local count80\n \
    \   local count81\n    local count82\n    local count83\n    local count84\n \
    \   local count85\n    local count86\n    local count87\n    local count88\n \
    \   local count89\n    local count90\n    local count91\n    local count92\n \
    \   local count93\n    local count94\n    local count95\n    local count96\n \
    \   local count\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local length\n \
    \ local max\n  local maxIndex\n  local maxStrength\n  local maxExtension\n  local\
    \ maxExtensionIndex\n  local maxExtensionStrength\n  local maxExtensionLength\n\
    \  local maxExtensionName\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local count\n  local i\n  local j\n  local\
    \ strongest\n  local strongest_extension\n  local strongest_extension_length\n\
    \  local strongest_extension_strength\n  local strongest_extension_class\n  local\
    \ strongest_extension_name\n  local strongest_extension_class\n  local strongest_extension_class_length\n\
    \  local strongest_extension_class_strength\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local strongest_extension_class_count\n\
    \  local strongest_extension_class_count\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal strength=0\n\tlocal extension\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal extensions_sorted=$(echo $extensions | tr ' ' '\\n' | sort -n)\n\tlocal\
    \ extensions_length=$(echo $extensions_sorted | wc -l)\n\tlocal extensions_count=$(echo\
    \ $extensions_sorted | wc -w)\n\tlocal extensions_strength=$(echo $extensions_sorted\
    \ | awk '{print $1}')\n\tlocal extensions_count=$(echo $extensions_sorted | awk\
    \ '{print $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted | awk '{print\
    \ $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\
    \tlocal extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\t\
    local extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\tlocal\
    \ extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\tlocal extensions_strength=$(echo\
    \ $extensions_sorted | awk '{print $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted\
    \ | awk '{print $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted |\
    \ awk '{print $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted | awk\
    \ '{print $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted | awk '{print\
    \ $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\
    \tlocal extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\t\
    local extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\tlocal\
    \ extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\tlocal extensions_strength=$(echo\
    \ $extensions_sorted | awk '{print $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted\
    \ | awk '{print $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted |\
    \ awk '{print $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted | awk\
    \ '{print $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted | awk '{print\
    \ $1}')\n\tlocal extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\
    \tlocal extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\t\
    local extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n\tlocal\
    \ extensions_strength=$(echo $extensions_sorted | awk '{print $1}')\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local count\n  local\
    \ max\n  local maxCount\n  local maxExtension\n  local maxExtensionCount\n  local\
    \ maxExtensionStrength\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount2\n\
    \  local maxExtensionStrengthCount3\n  local maxExtensionStrengthCount4\n  local\
    \ maxExtensionStrengthCount5\n  local maxExtensionStrengthCount6\n  local maxExtensionStrengthCount7\n\
    \  local maxExtensionStrengthCount8\n  local maxExtensionStrengthCount9\n  local\
    \ maxExtensionStrengthCount10\n  local maxExtensionStrengthCount11\n  local maxExtensionStrengthCount12\n\
    \  local maxExtensionStrengthCount13\n  local maxExtensionStrengthCount14\n  local\
    \ maxExtensionStrengthCount15\n  local maxExtensionStrengthCount16\n  local maxExtensionStrengthCount17\n\
    \  local maxExtensionStrengthCount18\n  local maxExtensionStrengthCount19\n  local\
    \ maxExtensionStrengthCount20\n  local maxExtensionStrengthCount21\n  local maxExtensionStrengthCount22\n\
    \  local maxExtensionStrengthCount23\n  local maxExtensionStrengthCount24\n  local\
    \ maxExtensionStrengthCount25\n  local maxExtensionStrengthCount26\n  local maxExtensionStrengthCount27\n\
    \  local maxExtensionStrengthCount28\n  local maxExtensionStrengthCount29\n  local\
    \ maxExtensionStrengthCount30\n  local maxExtensionStrengthCount31\n  local maxExtensionStrengthCount32\n\
    \  local maxExtensionStrengthCount33\n  local maxExtensionStrengthCount34\n  local\
    \ maxExtensionStrengthCount35\n  local maxExtensionStrengthCount36\n  local maxExtensionStrengthCount37\n\
    \  local maxExtensionStrengthCount38\n  local maxExtensionStrengthCount39\n  local\
    \ maxExtensionStrengthCount40\n  local maxExtensionStrengthCount41\n  local maxExtensionStrengthCount42\n\
    \  local maxExtensionStrengthCount43\n  local maxExtensionStrengthCount44\n  local\
    \ maxExtensionStrengthCount45\n  local maxExtensionStrengthCount46\n  local maxExtensionStrengthCount47\n\
    \  local maxExtensionStrengthCount48\n  local maxExtensionStrengthCount49\n  local\
    \ maxExtensionStrengthCount50\n  local max\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local extensions_count=${#extensions[@]}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extensions_count:-0}\n\
    \    local extensions_count=${extensions_count:-0}\n    local extensions_count=${extension\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm6t7sgdp.sh: line 86: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local count\n\
    \  local max\n  local maxCount\n  local maxExtension\n  local maxExtensionCount\n\
    \  local maxExtensionStrength\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount2\n\
    \  local maxExtensionStrengthCount3\n  local maxExtensionStrengthCount4\n  local\
    \ maxExtensionStrengthCount5\n  local maxExtensionStrengthCount6\n  local maxExtensionStrengthCount7\n\
    \  local maxExtensionStrengthCount8\n  local maxExtensionStrengthCount9\n  local\
    \ maxExtensionStrengthCount10\n  local maxExtensionStrengthCount11\n  local maxExtensionStrengthCount12\n\
    \  local maxExtensionStrengthCount13\n  local maxExtensionStrengthCount14\n  local\
    \ maxExtensionStrengthCount15\n  local maxExtensionStrengthCount16\n  local maxExtensionStrengthCount17\n\
    \  local maxExtensionStrengthCount18\n  local maxExtensionStrengthCount19\n  local\
    \ maxExtensionStrengthCount20\n  local maxExtensionStrengthCount21\n  local maxExtensionStrengthCount22\n\
    \  local maxExtensionStrengthCount23\n  local maxExtensionStrengthCount24\n  local\
    \ maxExtensionStrengthCount25\n  local maxExtensionStrengthCount26\n  local maxExtensionStrengthCount27\n\
    \  local maxExtensionStrengthCount28\n  local maxExtensionStrengthCount29\n  local\
    \ maxExtensionStrengthCount30\n  local maxExtensionStrengthCount31\n  local maxExtensionStrengthCount32\n\
    \  local maxExtensionStrengthCount33\n  local maxExtensionStrengthCount34\n  local\
    \ maxExtensionStrengthCount35\n  local maxExtensionStrengthCount36\n  local maxExtensionStrengthCount37\n\
    \  local maxExtensionStrengthCount38\n  local maxExtensionStrengthCount39\n  local\
    \ maxExtensionStrengthCount40\n  local maxExtensionStrengthCount41\n  local maxExtensionStrengthCount42\n\
    \  local maxExtensionStrengthCount43\n  local maxExtensionStrengthCount44\n  local\
    \ maxExtensionStrengthCount45\n  local maxExtensionStrengthCount46\n  local maxExtensionStrengthCount47\n\
    \  local maxExtensionStrengthCount48\n  local maxExtensionStrengthCount49\n  local\
    \ maxExtensionStrengthCount50\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local extension_strength\n  local extension_strongest\n  local extension_strongest_index\n\
    \  local extension_strongest_strength\n  local extension_strongest_name\n  local\
    \ extension_strongest_name_length\n  local extension_strongest_name_length_index\n\
    \  local extension_strongest_name_length_index_index\n  local extension_strongest_name_length_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index\n  local extension_strongest_name_length_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_strongest_name_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strongest_extension=\"\"\n    local strongest_extension_strength=-1\n\
    \    local extension_counter=0\n    local extension_counter_max=0\n    local extension_counter_max_strength=-1\n\
    \    local extension_counter_max_index=0\n    local extension_counter_max_index_strength=-1\n\
    \    local extension_counter_max_index_strength_max=0\n    local extension_counter_max_index_strength_max_strength=-1\n\
    \    local extension_counter_max_index_strength_max_strength_max=0\n    local\
    \ extension_counter_max_index_strength_max_strength_max_strength=-1\n    local\
    \ extension_counter_max_index_strength_max_strength_max_strength_max=0\n    local\
    \ extension_counter_max_index_strength_max_strength_max_strength_max_strength=-1\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max=0\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength=-1\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength_max=0\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength_max_strength=-1\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max=0\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength=-1\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max=0\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max=0\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max=0\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max=0\n\
    \    local extension_counter_max_index_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_max_strength_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local k\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local extension\n    local extension_strength\n    local\
    \ extension_strength_str\n    local extension_strength_int\n    local extension_strength_float\n\
    \    local extension_strength_bool\n    local extension_strength_str\n    local\
    \ extension_strength_int\n    local extension_strength_float\n    local extension_strength_bool\n\
    \    local extension_strength_str\n    local extension_strength_int\n    local\
    \ extension_strength_float\n    local extension_strength_bool\n    local extension_strength_str\n\
    \    local extension_strength_int\n    local extension_strength_float\n    local\
    \ extension_strength_bool\n    local extension_strength_str\n    local extension_strength_int\n\
    \    local extension_strength_float\n    local extension_strength_bool\n    local\
    \ extension_strength_str\n    local extension_strength_int\n    local extension_strength_float\n\
    \    local extension_strength_bool\n    local extension_strength_str\n    local\
    \ extension_strength_int\n    local extension_strength_float\n    local extension_strength_bool\n\
    \    local extension_strength_str\n    local extension_strength_int\n    local\
    \ extension_strength_float\n    local extension_strength_bool\n    local extension_strength_str\n\
    \    local extension_strength_int\n    local extension_strength_float\n    local\
    \ extension_strength_bool\n    local extension_strength_str\n    local extension_strength_int\n\
    \    local extension_strength_float\n    local extension_strength_bool\n    local\
    \ extension_strength_str\n    local extension_strength_int\n    local extension_strength_float\n\
    \    local extension_strength_bool\n    local extension_strength_str\n    local\
    \ extension_strength_int\n    local extension_strength_float\n    local extension_strength_bool\n\
    \    local extension_strength_str\n    local extension_strength_int\n    local\
    \ extension_strength_float\n    local extension_strength_bool\n    local extension_strength_str\n\
    \    local extension_strength_int\n    local extension_strength_float\n    local\
    \ extension_strength_bool\n    local extension_strength_str\n    local extension_strength_int\n\
    \    local extension_strength_float\n    local extension_strength_bool\n    local\
    \ extension_strength_str\n    \n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local extensions_count=${#extensions[@]}\n    local extensions_strongest=${extensions[0]}\n\
    \    local extensions_strength=${extensions_strongest}\n    local extensions_index=0\n\
    \    local extensions_strongest_count=0\n    local extensions_strongest_index=0\n\
    \    local extensions_strongest_count2=0\n    local extensions_strongest_index2=0\n\
    \    local extensions_strongest_count3=0\n    local extensions_strongest_index3=0\n\
    \    local extensions_strongest_count4=0\n    local extensions_strongest_index4=0\n\
    \    local extensions_strongest_count5=0\n    local extensions_strongest_index5=0\n\
    \    local extensions_strongest_count6=0\n    local extensions_strongest_index6=0\n\
    \    local extensions_strongest_count7=0\n    local extensions_strongest_index7=0\n\
    \    local extensions_strongest_count8=0\n    local extensions_strongest_index8=0\n\
    \    local extensions_strongest_count9=0\n    local extensions_strongest_index9=0\n\
    \    local extensions_strongest_count10=0\n    local extensions_strongest_index10=0\n\
    \    local extensions_strongest_count11=0\n    local extensions_strongest_index11=0\n\
    \    local extensions_strongest_count12=0\n    local extensions_strongest_index12=0\n\
    \    local extensions_strongest_count13=0\n    local extensions_strongest_index13=0\n\
    \    local extensions_strongest_count14=0\n    local extensions_strongest_index14=0\n\
    \    local extensions_strongest_count15=0\n    local extensions_strongest_index15=0\n\
    \    local extensions_strongest_count16=0\n    local extensions_strongest_index16=0\n\
    \    local extensions_strongest_count17=0\n    local extensions_strongest_index17=0\n\
    \    local extensions_strongest_count18=0\n    local extensions_strongest_index18=0\n\
    \    local extensions_strongest_count19=0\n    local extensions_strongest_index19=0\n\
    \    local extensions_strongest_count20=0\n    local extensions_strongest_index20=0\n\
    \    local extensions_strongest_count21=0\n    local extensions_stron\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local count\n    local extension_length\n    local extension_strength\n\
    \    local extension_class\n    local extension_class_length\n    local extension_class_strength\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local len\n    local max_strength\n    local max_extension\n\
    \    local max_index\n    local max_extension_length\n    local max_extension_strength\n\
    \    local max_extension_class\n    local max_extension_class_length\n    local\
    \ max_extension_class_strength\n    local max_extension_class_index\n    local\
    \ max_extension_class_extension\n    local max_extension_class_extension_length\n\
    \    local max_extension_class_extension_strength\n    local max_extension_class_extension_index\n\
    \    local max_extension_class_extension_extension\n    local max_extension_class_extension_extension_length\n\
    \    local max_extension_class_extension_extension_strength\n    local max_extension_class_extension_extension_index\n\
    \    local max_extension_class_extension_extension_extension\n    local max_extension_class_extension_extension_extension_length\n\
    \    local max_extension_class_extension_extension_extension_strength\n    local\
    \ max_extension_class_extension_extension_extension_index\n    local max_extension_class_extension_extension_extension_extension\n\
    \    local max_extension_class_extension_extension_extension_extension_length\n\
    \    local max_extension_class_extension_extension_extension_extension_strength\n\
    \    local max_extension_class_extension_extension_extension_extension_index\n\
    \    local max_extension_class_extension_extension_extension_extension_extension\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_length\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_strength\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_index\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_extension\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_extension_length\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_extension_strength\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_extension_index\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_extension_extension_length\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_extension_extension_strength\n\
    \    local max_extension_class_extension_extension_extension_extension_extension_extension_extension_index\n\
    \    local max_extension_class_extension_extension_extension\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local extensions_count=$(echo $extensions | wc -w)\n  local extension_strength=$(echo\
    \ $extensions | awk '{print toupper($1)-tolower($1)}' | sort -n | tail -1)\n \
    \ local extension_strength_str=$(echo $extension_strength | awk '{print toupper($1)}')\n\
    \  local extension_strength_str_count=$(echo $extension_strength_str | wc -w)\n\
    \  local extension_strength_str_count_min=$(echo $extension_strength_str_count\
    \ | awk '{print $1}')\n  local extension_strength_str_count_max=$(echo $extension_strength_str_count\
    \ | awk '{print $2}')\n  local extension_strength_str_count_avg=$(echo $extension_strength_str_count\
    \ | awk '{print $3/$2}')\n  local extension_strength_str_count_median=$(echo $extension_strength_str_count\
    \ | awk '{print $1}')\n  local extension_strength_str_count_min=$(echo $extension_strength_str_count\
    \ | awk '{print $1}')\n  local extension_strength_str_count_max=$(echo $extension_strength_str_count\
    \ | awk '{print $2}')\n  local extension_strength_str_count_avg=$(echo $extension_strength_str_count\
    \ | awk '{print $3/$2}')\n  local extension_strength_str_count_median=$(echo $extension_strength_str_count\
    \ | awk '{print $1}')\n  local extension_strength_str_count_min=$(echo $extension_strength_str_count\
    \ | awk '{print $1}')\n  local extension_strength_str_count_max=$(echo $extension_strength_str_count\
    \ | awk '{print $2}')\n  local extension_strength_str_count_avg=$(echo $extension_strength_str_count\
    \ | awk '{print $3/$2}')\n  local extension_strength_str_count_median=$(echo $extension_strength_str_count\
    \ | awk '{print $1}')\n  local extension_strength_str_count_min=$(echo $extension_strength_str_count\
    \ | awk '{print $1}')\n  local extension_strength_str_count_max=$(echo $extension_strength_str_count\
    \ | awk '{print $2}')\n  local extension_strength_str_count_avg=$(echo $extension_strength_str_count\
    \ | awk '{print $3/$2}')\n  local extension_strength_str_count_median=$(echo $extension_strength_str_count\
    \ | awk '{print $1}')\n  \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    '
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extensions\
    \ strength extension_name extension_strength\n  class_name=$1\n  extensions=$2\n\
    \  strength=$(echo $extensions | tr ' ' '\\n' | sort -n | tail -n 1)\n  extension_name=$(echo\
    \ $extensions | tr ' ' '\\n' | sort -n | head -n 1)\n  extension_strength=$(echo\
    \ $extensions | tr ' ' '\\n' | sort -n | head -n 2 | tail -n 1)\n  echo $class_name.$extension_name\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension_array=()\n\
    \    local extension_array_length=${#extensions[@]}\n    local extension_array_element\n\
    \    local extension_array_element_length\n    local extension_array_element_index\n\
    \    local extension_array_element_value\n    local extension_array_element_value_length\n\
    \    local extension_array_element_value_length_index\n    local extension_array_element_value_length_value\n\
    \    local extension_array_element_value_length_value_length\n    local extension_array_element_value_length_value_length_index\n\
    \    local extension_array_element_value_length_value_length_value\n    local\
    \ extension_array_element_value_length_value_length_value_length\n    local extension_array_element_value_length_value_length_value_length_index\n\
    \    local extension_array_element_value_length_value_length_value_length_value\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_index\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_index\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length_index\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length_value\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_length\n\
    \    local extension_array_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index\n\
    \    local extension_array_element_value_length_value_\n}\n\ncandidate() {\n \
    \   Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local strongest\n\
    \  local extension_length\n  local extension_strength\n  local extension_class\n\
    \  local extension_class_length\n  local extension_class_strength\n  local extension_class_index\n\
    \  local extension_class_index_length\n  local extension_class_index_strength\n\
    \  local extension_class_index_index\n  local extension_class_index_index_length\n\
    \  local extension_class_index_index_strength\n  local extension_class_index_index_index\n\
    \  local extension_class_index_index_index_length\n  local extension_class_index_index_index_strength\n\
    \  local extension_class_index_index_index_index\n  local extension_class_index_index_index_index_length\n\
    \  local extension_class_index_index_index_index_strength\n  local extension_class_index_index_index_index_index\n\
    \  local extension_class_index_index_index_index_index_length\n  local extension_class_index_index_index_index_index_strength\n\
    \  local extension_class_index_index_index_index_index_index\n  local extension_class_index_index_index_index_index_index_length\n\
    \  local extension_class_index_index_index_index_index_index_strength\n  local\
    \ extension_class_index_index_index_index_index_index_index\n  local extension_class_index_index_index_index_index_index_index_length\n\
    \  local extension_class_index_index_index_index_index_index_index_strength\n\
    \  local extension_class_index_index_index_index_index_index_index_index\n  local\
    \ extension_class_index_index_index_index_index_index_index_index_length\n  local\
    \ extension_class_index_index_index_index_index_index_index_index_strength\n \
    \ local extension_class_index_index_index_index_index_index_index_index_index\n\
    \  local extension_class_index_index_index_index_index_index_index_index_index_length\n\
    \  local extension_class_index_index_index_index_index_index_index_index_index_strength\n\
    \  local extension_class_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_class_index_index_index_index_index_index_index_index_index_index_length\n\
    \  local extension_class_index_index_index_index_index_index_index_index_index_index_strength\n\
    \  local extension_class_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_class_index_index_index_index_index_index_index_index_index_index_index_length\n\
    \  local extension_class_index_index_index_index_index_index_index_index_index_index_index_index_strength\n\
    \  local extension_class_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength\n  local extension\n  local i\n  local count\n\
    \  local strongest_extension\n  local extension_count\n  local extension_strength\n\
    \  local extension_strongest\n  local extension_strongest_count\n  local extension_strongest_strength\n\
    \  local extension_strongest_strongest\n  local extension_strongest_strongest_count\n\
    \  local extension_strongest_strongest_strength\n  local extension_strongest_strongest_strongest\n\
    \  local extension_strongest_strongest_strongest_count\n  local extension_strongest_strongest_strongest_strength\n\
    \  local extension_strongest_strongest_strongest_strongest\n  local extension_strongest_strongest_strongest_strongest_count\n\
    \  local extension_strongest_strongest_strongest_strongest_strength\n  local extension_strongest_strongest_strongest_strongest_strongest\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_count\n \
    \ local extension_strongest_strongest_strongest_strongest_strongest_strength\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_strongest\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_strongest_count\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_strongest_strength\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_strongest_strongest\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_strongest_strongest_count\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_strongest_strongest_strength\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_strongest_strongest_strongest\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_strongest_strongest_strongest_count\n\
    \  local extension_strongest_strongest_strongest_strongest_strongest_strongest_strongest_strongest_strength\n\
    \  local extension_str\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ len\n  local max\n  local maxlen\n  local maxlen2\n  local maxlen3\n  local\
    \ maxlen4\n  local maxlen5\n  local maxlen6\n  local maxlen7\n  local maxlen8\n\
    \  local maxlen9\n  local maxlen10\n  local maxlen11\n  local maxlen12\n  local\
    \ maxlen13\n  local maxlen14\n  local maxlen15\n  local maxlen16\n  local maxlen17\n\
    \  local maxlen18\n  local maxlen19\n  local maxlen20\n  local maxlen21\n  local\
    \ maxlen22\n  local maxlen23\n  local maxlen24\n  local maxlen25\n  local maxlen26\n\
    \  local maxlen27\n  local maxlen28\n  local maxlen29\n  local maxlen30\n  local\
    \ maxlen31\n  local maxlen32\n  local maxlen33\n  local maxlen34\n  local maxlen35\n\
    \  local maxlen36\n  local maxlen37\n  local maxlen38\n  local maxlen39\n  local\
    \ maxlen40\n  local maxlen41\n  local maxlen42\n  local maxlen43\n  local maxlen44\n\
    \  local maxlen45\n  local maxlen46\n  local maxlen47\n  local maxlen48\n  local\
    \ maxlen49\n  local maxlen50\n  local maxlen51\n  local maxlen52\n  local maxlen53\n\
    \  local maxlen54\n  local maxlen55\n  local maxlen56\n  local maxlen57\n  local\
    \ maxlen58\n  local maxlen59\n  local maxlen60\n  local maxlen61\n  local maxlen62\n\
    \  local maxlen63\n  local maxlen64\n  local maxlen65\n  local maxlen66\n  local\
    \ maxlen67\n  local maxlen68\n  local maxlen69\n  local maxlen70\n  local maxlen71\n\
    \  local maxlen72\n  local maxlen73\n  local maxlen74\n  local maxlen75\n  local\
    \ maxlen76\n  local maxlen77\n  local maxlen78\n  local maxlen\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local extension_length\n\
    \  local extension_strength\n  local extension_length2\n  local extension_strength2\n\
    \  local extension_length3\n  local extension_strength3\n  local extension_length4\n\
    \  local extension_strength4\n  local extension_length5\n  local extension_strength5\n\
    \  local extension_length6\n  local extension_strength6\n  local extension_length7\n\
    \  local extension_strength7\n  local extension_length8\n  local extension_strength8\n\
    \  local extension_length9\n  local extension_strength9\n  local extension_length10\n\
    \  local extension_strength10\n  local extension_length11\n  local extension_strength11\n\
    \  local extension_length12\n  local extension_strength12\n  local extension_length13\n\
    \  local extension_strength13\n  local extension_length14\n  local extension_strength14\n\
    \  local extension_length15\n  local extension_strength15\n  local extension_length16\n\
    \  local extension_strength16\n  local extension_length17\n  local extension_strength17\n\
    \  local extension_length18\n  local extension_strength18\n  local extension_length19\n\
    \  local extension_strength19\n  local extension_length20\n  local extension_strength20\n\
    \  local extension_length21\n  local extension_strength21\n  local extension_length22\n\
    \  local extension_strength22\n  local extension_length23\n  local extension_strength23\n\
    \  local extension_length24\n  local extension_strength24\n  local extension_length25\n\
    \  local extension_strength25\n  local extension_length26\n  local extension_strength26\n\
    \  local extension_length27\n  local extension_strength27\n  local extension_length28\n\
    \  local extension_strength28\n  local extension_length29\n  local extension_strength29\n\
    \  local extension_length30\n  local extension_strength30\n  local extension_length31\n\
    \  local extension_strength31\n  local extension_length32\n  local extension_strength32\n\
    \  local extension_length33\n  local extension_strength33\n  local extension_length34\n\
    \  local extension_strength34\n  local extension_length35\n  local \n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local extension\n  local extension_strength\n  local extension_strongest\n\
    \  local extension_strongest_index\n  local extension_strongest_strength\n  local\
    \ extension_strongest_name\n  local extension_strongest_index\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_strongest_name\n  local extension_strongest_name\n  local extension_strongest_name\n\
    \  local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local extension_str\n  local extension_str_len\n\
    \  local extension_str_len_diff\n  local extension_str_len_diff_max\n  local extension_str_len_diff_max_index\n\
    \  local extension_str_len_diff_max_index2\n  local extension_str_len_diff_max_index3\n\
    \  local extension_str_len_diff_max_index4\n  local extension_str_len_diff_max_index5\n\
    \  local extension_str_len_diff_max_index6\n  local extension_str_len_diff_max_index7\n\
    \  local extension_str_len_diff_max_index8\n  local extension_str_len_diff_max_index9\n\
    \  local extension_str_len_diff_max_index10\n  local extension_str_len_diff_max_index11\n\
    \  local extension_str_len_diff_max_index12\n  local extension_str_len_diff_max_index13\n\
    \  local extension_str_len_diff_max_index14\n  local extension_str_len_diff_max_index15\n\
    \  local extension_str_len_diff_max_index16\n  local extension_str_len_diff_max_index17\n\
    \  local extension_str_len_diff_max_index18\n  local extension_str_len_diff_max_index19\n\
    \  local extension_str_len_diff_max_index20\n  local extension_str_len_diff_max_index21\n\
    \  local extension_str_len_diff_max_index22\n  local extension_str_len_diff_max_index23\n\
    \  local extension_str_len_diff_max_index24\n  local extension_str_len_diff_max_index25\n\
    \  local extension_str_len_diff_max_index26\n  local extension_str_len_diff_max_index27\n\
    \  local extension_str_len_diff_max_index28\n  local extension_str_len_diff_max_index29\n\
    \  local extension_str_len_diff_max_index30\n  local extension_str_len_diff_max_index31\n\
    \  local extension_str_len_diff_max_index32\n  local extension_str_len_diff_max_index33\n\
    \  local extension_str_len_diff_max_index34\n  local extension_str_len_diff_max_index35\n\
    \  local extension_str_len_diff_max_index36\n  local extension_str_len_diff_max_index37\n\
    \  local extension_str_len_diff_max_index38\n  local extension_str_len_diff_max_index39\n\
    \  local extension_str_len_diff_max_index40\n  local extension_str_len_diff_max_index41\n\
    \  local extension_str_len_diff_max_index42\n\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local strongest\n\
    \  local strongest_extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local extensions_count=${#extensions[@]}\n  local extensions_sorted=(${extensions[@]})\n\
    \  local extensions_sorted_count=${#extensions_sorted[@]}\n  local extensions_sorted_index=0\n\
    \  local extensions_sorted_count2=0\n  local extensions_sorted_index2=0\n  local\
    \ extensions_sorted_count3=0\n  local extensions_sorted_index3=0\n  local extensions_sorted_count4=0\n\
    \  local extensions_sorted_index4=0\n  local extensions_sorted_count5=0\n  local\
    \ extensions_sorted_index5=0\n  local extensions_sorted_count6=0\n  local extensions_sorted_index6=0\n\
    \  local extensions_sorted_count7=0\n  local extensions_sorted_index7=0\n  local\
    \ extensions_sorted_count8=0\n  local extensions_sorted_index8=0\n  local extensions_sorted_count9=0\n\
    \  local extensions_sorted_index9=0\n  local extensions_sorted_count10=0\n  local\
    \ extensions_sorted_index10=0\n  local extensions_sorted_count11=0\n  local extensions_sorted_index11=0\n\
    \  local extensions_sorted_count12=0\n  local extensions_sorted_index12=0\n  local\
    \ extensions_sorted_count13=0\n  local extensions_sorted_index13=0\n  local extensions_sorted_count14=0\n\
    \  local extensions_sorted_index14=0\n  local extensions_sorted_count15=0\n  local\
    \ extensions_sorted_index15=0\n  local extensions_sorted_count16=0\n  local extensions_sorted_index16=0\n\
    \  local extensions_sorted_count17=0\n  local extensions_sorted_index17=0\n  local\
    \ extensions_sorted_count18=0\n  local extensions_sorted_index18=0\n  local extensions_sorted_count19=0\n\
    \  local extensions_sorted_index19=0\n  local extensions_sorted_count20=0\n  local\
    \ extensions_sorted_index20=0\n  local extensions_sorted_count21=0\n  local extensions_sorted_index21=0\n\
    \  local extensions_sorted_count22=0\n  local extensions_sorted_index22=0\n  local\
    \ extensions_sorted_count23=0\n  local extensions_sorted_index23=0\n  local extensions_sorted_count24=0\n\
    \  local extensions_sorted_index24=0\n  local extensions_sorted_count25=0\n  local\
    \ extensions_sorted_index25=0\n  local extensions_sorted_count26=0\n  local extensions_sorted_index26=0\n\
    \  local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strongest=''\n    local count=0\n    local extension_length=0\n\
    \    local extension_strength=0\n    local extension_chars=0\n    local extension_char_count=0\n\
    \    local extension_char_strength=0\n    local extension_char_chars=0\n    local\
    \ extension_char_char_count=0\n    local extension_char_char_strength=0\n    local\
    \ extension_char_char_chars=0\n    local extension_char_char_char_count=0\n  \
    \  local extension_char_char_char_strength=0\n    local extension_char_char_char_chars=0\n\
    \    local extension_char_char_char_char_count=0\n    local extension_char_char_char_char_strength=0\n\
    \    local extension_char_char_char_char_chars=0\n    local extension_char_char_char_char_char_count=0\n\
    \    local extension_char_char_char_char_char_strength=0\n    local extension_char_char_char_char_char_chars=0\n\
    \    local extension_char_char_char_char_char_char_count=0\n    local extension_char_char_char_char_char_char_strength=0\n\
    \    local extension_char_char_char_char_char_char_chars=0\n    local extension_char_char_char_char_char_char_char_count=0\n\
    \    local extension_char_char_char_char_char_char_char_strength=0\n    local\
    \ extension_char_char_char_char_char_char_char_chars=0\n    local extension_char_char_char_char_char_char_char_char_count=0\n\
    \    local extension_char_char_char_char_char_char_char_char_strength=0\n    local\
    \ extension_char_char_char_char_char_char_char_char_chars=0\n    local extension_char_char_char_char_char_char_char_char_char_count=0\n\
    \    local extension_char_char_char_char_char_char_char_char_char_strength=0\n\
    \    local extension_char_char_char_char_char_char_char_char_char_chars=0\n  \
    \  local extension_char_char_char_char_char_char_char_char_char_char_char_count=0\n\
    \    local extension_char_char_char_char_char_char_char_char_char_char_char_strength=0\n\
    \    local extension_char_char_char_char_char_char_char_char_char_char_char_chars=0\n\
    \    local extension_char_char_char_char_char_char_char_char_char_char_char_char_count=0\n\
    \    local extension_char_char_char_char_char_char_char_char_char_char_char_char_strength=0\n\
    \    local extension_char_char_char_char_char_char_char_char_char_char_char_char_char_chars=0\n\
    \    local extension_char_char_char_char_char_char_char_char_char_char_char_char_char_char\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal strength=0\n\tlocal extension\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local strongest_extension\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n}\n\ncandidate() {\n  \
    \  Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local count\n\
    \  local max\n  local maxCount\n  local maxExtension\n  local maxExtensionCount\n\
    \  local maxExtensionStrength\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount2\n\
    \  local maxExtensionStrengthCount3\n  local maxExtensionStrengthCount4\n  local\
    \ maxExtensionStrengthCount5\n  local maxExtensionStrengthCount6\n  local maxExtensionStrengthCount7\n\
    \  local maxExtensionStrengthCount8\n  local maxExtensionStrengthCount9\n  local\
    \ maxExtensionStrengthCount10\n  local maxExtensionStrengthCount11\n  local maxExtensionStrengthCount12\n\
    \  local maxExtensionStrengthCount13\n  local maxExtensionStrengthCount14\n  local\
    \ maxExtensionStrengthCount15\n  local maxExtensionStrengthCount16\n  local maxExtensionStrengthCount17\n\
    \  local maxExtensionStrengthCount18\n  local maxExtensionStrengthCount19\n  local\
    \ maxExtensionStrengthCount20\n  local maxExtensionStrengthCount21\n  local maxExtensionStrengthCount22\n\
    \  local maxExtensionStrengthCount23\n  local maxExtensionStrengthCount24\n  local\
    \ maxExtensionStrengthCount25\n  local maxExtensionStrengthCount26\n  local maxExtensionStrengthCount27\n\
    \  local maxExtensionStrengthCount28\n  local maxExtensionStrengthCount29\n  local\
    \ maxExtensionStrengthCount30\n  local maxExtensionStrengthCount31\n  local maxExtensionStrengthCount32\n\
    \  local maxExtensionStrengthCount33\n  local maxExtensionStrengthCount34\n  local\
    \ maxExtensionStrengthCount35\n  local maxExtensionStrengthCount36\n  local maxExtensionStrengthCount37\n\
    \  local maxExtensionStrengthCount38\n  local maxExtensionStrengthCount39\n  local\
    \ maxExtensionStrengthCount40\n  local maxExtensionStrengthCount41\n  local maxExtensionStrengthCount42\n\
    \  local maxExtensionStrengthCount43\n  local maxExtensionStrengthCount44\n  local\
    \ maxExtensionStrengthCount45\n  local maxExtensionStrengthCount46\n  local maxExtensionStrengthCount47\n\
    \  local maxExtensionStrengthCount48\n  local maxExtensionStrengthCount49\n  local\
    \ maxExtensionStrengthCount50\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name=$1\n\tlocal\
    \ extensions=$2\n\tlocal strongest_extension=\"\"\n\tlocal extension_strength=0\n\
    \tlocal extension_number=0\n\tlocal extension_letters=\"\"\n\tlocal extension_letters_number=0\n\
    \tlocal extension_letters_numbers=\"\"\n\tlocal extension_letters_numbers_number=0\n\
    \tlocal extension_letters_numbers_numbers=\"\"\n\tlocal extension_letters_numbers_numbers_number=0\n\
    \tlocal extension_letters_numbers_numbers_numbers=\"\"\n\tlocal extension_letters_numbers_numbers_numbers_number=0\n\
    \tlocal extension_letters_numbers_numbers_numbers_numbers=\"\"\n\tlocal extension_letters_numbers_numbers_numbers_numbers_number=0\n\
    \tlocal extension_letters_numbers_numbers_numbers_numbers_numbers=\"\"\n\tlocal\
    \ extension_letters_numbers_numbers_numbers_numbers_numbers_number=0\n\tlocal\
    \ extension_letters_numbers_numbers_numbers_numbers_numbers_numbers=\"\"\n\tlocal\
    \ extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n\tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n\tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n\tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n\tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n\tlocal extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local len\n    local max\n    local min\n    local maxlen\n\
    \    local minlen\n    local maxlen2\n    local minlen2\n    local maxlen3\n \
    \   local minlen3\n    local maxlen4\n    local minlen4\n    local maxlen5\n \
    \   local minlen5\n    local maxlen6\n    local minlen6\n    local maxlen7\n \
    \   local minlen7\n    local maxlen8\n    local minlen8\n    local maxlen9\n \
    \   local minlen9\n    local maxlen10\n    local minlen10\n    local maxlen11\n\
    \    local minlen11\n    local maxlen12\n    local minlen12\n    local maxlen13\n\
    \    local minlen13\n    local maxlen14\n    local minlen14\n    local maxlen15\n\
    \    local minlen15\n    local maxlen16\n    local minlen16\n    local maxlen17\n\
    \    local minlen17\n    local maxlen18\n    local minlen18\n    local maxlen19\n\
    \    local minlen19\n    local maxlen20\n    local minlen20\n    local maxlen21\n\
    \    local minlen21\n    local maxlen22\n    local minlen22\n    local maxlen23\n\
    \    local minlen23\n    local maxlen24\n    local minlen24\n    local maxlen25\n\
    \    local minlen25\n    local maxlen26\n    local minlen26\n    local maxlen27\n\
    \    local minlen27\n    local maxlen28\n    local minlen28\n    local maxlen29\n\
    \    local minlen29\n    local maxlen30\n    local minlen30\n    local maxlen31\n\
    \    local minlen31\n    local maxlen32\n    local minlen32\n    local maxlen33\n\
    \    local minlen33\n    local maxlen34\n    local minlen34\n    local maxlen35\n\
    \    local minlen35\n    local maxlen36\n    local minlen36\n    local maxlen37\n\
    \    local minlen37\n    local maxlen38\n    local minlen38\n    local maxlen39\n\
    \    local minlen39\n\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local count\n  local\
    \ max\n  local maxCount\n  local maxExtension\n  local maxExtensionCount\n  local\
    \ maxExtensionStrength\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount2\n\
    \  local maxExtensionStrengthCount3\n  local maxExtensionStrengthCount4\n  local\
    \ maxExtensionStrengthCount5\n  local maxExtensionStrengthCount6\n  local maxExtensionStrengthCount7\n\
    \  local maxExtensionStrengthCount8\n  local maxExtensionStrengthCount9\n  local\
    \ maxExtensionStrengthCount10\n  local maxExtensionStrengthCount11\n  local maxExtensionStrengthCount12\n\
    \  local maxExtensionStrengthCount13\n  local maxExtensionStrengthCount14\n  local\
    \ maxExtensionStrengthCount15\n  local maxExtensionStrengthCount16\n  local maxExtensionStrengthCount17\n\
    \  local maxExtensionStrengthCount18\n  local maxExtensionStrengthCount19\n  local\
    \ maxExtensionStrengthCount20\n  local maxExtensionStrengthCount21\n  local maxExtensionStrengthCount22\n\
    \  local maxExtensionStrengthCount23\n  local maxExtensionStrengthCount24\n  local\
    \ maxExtensionStrengthCount25\n  local maxExtensionStrengthCount26\n  local maxExtensionStrengthCount27\n\
    \  local maxExtensionStrengthCount28\n  local maxExtensionStrengthCount29\n  local\
    \ maxExtensionStrengthCount30\n  local maxExtensionStrengthCount31\n  local maxExtensionStrengthCount32\n\
    \  local maxExtensionStrengthCount33\n  local maxExtensionStrengthCount34\n  local\
    \ maxExtensionStrengthCount35\n  local maxExtensionStrengthCount36\n  local maxExtensionStrengthCount37\n\
    \  local maxExtensionStrengthCount38\n  local maxExtensionStrengthCount39\n  local\
    \ maxExtensionStrengthCount40\n  local maxExtensionStrengthCount41\n  local maxExtensionStrengthCount42\n\
    \  local maxExtensionStrengthCount43\n  local maxExtensionStrengthCount44\n  local\
    \ maxExtensionStrengthCount45\n  local maxExtensionStrengthCount46\n  local maxExtensionStrengthCount47\n\
    \  local maxExtensionStrengthCount48\n  local maxExtensionStrengthCount49\n  local\
    \ maxExtensionStrengthCount50\n  local max\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local extension_strength\n  local extension_strongest\n  local extension_strongest_index\n\
    \  local extension_strongest_strength\n  local extension_strongest_name\n  local\
    \ extension_strongest_name_length\n  local extension_strongest_name_length_index\n\
    \  local extension_strongest_name_length_index2\n  local extension_strongest_name_length_index3\n\
    \  local extension_strongest_name_length_index4\n  local extension_strongest_name_length_index5\n\
    \  local extension_strongest_name_length_index6\n  local extension_strongest_name_length_index7\n\
    \  local extension_strongest_name_length_index8\n  local extension_strongest_name_length_index9\n\
    \  local extension_strongest_name_length_index10\n  local extension_strongest_name_length_index11\n\
    \  local extension_strongest_name_length_index12\n  local extension_strongest_name_length_index13\n\
    \  local extension_strongest_name_length_index14\n  local extension_strongest_name_length_index15\n\
    \  local extension_strongest_name_length_index16\n  local extension_strongest_name_length_index17\n\
    \  local extension_strongest_name_length_index18\n  local extension_strongest_name_length_index19\n\
    \  local extension_strongest_name_length_index20\n  local extension_strongest_name_length_index21\n\
    \  local extension_strongest_name_length_index22\n  local extension_strongest_name_length_index23\n\
    \  local extension_strongest_name_length_index24\n  local extension_strongest_name_length_index25\n\
    \  local extension_strongest_name_length_index26\n  local extension_strongest_name_length_index27\n\
    \  local extension_strongest_name_length_index28\n  local extension_strongest_name_length_index29\n\
    \  local extension_strongest_name_length_index30\n  local extension_strongest_name_length_index31\n\
    \  local extension_strongest_name_length_index32\n  local extension_strongest_name_length_index33\n\
    \  local extension_strongest_name_length_index34\n  local extension_strongest_name_length_index35\n\
    \  local extension_strongest_name_length_index36\n  local extension_strongest_name_length_index37\n\
    \  local extension_str\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local count\n    local extension_count\n    local extension_strongest\n\
    \    local extension_strength\n    local extension_strongest_count\n    local\
    \ extension_strongest_extension\n    local extension_strongest_extension_count\n\
    \    local extension_strongest_extension_strength\n    local extension_strongest_extension_strongest\n\
    \    local extension_strongest_extension_strongest_count\n    local extension_strongest_extension_strongest_extension\n\
    \    local extension_strongest_extension_strongest_extension_count\n    local\
    \ extension_strongest_extension_strongest_extension_strength\n    local extension_strongest_extension_strongest_extension_strongest\n\
    \    local extension_strongest_extension_strongest_extension_strongest_count\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_count\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strength\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strongest\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strongest_count\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_count\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_count\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension\n\
    \    local extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_count\n\
    \    local extension_strongest_extension_strongest_extension\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_\n}\n\
    \ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local strongest\n\
    \  local count\n  local max\n  local maxCount\n  local maxExtension\n  local maxExtensionCount\n\
    \  local maxExtensionStrength\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount2\n\
    \  local maxExtensionStrengthCount3\n  local maxExtensionStrengthCount4\n  local\
    \ maxExtensionStrengthCount5\n  local maxExtensionStrengthCount6\n  local maxExtensionStrengthCount7\n\
    \  local maxExtensionStrengthCount8\n  local maxExtensionStrengthCount9\n  local\
    \ maxExtensionStrengthCount10\n  local maxExtensionStrengthCount11\n  local maxExtensionStrengthCount12\n\
    \  local maxExtensionStrengthCount13\n  local maxExtensionStrengthCount14\n  local\
    \ maxExtensionStrengthCount15\n  local maxExtensionStrengthCount16\n  local maxExtensionStrengthCount17\n\
    \  local maxExtensionStrengthCount18\n  local maxExtensionStrengthCount19\n  local\
    \ maxExtensionStrengthCount20\n  local maxExtensionStrengthCount21\n  local maxExtensionStrengthCount22\n\
    \  local maxExtensionStrengthCount23\n  local maxExtensionStrengthCount24\n  local\
    \ maxExtensionStrengthCount25\n  local maxExtensionStrengthCount26\n  local maxExtensionStrengthCount27\n\
    \  local maxExtensionStrengthCount28\n  local maxExtensionStrengthCount29\n  local\
    \ maxExtensionStrengthCount30\n  local maxExtensionStrengthCount31\n  local maxExtensionStrengthCount32\n\
    \  local maxExtensionStrengthCount33\n  local maxExtensionStrengthCount34\n  local\
    \ maxExtensionStrengthCount35\n  local maxExtensionStrengthCount36\n  local maxExtensionStrengthCount37\n\
    \  local maxExtensionStrengthCount38\n  local maxExtensionStrengthCount39\n  local\
    \ maxExtensionStrengthCount40\n  local maxExtensionStrengthCount41\n  local maxExtensionStrengthCount42\n\
    \  local maxExtensionStrengthCount43\n  local maxExtensionStrengthCount44\n  local\
    \ maxExtensionStrengthCount45\n  local maxExtensionStrengthCount46\n  local maxExtensionStrengthCount47\n\
    \  local maxExtensionStrengthCount48\n  local maxExtensionStrengthCount49\n  local\
    \ maxExtensionStrength\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strongest=-1\n    local extension\n    local i\n  \
    \  local j\n    local count\n    local count2\n    local count3\n    local count4\n\
    \    local count5\n    local count6\n    local count7\n    local count8\n    local\
    \ count9\n    local count10\n    local count11\n    local count12\n    local count13\n\
    \    local count14\n    local count15\n    local count16\n    local count17\n\
    \    local count18\n    local count19\n    local count20\n    local count21\n\
    \    local count22\n    local count23\n    local count24\n    local count25\n\
    \    local count26\n    local count27\n    local count28\n    local count29\n\
    \    local count30\n    local count31\n    local count32\n    local count33\n\
    \    local count34\n    local count35\n    local count36\n    local count37\n\
    \    local count38\n    local count39\n    local count40\n    local count41\n\
    \    local count42\n    local count43\n    local count44\n    local count45\n\
    \    local count46\n    local count47\n    local count48\n    local count49\n\
    \    local count50\n    local count51\n    local count52\n    local count53\n\
    \    local count54\n    local count55\n    local count56\n    local count57\n\
    \    local count58\n    local count59\n    local count60\n    local count61\n\
    \    local count62\n    local count63\n    local count64\n    local count65\n\
    \    local count66\n    local count67\n    local count68\n    local count69\n\
    \    local count70\n    local count71\n    local count72\n    local count73\n\
    \    local count74\n    local count75\n    local count76\n    local count77\n\
    \    local count78\n    local count79\n    local count80\n    local count81\n\
    \    local count82\n    local count83\n    local count84\n    local count85\n\
    \    local count86\n    local count87\n    local count88\n    local count89\n\
    \    local count90\n    local count91\n    local count92\n    local count93\n\
    \    local count94\n    local count95\n    local count96\n\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local extension_length\n    local extension_strength\n \
    \   local extension_class\n    local extension_class_length\n    local extension_class_strength\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strongest_extension=\"\"\n    local extension_strength=0\n\
    \    local extension_counter=0\n    local extension_counter2=0\n    local extension_counter3=0\n\
    \    local extension_counter4=0\n    local extension_counter5=0\n    local extension_counter6=0\n\
    \    local extension_counter7=0\n    local extension_counter8=0\n    local extension_counter9=0\n\
    \    local extension_counter10=0\n    local extension_counter11=0\n    local extension_counter12=0\n\
    \    local extension_counter13=0\n    local extension_counter14=0\n    local extension_counter15=0\n\
    \    local extension_counter16=0\n    local extension_counter17=0\n    local extension_counter18=0\n\
    \    local extension_counter19=0\n    local extension_counter20=0\n    local extension_counter21=0\n\
    \    local extension_counter22=0\n    local extension_counter23=0\n    local extension_counter24=0\n\
    \    local extension_counter25=0\n    local extension_counter26=0\n    local extension_counter27=0\n\
    \    local extension_counter28=0\n    local extension_counter29=0\n    local extension_counter30=0\n\
    \    local extension_counter31=0\n    local extension_counter32=0\n    local extension_counter33=0\n\
    \    local extension_counter34=0\n    local extension_counter35=0\n    local extension_counter36=0\n\
    \    local extension_counter37=0\n    local extension_counter38=0\n    local extension_counter39=0\n\
    \    local extension_counter40=0\n    local extension_counter41=0\n    local extension_counter42=0\n\
    \    local extension_counter43=0\n    local extension_counter44=0\n    local extension_counter45=0\n\
    \    local extension_counter46=0\n    local extension_counter47=0\n    local extension_counter48=0\n\
    \    local extension_counter49=0\n    local extension_counter50=0\n    local extension_counter51=0\n\
    \    local extension_counter52=0\n    local extension_counter53=0\n    local extension_counter54=0\n\
    \    local extension_counter55=0\n    local extension_counter56=0\n    local extension_counter57=0\n\
    \    local extension_counter58=0\n    local extension_counter59=0\n    local extension_counter60=0\n\
    \    local extension_counter\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local extension\n  local extension_strength\n  local extension_strength_str\n\
    \  local extension_strength_int\n  local extension_strength_float\n  local extension_strength_bool\n\
    \  local extension_strength_array\n  local extension_strength_object\n  local\
    \ extension_strength_hash\n  local extension_strength_other\n  local extension_strength_null\n\
    \  local extension_strength_true\n  local extension_strength_false\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  local extension_strength_null\n  local extension_strength_null\n\
    \  local extension_strength_null\n  \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strongest_extension=\"\"\n  local extension_strength=0\n  local extension_number=0\n\
    \  local extension_letters=\"\"\n  local extension_letters_number=0\n  local extension_letters_numbers=\"\
    \"\n  local extension_letters_numbers_number=0\n  local extension_letters_numbers_numbers=\"\
    \"\n  local extension_letters_numbers_numbers_number=0\n  local extension_letters_numbers_numbers_numbers=\"\
    \"\n  local extension_letters_numbers_numbers_numbers_number=0\n  local extension_letters_numbers_numbers_numbers_numbers=\"\
    \"\n  local extension_letters_numbers_numbers_numbers_numbers_number=0\n  local\
    \ extension_letters_numbers_numbers_numbers_numbers_numbers=\"\"\n  local extension_letters_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers=\"\"\
    \n  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n  local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local extensions_count=${#extensions[@]}\n    local extensions_sorted=(\
    \ ${extensions[@]} )\n    local extensions_sorted_count=${#extensions_sorted[@]}\n\
    \    local extensions_strength=-1\n    local extensions_strongest=\"\"\n    local\
    \ extensions_strongest_count=0\n    local extensions_strongest_strength=0\n  \
    \  local extensions_strongest_index=0\n    local extensions_strongest_extension=\"\
    \"\n    local extensions_strongest_extension_count=0\n    local extensions_strongest_extension_strength=0\n\
    \    local extensions_strongest_extension_index=0\n    local extensions_strongest_extension_extension=\"\
    \"\n    local extensions_strongest_extension_extension_count=0\n    local extensions_strongest_extension_extension_strength=0\n\
    \    local extensions_strongest_extension_extension_index=0\n    local extensions_strongest_extension_extension_extension=\"\
    \"\n    local extensions_strongest_extension_extension_extension_count=0\n   \
    \ local extensions_strongest_extension_extension_extension_strength=0\n    local\
    \ extensions_strongest_extension_extension_extension_index=0\n    local extensions_strongest_extension_extension_extension_extension=\"\
    \"\n    local extensions_strongest_extension_extension_extension_extension_count=0\n\
    \    local extensions_strongest_extension_extension_extension_extension_strength=0\n\
    \    local extensions_strongest_extension_extension_extension_extension_index=0\n\
    \    local extensions_strongest_extension_extension_extension_extension_extension=\"\
    \"\n    local extensions_strongest_extension_extension_extension_extension_extension_count=0\n\
    \    local extensions_strongest_extension_extension_extension_extension_extension_strength=0\n\
    \    local extensions_strongest_extension_extension_extension_extension_extension_index=0\n\
    \    local extensions_strongest_extension_extension_extension_extension_extension_extension=\"\
    \"\n    local extensions_strongest_extension_extension_extension_extension_extension_extension_count=0\n\
    \    local extensions_strongest_extension_extension_extension_extension_extension_extension_strength=0\n\
    \    local extensions_strongest_extension_extension_extension_extension_extension_extension_index=0\n\
    \    local extensions_strongest_extension_extension_extension_extension_extension_extension_extension=\"\
    \"\n    local extensions_stron\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local extensions_count=${#extensions[@]}\n    local extension_strength\n\
    \    local extension_strength_str\n    local extension_strength_str_count\n  \
    \  local extension_strength_str_count_index\n    local extension_strength_str_count_index_value\n\
    \    local extension_strength_str_count_index_value_count\n    local extension_strength_str_count_index_value_count_index\n\
    \    local extension_strength_str_count_index_value_count_index_value\n    local\
    \ extension_strength_str_count_index_value_count_index_value_count\n    local\
    \ extension_strength_str_count_index_value_count_index_value_count_index\n   \
    \ local extension_strength_str_count_index_value_count_index_value_count_index_value\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count\n\
    \    local extension_strength_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index\n\
    \    local extension_strength_str_count_index_value_\n}\n\ncandidate() {\n   \
    \ Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local count\n    local max\n    local maxIndex\n    local maxStrength\n\
    \    local maxExtension\n    local maxExtensionIndex\n    local maxExtensionStrength\n\
    \    local maxExtensionExtension\n    local maxExtensionExtensionIndex\n    local\
    \ maxExtensionExtensionStrength\n    local maxExtensionExtensionExtension\n  \
    \  local maxExtensionExtensionExtensionIndex\n    local maxExtensionExtensionExtensionStrength\n\
    \    local maxExtensionExtensionExtensionExtension\n    local maxExtensionExtensionExtensionExtensionIndex\n\
    \    local maxExtensionExtensionExtensionStrength\n    local maxExtensionExtensionExtensionExtension\n\
    \    local maxExtensionExtensionExtensionExtensionIndex\n    local maxExtensionExtensionExtensionStrength\n\
    \    local maxExtensionExtensionExtensionExtension\n    local maxExtensionExtensionExtensionExtensionIndex\n\
    \    local maxExtensionExtensionExtensionStrength\n    local maxExtensionExtensionExtensionExtension\n\
    \    local maxExtensionExtensionExtensionExtensionIndex\n    local maxExtensionExtensionExtensionStrength\n\
    \    local maxExtensionExtensionExtensionExtension\n    local maxExtensionExtensionExtensionExtensionIndex\n\
    \    local maxExtensionExtensionExtensionStrength\n    local maxExtensionExtensionExtensionExtension\n\
    \    local maxExtensionExtensionExtensionExtensionIndex\n    local maxExtensionExtensionExtensionStrength\n\
    \    local maxExtensionExtensionExtensionExtension\n    local maxExtensionExtensionExtensionExtensionIndex\n\
    \    local maxExtensionExtensionExtensionStrength\n    local maxExtensionExtensionExtensionExtension\n\
    \    local maxExtensionExtensionExtensionExtensionIndex\n    local maxExtensionExtensionExtensionStrength\n\
    \    local maxExtensionExtensionExtensionExtension\n    local maxExtensionExtensionExtensionExtensionIndex\n\
    \    local maxExtensionExtensionExtensionStrength\n    local maxExtensionExtensionExtensionExtension\n\
    \    local maxExtensionExtensionExtensionExtensionIndex\n    local maxExtensionExtensionExtensionStrength\n\
    \    local maxExtensionExtensionExtensionExtension\n    local maxExtensionExtensionExtensionExtensionIndex\n\
    \    local maxExtensionExtensionExtensionStrength\n    local maxExtensionExtensionExtensionExtension\n\
    \    local maxExtensionExtensionExtensionExtensionIndex\n    local maxExtensionExtensionExtensionStrength\n\
    \    local maxExtensionExtensionExtensionExtension\n    local maxExtensionExtensionExtensionExtensionIndex\n\
    \    local maxExtensionExtensionExtensionStrength\n    local maxExtensionExtensionExtensionExtension\n\
    \    local maxExtensionExtensionExtensionExtensionIndex\n    local maxExtensionExtensionExtensionStrength\n\
    \    local maxExtensionExtensionExtensionExtension\n    local maxExtensionExtensionExtensionExtensionIndex\n\
    \    local maxExtensionExtensionExtensionStrength\n    local maxExtensionExtensionExtensionExtension\n\
    \    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal strength=0\n\tlocal extension\n\tlocal i\n\tlocal j\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local count\n  local i\n  local j\n  local\
    \ strongest_extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_class\n  local extension_class_length\n  local extension_class_strength\n\
    \  local extension_class_count\n  local extension_class_i\n  local extension_class_j\n\
    \  local extension_class_class_i\n  local extension_class_class_j\n  local extension_class_class_length\n\
    \  local extension_class_class_strength\n  local extension_class_class_count\n\
    \  local extension_class_class_i\n  local extension_class_class_j\n  local extension_class_class_class_i\n\
    \  local extension_class_class_class_j\n  local extension_class_class_class_length\n\
    \  local extension_class_class_class_strength\n  local extension_class_class_class_count\n\
    \  local extension_class_class_class_i\n  local extension_class_class_class_j\n\
    \  local extension_class_class_class_class_i\n  local extension_class_class_class_class_j\n\
    \  local extension_class_class_class_class_length\n  local extension_class_class_class_class_strength\n\
    \  local extension_class_class_class_class_count\n  local extension_class_class_class_class_i\n\
    \  local extension_class_class_class_class_j\n  local extension_class_class_class_class_class_i\n\
    \  local extension_class_class_class_class_class_j\n  local extension_class_class_class_class_class_length\n\
    \  local extension_class_class_class_class_class_strength\n  local extension_class_class_class_class_class_count\n\
    \  local extension_class_class_class_class_class_i\n  local extension_class_class_class_class_class_j\n\
    \  local extension_class_class_class_class_class_class_i\n  local extension_class_class_class_class_class_class_j\n\
    \  local extension_class_class_class_class_class_class_length\n  local extension_class_class_class_class_class_class_strength\n\
    \  local extension_class_class_class_class_class_class_count\n  local extension_class_class_class_class_class_class_i\n\
    \  local extension_class_class_class_class_class_class_j\n  local extension_class_class_class_class_class_class_class_i\n\
    \  local extension_class_class_class_class_class_class_class_j\n  local extension_class_class_class_class_class_class_class_length\n\
    \  local extension_class_class_class_class_class_class_class_strength\n  local\
    \ extension_class_class_class_class_class_class_class_count\n  local extension_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength\n  local extension\n  local i\n  local j\n \
    \ local count\n  local max\n  local maxCount\n  local maxExtension\n  local maxExtensionCount\n\
    \  local maxExtensionStrength\n  local maxExtensionName\n  local maxExtensionNameCount\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  local maxExtensionNameLengthStrength\n  local maxExtensionNameLengthStrength\n\
    \  \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal extensions_sorted=(${extensions[@]})\n\tlocal strength\n\tlocal i\n\t\
    local j\n\tlocal strongest_extension\n\tlocal extension_strength\n\tlocal extension_strongest\n\
    \tlocal extension_strongest_index\n\tlocal extension_strongest_index2\n\tlocal\
    \ extension_strongest_index3\n\tlocal extension_strongest_index4\n\tlocal extension_strongest_index5\n\
    \tlocal extension_strongest_index6\n\tlocal extension_strongest_index7\n\tlocal\
    \ extension_strongest_index8\n\tlocal extension_strongest_index9\n\tlocal extension_strongest_index10\n\
    \tlocal extension_strongest_index11\n\tlocal extension_strongest_index12\n\tlocal\
    \ extension_strongest_index13\n\tlocal extension_strongest_index14\n\tlocal extension_strongest_index15\n\
    \tlocal extension_strongest_index16\n\tlocal extension_strongest_index17\n\tlocal\
    \ extension_strongest_index18\n\tlocal extension_strongest_index19\n\tlocal extension_strongest_index20\n\
    \tlocal extension_strongest_index21\n\tlocal extension_strongest_index22\n\tlocal\
    \ extension_strongest_index23\n\tlocal extension_strongest_index24\n\tlocal extension_strongest_index25\n\
    \tlocal extension_strongest_index26\n\tlocal extension_strongest_index27\n\tlocal\
    \ extension_strongest_index28\n\tlocal extension_strongest_index29\n\tlocal extension_strongest_index30\n\
    \tlocal extension_strongest_index31\n\tlocal extension_strongest_index32\n\tlocal\
    \ extension_strongest_index33\n\tlocal extension_strongest_index34\n\tlocal extension_strongest_index35\n\
    \tlocal extension_strongest_index36\n\tlocal extension_strongest_index37\n\tlocal\
    \ extension_strongest_index38\n\tlocal extension_strongest_index39\n\tlocal extension_strongest_index40\n\
    \tlocal extension_strongest_index41\n\tlocal extension_strongest_index42\n\tlocal\
    \ extension_strongest_index43\n\tlocal extension_strongest_index44\n\tlocal extension_strongest_index45\n\
    \tlocal extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_strength\n    local extension_strongest\n    local extension_strongest_index\n\
    \    local extension_strongest_index_count\n    local extension_strongest_index_count_max\n\
    \    local extension_strongest_index_count_min\n    local extension_strongest_index_count_min_index\n\
    \    local extension_strongest_index_count_max_index\n    local extension_strongest_index_count_max_index_count\n\
    \    local extension_strongest_index_count_max_index_count_max\n    local extension_strongest_index_count_max_index_count_min\n\
    \    local extension_strongest_index_count_max_index_count_min_index\n    local\
    \ extension_strongest_index_count_max_index_count_max_index\n    local extension_strongest_index_count_max_index_count_max_index_count\n\
    \    local extension_strongest_index_count_max_index_count_max_index_count_max\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min\n   \
    \ local extension_strongest_index_count_max_index_count_max_index_min_index\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_max\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_min\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_min_index\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_max_index\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_max_index_count\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_max_index_count_max\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_max_index_count_min\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_max_index_count_min_index\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_max_index_count_max_index\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_max_index_count_max_index_count\n\
    \    local extension_strongest_index_count_max_index_count_max_index_min_index_count_max_index_count_max_index_count_max\n\
    \    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strongest_extension=\"\"\n    local extension_strength=-1\n\
    \    local extension_found=0\n    local extension_strength_found=0\n    local\
    \ extension_strength_not_found=0\n    local extension_strength_not_found_index=0\n\
    \    local extension_strength_not_found_count=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension_strength_not_found_count_index=0\n\
    \    local extension_strength_not_found_count_index=0\n    local extension\n}\n\
    \ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strongest=-1\n    local extension\n    local i\n  \
    \  local j\n    local count\n    local count2\n    local count3\n    local count4\n\
    \    local count5\n    local count6\n    local count7\n    local count8\n    local\
    \ count9\n    local count10\n    local count11\n    local count12\n    local count13\n\
    \    local count14\n    local count15\n    local count16\n    local count17\n\
    \    local count18\n    local count19\n    local count20\n    local count21\n\
    \    local count22\n    local count23\n    local count24\n    local count25\n\
    \    local count26\n    local count27\n    local count28\n    local count29\n\
    \    local count30\n    local count31\n    local count32\n    local count33\n\
    \    local count34\n    local count35\n    local count36\n    local count37\n\
    \    local count38\n    local count39\n    local count40\n    local count41\n\
    \    local count42\n    local count43\n    local count44\n    local count45\n\
    \    local count46\n    local count47\n    local count48\n    local count49\n\
    \    local count50\n    local count51\n    local count52\n    local count53\n\
    \    local count54\n    local count55\n    local count56\n    local count57\n\
    \    local count58\n    local count59\n    local count60\n    local count61\n\
    \    local count62\n    local count63\n    local count64\n    local count65\n\
    \    local count66\n    local count67\n    local count68\n    local count69\n\
    \    local count70\n    local count71\n    local count72\n    local count73\n\
    \    local count74\n    local count75\n    local count76\n    local count77\n\
    \    local count78\n    local count79\n    local count80\n    local count81\n\
    \    local count82\n    local count83\n    local count84\n    local count85\n\
    \    local count86\n    local count87\n    local count88\n    local count89\n\
    \    local count90\n    local count91\n    local count92\n    local count93\n\
    \    local count94\n    local count95\n    local count96\n\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local strongest_extension\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  \n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local i\n  local j\n\
    \  local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local i\n  local j\n\
    \  local strongest_extension\n  \n  for extension in $extensions; do\n    i=${#extension}\n\
    \    j=${#class_name}\n    \n    if [ $i -gt $j ]; then\n      strength=$(( ${extension:$((j-i))}\
    \ ))\n    elif [ $i -eq $j ]; then\n      strength=$(( ${extension:$((j-1))} ))\n\
    \    fi\n  done\n  \n  strongest_extension=\"${class_name}${extensions[0]}\"\n\
    \  \n  for extension in $extensions; do\n    i=${#extension}\n    j=${#class_name}\n\
    \    \n    if [ $i -gt $j ]; then\n      strength=$(( ${extension:$((j-i))} ))\n\
    \    elif [ $i -eq $j ]; then\n      strength=$(( ${extension:$((j-1))} ))\n \
    \   fi\n  done\n  \n  if [ $strength -gt 0 ]; then\n    for extension in $extensions;\
    \ do\n      i=${#extension}\n      j=${#class_name}\n      \n      if [ $i -gt\
    \ $j ]; then\n        strength=$(( ${extension:$((j-i))} ))\n      elif [ $i -eq\
    \ $j ]; then\n        strength=$(( ${extension:$((j-1))} ))\n      fi\n    done\n\
    \  fi\n  \n  echo $strongest_extension\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local count\n  local i\n  local j\n  local\
    \ strongest\n  local extension_str\n  local extension_str_count\n  local extension_str_count_index\n\
    \  local extension_str_count_index_value\n  local extension_str_count_index_value_count\n\
    \  local extension_str_count_index_value_count_index\n  local extension_str_count_index_value_count_index_value\n\
    \  local extension_str_count_index_value_count_index_value_count\n  local extension_str_count_index_value_count_index_value_count_index\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count\n\
    \  local extension_str_count_index_value_count_index_value_count_index_value_count_index_value_count_index_value_count_index_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strongest_extension=\"\"\n  local strongest_extension_strength=-1\n \
    \ local extension_length=${#extensions[@]}\n  local extension_strength\n  local\
    \ extension_strength_counter\n  local extension_strength_counter_index\n  local\
    \ extension_strength_counter_value\n  local extension_strength_counter_max\n \
    \ local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_max_index\n  local extension_strength_counter_max_value\n\
    \  local extension_strength_counter_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strongest=''\n    local i\n    local j\n    local cap\n\
    \    local sm\n    local strongest_extension\n    local extension\n    local extension_strength\n\
    \    local extension_strength_str\n    local extension_strength_int\n    local\
    \ extension_strength_float\n    local extension_strength_double\n    local extension_strength_bool\n\
    \    local extension_strength_enum\n    local extension_strength_struct\n    local\
    \ extension_strength_union\n    local extension_strength_class\n    local extension_strength_struct\n\
    \    local extension_strength_union\n    local extension_strength_class\n    local\
    \ extension_strength_struct\n    local extension_strength_union\n    local extension_strength_class\n\
    \    local extension_strength_struct\n    local extension_strength_union\n   \
    \ local extension_strength_class\n    local extension_strength_struct\n    local\
    \ extension_strength_union\n    local extension_strength_class\n    local extension_strength_struct\n\
    \    local extension_strength_union\n    local extension_strength_class\n    local\
    \ extension_strength_struct\n    local extension_strength_union\n    local extension_strength_class\n\
    \    local extension_strength_struct\n    local extension_strength_union\n   \
    \ local extension_strength_class\n    local extension_strength_struct\n    local\
    \ extension_strength_union\n    local extension_strength_class\n    local extension_strength_struct\n\
    \    local extension_strength_union\n    local extension_strength_class\n    local\
    \ extension_strength_struct\n    local extension_strength_union\n    local extension_strength_class\n\
    \    local extension_strength_struct\n    local extension_strength_union\n   \
    \ local extension_strength_class\n    local extension_strength_struct\n    local\
    \ extension_strength_union\n    local extension_strength_class\n    local extension_strength_struct\n\
    \    local extension_strength_union\n    local extension_strength_class\n    local\
    \ extension_strength_struct\n    local extension_strength_union\n    local extension_strength_class\n\
    \    local extension_strength_struct\n    local extension_strength_union\n   \
    \ local extension_strength_class\n    local extension_strength_struct\n    local\
    \ extension_strength_union\n    local extension_strength_class\n    local extension\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strongest_extension=\"\"\n  local extension_strength=0\n  local extension_number=0\n\
    \  local extension_chars=\"\"\n  local extension_char_count=0\n  local extension_char_count_total=0\n\
    \  local extension_char_count_total_max=0\n  local extension_char_count_total_min=0\n\
    \  local extension_char_count_total_min_index=0\n  local extension_char_count_total_max_index=0\n\
    \  local extension_char_count_total_max_index=0\n  local extension_char_count_total_min_char=\"\
    \"\n  local extension_char_count_total_max_char=\"\"\n  local extension_char_count_total_min_char_length=0\n\
    \  local extension_char_count_total_max_char_length=0\n  local extension_char_count_total_min_char_length_index=0\n\
    \  local extension_char_count_total_max_char_length_index=0\n  local extension_char_count_total_min_char_length_index_char=0\n\
    \  local extension_char_count_total_max_char_length_index_char=0\n  local extension_char_count_total_min_char_length_index_char_length=0\n\
    \  local extension_char_count_total_max_char_length_index_char_length=0\n  local\
    \ extension_char_count_total_min_char_length_index_char_length_length=0\n  local\
    \ extension_char_count_total_max_char_length_index_char_length_length=0\n  local\
    \ extension_char_count_total_min_char_length_index_char_length_length_length=0\n\
    \  local extension_char_count_total_max_char_length_index_char_length_length_length=0\n\
    \  local extension_char_count_total_min_char_length_index_char_length_length_length=0\n\
    \  local extension_char_count_total_max_char_length_index_char_length_length_length=0\n\
    \  local extension_char_count_total_min_char_length_index_char_length_length_length_length=0\n\
    \  local extension_char_count_total_max_char_length_index_char_length_length_length_length=0\n\
    \  local extension_char_count_total_min_char_length_index_char_length_length_length_length=0\n\
    \  local extension_char_count_total_max_char_length_index_char_length_length_length_length=0\n\
    \  local extension_char_count_total_min_char_length_index_char_length_length_length_length_length=0\n\
    \  local extension_char_count_total_max_char_length_index_char_length_length_length_length_length=0\n\
    \  local extension_char_count_total_min_char_length_index_char_length_length_length_length_length=0\n\
    \  local extension_char_count_total_max_char_length_index_char_length_length_length_length_length=0\n\
    \  local extension_char_count_total_min_char_length_index_char_length_length_length_length_length=0\n\
    \  local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local strongest_extension\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    \n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n}\n\ncandidate() {\n  \
    \  Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local len\n  local\
    \ max\n  local maxStrong\n  local maxStrongExtension\n  local maxStrongExtensionIndex\n\
    \  local maxStrongExtensionIndexLen\n  local maxStrongExtensionName\n  local maxStrongExtensionNameLen\n\
    \  local maxStrongExtensionNameIndex\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndexLen\n  local maxStrongExtensionNameIndexLen\n\
    \  local maxStrongExtensionNameIndex\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local strongest_extension\n\
    \  local extension_strength\n  local extension_class\n  local extension_extension\n\
    \  local extension_extension_strength\n  local extension_extension_class\n  local\
    \ extension_extension_extension\n  local extension_extension_extension_strength\n\
    \  local extension_extension_extension_class\n  local extension_extension_extension_extension\n\
    \  local extension_extension_extension_extension_strength\n  local extension_extension_extension_extension_class\n\
    \  local extension_extension_extension_extension_extension\n  local extension_extension_extension_extension_extension_strength\n\
    \  local extension_extension_extension_extension_extension_class\n  local extension_extension_extension_extension_extension_extension\n\
    \  local extension_extension_extension_extension_extension_extension_strength\n\
    \  local extension_extension_extension_extension_extension_extension_class\n \
    \ local extension_extension_extension_extension_extension_extension_extension\n\
    \  local extension_extension_extension_extension_extension_extension_extension_strength\n\
    \  local extension_extension_extension_extension_extension_extension_extension_class\n\
    \  local extension_extension_extension_extension_extension_extension_extension_extension\n\
    \  local extension_extension_extension_extension_extension_extension_extension_extension_strength\n\
    \  local extension_extension_extension_extension_extension_extension_extension_extension_class\n\
    \  local extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength\n\
    \  local extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_class\n\
    \  local extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength\n\
    \  local extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_class\n\
    \  local extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength\n\
    \  local extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_class\n\
    \  local extension_extension_extension_extension_extension_extension_\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strongest_extension=\"\"\n    local extension_strength=0\n\
    \    local extension_number=0\n    local extension_letters=\"\"\n    local extension_letters_number=0\n\
    \    local extension_letters_numbers=\"\"\n    local extension_letters_numbers_number=0\n\
    \    local extension_letters_numbers_numbers=\"\"\n    local extension_letters_numbers_numbers_number=0\n\
    \    local extension_letters_numbers_numbers_numbers=\"\"\n    local extension_letters_numbers_numbers_numbers_number=0\n\
    \    local extension_letters_numbers_numbers_numbers_numbers=\"\"\n    local extension_letters_numbers_numbers_numbers_numbers_number=0\n\
    \    local extension_letters_numbers_numbers_numbers_numbers_numbers=\"\"\n  \
    \  local extension_letters_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_number=0\n\
    \    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers=\"\
    \"\n    local extension_letters_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_\n}\n\
    \ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local strongest_extension\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  \n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal strength=0\n\tlocal extension\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal\
    \ q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local len\n  local\
    \ len2\n  local len3\n  local len4\n  local len5\n  local len6\n  local len7\n\
    \  local len8\n  local len9\n  local len10\n  local len11\n  local len12\n  local\
    \ len13\n  local len14\n  local len15\n  local len16\n  local len17\n  local len18\n\
    \  local len19\n  local len20\n  local len21\n  local len22\n  local len23\n \
    \ local len24\n  local len25\n  local len26\n  local len27\n  local len28\n  local\
    \ len29\n  local len30\n  local len31\n  local len32\n  local len33\n  local len34\n\
    \  local len35\n  local len36\n  local len37\n  local len38\n  local len39\n \
    \ local len40\n  local len41\n  local len42\n  local len43\n  local len44\n  local\
    \ len45\n  local len46\n  local len47\n  local len48\n  local len49\n  local len50\n\
    \  local len51\n  local len52\n  local len53\n  local len54\n  local len55\n \
    \ local len56\n  local len57\n  local len58\n  local len59\n  local len60\n  local\
    \ len61\n  local len62\n  local len63\n  local len64\n  local len65\n  local len66\n\
    \  local len67\n  local len68\n  local len69\n  local len70\n  local len71\n \
    \ local len72\n  local len73\n  local len74\n  local len75\n  local len76\n  local\
    \ len77\n  local len78\n  local len79\n  local len80\n  local len81\n  local len82\n\
    \  local len83\n  local len84\n  local len85\n  local len86\n  local len87\n \
    \ local len88\n  local len89\n  local len90\n  local len91\n  local len92\n  local\
    \ len93\n  local len94\n  local len95\n  local len96\n  local len\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n}\n\ncandidate() {\n  \
    \  Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_\n}\n\
    \ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local extensions_count=${#extensions[@]}\n  local extensions_strongest=${extensions[0]}\n\
    \  local extensions_strongest_count=-1\n  local extensions_strongest_strength=-1\n\
    \  local extensions_strongest_index=0\n  local extensions_strongest_extension=${extensions[0]}\n\
    \  local extensions_strongest_extension_length=${#extensions_strongest_extension}\n\
    \  local extensions_strongest_extension_strength=-1\n  local extensions_strongest_extension_class=\"\
    \"\n  local extensions_strongest_extension_class_length=${#extensions_strongest_extension_class}\n\
    \  local extensions_strongest_extension_class_strength=-1\n  local extensions_strongest_extension_class_extension=\"\
    \"\n  local extensions_strongest_extension_class_extension_length=${#extensions_strongest_extension_class_extension}\n\
    \  local extensions_strongest_extension_class_extension_strength=-1\n  local extensions_strongest_extension_class_extension_class=\"\
    \"\n  local extensions_strongest_extension_class_extension_class_length=${#extensions_strongest_extension_class_extension_class}\n\
    \  local extensions_strongest_extension_class_extension_class_strength=-1\n  local\
    \ extensions_strongest_extension_class_extension_class_extension=\"\"\n  local\
    \ extensions_strongest_extension_class_extension_class_extension_length=${#extensions_strongest_extension_class_extension_class_extension}\n\
    \  local extensions_strongest_extension_class_extension_class_extension_strength=-1\n\
    \  local extensions_strongest_extension_class_extension_class_extension_class=\"\
    \"\n  local extensions_strongest_extension_class_extension_class_extension_class_length=${#extensions_strongest_extension_class_extension_class_extension_class}\n\
    \  local extensions_strongest_extension_class_extension_class_extension_class_strength=-1\n\
    \  local extensions_strongest_extension_class_extension_class_extension_class_extension=\"\
    \"\n  local extensions_strongest_extension_class_extension_class_extension_class_extension_length=${#extensions_strongest_extension_class_extension_class_extension_class_extension}\n\
    \  local extensions_strongest_extension_class_extension_class_extension_class_extension_strength=-1\n\
    \  local extensions_strongest_extension_class_extension_class_extension\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local strongest\n\
    \  local extension_length\n  local extension_length2\n  local extension_length3\n\
    \  local extension_length4\n  local extension_length5\n  local extension_length6\n\
    \  local extension_length7\n  local extension_length8\n  local extension_length9\n\
    \  local extension_length10\n  local extension_length11\n  local extension_length12\n\
    \  local extension_length13\n  local extension_length14\n  local extension_length15\n\
    \  local extension_length16\n  local extension_length17\n  local extension_length18\n\
    \  local extension_length19\n  local extension_length20\n  local extension_length21\n\
    \  local extension_length22\n  local extension_length23\n  local extension_length24\n\
    \  local extension_length25\n  local extension_length26\n  local extension_length27\n\
    \  local extension_length28\n  local extension_length29\n  local extension_length30\n\
    \  local extension_length31\n  local extension_length32\n  local extension_length33\n\
    \  local extension_length34\n  local extension_length35\n  local extension_length36\n\
    \  local extension_length37\n  local extension_length38\n  local extension_length39\n\
    \  local extension_length40\n  local extension_length41\n  local extension_length42\n\
    \  local extension_length43\n  local extension_length44\n  local extension_length45\n\
    \  local extension_length46\n  local extension_length47\n  local extension_length48\n\
    \  local extension_length49\n  local extension_length50\n  local extension_length51\n\
    \  local extension_length52\n  local extension_length53\n  local extension_length54\n\
    \  local extension_length55\n  local extension_length56\n  local extension_length57\n\
    \  local extension_length58\n  local extension_length59\n  local extension_length60\n\
    \  local extension_length61\n  local extension_length62\n  local extension_length63\n\
    \  local extension_length64\n  local extension_length65\n  local extension_length66\n\
    \  local extension_length67\n  local extension_length68\n  \n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local count\n    local max\n    local min\n    local extension_length\n\
    \    local extension_strength\n    local extension_class\n    local extension_class_length\n\
    \    local extension_class_strength\n    local extension_class_count\n    local\
    \ extension_class_max\n    local extension_class_min\n    local extension_class_extension\n\
    \    local extension_class_extension_length\n    local extension_class_extension_strength\n\
    \    local extension_class_extension_count\n    local extension_class_extension_max\n\
    \    local extension_class_extension_min\n    local extension_class_extension_extension\n\
    \    local extension_class_extension_extension_length\n    local extension_class_extension_extension_strength\n\
    \    local extension_class_extension_extension_count\n    local extension_class_extension_extension_max\n\
    \    local extension_class_extension_extension_min\n    local extension_class_extension_extension_extension\n\
    \    local extension_class_extension_extension_extension_length\n    local extension_class_extension_extension_extension_strength\n\
    \    local extension_class_extension_extension_extension_count\n    local extension_class_extension_extension_extension_max\n\
    \    local extension_class_extension_extension_extension_min\n    local extension_class_extension_extension_extension_extension\n\
    \    local extension_class_extension_extension_extension_extension_length\n  \
    \  local extension_class_extension_extension_extension_extension_strength\n  \
    \  local extension_class_extension_extension_extension_extension_count\n    local\
    \ extension_class_extension_extension_extension_extension_max\n    local extension_class_extension_extension_extension_extension_min\n\
    \    local extension_class_extension_extension_extension_extension_extension\n\
    \    local extension_class_extension_extension_extension_extension_extension_length\n\
    \    local extension_class_extension_extension_extension_extension_extension_strength\n\
    \    local extension_class_extension_extension_extension_extension_extension_count\n\
    \    local extension_class_extension_extension_extension_extension_extension_max\n\
    \    local extension_class_extension_extension_extension_extension_extension_min\n\
    \    local extension_class_extension_extension_extension_extension_extension_extension\n\
    \    local extension_class_extension_extension_extension_extension_extension_extension_length\n\
    \    local extension_class_extension\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ len\n  local max\n  local min\n  local maxlen\n  local minlen\n  local maxlen2\n\
    \  local minlen2\n  local maxlen3\n  local minlen3\n  local maxlen4\n  local minlen4\n\
    \  local maxlen5\n  local minlen5\n  local maxlen6\n  local minlen6\n  local maxlen7\n\
    \  local minlen7\n  local maxlen8\n  local minlen8\n  local maxlen9\n  local minlen9\n\
    \  local maxlen10\n  local minlen10\n  local maxlen11\n  local minlen11\n  local\
    \ maxlen12\n  local minlen12\n  local maxlen13\n  local minlen13\n  local maxlen14\n\
    \  local minlen14\n  local maxlen15\n  local minlen15\n  local maxlen16\n  local\
    \ minlen16\n  local maxlen17\n  local minlen17\n  local maxlen18\n  local minlen18\n\
    \  local maxlen19\n  local minlen19\n  local maxlen20\n  local minlen20\n  local\
    \ maxlen21\n  local minlen21\n  local maxlen22\n  local minlen22\n  local maxlen23\n\
    \  local minlen23\n  local maxlen24\n  local minlen24\n  local maxlen25\n  local\
    \ minlen25\n  local maxlen26\n  local minlen26\n  local maxlen27\n  local minlen27\n\
    \  local maxlen28\n  local minlen28\n  local maxlen29\n  local minlen29\n  local\
    \ maxlen30\n  local minlen30\n  local maxlen31\n  local minlen31\n  local maxlen32\n\
    \  local minlen32\n  local maxlen33\n  local minlen33\n  local maxlen34\n  local\
    \ minlen34\n  local maxlen35\n  local minlen35\n  local maxlen36\n  local minlen36\n\
    \  local maxlen37\n  local minlen37\n  local maxlen38\n  local minlen38\n  local\
    \ maxlen39\n  local minlen39\n\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extensions\
    \ strength extension_name extension_strength extension_count extension_strongest\
    \ extension_extension\n  \n  class_name=$1\n  extensions=$2\n  strength=0\n  extension_count=0\n\
    \  extension_strongest=\"\"\n  extension_extension=\"\"\n  \n  for extension in\
    \ $extensions\n  do\n    extension_name=$(echo $extension | tr '[A-Z]' '[a-z]')\n\
    \    extension_strength=$(echo $extension | awk '{print tolower($0)}')\n    extension_count=$((extension_count+1))\n\
    \    \n    if [ $extension_strength -eq $strength ]\n    then\n      extension_strongest=$extension_name\n\
    \      extension_extension=$extension\n    fi\n    \n    strength=$((strength+1))\n\
    \  done\n  \n  if [ $extension_count -gt 1 ]\n  then\n    extension_strongest=$extension_strongest.${extension_extension}\n\
    \  fi\n  \n  echo $class_name$extension_strongest\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpubv_1qlj.sh: line 37: [: ten: integer expression expected

    /tmp/tmpubv_1qlj.sh: line 37: [: nine: integer expression expected

    /tmp/tmpubv_1qlj.sh: line 37: [: eight8oke: integer expression expected

    '
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extensions\
    \ strength extension_name extension_strength extension_count extension_name extension_strength\n\
    \  local -n arr=$2\n  local -a arr=(\"${arr[@]}\" \"$1\")\n  local -a extensions=(\"\
    ${arr[@]:1}\")\n  local -a extension_strength=(\"${arr[@]:2}\")\n  local -a extension_count=(\"\
    ${arr[@]:3}\")\n  local -a extension_name=(\"${arr[@]:4}\")\n  local -a extension_strength=(\"\
    ${arr[@]:5}\")\n  local -a extension_count=(\"${arr[@]:6}\")\n  local -a extension_name=(\"\
    ${arr[@]:7}\")\n  local -a extension_strength=(\"${arr[@]:8}\")\n  local -a extension_count=(\"\
    ${arr[@]:9}\")\n  local -a extension_name=(\"${arr[@]:10}\")\n  local -a extension_strength=(\"\
    ${arr[@]:11}\")\n  local -a extension_count=(\"${arr[@]:12}\")\n  local -a extension_name=(\"\
    ${arr[@]:13}\")\n  local -a extension_strength=(\"${arr[@]:14}\")\n  local -a\
    \ extension_count=(\"${arr[@]:15}\")\n  local -a extension_name=(\"${arr[@]:16}\"\
    )\n  local -a extension_strength=(\"${arr[@]:17}\")\n  local -a extension_count=(\"\
    ${arr[@]:18}\")\n  local -a extension_name=(\"${arr[@]:19}\")\n  local -a extension_strength=(\"\
    ${arr[@]:20}\")\n  local -a extension_count=(\"${arr[@]:21}\")\n  local -a extension_name=(\"\
    ${arr[@]:22}\")\n  local -a extension_strength=(\"${arr[@]:23}\")\n  local -a\
    \ extension_count=(\"${arr[@]:24}\")\n  local -a extension_name=(\"${arr[@]:25}\"\
    )\n  local -a extension_strength=(\"${arr[@]:26}\")\n  local -a extension_count=(\"\
    ${arr[@]:27}\")\n  local -a extension_name=(\"${arr[@]:28}\")\n  local -a extension_strength=(\"\
    ${arr[@]:29}\")\n  local -a extension_count=(\"${arr[@]:30}\")\n  local -a extension_name=(\"\
    ${arr[@]:31}\")\n\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy0n375xg.sh: line 23: local: `tEN niNE eIGHt8OKe'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal strength\n\tlocal extension\n\tlocal i\n\tlocal j\n\tlocal strongest\n\
    \tlocal count\n\tlocal max\n\tlocal min\n\tlocal maxCount\n\tlocal minCount\n\t\
    local maxExtension\n\tlocal minExtension\n\tlocal maxExtensionCount\n\tlocal minExtensionCount\n\
    \tlocal maxExtensionStrength\n\tlocal minExtensionStrength\n\tlocal maxExtensionExtension\n\
    \tlocal minExtensionExtension\n\tlocal maxExtensionExtensionCount\n\tlocal minExtensionExtensionCount\n\
    \tlocal maxExtensionExtensionStrength\n\tlocal minExtensionExtensionStrength\n\
    \tlocal maxExtensionExtensionExtension\n\tlocal minExtensionExtensionExtension\n\
    \tlocal maxExtensionExtensionExtensionCount\n\tlocal minExtensionExtensionExtensionCount\n\
    \tlocal maxExtensionExtensionExtensionStrength\n\tlocal minExtensionExtensionExtensionStrength\n\
    \tlocal maxExtensionExtensionExtensionExtension\n\tlocal minExtensionExtensionExtensionExtension\n\
    \tlocal maxExtensionExtensionExtensionExtensionCount\n\tlocal minExtensionExtensionExtensionExtensionCount\n\
    \tlocal maxExtensionExtensionExtensionExtensionStrength\n\tlocal minExtensionExtensionExtensionExtensionStrength\n\
    \tlocal maxExtensionExtensionExtensionExtensionExtension\n\tlocal minExtensionExtensionExtensionExtension\n\
    \tlocal maxExtensionExtensionExtensionExtensionCount\n\tlocal minExtensionExtensionExtensionExtensionCount\n\
    \tlocal maxExtensionExtensionExtensionExtensionStrength\n\tlocal minExtensionExtensionExtensionStrength\n\
    \tlocal maxExtensionExtensionExtensionExtension\n\tlocal minExtensionExtensionExtensionExtension\n\
    \tlocal maxExtensionExtensionExtensionExtensionCount\n\tlocal minExtensionExtensionExtensionExtensionCount\n\
    \tlocal maxExtensionExtensionExtensionExtensionStrength\n\tlocal minExtensionExtensionExtensionStrength\n\
    \tlocal maxExtensionExtensionExtensionExtension\n\tlocal minExtensionExtensionExtensionExtension\n\
    \tlocal maxExtensionExtensionExtensionExtensionCount\n\tlocal minExtensionExtensionExtensionExtensionCount\n\
    \tlocal maxExtensionExtensionExtensionExtensionStrength\n\tlocal minExtensionExtensionExtensionStrength\n\
    \tlocal maxExtensionExtensionExtensionExtension\n\tlocal minExtensionExtensionExtensionExtension\n\
    \tlocal maxExtensionExtensionExtensionExtensionCount\n\tlocal minExtensionExtensionExtensionExtensionCount\n\
    \tlocal maxExtensionExtensionExtensionExtensionStrength\n\tlocal minExtensionExtensionExtensionStrength\n\
    \tlocal maxExtensionExtensionExtensionExtension\n\tlocal minExtensionExtensionExtensionExtension\n\
    \tlocal maxExtensionExtensionExtensionExtensionCount\n\tlocal minExtensionExtensionExtensionExtensionCount\n\
    \tlocal maxExtensionExtensionExtensionExtensionStrength\n\tlocal minExtensionExtensionExtensionStrength\n\
    \tlocal maxExtensionExtensionExtensionExtension\n\t\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local count\n  local max\n\
    \  local maxCount\n  local maxExtension\n  local maxExtensionCount\n  local maxExtensionStrength\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount2\n  local\
    \ maxExtensionStrengthCount3\n  local maxExtensionStrengthCount4\n  local maxExtensionStrengthCount5\n\
    \  local maxExtensionStrengthCount6\n  local maxExtensionStrengthCount7\n  local\
    \ maxExtensionStrengthCount8\n  local maxExtensionStrengthCount9\n  local maxExtensionStrengthCount10\n\
    \  local maxExtensionStrengthCount11\n  local maxExtensionStrengthCount12\n  local\
    \ maxExtensionStrengthCount13\n  local maxExtensionStrengthCount14\n  local maxExtensionStrengthCount15\n\
    \  local maxExtensionStrengthCount16\n  local maxExtensionStrengthCount17\n  local\
    \ maxExtensionStrengthCount18\n  local maxExtensionStrengthCount19\n  local maxExtensionStrengthCount20\n\
    \  local maxExtensionStrengthCount21\n  local maxExtensionStrengthCount22\n  local\
    \ maxExtensionStrengthCount23\n  local maxExtensionStrengthCount24\n  local maxExtensionStrengthCount25\n\
    \  local maxExtensionStrengthCount26\n  local maxExtensionStrengthCount27\n  local\
    \ maxExtensionStrengthCount28\n  local maxExtensionStrengthCount29\n  local maxExtensionStrengthCount30\n\
    \  local maxExtensionStrengthCount31\n  local maxExtensionStrengthCount32\n  local\
    \ maxExtensionStrengthCount33\n  local maxExtensionStrengthCount34\n  local maxExtensionStrengthCount35\n\
    \  local maxExtensionStrengthCount36\n  local maxExtensionStrengthCount37\n  local\
    \ maxExtensionStrengthCount38\n  local maxExtensionStrengthCount39\n  local maxExtensionStrengthCount40\n\
    \  local maxExtensionStrengthCount41\n  local maxExtensionStrengthCount42\n  local\
    \ maxExtensionStrengthCount43\n  local maxExtensionStrengthCount44\n  local maxExtensionStrengthCount45\n\
    \  local maxExtensionStrengthCount46\n  local maxExtensionStrengthCount47\n  local\
    \ maxExtensionStrengthCount48\n  local maxExtensionStrengthCount49\n  local maxExtensionStrengthCount50\n\
    \  local maxExtensionStrengthCount\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal extensions_count=${#extensions[@]}\n\tlocal extensions_count=${extensions_count}-1\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${extensions_count}\n\
    \tlocal extensions_count=${extensions_count}\n\tlocal extensions_count=${\n}\n\
    \ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcm5hkzii.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local count\n\
    \  local max\n  local maxCount\n  local maxExtension\n  local maxExtensionCount\n\
    \  local maxExtensionStrength\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n\
    \  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local\
    \ maxExtensionStrengthCount\n  local maxExtensionStrengthCount\n  local max\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name extensions\
    \ strength extension\n    local i\n    local j\n    local k\n    local l\n   \
    \ local m\n    local n\n    local o\n    local p\n    local q\n    local r\n \
    \   local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local extensions_count=${#extensions[@]}\n    local\
    \ extensions_count=${extensions_count}-1\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${extensions_count}\n    local extensions_count=${extensions_count}\n\
    \    local extensions_count=${\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpznptfbzr.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local length\n \
    \ local max\n  local maxIndex\n  local maxStrength\n  local maxExtension\n  local\
    \ maxExtensionIndex\n  local maxExtensionStrength\n  local maxExtensionName\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameStrength\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionName\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local len\n  local\
    \ max\n  local min\n  local maxStrongest\n  local minStrongest\n  local maxExtension\n\
    \  local minExtension\n  local maxExtensionName\n  local minExtensionName\n  local\
    \ maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  local maxExtensionNameLength\n\
    \  local minExtensionNameLength\n  local maxExtensionNameLength\n  local minExtensionNameLength\n\
    \  local maxExtensionNameLength\n  local minExtensionNameLength\n  \n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal strength\n\tlocal extension\n\tlocal i\n\tlocal j\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extensions\
    \ strength extension\n  \n  class_name=$1\n  extensions=$2\n  strength=0\n  extension=\"\
    \"\n  \n  for extension in $extensions\n  do\n    strength=$((${#extension} -\
    \ ${#class_name}))\n    if [ $strength -gt 0 ]\n    then\n      break\n    fi\n\
    \  done\n  \n  if [ $strength -gt 0 ]\n  then\n    extension=${extensions:$((strength+1))}\n\
    \  fi\n  \n  echo \"$class_name.$extension\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name extensions\
    \ strength extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension_strength extension_count extension_name extension_strength\
    \ extension_count extension_name extension_strength extension_count extension_name\
    \ extension_strength extension_count extension_name extension_strength extension_count\
    \ extension_name extension\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extensions\
    \ strength extension strongest_extension\n  class_name=$1\n  extensions=$2\n \
    \ strength=0\n  extension=$(echo $extensions | sed 's/ /\\\\./g')\n  strongest_extension=$(echo\
    \ $class_name | sed 's/ /\\\\./g' | sed 's/^'$extension'//g' | sed 's/'$extension'$//g')\n\
    \  while read -r line; do\n    strength=$((strength + $(echo $line | sed 's/ /\\\
    \\./g' | sed 's/^'$extension'//g' | sed 's/'$extension'$//g')))\n  done <<< \"\
    $extensions\"\n  if (( $strength > 0 )); then\n    echo \"$class_name.$strongest_extension\"\
    \n  else\n    echo \"$class_name\"\n  fi\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8n_vw1ez.sh: line 29: strength + tEN\.niNE\.eIGHt8OKe: syntax error:
    invalid arithmetic operator (error token is "\.niNE\.eIGHt8OKe")

    '
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local extension_strength=0\n    local extension_strongest=\"\
    \"\n    local extension_found=0\n    local extension_strength_found=0\n    local\
    \ extension_strongest_found=0\n    local extension_strength_strongest=0\n    local\
    \ extension_strongest_strength=0\n    local extension_strongest_strongest=\"\"\
    \n    local extension_strongest_found=0\n    local extension_strongest_strength_found=0\n\
    \    local extension_strongest_strongest_found=0\n    local extension_strongest_strength_strongest=0\n\
    \    local extension_strongest_strongest_strength=0\n    local extension_strongest_strongest_strongest=\"\
    \"\n    local extension_strongest_strength_strongest_found=0\n    local extension_strongest_strongest_strength_found=0\n\
    \    local extension_strongest_strongest_strongest_found=0\n    local extension_strongest_strength_strongest_strongest=0\n\
    \    local extension_strongest_strongest_strongest_strength=0\n    local extension_strongest_strongest_strongest_strongest=\"\
    \"\n    local extension_strongest_strength_strongest_strongest_found=0\n    local\
    \ extension_strongest_strongest_strongest_strength_found=0\n    local extension_strongest_strongest_strongest_strongest_found=0\n\
    \    local extension_strongest_strength_strongest_strongest_strongest=0\n    local\
    \ extension_strongest_strongest_strongest_strongest_strength=0\n    local extension_strongest_strongest_strongest_strongest_strongest=\"\
    \"\n    local extension_strongest_strength_strongest_strongest_strongest_found=0\n\
    \    local extension_strongest_strongest_strongest_strongest_strength_found=0\n\
    \    local extension_strongest_strongest_strongest_strongest_strongest_found=0\n\
    \    local extension_strongest_strength_strongest_strongest_strongest_strongest=0\n\
    \    local extension_strongest_strongest_strongest_strongest_strongest_strength=0\n\
    \    local extension_strongest_strongest_strongest_strongest_strongest_strongest=\"\
    \"\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name extensions\
    \ strength extension_name extension_strength\n    class_name=$1\n    extensions=$2\n\
    \    strength=$(echo $extensions | sed 's/ /+/g' | awk '{for(i=1;i<=NF;i++){if($i~/[A-Z]/){c++}else\
    \ if($i~/[a-z]/){s++}}} END{print c/s-1}')\n    extension_name=$(echo $extensions\
    \ | sed 's/ /+/g' | awk '{for(i=1;i<=NF;i++){if($i~/[A-Z]/){e++}else if($i~/[a-z]/){e++}}}\
    \ END{print e}')\n    extension_strength=$(echo $extensions | sed 's/ /+/g' |\
    \ awk '{for(i=1;i<=NF;i++){if($i~/[A-Z]/){e++}else if($i~/[a-z]/){e++}}} END{print\
    \ e}')\n    if [ \"$extension_strength\" -eq \"$strength\" ]; then\n        echo\
    \ \"$class_name.$extension_name\"\n    else\n        echo \"$class_name.$extension_name\"\
    \n    fi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    /tmp/tmpeq4vni9v.sh: line 28: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local len\n  local\
    \ max\n  local maxi\n  local maxj\n  local maxlen\n  local maxleni\n  local maxlenj\n\
    \  local maxlenlen\n  local maxlenleni\n  local maxlenlenj\n  local maxlenlenlen\n\
    \  local maxlenlenleni\n  local maxlenlenlenj\n  local maxlenlenlenlen\n  local\
    \ maxlenlenlenleni\n  local maxlenlenlenlenj\n  local maxlenlenlenlenlen\n  local\
    \ maxlenlenlenlenleni\n  local maxlenlenlenlenlenj\n  local maxlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenleni\n  local maxlenlenlenlenlenj\n  local maxlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenleni\n  local maxlenlenlenlenlenj\n  local maxlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenlenleni\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local len\n    local max\n    local maxlen\n    local maxlen2\n    local\
    \ maxlen3\n    local maxlen4\n    local maxlen5\n    local maxlen6\n    local\
    \ maxlen7\n    local maxlen8\n    local maxlen9\n    local maxlen10\n    local\
    \ maxlen11\n    local maxlen12\n    local maxlen13\n    local maxlen14\n    local\
    \ maxlen15\n    local maxlen16\n    local maxlen17\n    local maxlen18\n    local\
    \ maxlen19\n    local maxlen20\n    local maxlen21\n    local maxlen22\n    local\
    \ maxlen23\n    local maxlen24\n    local maxlen25\n    local maxlen26\n    local\
    \ maxlen27\n    local maxlen28\n    local maxlen29\n    local maxlen30\n    local\
    \ maxlen31\n    local maxlen32\n    local maxlen33\n    local maxlen34\n    local\
    \ maxlen35\n    local maxlen36\n    local maxlen37\n    local maxlen38\n    local\
    \ maxlen39\n    local maxlen40\n    local maxlen41\n    local maxlen42\n    local\
    \ maxlen43\n    local maxlen44\n    local maxlen45\n    local maxlen46\n    local\
    \ maxlen47\n    local maxlen48\n    local maxlen49\n    local maxlen50\n    local\
    \ maxlen51\n    local maxlen52\n    local maxlen53\n    local maxlen54\n    local\
    \ maxlen55\n    local maxlen56\n    local maxlen57\n    local maxlen58\n    local\
    \ maxlen59\n    local maxlen60\n    local maxlen61\n    local maxlen62\n    local\
    \ maxlen63\n    local maxlen64\n    local maxlen65\n    local maxlen66\n    local\
    \ maxlen67\n    local maxlen68\n    local maxlen69\n    local maxlen70\n    local\
    \ maxlen71\n    local maxlen72\n    local maxlen73\n    local maxlen74\n    local\
    \ maxlen75\n    local maxlen76\n    local maxlen77\n    local maxlen78\n    local\
    \ maxlen79\n    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal strength=0\n\tlocal extension\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ len\n\tlocal max\n\tlocal min\n\tlocal maxlen\n\tlocal minlen\n\tlocal maxlen2\n\
    \tlocal minlen2\n\tlocal maxlen3\n\tlocal minlen3\n\tlocal maxlen4\n\tlocal minlen4\n\
    \tlocal maxlen5\n\tlocal minlen5\n\tlocal maxlen6\n\tlocal minlen6\n\tlocal maxlen7\n\
    \tlocal minlen7\n\tlocal maxlen8\n\tlocal minlen8\n\tlocal maxlen9\n\tlocal minlen9\n\
    \tlocal maxlen10\n\tlocal minlen10\n\tlocal maxlen11\n\tlocal minlen11\n\tlocal\
    \ maxlen12\n\tlocal minlen12\n\tlocal maxlen13\n\tlocal minlen13\n\tlocal maxlen14\n\
    \tlocal minlen14\n\tlocal maxlen15\n\tlocal minlen15\n\tlocal maxlen16\n\tlocal\
    \ minlen16\n\tlocal maxlen17\n\tlocal minlen17\n\tlocal maxlen18\n\tlocal minlen18\n\
    \tlocal maxlen19\n\tlocal minlen19\n\tlocal maxlen20\n\tlocal minlen20\n\tlocal\
    \ maxlen21\n\tlocal minlen21\n\tlocal maxlen22\n\tlocal minlen22\n\tlocal maxlen23\n\
    \tlocal minlen23\n\tlocal maxlen24\n\tlocal minlen24\n\tlocal maxlen25\n\tlocal\
    \ minlen25\n\tlocal maxlen26\n\tlocal minlen26\n\tlocal maxlen27\n\tlocal minlen27\n\
    \tlocal maxlen28\n\tlocal minlen28\n\tlocal maxlen29\n\tlocal minlen29\n\tlocal\
    \ maxlen30\n\tlocal minlen30\n\tlocal maxlen31\n\tlocal minlen31\n\tlocal maxlen32\n\
    \tlocal minlen32\n\tlocal maxlen33\n\tlocal minlen33\n\tlocal maxlen34\n\tlocal\
    \ minlen34\n\tlocal maxlen35\n\tlocal minlen35\n\tlocal maxlen36\n\tlocal minlen36\n\
    \tlocal maxlen37\n\tlocal minlen37\n\tlocal maxlen38\n\tlocal minlen38\n\tlocal\
    \ maxlen39\n\tlocal minlen39\n\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength\n  local extension\n  local extension_str\n\
    \  local extension_strength\n  local extension_strongest\n  local extension_strength_str\n\
    \  local extension_strength_strongest\n  local extension_strength_strongest_index\n\
    \  local extension_strength_strongest_index_count\n  local extension_strength_strongest_index_count_max\n\
    \  local extension_strength_strongest_index_count_max_index\n  local extension_strength_strongest_index_count_max_index2\n\
    \  local extension_strength_strongest_index_count_max_index3\n  local extension_strength_strongest_index_count_max_index4\n\
    \  local extension_strength_strongest_index_count_max_index5\n  local extension_strength_strongest_index_count_max_index6\n\
    \  local extension_strength_strongest_index_count_max_index7\n  local extension_strength_strongest_index_count_max_index8\n\
    \  local extension_strength_strongest_index_count_max_index9\n  local extension_strength_strongest_index_count_max_index10\n\
    \  local extension_strength_strongest_index_count_max_index11\n  local extension_strength_strongest_index_count_max_index12\n\
    \  local extension_strength_strongest_index_count_max_index13\n  local extension_strength_strongest_index_count_max_index14\n\
    \  local extension_strength_strongest_index_count_max_index15\n  local extension_strength_strongest_index_count_max_index16\n\
    \  local extension_strength_strongest_index_count_max_index17\n  local extension_strength_strongest_index_count_max_index18\n\
    \  local extension_strength_strongest_index_count_max_index19\n  local extension_strength_strongest_index_count_max_index20\n\
    \  local extension_strength_strongest_index_count_max_index21\n  local extension_strength_strongest_index_count_max_index22\n\
    \  local extension_strength_strongest_index_count_max_index23\n  local extension_strength_strongest_index_count_max_index24\n\
    \  local extension_strength_strongest_index_count_max_index25\n  local extension_strength_strongest_index_count_max_index26\n\
    \  local extension_strength_strongest_index_count_max_index27\n  local extension_strength_strongest_index_count_max_index\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local extension_strength\n  local extension_strongest\n  local\
    \ extension_strongest_index\n  local extension_strongest_strength\n  local extension_strongest_name\n\
    \  local extension_strongest_index\n  local extension_strongest_name\n  local\
    \ extension_strongest_index\n  local extension_strongest_name\n  local extension_strongest_index\n\
    \  local extension_strongest_name\n  local extension_strongest_index\n  local\
    \ extension_strongest_name\n  local extension_strongest_index\n  local extension_strongest_name\n\
    \  local extension_strongest_index\n  local extension_strongest_name\n  local\
    \ extension_strongest_index\n  local extension_strongest_name\n  local extension_strongest_index\n\
    \  local extension_strongest_name\n  local extension_strongest_index\n  local\
    \ extension_strongest_name\n  local extension_strongest_index\n  local extension_strongest_name\n\
    \  local extension_strongest_index\n  local extension_strongest_name\n  local\
    \ extension_strongest_index\n  local extension_strongest_name\n  local extension_strongest_index\n\
    \  local extension_strongest_name\n  local extension_strongest_index\n  local\
    \ extension_strongest_name\n  local extension_strongest_index\n  local extension_strongest_name\n\
    \  local extension_strongest_index\n  local extension_strongest_name\n  local\
    \ extension_strongest_index\n  local extension_strongest_name\n  local extension_strongest_index\n\
    \  local extension_strongest_name\n  local extension_strongest_index\n  local\
    \ extension_strongest_name\n  local extension_strongest_index\n  local extension_strongest_name\n\
    \  local extension_strongest_index\n  local extension_strongest_name\n  local\
    \ extension_strongest_index\n  local extension_strongest_name\n  local extension_strongest_index\n\
    \  local extension_strongest_name\n  local extension_strongest_index\n  local\
    \ extension_strongest_name\n  local extension_strongest_index\n  local extension_strongest_name\n\
    \  local extension_strongest_index\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local count\n    local extension_length\n    local extension_length2\n\
    \    local extension_length3\n    local extension_length4\n    local extension_length5\n\
    \    local extension_length6\n    local extension_length7\n    local extension_length8\n\
    \    local extension_length9\n    local extension_length10\n    local extension_length11\n\
    \    local extension_length12\n    local extension_length13\n    local extension_length14\n\
    \    local extension_length15\n    local extension_length16\n    local extension_length17\n\
    \    local extension_length18\n    local extension_length19\n    local extension_length20\n\
    \    local extension_length21\n    local extension_length22\n    local extension_length23\n\
    \    local extension_length24\n    local extension_length25\n    local extension_length26\n\
    \    local extension_length27\n    local extension_length28\n    local extension_length29\n\
    \    local extension_length30\n    local extension_length31\n    local extension_length32\n\
    \    local extension_length33\n    local extension_length34\n    local extension_length35\n\
    \    local extension_length36\n    local extension_length37\n    local extension_length38\n\
    \    local extension_length39\n    local extension_length40\n    local extension_length41\n\
    \    local extension_length42\n    local extension_length43\n    local extension_length44\n\
    \    local extension_length45\n    local extension_length46\n    local extension_length47\n\
    \    local extension_length48\n    local extension_length49\n    local extension_length50\n\
    \    local extension_length51\n    local extension_length52\n    local extension_length53\n\
    \    local extension_length54\n    local extension_length55\n    local extension_length56\n\
    \    local extension_length57\n    local extension_length58\n    local extension_length59\n\
    \    local extension_length60\n    local extension_length61\n    local extension_length62\n\
    \    local extension_length63\n    local extension_length64\n    local extension_length65\n\
    \    local extension_length66\n    local extension_length67\n    local extension_length68\n\
    \    local extension\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strongest_extension=\"\"\n    local extension_strength=0\n\
    \    local extension_number=0\n    local extension_letters=0\n    local extension_letters_cap=0\n\
    \    local extension_letters_sm=0\n    local extension_letters_total=0\n    local\
    \ extension_letters_cap_total=0\n    local extension_letters_sm_total=0\n    local\
    \ extension_letters_cap_total_total=0\n    local extension_letters_sm_total_total=0\n\
    \    local extension_letters_cap_total_total_total=0\n    local extension_letters_sm_total_total_total=0\n\
    \    local extension_letters_cap_total_total_total_total=0\n    local extension_letters_sm_total_total_total_total=0\n\
    \    local extension_letters_cap_total_total_total_total_total=0\n    local extension_letters_sm_total_total_total_total_total=0\n\
    \    local extension_letters_cap_total_total_total_total_total_total=0\n    local\
    \ extension_letters_sm_total_total_total_total_total_total=0\n    local extension_letters_cap_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_sm_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_cap_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_sm_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_cap_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_sm_total_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_cap_total_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_sm_total_total_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_cap_total_total_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_sm_total_total_total_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_cap_total_total_total_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_sm_total_total_total_total_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_cap_total_total_total_total_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_sm_total_total_total_total_total_total_total_total_total_total_total_total_total_total=0\n\
    \    local extension_letters_cap_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength\n    local extension\n    local extension_str\n\
    \    local extension_strength\n    local extension_class\n    local extension_class_str\n\
    \    local extension_class_strength\n    local extension_class_count\n    local\
    \ extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_class_count\n    local extension_class_count\n\
    \    local extension_class_count\n    local extension_\n}\n\ncandidate() {\n \
    \   Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name=$1\n\tlocal\
    \ extensions=$2\n\tlocal strength=0\n\tlocal extension\n\tlocal i\n\tlocal j\n\
    \tlocal count\n\tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_strength\n\tlocal extension_length\n\
    \tlocal extension_strength\n\tlocal extension_length\n\tlocal extension_strength\n\
    \tlocal extension_length\n\tlocal extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local k\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local extensions_sorted=(${extensions[@]})\n  local extensions_sorted_length=${#extensions_sorted[@]}\n\
    \  local extensions_sorted_index=0\n  local extensions_sorted_strength=${extensions_sorted[extensions_sorted_index]}\n\
    \  local extensions_sorted_name=${extensions_sorted[extensions_sorted_index]}\n\
    \  local extensions_sorted_name_length=${#extensions_sorted_name}\n  local extensions_sorted_name_strength=${extensions_sorted_name_length}\n\
    \  local extensions_sorted_name_chars=${extensions_sorted_name_length}\n  local\
    \ extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n  local\
    \ extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_sorted_name_chars_index=0\n  local extensions_sorted_name_chars_strength=${extensions_sorted_name_chars}\n\
    \  local extensions_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local len\n  local\
    \ max\n  local maxi\n  local maxj\n  local maxlen\n  local maxleni\n  local maxlenj\n\
    \  local maxlenlen\n  local maxlenleni\n  local maxlenlenj\n  local maxlenlenlen\n\
    \  local maxlenlenleni\n  local maxlenlenlenj\n  local maxlenlenlenlen\n  local\
    \ maxlenlenlenleni\n  local maxlenlenlenlenj\n  local maxlenlenlenlenlen\n  local\
    \ maxlenlenlenlenleni\n  local maxlenlenlenlenlenj\n  local maxlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenleni\n  local maxlenlenlenlenlenj\n  local maxlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenleni\n  local maxlenlenlenlenlenj\n  local maxlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenlenleni\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local len\n  local\
    \ max\n  local min\n  local maxlen\n  local minlen\n  local maxlen2\n  local minlen2\n\
    \  local maxlen3\n  local minlen3\n  local maxlen4\n  local minlen4\n  local maxlen5\n\
    \  local minlen5\n  local maxlen6\n  local minlen6\n  local maxlen7\n  local minlen7\n\
    \  local maxlen8\n  local minlen8\n  local maxlen9\n  local minlen9\n  local maxlen10\n\
    \  local minlen10\n  local maxlen11\n  local minlen11\n  local maxlen12\n  local\
    \ minlen12\n  local maxlen13\n  local minlen13\n  local maxlen14\n  local minlen14\n\
    \  local maxlen15\n  local minlen15\n  local maxlen16\n  local minlen16\n  local\
    \ maxlen17\n  local minlen17\n  local maxlen18\n  local minlen18\n  local maxlen19\n\
    \  local minlen19\n  local maxlen20\n  local minlen20\n  local maxlen21\n  local\
    \ minlen21\n  local maxlen22\n  local minlen22\n  local maxlen23\n  local minlen23\n\
    \  local maxlen24\n  local minlen24\n  local maxlen25\n  local minlen25\n  local\
    \ maxlen26\n  local minlen26\n  local maxlen27\n  local minlen27\n  local maxlen28\n\
    \  local minlen28\n  local maxlen29\n  local minlen29\n  local maxlen30\n  local\
    \ minlen30\n  local maxlen31\n  local minlen31\n  local maxlen32\n  local minlen32\n\
    \  local maxlen33\n  local minlen33\n  local maxlen34\n  local minlen34\n  local\
    \ maxlen35\n  local minlen35\n  local maxlen36\n  local minlen36\n  local maxlen37\n\
    \  local minlen37\n  local maxlen38\n  local minlen38\n  local maxlen39\n  local\
    \ minlen39\n  local maxlen\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_number\n\
    \    local extension_char\n    local extension_chars\n    local extension_char_count\n\
    \    local extension_char_length\n    local extension_char_strength\n    local\
    \ extension_char_number\n    local extension_char_char\n    local extension_char_chars\n\
    \    local extension_char_char_count\n    local extension_char_char_length\n \
    \   local extension_char_char_strength\n    local extension_char_char_number\n\
    \    local extension_char_char_char\n    local extension_char_char_chars\n   \
    \ local extension_char_char_char_count\n    local extension_char_char_char_length\n\
    \    local extension_char_char_char_strength\n    local extension_char_char_char_number\n\
    \    local extension_char_char_char_char\n    local extension_char_char_char_chars\n\
    \    local extension_char_char_char_char_count\n    local extension_char_char_char_char_length\n\
    \    local extension_char_char_char_char_strength\n    local extension_char_char_char_char_number\n\
    \    local extension_char_char_char_char_char\n    local extension_char_char_char_char_chars\n\
    \    local extension_char_char_char_char_char_count\n    local extension_char_char_char_char_char_length\n\
    \    local extension_char_char_char_char_char_strength\n    local extension_char_char_char_char_char_number\n\
    \    local extension_char_char_char_char_char_char\n    local extension_char_char_char_char_char_chars\n\
    \    local extension_char_char_char_char_char_char_count\n    local extension_char_char_char_char_char_char_length\n\
    \    local extension_char_char_char_char_char_char_strength\n    local extension_char_char_char_char_char_char_number\n\
    \    local extension_char_char_char_char_char_char_char\n    local extension_char_char_char_char_char_char_chars\n\
    \    local extension_char_char_char_char_char_char_char_count\n    local extension_char_char_char_char_char_char_char_length\n\
    \    local extension_char_char_char_char_char_char_char_strength\n    local extension_char_char_char_char_char_char_char_number\n\
    \    local extension_char_char_char_char_char_char_char_char\n    local extension_char_char_char_char_char_char_char_chars\n\
    \    local extension_char_char_char_char_char_char_char_char_count\n    local\
    \ extension_char_char_char_char_char_char_char_char_length\n    local extension_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal extensions=$2\n\
    \tlocal strength=0\n\tlocal extension\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extensions\
    \ strength extension\n  class_name=$1\n  extensions=$2\n  strength=$(echo $extensions\
    \ | sed 's/ //g' | awk '{\n    for (i=1; i<=NF; i++) {\n      if ($i ~ /^[A-Z]/)\
    \ {\n        cap=i\n      }\n      if ($i ~ /^[a-z]/) {\n        sm=i\n      }\n\
    \    }\n    cap-=sm\n    print (cap-$1)/(cap+$1)\n  }')\n  extension=$(echo $extensions\
    \ | sed 's/ //g' | awk '{\n    for (i=1; i<=NF; i++) {\n      if ($i ~ /^[A-Z]/)\
    \ {\n        cap=i\n      }\n      if ($i ~ /^[a-z]/) {\n        sm=i\n      }\n\
    \    }\n    cap-=sm\n    print (cap-$1)/(cap+$1)\n  }' | sort -n | tail -1)\n\
    \  echo $class_name.$extension\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local len\n  local\
    \ max\n  local maxi\n  local maxj\n  local maxlen\n  local maxleni\n  local maxlenj\n\
    \  local maxlenlen\n  local maxlenleni\n  local maxlenlenj\n  local maxlenlenlen\n\
    \  local maxlenlenleni\n  local maxlenlenlenj\n  local maxlenlenlenlen\n  local\
    \ maxlenlenlenleni\n  local maxlenlenlenlenj\n  local maxlenlenlenlenlen\n  local\
    \ maxlenlenlenlenleni\n  local maxlenlenlenlenlenj\n  local maxlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenleni\n  local maxlenlenlenlenlenj\n  local maxlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenleni\n  local maxlenlenlenlenlenj\n  local maxlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenleni\n  local maxlenlenlenlenlenlenj\n  local maxlenlenlenlenlenlenlen\n\
    \  local maxlenlenlenlenlenlenleni\n  local max\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name extensions\
    \ strength extension_name extension_strength extension_count extension_strongest\n\
    \tlocal -a extension_array\n\tlocal -a extension_array_sorted\n\tlocal -a extension_array_sorted_reverse\n\
    \tlocal -a extension_array_sorted_reverse_index\n\tlocal -a extension_array_sorted_reverse_count\n\
    \tlocal -a extension_array_sorted_reverse_count2\n\tlocal -a extension_array_sorted_reverse_count3\n\
    \tlocal -a extension_array_sorted_reverse_count4\n\tlocal -a extension_array_sorted_reverse_count5\n\
    \tlocal -a extension_array_sorted_reverse_count6\n\tlocal -a extension_array_sorted_reverse_count7\n\
    \tlocal -a extension_array_sorted_reverse_count8\n\tlocal -a extension_array_sorted_reverse_count9\n\
    \tlocal -a extension_array_sorted_reverse_count10\n\tlocal -a extension_array_sorted_reverse_count11\n\
    \tlocal -a extension_array_sorted_reverse_count12\n\tlocal -a extension_array_sorted_reverse_count13\n\
    \tlocal -a extension_array_sorted_reverse_count14\n\tlocal -a extension_array_sorted_reverse_count15\n\
    \tlocal -a extension_array_sorted_reverse_count16\n\tlocal -a extension_array_sorted_reverse_count17\n\
    \tlocal -a extension_array_sorted_reverse_count18\n\tlocal -a extension_array_sorted_reverse_count19\n\
    \tlocal -a extension_array_sorted_reverse_count20\n\tlocal -a extension_array_sorted_reverse_count21\n\
    \tlocal -a extension_array_sorted_reverse_count22\n\tlocal -a extension_array_sorted_reverse_count23\n\
    \tlocal -a extension_array_sorted_reverse_count24\n\tlocal -a extension_array_sorted_reverse_count25\n\
    \tlocal -a extension_array_sorted_reverse_count26\n\tlocal -a extension_array_sorted_reverse_count27\n\
    \tlocal -a extension_array_sorted_reverse_count28\n\tlocal -a extension_array_sorted_reverse_count29\n\
    \tlocal -a extension_array_sorted_reverse_count30\n\tlocal -a extension_array_sorted_reverse_count31\n\
    \tlocal -a extension_array_sorted_reverse_count32\n\tlocal -a extension_array_sorted_reverse_count33\n\
    \tlocal -a extension_array_sorted_reverse_count34\n\tlocal -a extension_array_sorted_reverse_count35\n\
    \tlocal -a extension_array_sorted_reverse_count36\n\tlocal -a extension_array_sorted_reverse_count37\n\
    \tlocal -a extension_array_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ i\n    local j\n    local count\n    local max\n    local maxi\n    local maxj\n\
    \    local maxcount\n    local maxcounti\n    local maxcountj\n    local maxcountcount\n\
    \    local maxcountcounti\n    local maxcountcountj\n    local maxcountcountcount\n\
    \    local maxcountcountcounti\n    local maxcountcountcountj\n    local maxcountcountcountcount\n\
    \    local maxcountcountcountcounti\n    local maxcountcountcountcountj\n    local\
    \ maxcountcountcountcountcount\n    local maxcountcountcountcountcounti\n    local\
    \ maxcountcountcountcountcountj\n    local maxcountcountcountcountcountcount\n\
    \    local maxcountcountcountcountcountcounti\n    local maxcountcountcountcountcountcountj\n\
    \    local maxcountcountcountcountcountcountcount\n    local maxcountcountcountcountcountcountcounti\n\
    \    local maxcountcountcountcountcountcountcountj\n    local maxcountcountcountcountcountcountcountcount\n\
    \    local maxcountcountcountcountcountcountcountcounti\n    local maxcountcountcountcountcountcountcountcountj\n\
    \    local maxcountcountcountcountcountcountcountcountcount\n    local maxcountcountcountcountcountcountcountcountcounti\n\
    \    local maxcountcountcountcountcountcountcountcountj\n    local maxcountcountcountcountcountcountcountcountcount\n\
    \    local maxcountcountcountcountcountcountcountcountcounti\n    local maxcountcountcountcountcountcountcountcountcountj\n\
    \    local maxcountcountcountcountcountcountcountcountcount\n    local maxcountcountcountcountcountcountcountcountcounti\n\
    \    local maxcountcountcountcountcountcountcountcountcountj\n    local maxcountcountcountcountcountcountcountcountcountcount\n\
    \    local maxcountcountcountcountcountcountcountcountcounti\n    local maxcountcountcountcountcountcountcountcountcountj\n\
    \    local maxcountcountcountcountcountcountcountcountcountcount\n    local maxcountcountcountcountcountcountcountcountcounti\n\
    \    local maxcountcountcountcountcountcountcountcountcountj\n    local maxcountcountcountcountcountcountcountcountcountcount\n\
    \    local maxcountcountcountcountcountcountcountcountcountcounti\n    local maxcountcountcountcountcountcount\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n  local i\n  local j\n  local strongest\n\
    \  local strongest_extension\n  local strongest_extension_length\n  local strongest_extension_strength\n\
    \  local strongest_extension_class\n  local strongest_extension_extension\n  local\
    \ strongest_extension_extension_length\n  local strongest_extension_extension_strength\n\
    \  local strongest_extension_extension_class\n  local strongest_extension_extension_extension\n\
    \  local strongest_extension_extension_extension_length\n  local strongest_extension_extension_extension_strength\n\
    \  local strongest_extension_extension_extension_class\n  local strongest_extension_extension_extension_extension\n\
    \  local strongest_extension_extension_extension_length\n  local strongest_extension_extension_extension_strength\n\
    \  local strongest_extension_extension_extension_class\n  local strongest_extension_extension_extension_extension\n\
    \  local strongest_extension_extension_extension_length\n  local strongest_extension_extension_extension_strength\n\
    \  local strongest_extension_extension_extension_class\n  local strongest_extension_extension_extension_extension\n\
    \  local strongest_extension_extension_extension_length\n  local strongest_extension_extension_extension_strength\n\
    \  local strongest_extension_extension_extension_class\n  local strongest_extension_extension_extension_extension\n\
    \  local strongest_extension_extension_extension_length\n  local strongest_extension_extension_extension_strength\n\
    \  local strongest_extension_extension_extension_class\n  local strongest_extension_extension_extension_extension\n\
    \  local strongest_extension_extension_extension_length\n  local strongest_extension_extension_extension_strength\n\
    \  local strongest_extension_extension_extension_class\n  local strongest_extension_extension_extension_extension\n\
    \  local strongest_extension_extension_extension_length\n  local strongest_extension_extension_extension_strength\n\
    \  local strongest_extension_extension_extension_class\n  local strongest_extension_extension_extension_extension\n\
    \  local strongest_extension_extension_extension_length\n  local strongest_extension_extension_extension_strength\n\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=0\n  local extension\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_strength\n\
    \  local extension_length\n  local extension_strength\n  local extension_length\n\
    \  local extension_strength\n  local extension_length\n  local extension_\n}\n\
    \ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local count\n\
    \  local max\n  local maxCount\n  local maxExtension\n  local maxExtensionCount\n\
    \  local maxExtensionStrength\n  local maxExtensionStrengthCount\n  local maxExtensionStrengthCount2\n\
    \  local maxExtensionStrengthCount3\n  local maxExtensionStrengthCount4\n  local\
    \ maxExtensionStrengthCount5\n  local maxExtensionStrengthCount6\n  local maxExtensionStrengthCount7\n\
    \  local maxExtensionStrengthCount8\n  local maxExtensionStrengthCount9\n  local\
    \ maxExtensionStrengthCount10\n  local maxExtensionStrengthCount11\n  local maxExtensionStrengthCount12\n\
    \  local maxExtensionStrengthCount13\n  local maxExtensionStrengthCount14\n  local\
    \ maxExtensionStrengthCount15\n  local maxExtensionStrengthCount16\n  local maxExtensionStrengthCount17\n\
    \  local maxExtensionStrengthCount18\n  local maxExtensionStrengthCount19\n  local\
    \ maxExtensionStrengthCount20\n  local maxExtensionStrengthCount21\n  local maxExtensionStrengthCount22\n\
    \  local maxExtensionStrengthCount23\n  local maxExtensionStrengthCount24\n  local\
    \ maxExtensionStrengthCount25\n  local maxExtensionStrengthCount26\n  local maxExtensionStrengthCount27\n\
    \  local maxExtensionStrengthCount28\n  local maxExtensionStrengthCount29\n  local\
    \ maxExtensionStrengthCount30\n  local maxExtensionStrengthCount31\n  local maxExtensionStrengthCount32\n\
    \  local maxExtensionStrengthCount33\n  local maxExtensionStrengthCount34\n  local\
    \ maxExtensionStrengthCount35\n  local maxExtensionStrengthCount36\n  local maxExtensionStrengthCount37\n\
    \  local maxExtensionStrengthCount38\n  local maxExtensionStrengthCount39\n  local\
    \ maxExtensionStrengthCount40\n  local maxExtensionStrengthCount41\n  local maxExtensionStrengthCount42\n\
    \  local maxExtensionStrengthCount43\n  local maxExtensionStrengthCount44\n  local\
    \ maxExtensionStrengthCount45\n  local maxExtensionStrengthCount46\n  local maxExtensionStrengthCount47\n\
    \  local maxExtensionStrengthCount48\n  local maxExtensionStrengthCount49\n  local\
    \ maxExtensionStrengthCount50\n  local \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local count\n    local extension_length\n    local extension_strength\n\
    \    local extension_class\n    local extension_name\n    local extension_length\n\
    \    local extension_strength\n    local extension_class\n    local extension_name\n\
    \    local extension_length\n    local extension_strength\n    local extension_class\n\
    \    local extension_name\n    local extension_length\n    local extension_strength\n\
    \    local extension_class\n    local extension_name\n    local extension_length\n\
    \    local extension_strength\n    local extension_class\n    local extension_name\n\
    \    local extension_length\n    local extension_strength\n    local extension_class\n\
    \    local extension_name\n    local extension_length\n    local extension_strength\n\
    \    local extension_class\n    local extension_name\n    local extension_length\n\
    \    local extension_strength\n    local extension_class\n    local extension_name\n\
    \    local extension_length\n    local extension_strength\n    local extension_class\n\
    \    local extension_name\n    local extension_length\n    local extension_strength\n\
    \    local extension_class\n    local extension_name\n    local extension_length\n\
    \    local extension_strength\n    local extension_class\n    local extension_name\n\
    \    local extension_length\n    local extension_strength\n    local extension_class\n\
    \    local extension_name\n    local extension_length\n    local extension_strength\n\
    \    local extension_class\n    local extension_name\n    local extension_length\n\
    \    local extension_strength\n    local extension_class\n    local extension_name\n\
    \    local extension_length\n    local extension_strength\n    local extension_class\n\
    \    local extension_name\n    local extension_length\n    local extension_strength\n\
    \    local extension_class\n    local extension_name\n    local extension_length\n\
    \    local extension_strength\n    local extension_class\n    local extension_name\n\
    \    local extension_length\n    local extension_strength\n    local extension_class\n\
    \    local extension_name\n    local extension_length\n    local extension_strength\n\
    \    local extension_class\n    local extension_name\n    local extension_length\n\
    \    local extension_strength\n    local extension_class\n    local extension_name\n\
    \    local extension_length\n    local extension_strength\n    local extension_class\n\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local len\n  local\
    \ max\n  local maxIndex\n  local maxStrength\n  local maxExtension\n  local maxExtensionIndex\n\
    \  local maxExtensionStrength\n  local maxExtensionName\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameStrength\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtensionNameLength\n  local maxExtensionNameIndex\n\
    \  local maxExtensionNameLength\n  local maxExtensionNameIndex\n  local maxExtensionNameLength\n\
    \  local maxExtensionNameIndex\n  local maxExtension\n}\n\ncandidate() {\n   \
    \ Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_number\n\
    \    local extension_first_letter\n    local extension_second_letter\n    local\
    \ extension_third_letter\n    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension_third_letter_count\n    local extension_first_letter_count\n\
    \    local extension_second_letter_count\n    local extension_third_letter_count\n\
    \    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension_third_letter_count\n    local extension_first_letter_count\n\
    \    local extension_second_letter_count\n    local extension_third_letter_count\n\
    \    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension_third_letter_count\n    local extension_first_letter_count\n\
    \    local extension_second_letter_count\n    local extension_third_letter_count\n\
    \    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension_third_letter_count\n    local extension_first_letter_count\n\
    \    local extension_second_letter_count\n    local extension_third_letter_count\n\
    \    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension_third_letter_count\n    local extension_first_letter_count\n\
    \    local extension_second_letter_count\n    local extension_third_letter_count\n\
    \    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension_third_letter_count\n    local extension_first_letter_count\n\
    \    local extension_second_letter_count\n    local extension_third_letter_count\n\
    \    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension_third_letter_count\n    local extension_first_letter_count\n\
    \    local extension_second_letter_count\n    local extension_third_letter_count\n\
    \    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension_third_letter_count\n    local extension_first_letter_count\n\
    \    local extension_second_letter_count\n    local extension_third_letter_count\n\
    \    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension_third_letter_count\n    local extension_first_letter_count\n\
    \    local extension_second_letter_count\n    local extension_third_letter_count\n\
    \    local extension_first_letter_count\n    local extension_second_letter_count\n\
    \    local extension\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strength=0\n    local extension\n    local i\n    local\
    \ j\n    local k\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strongest\n  local i\n  local j\n  local strength\n  local extension\n\
    \  local extension_length\n  local extension_strength\n  local extension_class\n\
    \  local extension_class_length\n  local extension_class_strength\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strength=0\n    local extension\n    local\
    \ extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_strength\n    local extension_length\n    local extension_strength\n\
    \    local extension_length\n    local extension_strength\n    local extension_length\n\
    \    local extension_\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054352
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strongest\n  local i\n  local j\n  local strength\n  local extension\n\
    \  local extension_length\n  local extension_strength\n  local extension_class\n\
    \  local extension_class_length\n  local extension_class_strength\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_class_count\n\
    \  local extension_class_count\n  local extension_class_count\n  local extension_\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local strongest_extension=\"\"\n    local extension_strength=0\n\
    \    local extension_number=0\n    local extension_letters=0\n    local extension_letters_cap=0\n\
    \    local extension_letters_sm=0\n    local extension_letters_total=0\n    local\
    \ extension_letters_cap_total=0\n    local extension_letters_sm_total=0\n    local\
    \ extension_letters_total_cap=0\n    local extension_letters_total_sm=0\n    local\
    \ extension_letters_total_cap_total=0\n    local extension_letters_total_sm_total=0\n\
    \    local extension_letters_cap_total_cap=0\n    local extension_letters_cap_total_sm=0\n\
    \    local extension_letters_sm_total_cap=0\n    local extension_letters_sm_total_sm=0\n\
    \    local extension_letters_total_cap_total_cap=0\n    local extension_letters_total_cap_total_sm=0\n\
    \    local extension_letters_total_sm_total_cap=0\n    local extension_letters_total_sm_total_sm=0\n\
    \    local extension_letters_cap_total_cap_total=0\n    local extension_letters_cap_total_sm_total=0\n\
    \    local extension_letters_sm_total_cap_total=0\n    local extension_letters_sm_total_sm_total=0\n\
    \    local extension_letters_total_cap_total_cap_total=0\n    local extension_letters_total_cap_total_sm_total=0\n\
    \    local extension_letters_total_sm_total_cap_total=0\n    local extension_letters_total_sm_total_sm_total=0\n\
    \    local extension_letters_cap_total_cap_total_cap=0\n    local extension_letters_total_cap_total_sm_total=0\n\
    \    local extension_letters_sm_total_cap_total_cap=0\n    local extension_letters_sm_total_sm_total_cap=0\n\
    \    local extension_letters_total_cap_total_cap_total_cap=0\n    local extension_letters_total_cap_total_sm_total_cap=0\n\
    \    local extension_letters_total_sm_total_cap_total_cap=0\n    local extension_letters_total_sm_total_sm_total_cap=0\n\
    \    local extension_letters_cap_total_cap_total_sm_total_cap=0\n    local extension_letters_sm_total_cap_total_cap_total_cap=0\n\
    \    local extension_letters_sm_total_sm_total_cap_total_cap=0\n    local extension_letters_total_cap\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extension\n  local i\n  local j\n  local k\n  local\
    \ len\n  local max\n  local min\n  local m\n  local name\n  local s\n  local strength_str\n\
    \  local strength_str_len\n  local strength_str_max\n  local strength_str_min\n\
    \  local strength_str_m\n  local strength_str_i\n  local strength_str_j\n  local\
    \ strength_str_k\n  local strength_str_len2\n  local strength_str_len3\n  local\
    \ strength_str_len4\n  local strength_str_len5\n  local strength_str_len6\n  local\
    \ strength_str_len7\n  local strength_str_len8\n  local strength_str_len9\n  local\
    \ strength_str_len10\n  local strength_str_len11\n  local strength_str_len12\n\
    \  local strength_str_len13\n  local strength_str_len14\n  local strength_str_len15\n\
    \  local strength_str_len16\n  local strength_str_len17\n  local strength_str_len18\n\
    \  local strength_str_len19\n  local strength_str_len20\n  local strength_str_len21\n\
    \  local strength_str_len22\n  local strength_str_len23\n  local strength_str_len24\n\
    \  local strength_str_len25\n  local strength_str_len26\n  local strength_str_len27\n\
    \  local strength_str_len28\n  local strength_str_len29\n  local strength_str_len30\n\
    \  local strength_str_len31\n  local strength_str_len32\n  local strength_str_len33\n\
    \  local strength_str_len34\n  local strength_str_len35\n  local strength_str_len36\n\
    \  local strength_str_len37\n  local strength_str_len38\n  local strength_str_len39\n\
    \  local strength_str_len40\n  local strength_str_len41\n  local strength_str_len42\n\
    \  local strength_str_len43\n  local strength_str_len44\n  local strength_str_len45\n\
    \  local strength_str_len46\n  local strength_str_len47\n  local strength_str_len48\n\
    \  local strength_str_len49\n  local strength_str_len50\n  local strength_str_len51\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054353
