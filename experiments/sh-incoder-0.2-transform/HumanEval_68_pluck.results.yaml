language: sh
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ awk '{print $1}' | sort -n | head -1)\n    local smalest_index=0\n    local\
    \ smalest_even_value=0\n    local smalest_even_node=\"\"\n    local smalest_even_node_index=0\n\
    \    local smalest_even_node_even_value=0\n    local smalest_even_node_even_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=false\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ awk '{print $1}' | sort -n | head -n 1)\n    local smalest_index=0\n    local\
    \ smalest_even_value=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ awk '{print $1}' | sort -n | head -n 1)\n    local smalest_index=0\n    local\
    \ smalest_even_value=$(echo $nodes | awk '{print $1}' | sort -n | head -n 2 |\
    \ tail -n 1)\n    local smalest_even_node=$(echo $nodes | awk '{print $1}' | sort\
    \ -n | head -n 2 | tail -n 1)\n    local smalest_even_node_index=0\n    local\
    \ smalest_even_node_even_value=$(echo $nodes | awk '{print $1}' | sort -n | head\
    \ -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo $nodes | awk '{print\
    \ $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local smalest_even_node_index=$(echo\
    \ $nodes | awk '{print $1}' | sort -n | head -n 2 | tail -n 2)\n    local \n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ awk '{print $1}' | sort -n | head -1)\n    local smalest_index=0\n    local\
    \ smalest_node=\"\"\n    local smalest_node_index=0\n    local smalest_node_even_value=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_index2\n  local smalest_index3\n  local smalest_index4\n  local\
    \ smalest_index5\n  local smalest_index6\n  local smalest_index7\n  local smalest_index8\n\
    \  local smalest_index9\n  local smalest_index10\n  local smalest_index11\n  local\
    \ smalest_index12\n  local smalest_index13\n  local smalest_index14\n  local smalest_index15\n\
    \  local smalest_index16\n  local smalest_index17\n  local smalest_index18\n \
    \ local smalest_index19\n  local smalest_index20\n  local smalest_index21\n  local\
    \ smalest_index22\n  local smalest_index23\n  local smalest_index24\n  local smalest_index25\n\
    \  local smalest_index26\n  local smalest_index27\n  local smalest_index28\n \
    \ local smalest_index29\n  local smalest_index30\n  local smalest_index31\n  local\
    \ smalest_index32\n  local smalest_index33\n  local smalest_index34\n  local smalest_index35\n\
    \  local smalest_index36\n  local smalest_index37\n  local smalest_index38\n \
    \ local smalest_index39\n  local smalest_index40\n  local smalest_index41\n  local\
    \ smalest_index42\n  local smalest_index43\n  local smalest_index44\n  local smalest_index45\n\
    \  local smalest_index46\n  local smalest_index47\n  local smalest_index48\n \
    \ local smalest_index49\n  local smalest_index50\n  local smalest_index51\n  local\
    \ smalest_index52\n  local smalest_index53\n  local smalest_index54\n  local smalest_index55\n\
    \  local smalest_index56\n  local smalest_index57\n  local smalest_index58\n \
    \ local smalest_index59\n  local smalest_index60\n  local smalest_index61\n  local\
    \ smalest_index62\n  local smale\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_node\n    local smalest_node_val\n    local smalest_node_index\n\
    \    local smalest_node_val_index\n    local smalest_node_val_even\n    local\
    \ smalest_node_val_even_index\n    local smalest_node_val_odd_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_od\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_node\n    local smalest_node_val\n    local smalest_node_index\n\
    \    local smalest_node_val_index\n    local smalest_node_val_index2\n    local\
    \ smalest_node_val_index3\n    local smalest_node_val_index4\n    local smalest_node_val_index5\n\
    \    local smalest_node_val_index6\n    local smalest_node_val_index7\n    local\
    \ smalest_node_val_index8\n    local smalest_node_val_index9\n    local smalest_node_val_index10\n\
    \    local smalest_node_val_index11\n    local smalest_node_val_index12\n    local\
    \ smalest_node_val_index13\n    local smalest_node_val_index14\n    local smalest_node_val_index15\n\
    \    local smalest_node_val_index16\n    local smalest_node_val_index17\n    local\
    \ smalest_node_val_index18\n    local smalest_node_val_index19\n    local smalest_node_val_index20\n\
    \    local smalest_node_val_index21\n    local smalest_node_val_index22\n    local\
    \ smalest_node_val_index23\n    local smalest_node_val_index24\n    local smalest_node_val_index25\n\
    \    local smalest_node_val_index26\n    local smalest_node_val_index27\n    local\
    \ smalest_node_val_index28\n    local smalest_node_val_index29\n    local smalest_node_val_index30\n\
    \    local smalest_node_val_index31\n    local smalest_node_val_index32\n    local\
    \ smalest_node_val_index33\n    local smalest_node_val_index34\n    local smalest_node_val_index35\n\
    \    local smalest_node_val_index36\n    local smalest_node_val_index37\n    local\
    \ smalest_node_val_index38\n    local smalest_node_val_index39\n    local smalest_node_val_index40\n\
    \    local smalest_node_val_index41\n    local smalest_node_val_index42\n    local\
    \ smalest_node_val_index43\n    local smalest_node_val_index44\n    local smalest_node_val_index45\n\
    \    local smalest_node_val_index46\n    local smalest_node_val_index\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -n 1)\n  local smalest_index=0\n  local smalest_even_value=0\n\
    \  local smalest_even_node=\"\"\n  local smalest_even_node_index=0\n  local smalest_even_node_even_value=0\n\
    \  local smalest_even_node_even_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local sm\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_index_count\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_index2\n\
    \    local smalest_even_index_count_index3\n    local smalest_even_index_count_index4\n\
    \    local smalest_even_index_count_index5\n    local smalest_even_index_count_index6\n\
    \    local smalest_even_index_count_index7\n    local smalest_even_index_count_index8\n\
    \    local smalest_even_index_count_index9\n    local smalest_even_index_count_index10\n\
    \    local smalest_even_index_count_index11\n    local smalest_even_index_count_index12\n\
    \    local smalest_even_index_count_index13\n    local smalest_even_index_count_index14\n\
    \    local smalest_even_index_count_index15\n    local smalest_even_index_count_index16\n\
    \    local smalest_even_index_count_index17\n    local smalest_even_index_count_index18\n\
    \    local smalest_even_index_count_index19\n    local smalest_even_index_count_index20\n\
    \    local smalest_even_index_count_index21\n    local smalest_even_index_count_index22\n\
    \    local smalest_even_index_count_index23\n    local smalest_even_index_count_index24\n\
    \    local smalest_even_index_count_index25\n    local smalest_even_index_count_index26\n\
    \    local smalest_even_index_count_index27\n    local smalest_even_index_count_index28\n\
    \    local smalest_even_index_count_index29\n    local smalest_even_index_count_index30\n\
    \    local smalest_even_index_count_index31\n    local smalest_even_index_count_index32\n\
    \    local smalest_even_index_count_index33\n    local smalest_even_index_count_index34\n\
    \    local smalest_even_index_count_index35\n    local smalest_even_index_count_index36\n\
    \    local smalest_even_index_count_index37\n    local smalest_even_index_count_index38\n\
    \    local smalest_even_index_count_index39\n    local smalest_even_index_count_index40\n\
    \    local smalest_even_index_count_index41\n    local smalest_even_index_count_index42\n\
    \    local smalest_even\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local index\n  local value\n  local node\n  local result\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  \n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_indexes=()\n\
    \    local smalest_even_values=()\n    local smalest_value_index=-1\n    local\
    \ smalest_value_indexes=()\n    local smalest_value_index=0\n    local smalest_value_indexes=()\n\
    \    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local\
    \ smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n\
    \    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local\
    \ smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n\
    \    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local\
    \ smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n\
    \    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local\
    \ smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n\
    \    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local\
    \ smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n\
    \    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local\
    \ smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n\
    \    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local\
    \ smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n\
    \    local smalest_value_indexes=()\n    local smalest_value_indexes=()\n    local\
    \ sm\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_node=-1\n    local smalest_even_node_index=-1\n\
    \    local smalest_even_node_even_value=-1\n    local smalest_even_node_even_index=-1\n\
    \    local smalest_even_node_even_index_count=-1\n    local smalest_even_node_even_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index=-1\n    local smalest_even_node_even_index_count_index_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count=-1\n    local smalest_even_node_even_index_count_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index=-1\n    local\
    \ smalest_even_node_even_index_count_index_count_index_value=-1\n    local smalest_even_node_even_index_count_index_count_index_count=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_index_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_index_count=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -n 1)\n  local smalest_index=0\n  local smalest_node=''\n\
    \  local smalest_node_index=''\n  local smalest_node_even=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd=''\n  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local\
    \ smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n\
    \  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local\
    \ smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local\
    \ smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n\
    \  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local\
    \ smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local\
    \ smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n\
    \  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local\
    \ smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local\
    \ smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n\
    \  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local\
    \ smalest_node_even_index=''\n  local smalest_node_odd_\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_value\n\
    \  local smalest_even_index\n  local smale\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n    local\
    \ smalest_even_value_index\n    local smalest_even_value_index\n    local smalest_even_value_index\n\
    \    local smalest_even_value_index\n    local smalest_even_value_index\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=0\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smale\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ awk '{print $1}' | sort -n | head -n 1)\n    local smalest_index=0\n    local\
    \ smalest_node=\"\"\n    local smalest_even_value=0\n    local smalest_even_index=0\n\
    \    local smalest_even_indexes=\"\"\n    local smalest_even_indexes_sorted=\"\
    \"\n    local smalest_even_indexes_sorted_index=0\n    local smalest_even_indexes_sorted_indexs=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted=\"\"\n    local smalest_even_indexes_sorted_indexes_sorted_index=0\n\
    \    local smalest_even_indexes_sorted_indexes_sorted_indexs=\"\"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_index=0\n\
    \    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexs=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_index=0\n\
    \    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexs=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_index=0\n\
    \    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexs=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_index=0\n\
    \    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n    local smalest_even_indexes_sorted_indexes_sorted_indexes_sorted_indexes_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ tr \" \" \"\\n\" | sort -n | head -n 1 | awk '{print $1}')\n    local smalest_index=0\n\
    \    local smalest_even_value=0\n    local smalest_even_node=\"\"\n    local smalest_even_node_index=0\n\
    \    local smalest_even_node_even_value=0\n    local smalest_even_node_even_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_index_count\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_value\n\
    \    local smalest_even_index_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_node=-1\n    local smalest_even_node_index=-1\n\
    \    local smalest_even_node_even_value=-1\n    local smalest_even_node_even_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_node_val\n  local smalest_node_index\n\
    \  local smalest_node_val_index\n  local smalest_node_val_even\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_even_indexes\n  local smalest_node_val_even_indexes_count\n\
    \  local smalest_node_val_even_indexes_count_index\n  local smalest_node_val_even_indexes_count_indexes\n\
    \  local smalest_node_val_even_indexes_count_indexes_index\n  local smalest_node_val_even_indexes_count_indexes_indexes\n\
    \  local smalest_node_val_even_indexes_count_indexes_indexes_index\n  local smalest_node_val_even_indexes_count_indexes_indexes_indexes_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_indexes_indexes_indexes_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_indexes_indexes_indexes_indexes_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smale\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_node\n    local smalest_node_index\n    local smalest_node_value\n\
    \    local smalest_node_even\n    local smalest_node_odd\n    local smalest_node_even_index\n\
    \    local smalest_node_odd_index\n    local smalest_node_even_value\n    local\
    \ smalest_node_odd_value\n    local smalest_node_even_index\n    local smalest_node_odd_index\n\
    \    local smalest_node_even_value\n    local smalest_node_odd_value\n    local\
    \ smalest_node_even_index\n    local smalest_node_odd_index\n    local smalest_node_even_value\n\
    \    local smalest_node_odd_value\n    local smalest_node_even_index\n    local\
    \ smalest_node_odd_index\n    local smalest_node_even_value\n    local smalest_node_odd_value\n\
    \    local smalest_node_even_index\n    local smalest_node_odd_index\n    local\
    \ smalest_node_even_value\n    local smalest_node_odd_value\n    local smalest_node_even_index\n\
    \    local smalest_node_odd_index\n    local smalest_node_even_value\n    local\
    \ smalest_node_odd_value\n    local smalest_node_even_index\n    local smalest_node_odd_index\n\
    \    local smalest_node_even_value\n    local smalest_node_odd_value\n    local\
    \ smalest_node_even_index\n    local smalest_node_odd_index\n    local smalest_node_even_value\n\
    \    local smalest_node_odd_value\n    local smalest_node_even_index\n    local\
    \ smalest_node_odd_index\n    local smalest_node_even_value\n    local smalest_node_odd_value\n\
    \    local smalest_node_even_index\n    local smalest_node_odd_index\n    local\
    \ smalest_node_even_value\n    local smalest_node_odd_value\n    local smalest_node_even_index\n\
    \    local smalest_node_odd_index\n    local smalest_node_even_value\n    local\
    \ smalest_node_odd_value\n    local smalest_node_even_index\n    local smalest_node_odd_index\n\
    \    local smalest_node_even_value\n    local smalest_node_od\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local index\n  local node\n  local value\n  local smalest_value_count\n\
    \  local smalest_index_count\n  local smalest_node_index\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_indexes=()\n\
    \    local smalest_even_indexes_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_even_indexes_values_count=-1\n    local smalest_even_indexes_values=()\n\
    \    local smalest_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_node=\"\"\n  local smalest_even_value=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index2=0\n  local smalest_even_index3=0\n  local smalest_even_index4=0\n\
    \  local smalest_even_index5=0\n  local smalest_even_index6=0\n  local smalest_even_index7=0\n\
    \  local smalest_even_index8=0\n  local smalest_even_index9=0\n  local smalest_even_index10=0\n\
    \  local smalest_even_index11=0\n  local smalest_even_index12=0\n  local smalest_even_index13=0\n\
    \  local smalest_even_index14=0\n  local smalest_even_index15=0\n  local smalest_even_index16=0\n\
    \  local smalest_even_index17=0\n  local smalest_even_index18=0\n  local smalest_even_index19=0\n\
    \  local smalest_even_index20=0\n  local smalest_even_index21=0\n  local smalest_even_index22=0\n\
    \  local smalest_even_index23=0\n  local smalest_even_index24=0\n  local smalest_even_index25=0\n\
    \  local smalest_even_index26=0\n  local smalest_even_index27=0\n  local smalest_even_index28=0\n\
    \  local smalest_even_index29=0\n  local smalest_even_index30=0\n  local smalest_even_index31=0\n\
    \  local smalest_even_index32=0\n  local smalest_even_index33=0\n  local smalest_even_index34=0\n\
    \  local smalest_even_index35=0\n  local smalest_even_index36=0\n  local smalest_even_index37=0\n\
    \  local smalest_even_index38=0\n  local smalest_even_index39=0\n  local smalest_even_index40=0\n\
    \  local smalest_even_index41=0\n  local smalest_even_index42=0\n  local smalest_even_index43=0\n\
    \  local smalest_even_index44=0\n  local smalest_even_index45=0\n  local smalest_even_index46=0\n\
    \  local smalest_even_index47=0\n  local smale\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_values=-1\n\
    \  local smalest_even_index_count_values_index=-1\n  local smalest_even_index_count_values_values=-1\n\
    \  local smalest_even_index_count_values_values_index=-1\n  local smalest_even_index_count_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_index=-1\n  local smalest_even_index_count_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_index=-1\n  local\
    \ smalest_even_index_count_values_values_values_values_values=-1\n  local smalest_even_index_count_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values_values_values=\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_value=-1\n    local smalest_even_index_count_index=-1\n\
    \    local smalest_even_index_count_value_index=-1\n    local smalest_even_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_value_index_count_value=-1\n    local smalest_even_index_count_value_index_count_index=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index=-1\n    local\
    \ smalest_even_index_count_value_index_count_value_index_count=-1\n    local smalest_even_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_index=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_index=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_index=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_index=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ awk '{print $1}' | sort -n | head -n 1)\n    local smalest_index=0\n    local\
    \ smalest_even_value=0\n    local smalest_even_node=\"\"\n    local smalest_even_node_index=0\n\
    \    local even_values=$(echo $nodes | awk '{print $1}' | sort -n | uniq -d)\n\
    \    for even_value in $even_values; do\n        local even_nodes=$(echo $nodes\
    \ | awk -v even_value=$even_value '$1 == even_value{print $2}')\n        if [\
    \ -z \"$even_nodes\" ]; then\n            continue\n        fi\n        local\
    \ even_node_even_value=$(echo $even_nodes | awk '{print $1}' | sort -n | head\
    \ -n 1)\n        if [ \"$even_node_even_value\" -eq \"$even_node_even_value\"\
    \ ]; then\n            local even_node_index=$(echo $even_nodes | awk '{print\
    \ $1}' | sort -n | head -n 1)\n            if [ \"$even_node_even_value\" -lt\
    \ \"$smalest_even_value\" ]; then\n                smalest_even_value=$even_node_even_value\n\
    \                smalest_even_node=$even_node_even_value\n                smalest_even_node_index=$even_node_index\n\
    \            fi\n        fi\n    done\n    if [ \"$smalest_even_value\" -eq \"\
    $smalest_even_value\" ]; then\n        echo \"$smalest_even_node $smalest_even_node_index\"\
    \n    else\n        echo \"$smalest_value $smalest_index\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=0\n    local smalest_even_index=0\n    local smalest_even_index2=0\n\
    \    local smalest_even_index3=0\n    local smalest_even_index4=0\n    local smalest_even_index5=0\n\
    \    local smalest_even_index6=0\n    local smalest_even_index7=0\n    local smalest_even_index8=0\n\
    \    local smalest_even_index9=0\n    local smalest_even_index10=0\n    local\
    \ smalest_even_index11=0\n    local smalest_even_index12=0\n    local smalest_even_index13=0\n\
    \    local smalest_even_index14=0\n    local smalest_even_index15=0\n    local\
    \ smalest_even_index16=0\n    local smalest_even_index17=0\n    local smalest_even_index18=0\n\
    \    local smalest_even_index19=0\n    local smalest_even_index20=0\n    local\
    \ smalest_even_index21=0\n    local smalest_even_index22=0\n    local smalest_even_index23=0\n\
    \    local smalest_even_index24=0\n    local smalest_even_index25=0\n    local\
    \ smalest_even_index26=0\n    local smalest_even_index27=0\n    local smalest_even_index28=0\n\
    \    local smalest_even_index29=0\n    local smalest_even_index30=0\n    local\
    \ smalest_even_index31=0\n    local smalest_even_index32=0\n    local smalest_even_index33=0\n\
    \    local smalest_even_index34=0\n    local smalest_even_index35=0\n    local\
    \ smalest_even_index36=0\n    local smalest_even_index37=0\n    local smalest_even_index38=0\n\
    \    local smalest_even_index39=0\n    local smalest_even_index40=0\n    local\
    \ smalest_even_index41=0\n    local smalest_even_index42=0\n    local smalest_even_index43=0\n\
    \    local smalest_even_index44=0\n    local smalest_even_index45=0\n    local\
    \ smalest_even_index46=0\n    local smalest_even_index47=0\n    local smalest_even_index48=0\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | tr\
    \ \" \" \"\\n\" | sort -n | head -n 1 | awk '{print $1}')\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_node=\"\"\n  local smalest_even_node_index=0\n\
    \  local smalest_even_node_even_value=0\n  local smalest_even_node_even_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -1)\n  local smalest_index=0\n  local smalest_node\n\
    \  local smalest_index\n  local smalest_value\n  local smalest_index\n  local\
    \ smalest_value\n  local smalest_index\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_value\n  local smalest_index\n  local smalest_value\n  local\
    \ smalest_index\n  local smalest_value\n  local smalest_index\n  local smalest_value\n\
    \  local smalest_index\n  local smalest_value\n  local smalest_index\n  local\
    \ smalest_value\n  local smalest_index\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_value\n  local smalest_index\n  local smalest_value\n  local\
    \ smalest_index\n  local smalest_value\n  local smalest_index\n  local smalest_value\n\
    \  local smalest_index\n  local smalest_value\n  local smalest_index\n  local\
    \ smalest_value\n  local smalest_index\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_value\n  local smalest_index\n  local smalest_value\n  local\
    \ smalest_index\n  local smalest_value\n  local smalest_index\n  local smalest_value\n\
    \  local smalest_index\n  local smalest_value\n  local smalest_index\n  local\
    \ smalest_value\n  local smalest_index\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_value\n  local smalest_index\n  local smalest_value\n  local\
    \ smalest_index\n  local smalest_value\n  local smalest_index\n  local smalest_value\n\
    \  local smalest_index\n  local smalest_value\n  local smalest_index\n  local\
    \ smalest_value\n  local smalest_index\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_value\n  local smalest_index\n  local smalest_value\n  local\
    \ smalest_index\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_node\n    local smalest_node_val\n    local smalest_node_index\n\
    \    local smalest_node_val_even\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd\n    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \    local smalest_node_val_odd_index\n    local smalest_node_val_even_index\n\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_node=-1\n    local smalest_even_node_index=-1\n\
    \    local smalest_even_node_even_value=-1\n    local smalest_even_node_even_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smalest_even_index=0\n    local smalest_even_index=0\n    local smalest_even_index=0\n\
    \    local smale\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_node\n  local smalest_node_val\n  local smalest_node_index\n\
    \  local smalest_node_val_even\n  local smalest_node_val_even_index\n  local smalest_node_val_odd\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local\
    \ smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n\
    \  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local\
    \ smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local\
    \ smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n\
    \  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local\
    \ smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local\
    \ smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n\
    \  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local\
    \ smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local\
    \ smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n\
    \  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local\
    \ smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_even\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ cut -d \" \" -f 1)\n    local smalest_index=0\n    local smalest_even_value=0\n\
    \    local smalest_even_node=\"\"\n    local smalest_even_node_index=0\n    local\
    \ even_values=$(echo $nodes | cut -d \" \" -f 2 | sed 's/^/\"/' | sed 's/$/\"\
    /')\n    for even_values_index in $(seq 0 $((${#even_values}-1)) )\n    do\n \
    \       local even_value=$(echo $even_values | cut -d \" \" -f $even_values_index)\n\
    \        if [ $even_value = $smalest_even_value ]\n        then\n            smalest_even_node=$smalest_even_node\n\
    \            smalest_even_node_index=$even_values_index\n        fi\n    done\n\
    \    if [ $smalest_even_node_index -eq 0 ]\n    then\n        echo \"[]\"\n  \
    \  else\n        echo \"[ '$smalest_even_node', '$smalest_even_node_index' ]\"\
    \n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    /tmp/tmpbgs7fq5f.sh: line 40: [: =: unary operator expected

    '
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_index=0\n  local smalest_even_index_count=0\n\
    \  local smalest_even_index_count_max=0\n  local smalest_even_index_count_max_index=0\n\
    \  local smalest_even_index_count_min=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_min_index=0\n\
    \  local smalest_even_index_count_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_node_index\n  local smalest_node_even\n\
    \  local smalest_node_even_index\n  local smalest_node_even_value\n  local smalest_node_even_index\n\
    \  local smalest_node_even_value\n  local smalest_node_even_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_value\n  local smalest_node_even_index\n\
    \  local smalest_node_even_value\n  local smalest_node_even_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_value\n  local smalest_node_even_index\n\
    \  local smalest_node_even_value\n  local smalest_node_even_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_value\n  local smalest_node_even_index\n\
    \  local smalest_node_even_value\n  local smalest_node_even_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_value\n  local smalest_node_even_index\n\
    \  local smalest_node_even_value\n  local smalest_node_even_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_value\n  local smalest_node_even_index\n\
    \  local smalest_node_even_value\n  local smalest_node_even_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_value\n  local smalest_node_even_index\n\
    \  local smalest_node_even_value\n  local smalest_node_even_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_value\n  local smalest_node_even_index\n\
    \  local smalest_node_even_value\n  local smalest_node_even_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_value\n  local smalest_node_even_index\n\
    \  local smalest_node_even_value\n  \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -1)\n  local smalest_index=0\n  local smalest_node=\"\
    \"\n  local smalest_even_value=0\n  local smalest_even_index=0\n  local smalest_even_indexes=\"\
    \"\n  local smalest_even_indexes_string=\"\"\n  local smalest_even_indexes_string2=\"\
    \"\n  local smalest_even_indexes_string3=\"\"\n  local smalest_even_indexes_string4=\"\
    \"\n  local smalest_even_indexes_string5=\"\"\n  local smalest_even_indexes_string6=\"\
    \"\n  local smalest_even_indexes_string7=\"\"\n  local smalest_even_indexes_string8=\"\
    \"\n  local smalest_even_indexes_string9=\"\"\n  local smalest_even_indexes_string10=\"\
    \"\n  local smalest_even_indexes_string11=\"\"\n  local smalest_even_indexes_string12=\"\
    \"\n  local smalest_even_indexes_string13=\"\"\n  local smalest_even_indexes_string14=\"\
    \"\n  local smalest_even_indexes_string15=\"\"\n  local smalest_even_indexes_string16=\"\
    \"\n  local smalest_even_indexes_string17=\"\"\n  local smalest_even_indexes_string18=\"\
    \"\n  local smalest_even_indexes_string19=\"\"\n  local smalest_even_indexes_string20=\"\
    \"\n  local smalest_even_indexes_string21=\"\"\n  local smalest_even_indexes_string22=\"\
    \"\n  local smalest_even_indexes_string23=\"\"\n  local smalest_even_indexes_string24=\"\
    \"\n  local smalest_even_indexes_string25=\"\"\n  local smalest_even_indexes_string26=\"\
    \"\n  local smalest_even_indexes_string27=\"\"\n  local smalest_even_indexes_string28=\"\
    \"\n  local smalest_even_indexes_string29=\"\"\n  local smalest_even_indexes_string30=\"\
    \"\n  local smalest_even_indexes_string31=\"\"\n  local smalest_even_indexes_string32=\"\
    \"\n  local smalest_even_indexes_string33=\"\"\n  local smalest_even_indexes_string34=\"\
    \"\n  local smalest_even_indexes_string35=\"\"\n  local smalest_even_indexes_string36=\"\
    \"\n  local smalest_even_index\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_index_count\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_index2\n\
    \    local smalest_even_index_count_index3\n    local smalest_even_index_count_index4\n\
    \    local smalest_even_index_count_index5\n    local smalest_even_index_count_index6\n\
    \    local smalest_even_index_count_index7\n    local smalest_even_index_count_index8\n\
    \    local smalest_even_index_count_index9\n    local smalest_even_index_count_index10\n\
    \    local smalest_even_index_count_index11\n    local smalest_even_index_count_index12\n\
    \    local smalest_even_index_count_index13\n    local smalest_even_index_count_index14\n\
    \    local smalest_even_index_count_index15\n    local smalest_even_index_count_index16\n\
    \    local smalest_even_index_count_index17\n    local smalest_even_index_count_index18\n\
    \    local smalest_even_index_count_index19\n    local smalest_even_index_count_index20\n\
    \    local smalest_even_index_count_index21\n    local smalest_even_index_count_index22\n\
    \    local smalest_even_index_count_index23\n    local smalest_even_index_count_index24\n\
    \    local smalest_even_index_count_index25\n    local smalest_even_index_count_index26\n\
    \    local smalest_even_index_count_index27\n    local smalest_even_index_count_index28\n\
    \    local smalest_even_index_count_index29\n    local smalest_even_index_count_index30\n\
    \    local smalest_even_index_count_index31\n    local smalest_even_index_count_index32\n\
    \    local smalest_even_index_count_index33\n    local smalest_even_index_count_index34\n\
    \    local smalest_even_index_count_index35\n    local smalest_even_index_count_index36\n\
    \    local smalest_even_index_count_index37\n    local smalest_even_index_count_index38\n\
    \    local smalest_even_index_count_index39\n    local smalest_even_index_count_index40\n\
    \    local smalest_even_index_count_index41\n    local smalest_even_index_count_index42\n\
    \    local smalest_even\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_value\n\
    \    local smalest_even_index\n    local smale\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=false\n    local smalest_even_index=-1\n    local\
    \ smalest_even_index_count=-1\n    local smalest_even_index_count_prev=-1\n  \
    \  local smalest_even_index_count_prev2=-1\n    local smalest_even_index_count_prev3=-1\n\
    \    local smalest_even_index_count_prev4=-1\n    local smalest_even_index_count_prev5=-1\n\
    \    local smalest_even_index_count_prev6=-1\n    local smalest_even_index_count_prev7=-1\n\
    \    local smalest_even_index_count_prev8=-1\n    local smalest_even_index_count_prev9=-1\n\
    \    local smalest_even_index_count_prev10=-1\n    local smalest_even_index_count_prev11=-1\n\
    \    local smalest_even_index_count_prev12=-1\n    local smalest_even_index_count_prev13=-1\n\
    \    local smalest_even_index_count_prev14=-1\n    local smalest_even_index_count_prev15=-1\n\
    \    local smalest_even_index_count_prev16=-1\n    local smalest_even_index_count_prev17=-1\n\
    \    local smalest_even_index_count_prev18=-1\n    local smalest_even_index_count_prev19=-1\n\
    \    local smalest_even_index_count_prev20=-1\n    local smalest_even_index_count_prev21=-1\n\
    \    local smalest_even_index_count_prev22=-1\n    local smalest_even_index_count_prev23=-1\n\
    \    local smalest_even_index_count_prev24=-1\n    local smalest_even_index_count_prev25=-1\n\
    \    local smalest_even_index_count_prev26=-1\n    local smalest_even_index_count_prev27=-1\n\
    \    local smalest_even_index_count_prev28=-1\n    local smalest_even_index_count_prev29=-1\n\
    \    local smalest_even_index_count_prev30=-1\n    local smalest_even_index_count_prev31=-1\n\
    \    local smalest_even_index_count_prev32=-1\n    local smalest_even_index_count_prev33=-1\n\
    \    local smalest_even_index_count_prev34=-1\n    local smalest_even_index_count_prev35=-1\n\
    \    local smalest_even_index_count_prev\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=0\n  local smalest_even_index2=0\n\
    \  local smalest_even_index3=0\n  local smalest_even_index4=0\n  local smalest_even_index5=0\n\
    \  local smalest_even_index6=0\n  local smalest_even_index7=0\n  local smalest_even_index8=0\n\
    \  local smalest_even_index9=0\n  local smalest_even_index10=0\n  local smalest_even_index11=0\n\
    \  local smalest_even_index12=0\n  local smalest_even_index13=0\n  local smalest_even_index14=0\n\
    \  local smalest_even_index15=0\n  local smalest_even_index16=0\n  local smalest_even_index17=0\n\
    \  local smalest_even_index18=0\n  local smalest_even_index19=0\n  local smalest_even_index20=0\n\
    \  local smalest_even_index21=0\n  local smalest_even_index22=0\n  local smalest_even_index23=0\n\
    \  local smalest_even_index24=0\n  local smalest_even_index25=0\n  local smalest_even_index26=0\n\
    \  local smalest_even_index27=0\n  local smalest_even_index28=0\n  local smalest_even_index29=0\n\
    \  local smalest_even_index30=0\n  local smalest_even_index31=0\n  local smalest_even_index32=0\n\
    \  local smalest_even_index33=0\n  local smalest_even_index34=0\n  local smalest_even_index35=0\n\
    \  local smalest_even_index36=0\n  local smalest_even_index37=0\n  local smalest_even_index38=0\n\
    \  local smalest_even_index39=0\n  local smalest_even_index40=0\n  local smalest_even_index41=0\n\
    \  local smalest_even_index42=0\n  local smalest_even_index43=0\n  local smalest_even_index44=0\n\
    \  local smalest_even_index45=0\n  local smalest_even_index46=0\n  local smalest_even_index47=0\n\
    \  local smalest_even_index48=0\n  \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local even_values=()\n  local even_nodes=()\n  local even_node_index=-1\n \
    \ local even_node_even_value=-1\n  local even_node_even_node=-1\n  local even_node_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_node=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_node_index=-1\n  local smalest_even_node_even_value_index=\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_node_val\n  local smalest_node_index\n\
    \  local smalest_node_val_index\n  local smalest_node_val_index_index\n  local\
    \ smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_node\n  local smalest_node_val\n  local smalest_node_index\n\
    \  local smalest_node_val_index\n  local smalest_node_val_even\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_even_indexes\n  local smalest_node_val_even_indexes_count\n\
    \  local smalest_node_val_even_indexes_count_index\n  local smalest_node_val_even_indexes_count_indexes\n\
    \  local smalest_node_val_even_indexes_count_indexes_count\n  local smalest_node_val_even_indexes_count_indexes_count_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes\n  local smalest_node_val_even_indexes_count_indexes_count_indexes_count\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_indexes\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_index\n\
    \  local smalest_node_val_even_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_indexes_count_indexes_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_value=-1\n  local smalest_even_index_count_index=-1\n\
    \  local smalest_even_index_count_index_value=-1\n  local smalest_even_index_count_index_index=-1\n\
    \  local smalest_even_index_count_index_index_value=-1\n  local smalest_even_index_count_index_index_index=-1\n\
    \  local smalest_even_index_count_index_index_index_value=-1\n  local smalest_even_index_count_index_index_index_index=-1\n\
    \  local smalest_even_index_count_index_index_index_index_value=-1\n  local smalest_even_index_count_index_index_index_index_index=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_value=-1\n  local\
    \ smalest_even_index_count_index_index_index_index_index_index=-1\n  local smalest_even_index_count_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_value=-1\n\
    \  local smalest_even_index_count_index_index_index_index_index_index_index_index_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ awk '{print $1}' | sort -n | head -n 1)\n    local smalest_index=0\n    local\
    \ smalest_node\n    for node in $nodes; do\n        if [ $(( $node % 2 )) -eq\
    \ 0 ]; then\n            if [ $smalest_value -eq $node ]; then\n             \
    \   smalest_index=$(( $smalest_index + 1 ))\n                smalest_node=$node\n\
    \            else\n                if [ $smalest_index -eq 0 ]; then\n       \
    \             smalest_value=$node\n                    smalest_index=$(( $smalest_index\
    \ + 1 ))\n                    smalest_node=$node\n                else\n     \
    \               smalest_value=$node\n                    smalest_index=$(( $smalest_index\
    \ + 1 ))\n                    smalest_node=$node\n                fi\n       \
    \     fi\n        fi\n    done\n    if [ $smalest_index -eq 0 ]; then\n      \
    \  echo []\n    else\n        echo [ $smalest_value $smalest_index ]\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_index_count\n\
    \    local smalest_even_index_count_index\n    local smalest_even_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index\n    local smalest_even_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index\n    local smalest_even_index_count_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local smale\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_node_val\n  local smalest_node_index\n\
    \  local smalest_node_val_index\n  local smalest_node_val_index_index\n  local\
    \ smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n  local smalest_node_val_index_index_index\n\
    \  local smalest_node_val_index_index_index\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_index_count\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index\n  local smalest_even_index_count_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index_count_index\n  local smalest_even_index_count_index_count_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local smalest_even_index_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | cut\
    \ -d' ' -f1 | sort -n | head -n 1)\n  local smalest_index=0\n  local smalest_node=\"\
    \"\n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min_max=-1\n    local smalest_even_index_count_min_index=-1\n\
    \    local smalest_even_index_count_max_index=-1\n    local smalest_even_index_count_min_index_max=-1\n\
    \    local smalest_even_index_count_min_index_max_index=-1\n    local smalest_even_index_count_min_index_max_index_count=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min=-1\n    local\
    \ smalest_even_index_count_min_index_max_index_count_max=-1\n    local smalest_even_index_count_min_index_max_index_count_min_max=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index=-1\n \
    \   local smalest_even_index_count_min_index_max_index_count_max_index=-1\n  \
    \  local smalest_even_index_count_min_index_max_index_count_min_index_max=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count_min=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count_max=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count_min_max=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count_min_index=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count_max_index=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count_min_index_max=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count_min_index_max_index_count=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count_min_index_max_index_count_min=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_min_index_max_index_count_min_index_max_index_count_max=-1\n\
    \    local smalest_even_index_count_min_index_max_index_count_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -n 1)\n  local smalest_index=0\n  local smalest_even_value=0\n\
    \  local smalest_even_node=\"\"\n  local smalest_even_node_index=0\n  local smalest_even_node_even_value=0\n\
    \  local smalest_even_node_even_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local sm\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local even_values=()\n  local even_nodes=()\n  local even_node_index=-1\n \
    \ local even_value=-1\n  local even_node=-1\n  local even_node_count=-1\n  local\
    \ even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_node_count=-1\n  local even_node_count=-1\n  local even_node_count=-1\n\
    \  local even_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local \n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ tr \" \" \"\\n\" | sort -n | head -n 1)\n    local smalest_index=0\n    local\
    \ smalest_even_value=0\n    local smalest_even_index=0\n    local smalest_even_index2=0\n\
    \    local smalest_even_index3=0\n    local smalest_even_index4=0\n    local smalest_even_index5=0\n\
    \    local smalest_even_index6=0\n    local smalest_even_index7=0\n    local smalest_even_index8=0\n\
    \    local smalest_even_index9=0\n    local smalest_even_index10=0\n    local\
    \ smalest_even_index11=0\n    local smalest_even_index12=0\n    local smalest_even_index13=0\n\
    \    local smalest_even_index14=0\n    local smalest_even_index15=0\n    local\
    \ smalest_even_index16=0\n    local smalest_even_index17=0\n    local smalest_even_index18=0\n\
    \    local smalest_even_index19=0\n    local smalest_even_index20=0\n    local\
    \ smalest_even_index21=0\n    local smalest_even_index22=0\n    local smalest_even_index23=0\n\
    \    local smalest_even_index24=0\n    local smalest_even_index25=0\n    local\
    \ smalest_even_index26=0\n    local smalest_even_index27=0\n    local smalest_even_index28=0\n\
    \    local smalest_even_index29=0\n    local smalest_even_index30=0\n    local\
    \ smalest_even_index31=0\n    local smalest_even_index32=0\n    local smalest_even_index33=0\n\
    \    local smalest_even_index34=0\n    local smalest_even_index35=0\n    local\
    \ smalest_even_index36=0\n    local smalest_even_index37=0\n    local smalest_even_index38=0\n\
    \    local smalest_even_index39=0\n    local smalest_even_index40=0\n    local\
    \ smalest_even_index41=0\n    local smalest_even_index42=0\n    local smalest_even_index43=0\n\
    \    local smalest_even_index44=0\n    local smalest_even_index45=0\n    local\
    \ smalest_even_index46=0\n    local smalest_even\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_node\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smale\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_indexes=()\n\
    \  local smalest_even_indexes_count=-1\n  local smalest_even_values=()\n  local\
    \ smalest_even_values_count=-1\n  local smalest_even_values_indexes_count=-1\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_values_indexes=()\n  local smalest_even_values_indexes=()\n\
    \  local smalest_even_value\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_value=-1\n  local smalest_even_index_count_index=-1\n\
    \  local smalest_even_index_count_value_count=-1\n  local smalest_even_index_count_value_index=-1\n\
    \  local smalest_even_index_count_value_index_count=-1\n  local smalest_even_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_value_index_count_index=-1\n  local smalest_even_index_count_value_index_count_value_count=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index=-1\n  local smalest_even_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_index=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_count=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_index=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_count=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_index=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_count=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_count_value=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_value_index_count_value_index_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ tr \" \" \"\\n\" | sort -n | tail -n 1)\n    local smalest_index=0\n    local\
    \ smalest_node=\"\"\n    local smalest_node_val=\"\"\n    local smalest_node_index=0\n\
    \    local smalest_node_val_index=0\n    local smalest_node_val_count=0\n    local\
    \ smalest_node_val_count2=0\n    local smalest_node_val_count3=0\n    local smalest_node_val_count4=0\n\
    \    local smalest_node_val_count5=0\n    local smalest_node_val_count6=0\n  \
    \  local smalest_node_val_count7=0\n    local smalest_node_val_count8=0\n    local\
    \ smalest_node_val_count9=0\n    local smalest_node_val_count10=0\n    local smalest_node_val_count11=0\n\
    \    local smalest_node_val_count12=0\n    local smalest_node_val_count13=0\n\
    \    local smalest_node_val_count14=0\n    local smalest_node_val_count15=0\n\
    \    local smalest_node_val_count16=0\n    local smalest_node_val_count17=0\n\
    \    local smalest_node_val_count18=0\n    local smalest_node_val_count19=0\n\
    \    local smalest_node_val_count20=0\n    local smalest_node_val_count21=0\n\
    \    local smalest_node_val_count22=0\n    local smalest_node_val_count23=0\n\
    \    local smalest_node_val_count24=0\n    local smalest_node_val_count25=0\n\
    \    local smalest_node_val_count26=0\n    local smalest_node_val_count27=0\n\
    \    local smalest_node_val_count28=0\n    local smalest_node_val_count29=0\n\
    \    local smalest_node_val_count30=0\n    local smalest_node_val_count31=0\n\
    \    local smalest_node_val_count32=0\n    local smalest_node_val_count33=0\n\
    \    local smalest_node_val_count34=0\n    local smalest_node_val_count35=0\n\
    \    local smalest_node_val_count36=0\n    local smalest_node_val_count37=0\n\
    \    local smalest_node_val_count38=0\n    local smalest_node_val_count39=0\n\
    \    local smalest_node_val_count40=0\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min_max=-1\n  local smalest_even_index_count_min_max_count=-1\n\
    \  local smalest_even_index_count_min_max_count_min=-1\n  local smalest_even_index_count_min_max_count_max=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max=-1\n  local smalest_even_index_count_min_max_count_min_max_count=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min=-1\n  local\
    \ smalest_even_index_count_min_max_count_min_max_count_max=-1\n  local smalest_even_index_count_min_max_count_min_max_count_min_max=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_max=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_max=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_min=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_max=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_min=-1\n\
    \  local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_indexes=()\n\
    \  local smalest_even_values=()\n  local smalest_value_index=-1\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_indexes=()\n\
    \  local smalest_value_index=0\n  local smalest_value_indexes=()\n  local smalest_value_index\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=0\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node_index=0\n\
    \    local smalest_node_value=0\n    local smalest_node_even_value=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index=0\n  \
    \  local smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local\
    \ smalest_node_even_index=0\n    local smalest_node_even_index=0\n    local smalest_node_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -1)\n  local smalest_index=0\n  local smalest_even_value=0\n\
    \  local smalest_even_node=\"\"\n  local smalest_even_node_index=0\n  local smalest_even_node_even_value=0\n\
    \  local smalest_even_node_even_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum_squared=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum_squared=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum_squared=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum_squared=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum_squared=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum_squared=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum_squared=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum_squared=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum_squared=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_node=-1\n  local smalest_even_node_index=0\n\
    \  local smalest_even_node_even_value=0\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_ev\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=0\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_node_index=0\n    local smalest_node_even_value=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_index_count=0\n\
    \    local smalest_node_even_index_count_index=0\n    local smalest_node_even_index_count_index_count=0\n\
    \    local smalest_node_even_index_count_index_count_index=0\n    local smalest_node_even_index_count_index_count_index_count=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index=0\n   \
    \ local smalest_node_even_index_count_index_count_index_count_index_count=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local smalest_node_even_index_count_index_count_index_count_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smale\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=0\n  local smalest_even_index2=0\n\
    \  local smalest_even_index3=0\n  local smalest_even_index4=0\n  local smalest_even_index5=0\n\
    \  local smalest_even_index6=0\n  local smalest_even_index7=0\n  local smalest_even_index8=0\n\
    \  local smalest_even_index9=0\n  local smalest_even_index10=0\n  local smalest_even_index11=0\n\
    \  local smalest_even_index12=0\n  local smalest_even_index13=0\n  local smalest_even_index14=0\n\
    \  local smalest_even_index15=0\n  local smalest_even_index16=0\n  local smalest_even_index17=0\n\
    \  local smalest_even_index18=0\n  local smalest_even_index19=0\n  local smalest_even_index20=0\n\
    \  local smalest_even_index21=0\n  local smalest_even_index22=0\n  local smalest_even_index23=0\n\
    \  local smalest_even_index24=0\n  local smalest_even_index25=0\n  local smalest_even_index26=0\n\
    \  local smalest_even_index27=0\n  local smalest_even_index28=0\n  local smalest_even_index29=0\n\
    \  local smalest_even_index30=0\n  local smalest_even_index31=0\n  local smalest_even_index32=0\n\
    \  local smalest_even_index33=0\n  local smalest_even_index34=0\n  local smalest_even_index35=0\n\
    \  local smalest_even_index36=0\n  local smalest_even_index37=0\n  local smalest_even_index38=0\n\
    \  local smalest_even_index39=0\n  local smalest_even_index40=0\n  local smalest_even_index41=0\n\
    \  local smalest_even_index42=0\n  local smalest_even_index43=0\n  local smalest_even_index44=0\n\
    \  local smalest_even_index45=0\n  local smalest_even_index46=0\n  local smalest_even_index47=0\n\
    \  local smalest_even_index48=0\n  \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=0\n    local smalest_even_node=-1\n    local smalest_even_node_index=0\n\
    \    local even_values=()\n    local even_nodes=()\n    local even_node_index=-1\n\
    \    local even_node_value=0\n    local even_node_even_value=0\n    local even_node_even_index=-1\n\
    \    local even_node_even_value_index=0\n    local smalest_even_node_value=0\n\
    \    local smalest_even_node_index=0\n    local smalest_even_node_even_value=0\n\
    \    local smalest_even_node_even_index=-1\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local sm\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_node=-1\n  local smalest_even_value=-1\n  local smalest_even_node=-1\n\
    \  local smalest_even_index=-1\n  local even_values=()\n  local even_nodes=()\n\
    \  local even_index=()\n  local even_value\n  local even_node\n  local even_index\n\
    \  local index\n  local value\n  local node\n  local even_values\n  local even_nodes\n\
    \  local even_index\n  local smalest_value\n  local smalest_index\n  local smalest_node\n\
    \  local smalest_even_value\n  local smalest_even_node\n  local smalest_even_index\n\
    \  local even_value\n  local even_node\n  local even_index\n  local index\n  local\
    \ value\n  local node\n  local even_values\n  local even_nodes\n  local even_index\n\
    \  local smalest_value\n  local smalest_index\n  local smalest_node\n  local smalest_even_value\n\
    \  local smalest_even_node\n  local smalest_even_index\n  local even_value\n \
    \ local even_node\n  local even_index\n  local index\n  local value\n  local node\n\
    \  local even_values\n  local even_nodes\n  local even_index\n  local smalest_value\n\
    \  local smalest_index\n  local smalest_node\n  local smalest_even_value\n  local\
    \ smalest_even_node\n  local smalest_even_index\n  local even_value\n  local even_node\n\
    \  local even_index\n  local index\n  local value\n  local node\n  local even_values\n\
    \  local even_nodes\n  local even_index\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_even_value\n  local smalest_even_node\n\
    \  local smalest_even_index\n  local even_value\n  local even_node\n  local even_index\n\
    \  local index\n  local value\n  local node\n  local even_values\n  local even_nodes\n\
    \  local even_index\n  local smalest_value\n  local smalest_index\n  local smalest_node\n\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smale\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_node\n    local smalest_node_val\n    local smalest_node_index\n\
    \    local smalest_node_val_index\n    local smalest_node_val_index_index\n  \
    \  local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n    local smalest_node_val_index_index_index\n\
    \    local smalest_node_val_index_index_index\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local i\n  local j\n  local k\n  local node\n  local\
    \ result\n  local count\n  local smalest_value_count\n  local smalest_index_count\n\
    \  local smalest_node_index\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_node_count\n  local smalest_node_count\n\
    \  local smalest_node_count\n  local smalest_\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_index=-1\n    local smalest_even_index_count_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index=-1\n    local\
    \ smalest_even_index_count_index_count_index_count_index_count=-1\n    local smalest_even_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \    local smalest_even_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ awk '{print $1}' | sort -n | head -n 1)\n    local smalest_index=0\n    local\
    \ smalest_even_value=0\n    local smalest_even_node=\"\"\n    local smalest_even_node_index=0\n\
    \    local smalest_even_node_even_value=0\n    local smalest_even_node_even_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local sm\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -n 1)\n  local smalest_index=0\n  local smalest_even_value=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_node=-1\n    local smalest_even_node_index=-1\n\
    \    local smalest_even_node_even_value=-1\n    local smalest_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_index=-1\n    local smalest_even_node_even_node_even_value=-1\n\
    \    local smalest_even_node_even_node_even_node=-1\n    local smalest_even_node_even_node_even_node_index=-1\n\
    \    local smalest_even_node_even_node_even_node_even_value=-1\n    local smalest_even_node_even_node_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_index=-1\n    local\
    \ smalest_even_node_even_node_even_node_even_node_even_value=-1\n    local smalest_even_node_even_node_even_node_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_index=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_value=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node_index=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_value=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_node_index=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_node_even_value=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_even_node_\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_max=-1\n    local smalest_even_index_count_min=-1\n\
    \    local smalest_even_index_count_sum=-1\n    local smalest_even_index_count_sum2=-1\n\
    \    local smalest_even_index_count_sum3=-1\n    local smalest_even_index_count_sum4=-1\n\
    \    local smalest_even_index_count_sum5=-1\n    local smalest_even_index_count_sum6=-1\n\
    \    local smalest_even_index_count_sum7=-1\n    local smalest_even_index_count_sum8=-1\n\
    \    local smalest_even_index_count_sum9=-1\n    local smalest_even_index_count_sum10=-1\n\
    \    local smalest_even_index_count_sum11=-1\n    local smalest_even_index_count_sum12=-1\n\
    \    local smalest_even_index_count_sum13=-1\n    local smalest_even_index_count_sum14=-1\n\
    \    local smalest_even_index_count_sum15=-1\n    local smalest_even_index_count_sum16=-1\n\
    \    local smalest_even_index_count_sum17=-1\n    local smalest_even_index_count_sum18=-1\n\
    \    local smalest_even_index_count_sum19=-1\n    local smalest_even_index_count_sum20=-1\n\
    \    local smalest_even_index_count_sum21=-1\n    local smalest_even_index_count_sum22=-1\n\
    \    local smalest_even_index_count_sum23=-1\n    local smalest_even_index_count_sum24=-1\n\
    \    local smalest_even_index_count_sum25=-1\n    local smalest_even_index_count_sum26=-1\n\
    \    local smalest_even_index_count_sum27=-1\n    local smalest_even_index_count_sum28=-1\n\
    \    local smalest_even_index_count_sum29=-1\n    local smalest_even_index_count_sum30=-1\n\
    \    local smalest_even_index_count_sum31=-1\n    local smalest_even_index_count_sum32=-1\n\
    \    local smalest_even_index_count_sum33=-1\n    local smalest_even_index_count_sum34=-1\n\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local i\n  local j\n  local node\n  local smalest_value_index\n\
    \  local smalest_value_node\n  local smalest_index_node\n  local smalest_index_value\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n  local smalest_index_value_index\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n  local smalest_index_value_index\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n  local smalest_index_value_index\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n  local smalest_index_value_index\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n  local smalest_index_value_index\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n  local smalest_index_value_index\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n  local smalest_index_value_index\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n  local smalest_index_value_index\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n  local smalest_index_value_index\n\
    \  local smalest_index_value_index\n  local smalest_index_value_index\n  local\
    \ smalest_index_value_index\n  local smalest_index_value_index\n\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_node\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_node_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index_index\n  local\
    \ smalest_node_even_index_index\n  local smalest_node_even_index_index_index\n\
    \  local smalest_node_even_index_index_index_index\n  local smalest_node_even_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index\n  local smalest_node_even_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index\n \
    \ local smalest_node_even_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smalest_node_even_index_index_index_index_index_index_index_index_index_index_index_index_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_value=0\n\
    \  local smalest_even_index_count_value_count=-1\n  local smalest_even_index_count_value_index=-1\n\
    \  local smalest_even_index_count_value_count_index=-1\n  local smalest_even_index_count_value_count_value=0\n\
    \  local smalest_even_index_count_value_count_value_count=-1\n  local smalest_even_index_count_value_count_value_index=-1\n\
    \  local smalest_even_index_count_value_count_value_count_index=-1\n  local smalest_even_index_count_value_count_value_count_value=0\n\
    \  local smalest_even_index_count_value_count_value_count_value_count=-1\n  local\
    \ smalest_even_index_count_value_count_value_count_value_index=-1\n  local smalest_even_index_count_value_count_value_count_value_count_index=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value=0\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_index=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_index=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value=0\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value_count=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value_index=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value_count_index=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value_count_value=0\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value_count_value_count=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value_count_value_index=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value_count_value_count_index=-1\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value_count_value_count_value=0\n\
    \  local smalest_even_index_count_value_count_value_count_value_count_value_count_value_count_value_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -1)\n  local smalest_index=0\n  local smalest_even_value=0\n\
    \  local smalest_even_node=\"\"\n  local smalest_even_node_index=0\n  local smalest_even_node_even_value=0\n\
    \  local smalest_even_node_even_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_min=-1\n    local smalest_even_index_count_max=-1\n\
    \    local smalest_even_index_count_min_max=-1\n    local smalest_even_index_count_min_max_count=-1\n\
    \    local smalest_even_index_count_min_max_count_min=-1\n    local smalest_even_index_count_min_max_count_max=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max=-1\n    local smalest_even_index_count_min_max_count_min_max_count=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min=-1\n    local\
    \ smalest_even_index_count_min_max_count_min_max_count_max=-1\n    local smalest_even_index_count_min_max_count_min_max_count_min_max=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_max=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_max=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_min=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_max=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_min=-1\n\
    \    local smalest_even_index_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_count_min_max_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_index_count=-1\n  local smalest_even_node_even_index_count_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count=-1\n  local smalest_even_node_even_index_count_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index=-1\n  local\
    \ smalest_even_node_even_index_count_index_count_value_index_count=-1\n  local\
    \ smalest_even_node_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count_\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_node=\"\"\n  local smalest_even_node_index=0\n\
    \  local even_values=()\n  local even_nodes=()\n  local even_node_index=0\n  local\
    \ even_node_even_value=0\n  local even_node_even_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n  local even_node_even_value_index=0\n\
    \  local even_node_even_value_index=0\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index=-1\n  local smalest_even_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index=-1\n  local smalest_even_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index=-1\n  local smalest_even_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index=-1\n  local smalest_even_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | tr\
    \ ' ' '\\n' | sort -n | head -n 1 | cut -d ' ' -f 2)\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_even_value=0\n  local smalest_even_node=\"\
    \"\n  local smalest_even_index=0\n  local smalest_even_node_index=0\n  local smalest_even_node_val=\"\
    \"\n  local smalest_even_node_val_index=0\n  local smalest_even_node_val_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_index=0\n  local smalest_even_node_val_indexes_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_indexes_index=0\n  local smalest_even_node_val_indexes_indexes_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_indexes_indexes_index=0\n  local smalest_even_node_val_indexes_indexes_indexes_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_indexes_indexes_indexes_index=0\n  local\
    \ smalest_even_node_val_indexes_indexes_indexes_indexes_indexes=\"\"\n  local\
    \ smalest_even_node_val_indexes_indexes_indexes_indexes_indexes_index=0\n  local\
    \ smalest_even_node_val_indexes_indexes_indexes_indexes_indexes_indexes=\"\"\n\
    \  local smalest_even_node_val_indexes_indexes_indexes_indexes_indexes_indexes_index=0\n\
    \  local smalest_even_node_val_indexes_indexes_indexes_indexes_indexes_indexes_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index=0\n\
    \  local smalest_even_node_val_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index=0\n\
    \  local smalest_even_node_val_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -1)\n  local smalest_index=0\n  local smalest_even_value=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local i\n  local j\n  local k\n  local node\n  local\
    \ value\n  local index\n  local smalest_node_index\n  local smalest_node_even_value\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local smalest_node_even_index\n  local smalest_node_even_index\n\
    \  local smalest_node_even_index\n  local sm\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_value=-1\n    local smalest_even_index_count_index=-1\n\
    \    local smalest_even_index_count_value_index=-1\n    local smalest_even_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_value_index_count_value=-1\n    local smalest_even_index_count_value_index_count_index=0\n\
    \    local smalest_even_index_count_value_index_count_value=0\n    local smalest_even_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count=0\n  \
    \  local smalest_even_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=0\n  local smalest_index=0\n\
    \  local smalest_node\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local sm\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index=-1\n  local smalest_even_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index=-1\n  local smalest_even_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=-1\n\
    \  local smalest_even_index_count_index_count_index_count_index_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_index=0\n  local smalest_even_index_count=0\n\
    \  local smalest_even_index_count2=0\n  local smalest_even_index_count3=0\n  local\
    \ smalest_even_index_count4=0\n  local smalest_even_index_count5=0\n  local smalest_even_index_count6=0\n\
    \  local smalest_even_index_count7=0\n  local smalest_even_index_count8=0\n  local\
    \ smalest_even_index_count9=0\n  local smalest_even_index_count10=0\n  local smalest_even_index_count11=0\n\
    \  local smalest_even_index_count12=0\n  local smalest_even_index_count13=0\n\
    \  local smalest_even_index_count14=0\n  local smalest_even_index_count15=0\n\
    \  local smalest_even_index_count16=0\n  local smalest_even_index_count17=0\n\
    \  local smalest_even_index_count18=0\n  local smalest_even_index_count19=0\n\
    \  local smalest_even_index_count20=0\n  local smalest_even_index_count21=0\n\
    \  local smalest_even_index_count22=0\n  local smalest_even_index_count23=0\n\
    \  local smalest_even_index_count24=0\n  local smalest_even_index_count25=0\n\
    \  local smalest_even_index_count26=0\n  local smalest_even_index_count27=0\n\
    \  local smalest_even_index_count28=0\n  local smalest_even_index_count29=0\n\
    \  local smalest_even_index_count30=0\n  local smalest_even_index_count31=0\n\
    \  local smalest_even_index_count32=0\n  local smalest_even_index_count33=0\n\
    \  local smalest_even_index_count34=0\n  local smalest_even_index_count35=0\n\
    \  local smalest_even_index_count36=0\n  local smalest_even_index_count37=0\n\
    \  local smalest_even_index_count38=0\n  local smalest_even_index_count39=0\n\
    \  local smalest_even_index_count40=0\n  local smalest_even_index_count41=0\n\
    \  local smalest_even_index_count42=0\n  local smalest_even_index_count43=0\n\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=-1\n    local smalest_even_node=-1\n    local smalest_even_node_index=-1\n\
    \    local smalest_even_node_even_value=-1\n    local smalest_even_node_even_index=-1\n\
    \    local smalest_even_node_even_index_count=-1\n    local smalest_even_node_even_index_count_index=-1\n\
    \    local smalest_even_node_even_index_count_index_count=-1\n    local smalest_even_node_even_index_count_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index=-1\n   \
    \ local smalest_even_node_even_index_count_index_count_value_index_count=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_node_even_index_count_index_count_value_index_\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_indexes=()\n\
    \  local smalest_even_values=()\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n  local\
    \ smalest_even_indexes_count=-1\n  local smalest_even_values_count=-1\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=false\n    local smalest_even_index=-1\n    local\
    \ smalest_even_index_count=-1\n    local smalest_even_index_count_value=-1\n \
    \   local smalest_even_index_count_index=-1\n    local smalest_even_index_count_even_value=false\n\
    \    local smalest_even_index_count_even_index=-1\n    local smalest_even_index_count_even_index_count=-1\n\
    \    local smalest_even_index_count_even_index_count_value=-1\n    local smalest_even_index_count_even_index_count_index=-1\n\
    \    local smalest_even_index_count_even_index_count_even_value=false\n    local\
    \ smalest_even_index_count_even_index_count_even_index=-1\n    local smalest_even_index_count_even_index_count_even_index_count=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_value=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_index=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_value=false\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_value=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_index=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_even_value=false\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_even_index=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_even_index_count=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_even_index_count_value=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_even_index_count_index=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_even_index_count_even_value=false\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_even_index_count_even_index=-1\n\
    \    local smalest_even_index_count_even_index_count_even_index_count_even_index_count_even_index_count_even_index_count=-1\n\
    \    local smalest_even_index_count_even_index_count_\n}\n\ncandidate() {\n  \
    \  pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smale\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=0\n    local smalest_index=0\n\
    \    local smalest_node\n    local smalest_node_index\n    local smalest_node_even_value\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even_index\n    local\
    \ smalest_node_even_index\n    local smalest_node_even_index\n    local smalest_node_even_index\n\
    \    local smalest_node_even_index\n    local smalest_node_even\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=0\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_node_index=0\n    local smalest_node_even_value=0\n\
    \    local smalest_node_even_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local smalest_node_even_value_index=0\n    local smalest_node_even_value_index=0\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=0\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local smalest_index=0\n  local smalest_node=\"\"\
    \n  local smalest_index=0\n  local smalest_node=\"\"\n  local smalest_index=0\n\
    \  local smalest_node=\"\"\n  local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_even_value\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smale\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_node=-1\n    local smalest_even_node_index=-1\n\
    \    local smalest_even_node_even_value=-1\n    local smalest_even_node_even_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_indexes=()\n\
    \  local smalest_even_values=()\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smalest_values=()\n\
    \  local smalest_value_index=-1\n  local smalest_value_indexes=()\n  local smale\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local even_values=()\n  local even_nodes=()\n  local even_node_index=-1\n \
    \ local even_value_index=-1\n  local even_node_even_value=-1\n  local even_node_even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_node_even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_node_even_value_index=-1\n  local even_value_index=-1\n  local even_node_even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_node_even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_node_even_value_index=-1\n  local even_value_index=-1\n  local even_node_even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_node_even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_node_even_value_index=-1\n  local even_value_index=-1\n  local even_node_even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_node_even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_node_even_value_index=-1\n  local even_value_index=-1\n  local even_node_even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_node_even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_node_even_value_index=-1\n  local even_value_index=-1\n  local even_node_even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_node_even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_node_even_value_index=-1\n  local even_value_index=-1\n  local even_node_even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_node_even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_node_even_value_index=-1\n  local even_value_index=-1\n  local even_node_even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_node_even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_node_even_value_index=-1\n  local even_value_index=-1\n  local even_node_even_value_index=-1\n\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_index_value\n    local smalest_index_value_2\n    local smalest_index_value_3\n\
    \    local smalest_index_value_4\n    local smalest_index_value_5\n    local smalest_index_value_6\n\
    \    local smalest_index_value_7\n    local smalest_index_value_8\n    local smalest_index_value_9\n\
    \    local smalest_index_value_10\n    local smalest_index_value_11\n    local\
    \ smalest_index_value_12\n    local smalest_index_value_13\n    local smalest_index_value_14\n\
    \    local smalest_index_value_15\n    local smalest_index_value_16\n    local\
    \ smalest_index_value_17\n    local smalest_index_value_18\n    local smalest_index_value_19\n\
    \    local smalest_index_value_20\n    local smalest_index_value_21\n    local\
    \ smalest_index_value_22\n    local smalest_index_value_23\n    local smalest_index_value_24\n\
    \    local smalest_index_value_25\n    local smalest_index_value_26\n    local\
    \ smalest_index_value_27\n    local smalest_index_value_28\n    local smalest_index_value_29\n\
    \    local smalest_index_value_30\n    local smalest_index_value_31\n    local\
    \ smalest_index_value_32\n    local smalest_index_value_33\n    local smalest_index_value_34\n\
    \    local smalest_index_value_35\n    local smalest_index_value_36\n    local\
    \ smalest_index_value_37\n    local smalest_index_value_38\n    local smalest_index_value_39\n\
    \    local smalest_index_value_40\n    local smalest_index_value_41\n    local\
    \ smalest_index_value_42\n    local smalest_index_value_43\n    local smalest_index_value_44\n\
    \    local smalest_index_value_45\n    local smalest_index_value_46\n    local\
    \ smalest_index_value_47\n    local smalest_index_value_48\n    local smalest_index_value_49\n\
    \    local smalest_index_value_50\n    local smalest_index_value_51\n    local\
    \ smalest_index_value_52\n    local smalest_index_value_53\n    local smalest_index_value_54\n\
    \    local smalest_index_value_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_node=-1\n  local smalest_even_node_index=0\n\
    \  local smalest_even_node_even_value=0\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_indexes=0\n\
    \  local smalest_even_node_even_values=0\n  local smalest_even_node_even_values_index=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_even_node_even_values_indexes=0\n\
    \  local smalest_even_node_even_values_indexes=0\n  local smalest_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_node=-1\n    local smalest_even_node_index=-1\n\
    \    local smalest_even_node_even_value=-1\n    local smalest_even_node_even_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_index=0\n  local smalest_even_index_count=0\n\
    \  local smalest_even_index_count_max=0\n  local smalest_even_index_count_min=0\n\
    \  local smalest_even_index_count_min_index=0\n  local smalest_even_index_count_max_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \  local smalest_even_index_count_min_index_index=0\n  local smalest_even_index_count_max_index_index=0\n\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ awk '{print $1}' | sort -n | head -n 1)\n    local smalest_index=0\n    local\
    \ smalest_even_value=0\n    local smalest_even_nodes=\"\"\n    local smalest_even_node_index=0\n\
    \    local smalest_even_node_even_value=0\n    local smalest_even_node_even_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local even_values=()\n  local even_nodes=()\n  local even_node_index=-1\n \
    \ local even_node_value=-1\n  local even_node_even_value=-1\n  local even_node_even_index=-1\n\
    \  local smalest_even_node_value=-1\n  local smalest_even_node_index=-1\n  local\
    \ smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n \
    \ local smalest_node_value=-1\n  local smalest_node_index=-1\n  local smalest_node_even_value=-1\n\
    \  local smalest_node_even_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \  local smalest_node_even_value_index=-1\n  local smalest_node_even_value_index=-1\n\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -1)\n  local smalest_index=0\n  local smalest_node=\"\
    \"\n  local smalest_even_value=0\n  local smalest_even_node=\"\"\n  local smalest_even_node_index=0\n\
    \  local smalest_even_node_val=0\n  local smalest_even_node_val_index=0\n  local\
    \ smalest_even_node_val_indexes=\"\"\n  local smalest_even_node_val_indexes_sorted=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_index=0\n  local smalest_even_node_val_indexes_sorted_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted=\"\"\n  local\
    \ smalest_even_node_val_indexes_sorted_indexes_sorted_index=0\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_index=0\n\
    \  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_index=0\n\
    \  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_index=0\n\
    \  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted=\"\
    \"\n  local smalest_even_node_val_indexes_sorted_indexes_sorted_indexes_sorted_indexes_sorted_indexes_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value=-1\n  local smalest_even_index_count_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count=-1\n  local smalest_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | awk\
    \ '{print $1}' | sort -n | head -n 1)\n  local smalest_index=0\n  local smalest_node=''\n\
    \  local smalest_node_index=''\n  local smalest_node_even=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd=''\n  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local\
    \ smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n\
    \  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local\
    \ smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local\
    \ smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n\
    \  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local\
    \ smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local\
    \ smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n\
    \  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local\
    \ smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n\
    \  local smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local\
    \ smalest_node_odd_index=''\n  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n\
    \  local smalest_node_even_index=''\n  local smalest_node_odd_index=''\n  local\
    \ smalest_node_even_index=''\n  local smalest_node_odd_\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_node\n  local smalest_node_val\n  local smalest_node_index\n\
    \  local smalest_node_val_index\n  local smalest_node_val_even\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_odd\n  local smalest_node_val_odd_index\n\
    \  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local\
    \ smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local\
    \ smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n\
    \  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local\
    \ smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local\
    \ smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n\
    \  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local\
    \ smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local\
    \ smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n\
    \  local smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local\
    \ smalest_node_val_even_index\n  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n\
    \  local smalest_node_val_odd_index\n  local smalest_node_val_even_index\n  local\
    \ smalest_node_val_odd_index\n  local smalest_node_val_even_index\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_node=-1\n    local smalest_even_value=-1\n    local smalest_even_index=-1\n\
    \    local smalest_even_index_count=-1\n    local smalest_even_index_count_node=-1\n\
    \    local smalest_even_index_count_node_value=-1\n    local smalest_even_index_count_node_even_value=-1\n\
    \    local smalest_even_index_count_node_even_index=-1\n    local smalest_even_index_count_node_even_index_count=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node=-1\n    local smalest_even_index_count_node_even_index_count_node_value=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_value=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_value=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_value=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_index=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count_node=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count_node_value=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count_node_even_value=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count_node_even_index=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count_node=-1\n\
    \    local smalest_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count_node_even_index_count_node_value=-1\n\
    \    local smalest_even_index_count_node_even_index_\n}\n\ncandidate() {\n   \
    \ pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_value=-1\n    local smalest_even_index_count_index=-1\n\
    \    local smalest_even_index_count_value_index=-1\n    local smalest_even_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_value_index_count_value=-1\n    local smalest_even_index_count_value_index_count_index=0\n\
    \    local smalest_even_index_count_value_index_count_value=0\n    local smalest_even_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count=0\n  \
    \  local smalest_even_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    \    local smalest_even_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=0\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=0\n    local smalest_even_node=0\n    local smalest_even_node_index=0\n\
    \    local smalest_even_node_even_value=0\n    local smalest_even_node_even_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ tr \" \" \"\\n\" | sort -n | head -n 1 | cut -d \" \" -f 2)\n    local smalest_index=0\n\
    \    local smalest_even_value=0\n    local smalest_even_node=\"\"\n    local smalest_even_node_index=0\n\
    \    local smalest_even_node_even_value=0\n    local smalest_even_node_even_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_min=-1\n  local smalest_even_index_count_max=-1\n\
    \  local smalest_even_index_count_sum=-1\n  local smalest_even_index_count_sum_min=-1\n\
    \  local smalest_even_index_count_sum_max=-1\n  local smalest_even_index_count_sum_sum=-1\n\
    \  local smalest_even_index_count_sum_sum_min=-1\n  local smalest_even_index_count_sum_sum_max=-1\n\
    \  local smalest_even_index_count_sum_sum_sum=-1\n  local smalest_even_index_count_sum_sum_sum_min=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_max=-1\n  local smalest_even_index_count_sum_sum_sum_sum=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_min=-1\n  local smalest_even_index_count_sum_sum_sum_max=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_sum=-1\n  local smalest_even_index_count_sum_sum_sum_min=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_max=-1\n  local smalest_even_index_count_sum_sum_sum_sum=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_min=-1\n  local smalest_even_index_count_sum_sum_sum_max=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_sum=-1\n  local smalest_even_index_count_sum_sum_sum_min=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_max=-1\n  local smalest_even_index_count_sum_sum_sum_sum=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_min=-1\n  local smalest_even_index_count_sum_sum_sum_max=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_sum=-1\n  local smalest_even_index_count_sum_sum_sum_min=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_max=-1\n  local smalest_even_index_count_sum_sum_sum_sum=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_min=-1\n  local smalest_even_index_count_sum_sum_sum_max=-1\n\
    \  local smalest_even_index_count_sum_sum_sum_sum=-1\n  local smalest_even\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_indexes=()\n\
    \  local smalest_even_values=()\n  local smalest_value_index=-1\n  local smalest_value_indexes=()\n\
    \  local smalest_value_indexes=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_values=()\n\
    \  local smalest_values=()\n  local smalest_values=()\n  local smalest_\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smalest_even_node_even_value_index=-1\n\
    \  local smalest_even_node_even_value_index=-1\n  local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_values=-1\n\
    \  local smalest_even_index_count_value_index=-1\n  local smalest_even_index_count_value_indexes=-1\n\
    \  local smalest_even_index_count_value_indexes_count=-1\n  local smalest_even_index_count_value_indexes_count_index=-1\n\
    \  local smalest_even_index_count_value_indexes_count_values=-1\n  local smalest_even_index_count_value_indexes_count_value_index=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes=-1\n  local\
    \ smalest_even_index_count_value_indexes_count_value_indexes_count=-1\n  local\
    \ smalest_even_index_count_value_indexes_count_value_indexes_count_index=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_values=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_index=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes_count=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes_count_index=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes_count_values=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes_count_value_index=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes_count_value_indexes=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes_count_value_indexes_count=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes_count_value_indexes_count_index=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes_count_value_indexes_count_values=-1\n\
    \  local smalest_even_index_count_value_indexes_count_value_indexes_count_value_indexes_count_value_indexes_count_value_index=-1\n\
    \  local smalest_even\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local smalest_node\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_index\n  local \n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smale\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_even_value\n  local smalest_even_index\n  local smalest_even_index_count\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_count_index\n  local smalest_even_index_count_value\n\
    \  local smalest_even_index_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ cut -d \" \" -f 1)\n    local smalest_index=0\n    local smalest_even_value=0\n\
    \    local smalest_even_node=\"\"\n    local smalest_even_node_index=0\n    local\
    \ smalest_even_node_even_value=0\n    local smalest_even_node_even_index=0\n \
    \   local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=0\n    local smalest_even_nodes=\"\"\n    local\
    \ smalest_even_node_index=0\n    local smalest_even_node_even_value=0\n    local\
    \ smalest_even_node_even_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_ev\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local smalest_even_node_even_value=-1\n  local smalest_even_node_even_index=-1\n\
    \  local smalest_even_node_even_index_count=-1\n  local smalest_even_node_even_index_count_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count=-1\n  local smalest_even_node_even_index_count_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index=-1\n  local\
    \ smalest_even_node_even_index_count_index_count_value_index_count=-1\n  local\
    \ smalest_even_node_even_index_count_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \  local smalest_even_node_even_index_count_index_count_value_index_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_even_value\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_even_index\n  local smalest_even_index\n\
    \  local smalest_even_index\n  local smalest_\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_index=-1\n  local smalest_even_index_count=-1\n\
    \  local smalest_even_index_count_index=-1\n  local smalest_even_index_count_values=-1\n\
    \  local smalest_even_index_count_values_index=-1\n  local smalest_even_index_count_values_values=-1\n\
    \  local smalest_even_index_count_values_values_index=-1\n  local smalest_even_index_count_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_index=-1\n  local smalest_even_index_count_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_index=-1\n  local\
    \ smalest_even_index_count_values_values_values_values_values=-1\n  local smalest_even_index_count_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values_values=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values_values_index=-1\n\
    \  local smalest_even_index_count_values_values_values_values_values_values_values_values_values_values_values_values_values_values=\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | cut\
    \ -d' ' -f1 | sort -n | head -n 1)\n  local smalest_index=0\n  local smalest_node=''\n\
    \  local smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n \
    \ local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n  local\
    \ smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n\
    \  local smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n \
    \ local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n  local\
    \ smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n\
    \  local smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n \
    \ local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n  local\
    \ smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n\
    \  local smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n \
    \ local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n  local\
    \ smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n\
    \  local smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n \
    \ local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n  local\
    \ smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n\
    \  local smalest_index=0\n  local smalest_node=''\n  local smalest_index=0\n \
    \ local smalest_node=''\n  local smalest_index=0\n  local smalest_node=''\n  local\
    \ smalest_index=0\n  local smalest_node=''\n  \n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_index2\n  local smalest_index3\n  local smalest_index4\n  local\
    \ smalest_index5\n  local smalest_index6\n  local smalest_index7\n  local smalest_index8\n\
    \  local smalest_index9\n  local smalest_index10\n  local smalest_index11\n  local\
    \ smalest_index12\n  local smalest_index13\n  local smalest_index14\n  local smalest_index15\n\
    \  local smalest_index16\n  local smalest_index17\n  local smalest_index18\n \
    \ local smalest_index19\n  local smalest_index20\n  local smalest_index21\n  local\
    \ smalest_index22\n  local smalest_index23\n  local smalest_index24\n  local smalest_index25\n\
    \  local smalest_index26\n  local smalest_index27\n  local smalest_index28\n \
    \ local smalest_index29\n  local smalest_index30\n  local smalest_index31\n  local\
    \ smalest_index32\n  local smalest_index33\n  local smalest_index34\n  local smalest_index35\n\
    \  local smalest_index36\n  local smalest_index37\n  local smalest_index38\n \
    \ local smalest_index39\n  local smalest_index40\n  local smalest_index41\n  local\
    \ smalest_index42\n  local smalest_index43\n  local smalest_index44\n  local smalest_index45\n\
    \  local smalest_index46\n  local smalest_index47\n  local smalest_index48\n \
    \ local smalest_index49\n  local smalest_index50\n  local smalest_index51\n  local\
    \ smalest_index52\n  local smalest_index53\n  local smalest_index54\n  local smalest_index55\n\
    \  local smalest_index56\n  local smalest_index57\n  local smalest_index58\n \
    \ local smalest_index59\n  local smalest_index60\n  local smalest_index61\n  local\
    \ smalest_index62\n  local smale\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local smalest_node\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_index_count=-1\n\
    \    local smalest_even_index_count_index=-1\n    local smalest_even_index_count_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count=-1\n    local\
    \ smalest_even_index_count_index_count_value_index_count_value=-1\n    local smalest_even_index_count_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index=-1\n\
    \    local smalest_even_index_count_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count_value_index_count=-1\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smalest_even_index=0\n  local smalest_even_index=0\n  local smalest_even_index=0\n\
    \  local smale\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local even_values=()\n  local even_nodes=()\n  local even_node_index=-1\n \
    \ local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  local even_value_index=-1\n\
    \  local even_value_index=-1\n  local even_value_index=-1\n  \n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=0\n    local smalest_even_index=0\n    local smalest_even_index2=0\n\
    \    local smalest_even_index3=0\n    local smalest_even_index4=0\n    local smalest_even_index5=0\n\
    \    local smalest_even_index6=0\n    local smalest_even_index7=0\n    local smalest_even_index8=0\n\
    \    local smalest_even_index9=0\n    local smalest_even_index10=0\n    local\
    \ smalest_even_index11=0\n    local smalest_even_index12=0\n    local smalest_even_index13=0\n\
    \    local smalest_even_index14=0\n    local smalest_even_index15=0\n    local\
    \ smalest_even_index16=0\n    local smalest_even_index17=0\n    local smalest_even_index18=0\n\
    \    local smalest_even_index19=0\n    local smalest_even_index20=0\n    local\
    \ smalest_even_index21=0\n    local smalest_even_index22=0\n    local smalest_even_index23=0\n\
    \    local smalest_even_index24=0\n    local smalest_even_index25=0\n    local\
    \ smalest_even_index26=0\n    local smalest_even_index27=0\n    local smalest_even_index28=0\n\
    \    local smalest_even_index29=0\n    local smalest_even_index30=0\n    local\
    \ smalest_even_index31=0\n    local smalest_even_index32=0\n    local smalest_even_index33=0\n\
    \    local smalest_even_index34=0\n    local smalest_even_index35=0\n    local\
    \ smalest_even_index36=0\n    local smalest_even_index37=0\n    local smalest_even_index38=0\n\
    \    local smalest_even_index39=0\n    local smalest_even_index40=0\n    local\
    \ smalest_even_index41=0\n    local smalest_even_index42=0\n    local smalest_even_index43=0\n\
    \    local smalest_even_index44=0\n    local smalest_even_index45=0\n    local\
    \ smalest_even_index46=0\n    local smalest_even_index47=0\n    local smalest_even_index48=0\n\
    \    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=$(echo $nodes | cut\
    \ -d \" \" -f 1 | sort -n | head -1)\n  local smalest_index=0\n  local smalest_node=\"\
    \"\n  local smalest_node_index=0\n  local smalest_node_even_value=0\n  local smalest_node_even_index=0\n\
    \  local smalest_node_even_index_count=0\n  local smalest_node_even_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count=0\n  local smalest_node_even_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count=0\n  local smalest_node_even_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local smalest_node_even_index_count_index_count_index_count_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_index2\n  local smalest_index3\n  local smalest_index4\n  local\
    \ smalest_index5\n  local smalest_index6\n  local smalest_index7\n  local smalest_index8\n\
    \  local smalest_index9\n  local smalest_index10\n  local smalest_index11\n  local\
    \ smalest_index12\n  local smalest_index13\n  local smalest_index14\n  local smalest_index15\n\
    \  local smalest_index16\n  local smalest_index17\n  local smalest_index18\n \
    \ local smalest_index19\n  local smalest_index20\n  local smalest_index21\n  local\
    \ smalest_index22\n  local smalest_index23\n  local smalest_index24\n  local smalest_index25\n\
    \  local smalest_index26\n  local smalest_index27\n  local smalest_index28\n \
    \ local smalest_index29\n  local smalest_index30\n  local smalest_index31\n  local\
    \ smalest_index32\n  local smalest_index33\n  local smalest_index34\n  local smalest_index35\n\
    \  local smalest_index36\n  local smalest_index37\n  local smalest_index38\n \
    \ local smalest_index39\n  local smalest_index40\n  local smalest_index41\n  local\
    \ smalest_index42\n  local smalest_index43\n  local smalest_index44\n  local smalest_index45\n\
    \  local smalest_index46\n  local smalest_index47\n  local smalest_index48\n \
    \ local smalest_index49\n  local smalest_index50\n  local smalest_index51\n  local\
    \ smalest_index52\n  local smalest_index53\n  local smalest_index54\n  local smalest_index55\n\
    \  local smalest_index56\n  local smalest_index57\n  local smalest_index58\n \
    \ local smalest_index59\n  local smalest_index60\n  local smalest_index61\n  local\
    \ smalest_index62\n  local smale\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_node=-1\n    local smalest_even_node_index=-1\n\
    \    local smalest_even_node_even_value=-1\n    local smalest_even_node_even_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smalest_even_node_even_value_index=-1\n\
    \    local smalest_even_node_even_value_index=-1\n    local smale\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(echo $nodes |\
    \ cut -d' ' -f1 | sort -n | head -n 1)\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    local smalest_index=0\n    local smalest_node=\"\
    \"\n    local smalest_index=0\n    local smalest_node=\"\"\n    local smalest_index=0\n\
    \    local smalest_node=\"\"\n    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_even_value=-1\n    local smalest_even_index=-1\n    local smalest_even_indexes=()\n\
    \    local smalest_even_values=()\n    local smalest_value_indexes=()\n    local\
    \ smalest_values=()\n    local smalest_value_index=0\n    local smalest_value_indexes=()\n\
    \    local smalest_values=()\n    local smalest_value=0\n    local smalest_value_index=0\n\
    \    local smalest_value_indexes=()\n    local smalest_values=()\n    local smalest_value=0\n\
    \    local smalest_value_index=0\n    local smalest_value_indexes=()\n    local\
    \ smalest_values=()\n    local smalest_value=0\n    local smalest_value_index=0\n\
    \    local smalest_value_indexes=()\n    local smalest_values=()\n    local smalest_value=0\n\
    \    local smalest_value_index=0\n    local smalest_value_indexes=()\n    local\
    \ smalest_values=()\n    local smalest_value=0\n    local smalest_value_index=0\n\
    \    local smalest_value_indexes=()\n    local smalest_values=()\n    local smalest_value=0\n\
    \    local smalest_value_index=0\n    local smalest_value_indexes=()\n    local\
    \ smalest_values=()\n    local smalest_value=0\n    local smalest_value_index=0\n\
    \    local smalest_value_indexes=()\n    local smalest_values=()\n    local smalest_value=0\n\
    \    local smalest_value_index=0\n    local smalest_value_indexes=()\n    local\
    \ smalest_values=()\n    local smalest_value=0\n    local smalest_value_index=0\n\
    \    local smalest_value_indexes=()\n    local smalest_values=()\n    local smalest_value=0\n\
    \    local smalest_value_index=0\n    local smalest_value_indexes=()\n    local\
    \ smalest_values=()\n    local smalest_value=0\n    local smalest_value_index=0\n\
    \    local smalest_value_indexes=()\n    local sm\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_node=-1\n    local smalest_even_value=-1\n    local smalest_even_node=-1\n\
    \    local smalest_even_node_index=-1\n    local smalest_even_node_even_value=-1\n\
    \    local smalest_even_node_even_index=-1\n    local smalest_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_index=-1\n    local smalest_even_node_even_node_even_value=-1\n\
    \    local smalest_even_node_even_node_even_index=-1\n    local smalest_even_node_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_even_node_index=-1\n    local smalest_even_node_even_node_even_node_even_value=-1\n\
    \    local smalest_even_node_even_node_even_node_even_index=-1\n    local smalest_even_node_even_node_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_index=-1\n    local\
    \ smalest_even_node_even_node_even_node_even_node_even_value=-1\n    local smalest_even_node_even_node_even_node_even_node_even_index=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node=-1\n    local\
    \ smalest_even_node_even_node_even_node_even_node_even_node_index=-1\n    local\
    \ smalest_even_node_even_node_even_node_even_node_even_node_even_value=-1\n  \
    \  local smalest_even_node_even_node_even_node_even_node_even_node_even_index=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node_index=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_value=-1\n\
    \    local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_index=-1\n\
    \    local smalest_even_node_ev\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=false\n  local smalest_even_index=-1\n  local smalest_even_index_value=-1\n\
    \  local smalest_even_index_node=-1\n  local smalest_even_index_node_value=-1\n\
    \  local smalest_even_index_node_even_value=false\n  local smalest_even_index_node_even_index=-1\n\
    \  local smalest_even_index_node_even_index_value=-1\n  local smalest_even_index_node_even_index_node=-1\n\
    \  local smalest_even_index_node_even_index_node_value=-1\n  local smalest_even_index_node_even_index_node_even_value=false\n\
    \  local smalest_even_index_node_even_index_node_even_index=-1\n  local smalest_even_index_node_even_index_node_even_index_value=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node=-1\n  local smalest_even_index_node_even_index_node_even_index_node_value=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_value=false\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_value=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node_value=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node_even_value=false\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node_even_index=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node_even_index_value=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node_even_index_node=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node_even_index_node_value=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node_even_index_node_even_value=false\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node_even_index_node_even_index=-1\n\
    \  local smalest_even_index_node_even_index_node_even_index_node_even_index_node_even_index_node_even_index_value=-1\n\
    \  local smalest_even\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=0\n\
    \    local smalest_even_value=0\n    local smalest_even_node=\"\"\n    local smalest_even_node_index=0\n\
    \    local smalest_even_node_even_value=0\n    local smalest_even_node_even_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_node_even_value_index=0\n\
    \    local smalest_even_node_even_value_index=0\n    local smalest_even_\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=-1\n    local smalest_index=-1\n\
    \    local smalest_node\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local smalest_even_index\n    local smalest_even_index\n\
    \    local smalest_even_index\n    local sm\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=-1\n\
    \  local smalest_even_value=-1\n  local smalest_even_node=-1\n  local smalest_even_node_index=-1\n\
    \  local even_values=()\n  local even_nodes=()\n  local even_node_index=-1\n \
    \ local even_node_even_value=-1\n  local even_node_even_node=-1\n  local even_node_even_node_index=-1\n\
    \  local smalest_even_node_index=-1\n  local smalest_even_node_even_value=-1\n\
    \  local smalest_even_node_even_node=-1\n  local smalest_even_node_even_node_index=-1\n\
    \  local smalest_even_node_even_node_even_value=-1\n  local smalest_even_node_even_node_even_node=-1\n\
    \  local smalest_even_node_even_node_even_node_index=-1\n  local smalest_even_node_even_node_even_node_even_value=-1\n\
    \  local smalest_even_node_even_node_even_node_even_node=-1\n  local smalest_even_node_even_node_even_node_even_node_index=-1\n\
    \  local smalest_even_node_even_node_even_node_even_node_even_value=-1\n  local\
    \ smalest_even_node_even_node_even_node_even_node_even_node=-1\n  local smalest_even_node_even_node_even_node_even_node_even_node_index=-1\n\
    \  local smalest_even_node_even_node_even_node_even_node_even_node_even_value=-1\n\
    \  local smalest_even_node_even_node_even_node_even_node_even_node_even_node=-1\n\
    \  local smalest_even_node_even_node_even_node_even_node_even_node_even_node_index=-1\n\
    \  local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_value=-1\n\
    \  local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_node=-1\n\
    \  local smalest_even_node_even_node_even_node_even_node_even_node_even_node_even_node_index=-1\n\
    \  local smalest_even_node_even_node_\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local smalest_index=0\n\
    \  local smalest_even_value=0\n  local smalest_even_node=\"\"\n  local smalest_even_node_index=0\n\
    \  local smalest_even_node_even_value=0\n  local smalest_even_node_even_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_node_even_value_index=0\n\
    \  local smalest_even_node_even_value_index=0\n  local smalest_even_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660051508
