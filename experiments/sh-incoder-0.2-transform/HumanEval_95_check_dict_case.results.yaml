language: sh
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local key_arr=()\n\
    \    local val_arr=()\n    local all_keys_str=false\n    local all_keys_upper=false\n\
    \    local all_keys_lower=false\n    local all_keys_num=false\n    local all_keys_int=false\n\
    \    local all_keys_float=false\n    local all_keys_bool=false\n    local all_keys_bool2=false\n\
    \    local all_keys_bool3=false\n    local all_keys_bool4=false\n    local all_keys_bool5=false\n\
    \    local all_keys_bool6=false\n    local all_keys_bool7=false\n    local all_keys_bool8=false\n\
    \    local all_keys_bool9=false\n    local all_keys_bool10=false\n    local all_keys_bool11=false\n\
    \    local all_keys_bool12=false\n    local all_keys_bool13=false\n    local all_keys_bool14=false\n\
    \    local all_keys_bool15=false\n    local all_keys_bool16=false\n    local all_keys_bool17=false\n\
    \    local all_keys_bool18=false\n    local all_keys_bool19=false\n    local all_keys_bool20=false\n\
    \    local all_keys_bool21=false\n    local all_keys_bool22=false\n    local all_keys_bool23=false\n\
    \    local all_keys_bool24=false\n    local all_keys_bool25=false\n    local all_keys_bool26=false\n\
    \    local all_keys_bool27=false\n    local all_keys_bool28=false\n    local all_keys_bool29=false\n\
    \    local all_keys_bool30=false\n    local all_keys_bool31=false\n    local all_keys_bool32=false\n\
    \    local all_keys_bool33=false\n    local all_keys_bool34=false\n    local all_keys_bool35=false\n\
    \    local all_keys_bool36=false\n    local all_keys_bool37=false\n    local all_keys_bool38=false\n\
    \    local all_keys_bool39=false\n    local all_keys_bool40=false\n    local all_keys_bool41=false\n\
    \    local all_keys_bool42=false\n    local all_keys_bool43=false\n    local all_keys_bool44=false\n\
    \    local all_keys_bool45=false\n    local all_keys_bool46=false\n    local all_keys_bool47=false\n\
    \    local all_keys_bool48=false\n    local all_keys_bool49\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local key_len=0\n    local val_len=0\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local val\n    local key\n    local val\n    local key_upper\n    local\
    \ val_upper\n    local key_lower\n    local val_lower\n    local result\n    \n\
    \    if [[ $dict_len -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \    fi\n    \n    for ((i=0; i<$dict_len; i++))\n    do\n        val=${dict_arr[$i]}\n\
    \        key_upper=${dict_arr[$i]%,*}\n        key_lower=${dict_arr[$i]#*,}\n\
    \        val_upper=${val%,*}\n        val_lower=${val#*,}\n        \n        if\
    \ [[ $key_upper == $key_lower ]]; then\n            if [[ $val_upper == $val_lower\
    \ ]]; then\n                echo \"true\"\n                return\n          \
    \  else\n                echo \"false\"\n                return\n            fi\n\
    \        else\n            echo \"false\"\n            return\n        fi\n  \
    \  done\n    echo \"false\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=\"$1\"\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_lower\n    local\
    \ dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n   \
    \ local ret\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_line=\"$1\"\n    local dict_line_cut=\"${dict_line//,/ }\"\
    \n    local dict_line_split=($dict_line_cut)\n    local dict_line_split2=(${dict_line_split[*]//,/\
    \ })\n    local dict_line_split3=(${dict_line_split2[*]//,/ })\n    local dict_line_split4=(${dict_line_split3[*]//,/\
    \ })\n    local dict_line_split5=(${dict_line_split4[*]//,/ })\n    local dict_line_split6=(${dict_line_split5[*]//,/\
    \ })\n    local dict_line_split7=(${dict_line_split6[*]//,/ })\n    local dict_line_split8=(${dict_line_split7[*]//,/\
    \ })\n    local dict_line_split9=(${dict_line_split8[*]//,/ })\n    local dict_line_split10=(${dict_line_split9[*]//,/\
    \ })\n    local dict_line_split11=(${dict_line_split10[*]//,/ })\n    local dict_line_split12=(${dict_line_split11[*]//,/\
    \ })\n    local dict_line_split13=(${dict_line_split12[*]//,/ })\n    local dict_line_split14=(${dict_line_split13[*]//,/\
    \ })\n    local dict_line_split15=(${dict_line_split14[*]//,/ })\n    local dict_line_split16=(${dict_line_split15[*]//,/\
    \ })\n    local dict_line_split17=(${dict_line_split16[*]//,/ })\n    local dict_line_split18=(${dict_line_split17[*]//,/\
    \ })\n    local dict_line_split19=(${dict_line_split18[*]//,/ })\n    local dict_line_split20=(${dict_line_split19[*]//,/\
    \ })\n    local dict_line_split21=(${dict_line_split20[*]//,/ })\n    local dict_line_split22=(${dict_line_split21[*]//,/\
    \ })\n    local dict_line_split23=(${dict_line_split22[*]//,/ })\n    local dict_line_split24=(${dict_line_split23[*]//,/\
    \ })\n    local dict_line_split25=(${dict_line_split24[*]//,/ })\n    local dict_line_split26=(${dict_line_split25[*]//,/\
    \ })\n    local dict_line_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_lower\n    local\
    \ dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n   \
    \ local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_string=$1\n    local dict_array=($(echo $dict_string | tr\
    \ \",\" \"\\n\"))\n    local dict_length=${#dict_array[@]}\n    local dict_length=${dict_length%?}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length/#0}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp09j7161e.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_key=${dict_arr[0]}\n\
    \    local dict_value=${dict_arr[1]}\n    local dict_lower=${dict_key}\n    local\
    \ dict_upper=${dict_key^^}\n    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict_lines=$1\n  local dict_headers=$2\n  local dict_case=$3\n  local\
    \ dict_case_insensitive=$4\n  local dict_case_headers=$5\n  local dict_case_headers_lower=$6\n\
    \  local dict_case_headers_upper=$7\n  local dict_case_headers_both=$8\n  local\
    \ dict_case_headers_both_lower=$9\n  local dict_case_headers_both_upper=$10\n\
    \  local dict_case_headers_both_both=$11\n  local dict_case_headers_both_both_lower=$12\n\
    \  local dict_case_headers_both_both_upper=$13\n  local dict_case_headers_both_both_both=$14\n\
    \  local dict_case_headers_both_both_both_lower=$15\n  local dict_case_headers_both_both_both_upper=$16\n\
    \  local dict_case_headers_both_both_both_both=$17\n  local dict_case_headers_both_both_both_both_lower=$18\n\
    \  local dict_case_headers_both_both_both_both_upper=$19\n  local dict_case_headers_both_both_both_both_both=$20\n\
    \  local dict_case_headers_both_both_both_both_lower=$21\n  local dict_case_headers_both_both_both_both_upper=$22\n\
    \  local dict_case_headers_both_both_both_both_both_lower=$23\n  local dict_case_headers_both_both_both_both_both_upper=$24\n\
    \  local dict_case_headers_both_both_both_both_both_both=$25\n  local dict_case_headers_both_both_both_both_both_lower=$26\n\
    \  local dict_case_headers_both_both_both_both_both_upper=$27\n  local dict_case_headers_both_both_both_both_both_both_lower=$28\n\
    \  local dict_case_headers_both_both_both_both_both_both_upper=$29\n  local dict_case_headers_both_both_both_both_both_both_both_lower=$30\n\
    \  local dict_case_headers_both_both_both_both_both_both_both_upper=$31\n  local\
    \ dict_case_headers_both_both_both_both_both_both_both_both_lower=$32\n  local\
    \ dict_case_headers_both_both_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local keys=$(echo $dict | awk -F, '{print $1}')\n\
    \    local values=$(echo $dict | awk -F, '{print $2}')\n    local lower=false\n\
    \    local upper=false\n    local all=false\n    local count=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_string=$1\n    local dict_array=($(echo $dict_string | tr\
    \ \",\" \"\\n\"))\n    local dict_length=${#dict_array[@]}\n    local dict_length=${dict_length-1}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/#/}\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo $1 | tr \",\" \"\\n\")\n    local values=$(echo $1\
    \ | tr \",\" \"\\n\")\n    local lower\n    local upper\n    local result\n  \
    \  lower=$(echo $keys | tr [A-Z] [a-z])\n    upper=$(echo $keys | tr [a-z] [A-Z])\n\
    \    if [ -z \"$keys\" ] ; then\n        result=\"false\"\n    else\n        result=$(echo\
    \ $lower | tr [A-Z] [a-z]) && \\\n            $(echo $upper | tr [A-Z] [a-z])\n\
    \    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp318ry9k1.sh: line 30: p: command not found

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key=\n    local dict_val=\n    local dict_key_upper=\n\
    \    local dict_val_upper=\n    local dict_key_lower=\n    local dict_val_lower=\n\
    \    local dict_key_exists=\n    local dict_val_exists=\n    local dict_key_exists_upper=\n\
    \    local dict_val_exists_upper=\n    local dict_key_exists_lower=\n    local\
    \ dict_val_exists_lower=\n    local dict_key_exists_exists=\n    local dict_val_exists_exists=\n\
    \    local dict_key_exists_exists_upper=\n    local dict_val_exists_exists_upper=\n\
    \    local dict_key_exists_exists_lower=\n    local dict_val_exists_exists_lower=\n\
    \    local dict_key_exists_exists_exists=\n    local dict_val_exists_exists_exists=\n\
    \    local dict_key_exists_exists_exists_upper=\n    local dict_val_exists_exists_exists_upper=\n\
    \    local dict_key_exists_exists_exists_lower=\n    local dict_val_exists_exists_exists_lower=\n\
    \    local dict_key_exists_exists_exists_exists=\n    local dict_val_exists_exists_exists_exists=\n\
    \    local dict_key_exists_exists_exists_exists_upper=\n    local dict_val_exists_exists_exists_exists_upper=\n\
    \    local dict_key_exists_exists_exists_exists_lower=\n    local dict_val_exists_exists_exists_exists_lower=\n\
    \    local dict_key_exists_exists_exists_exists_exists=\n    local dict_val_exists_exists_exists_exists_exists=\n\
    \    local dict_key_exists_exists_exists_exists_exists_upper=\n    local dict_val_exists_exists_exists_exists_exists_upper=\n\
    \    local dict_key_exists_exists_exists_exists_exists_lower=\n    local dict_val_exists_exists_exists_exists_exists_lower=\n\
    \    local dict_key_exists_exists_exists_exists_exists_exists=\n    local dict_val_exists_exists_exists_exists_exists_exists=\n\
    \    local dict_key_exists_exists_exists_exists_exists_exists_upper=\n    local\
    \ dict_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key_lower=()\n    local dict_key_upper=()\n   \
    \ local dict_key_count=()\n    local dict_val_lower=()\n    local dict_val_upper=()\n\
    \    local dict_val_count=()\n    local dict_key_exists=()\n    local dict_val_exists=()\n\
    \    local dict_key_exists_count=()\n    local dict_val_exists_count=()\n    local\
    \ dict_key_not_exists=()\n    local dict_val_not_exists=()\n    local dict_key_not_exists_count=()\n\
    \    local dict_val_not_exists_count=()\n    local dict_key_not_exists_lower=()\n\
    \    local dict_val_not_exists_lower=()\n    local dict_key_not_exists_upper=()\n\
    \    local dict_val_not_exists_upper=()\n    local dict_key_not_exists_count=()\n\
    \    local dict_val_not_exists_count=()\n    local dict_key_not_exists_lower=()\n\
    \    local dict_val_not_exists_lower=()\n    local dict_key_not_exists_upper=()\n\
    \    local dict_val_not_exists_upper=()\n    local dict_key_not_exists_count=()\n\
    \    local dict_val_not_exists_count=()\n    local dict_key_not_exists_lower=()\n\
    \    local dict_val_not_exists_lower=()\n    local dict_key_not_exists_upper=()\n\
    \    local dict_val_not_exists_upper=()\n    local dict_key_not_exists_count=()\n\
    \    local dict_val_not_exists_count=()\n    local dict_key_not_exists_lower=()\n\
    \    local dict_val_not_exists_lower=()\n    local dict_key_not_exists_upper=()\n\
    \    local dict_val_not_exists_upper=()\n    local dict_key_not_exists_count=()\n\
    \    local dict_val_not_exists_count=()\n    local dict_key_not_exists_lower=()\n\
    \    local dict_val_not_exists_lower=()\n    local dict_key_not_exists_upper=()\n\
    \    local dict_val_not_exists_upper=()\n    local dict_key_not_exists_count=()\n\
    \    local dict_val_not_exists_count=()\n    local dict_key_not_exists_lower=()\n\
    \    local dict_val_not_exists_lower=()\n    local dict_key_\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local key_arr=()\n\
    \    local val_arr=()\n    local key_str\n    local val_str\n    local key_lower\n\
    \    local val_lower\n    local key_upper\n    local val_upper\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_not_found_lower\n    local val_not_found_lower\n    local key_not_found_upper\n\
    \    local val_not_found_upper\n    local key_not_found_found_lower\n    local\
    \ val_not_found_found_lower\n    local key_not_found_found_upper\n    local val_not_found_found_upper\n\
    \    local key_not_found_found_found_lower\n    local val_not_found_found_found_lower\n\
    \    local key_not_found_found_found_upper\n    local val_not_found_found_found_upper\n\
    \    local key_not_found_found_found_found_lower\n    local val_not_found_found_found_lower\n\
    \    local key_not_found_found_found_upper\n    local val_not_found_found_found_upper\n\
    \    local key_not_found_found_found_found_lower\n    local val_not_found_found_found_lower\n\
    \    local key_not_found_found_found_upper\n    local val_not_found_found_found_upper\n\
    \    local key_not_found_found_found_found_lower\n    local val_not_found_found_found_lower\n\
    \    local key_not_found_found_found_found_upper\n    local val_not_found_found_found_found_upper\n\
    \    local key_not_found_found_found_found_found_lower\n    local val_not_found_found_found_found_lower\n\
    \    local key_not_found_found_found_found_upper\n    local val_not_found_found_found_found_upper\n\
    \    local key_not_found_found_found_found_found_lower\n    local val_not_found_found_found_found_lower\n\
    \    local key_not_found_found_found_found_upper\n    local val_not_found_found_found_found_upper\n\
    \    local key_not_found_found_found_found_found_lower\n    local val_not_found_found_found_found_lower\n\
    \    local key_not_found_found_found_found_found_upper\n    local val_not_found_found_found_found_found_upper\n\
    \    local key_not_found_found_found_found_found_found_lower\n    local val_not_found_found_found_found_found_lower\n\
    \    local key_not_found_found_found_found_found_upper\n    local val_not_found_found_found_found_found_upper\n\
    \    local key_not_found_found_found_found_found_found_lower\n    local val_not_found_found_found_found_found_found_lower\n\
    \    local key_not_found_found_found_found_found_found_upper\n    local val_not_found_found_found_found_found_found_upper\n\
    \    local key_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local key_len=${#dict_arr[0]}\n    local is_upper=0\n    local is_lower=0\n\
    \    local is_empty=0\n    local is_equal=0\n    local is_equal2=0\n    local\
    \ is_equal3=0\n    local is_equal4=0\n    local is_equal5=0\n    local is_equal6=0\n\
    \    local is_equal7=0\n    local is_equal8=0\n    local is_equal9=0\n    local\
    \ is_equal10=0\n    local is_equal11=0\n    local is_equal12=0\n    local is_equal13=0\n\
    \    local is_equal14=0\n    local is_equal15=0\n    local is_equal16=0\n    local\
    \ is_equal17=0\n    local is_equal18=0\n    local is_equal19=0\n    local is_equal20=0\n\
    \    local is_equal21=0\n    local is_equal22=0\n    local is_equal23=0\n    local\
    \ is_equal24=0\n    local is_equal25=0\n    local is_equal26=0\n    local is_equal27=0\n\
    \    local is_equal28=0\n    local is_equal29=0\n    local is_equal30=0\n    local\
    \ is_equal31=0\n    local is_equal32=0\n    local is_equal33=0\n    local is_equal34=0\n\
    \    local is_equal35=0\n    local is_equal36=0\n    local is_equal37=0\n    local\
    \ is_equal38=0\n    local is_equal39=0\n    local is_equal40=0\n    local is_equal41=0\n\
    \    local is_equal42=0\n    local is_equal43=0\n    local is_equal44=0\n    local\
    \ is_equal45=0\n    local is_equal46=0\n    local is_equal47=0\n    local is_equal48=0\n\
    \    local is_equal49=0\n    local is_equal50=0\n    local is_equal51=0\n    local\
    \ is_equal52=0\n    local is_equal53=0\n    local is_equal54=0\n    local is_equal55=0\n\
    \    local is_equal56=0\n    local is_equal57=0\n    local is_equal58=0\n    local\
    \ is_equal59=0\n    local is_equal60=0\n    local is_equal61=0\n    local is_equal62=0\n\
    \    local is_equal63=0\n    local is_equal64=0\n    local is_equal65=0\n    local\
    \ \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n   \
    \ local ret\n    local i\n    local j\n    local k\n    local v\n    local len\n\
    \    local key_upper\n    local value_upper\n    local key_lower\n    local value_lower\n\
    \    local is_dict_case\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local is_dict_case_false\n    local is_dict_case_true\n\
    \    local is_dict_case_false\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local is_dict_case_false\n    local is_dict_case_true\n\
    \    local is_dict_case_false\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local is_dict_case_false\n    local is_dict_case_true\n\
    \    local is_dict_case_false\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local is_dict_case_false\n    local is_dict_case_true\n\
    \    local is_dict_case_false\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local is_dict_case_false\n    local is_dict_case_true\n\
    \    local is_dict_case_false\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local is_dict_case_false\n    local is_dict_case_true\n\
    \    local is_dict_case_false\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local is_dict_case_false\n    local is_dict_case_true\n\
    \    local is_dict_case_false\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local is_dict_case_false\n    local is_dict_case_true\n\
    \    local is_dict_case_false\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local is_dict_case_false\n    local is_dict_case_true\n\
    \    local is_dict_case_false\n    local is_dict_case_true\n    local is_dict_case_false\n\
    \    local is_dict_case_true\n    local \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower\n\
    \    local upper\n    local result\n    \n    lower=$(echo \"$dict\" | tr '\\\
    n' ',' | sed 's/,$//')\n    upper=$(echo \"$dict\" | tr '\\n' ',' | sed 's/,$//'\
    \ | sed 's/,/\\n/g')\n    \n    for key in $lower; do\n        value=$(echo \"\
    $dict\" | cut -d',' -f$key)\n        if [ -z \"$value\" ]; then\n            result=\"\
    false\"\n        else\n            if [ \"$value\" == \"$key\" ]; then\n     \
    \           result=\"true\"\n            else\n                result=\"false\"\
    \n            fi\n        fi\n    done\n    \n    for key in $upper; do\n    \
    \    value=$(echo \"$dict\" | cut -d',' -f$key)\n        if [ -z \"$value\" ];\
    \ then\n            result=\"false\"\n        else\n            if [ \"$value\"\
    \ == \"$key\" ]; then\n                result=\"true\"\n            else\n   \
    \             result=\"false\"\n            fi\n        fi\n    done\n    \n \
    \   echo \"$result\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: "cut: invalid field value \u2018p,pineapple\\\\nb,banana\u2019\nTry 'cut\
    \ --help' for more information.\ncut: invalid field value \u2018p\u2019\nTry 'cut\
    \ --help' for more information.\ncut: invalid field value \u2018pineapple\\\\\
    nb\u2019\nTry 'cut --help' for more information.\ncut: invalid field value \u2018\
    banana\u2019\nTry 'cut --help' for more information.\n"
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo $1 | tr \",\" \"\\n\")\n    local values=$(echo $1\
    \ | tr \",\" \"\\n\")\n    local result=$(echo $keys | tr \" \" \"\\n\" | sort\
    \ | uniq | grep -Fvf <(echo $values | tr \" \" \"\\n\" | sort | uniq))\n    if\
    \ [ -z \"$result\" ]; then\n        echo \"false\"\n    else\n        echo \"\
    true\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr ',' '\\\
    n'))\n    local dict_len=${#dict_arr[@]}\n    local dict_key=${dict_arr[0]}\n\
    \    local dict_value=${dict_arr[1]}\n    local dict_lower=${dict_key^^}\n   \
    \ local dict_upper=${dict_key^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfu4c946c.sh: line 88: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_lower\n    local\
    \ dict_key_upper\n    local dict_value_lower\n    local dict_value_upper\n   \
    \ local ret\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_lower\n    local dict_upper\n\
    \    local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n    local count\n    local keycount\n    local keycount2\n\
    \    local keycount3\n    local keycount4\n    local keycount5\n    local keycount6\n\
    \    local keycount7\n    local keycount8\n    local keycount9\n    local keycount10\n\
    \    local keycount11\n    local keycount12\n    local keycount13\n    local keycount14\n\
    \    local keycount15\n    local keycount16\n    local keycount17\n    local keycount18\n\
    \    local keycount19\n    local keycount20\n    local keycount21\n    local keycount22\n\
    \    local keycount23\n    local keycount24\n    local keycount25\n    local keycount26\n\
    \    local keycount27\n    local keycount28\n    local keycount29\n    local keycount30\n\
    \    local keycount31\n    local keycount32\n    local keycount33\n    local keycount34\n\
    \    local keycount35\n    local keycount36\n    local keycount37\n    local keycount38\n\
    \    local keycount39\n    local keycount40\n    local keycount41\n    local keycount42\n\
    \    local keycount43\n    local keycount44\n    local keycount45\n    local keycount46\n\
    \    local keycount47\n    local keycount48\n    local keycount49\n    local keycount50\n\
    \    local keycount51\n    local keycount52\n    local keycount53\n    local keycount54\n\
    \    local keycount55\n    local keycount56\n    local keycount57\n    local keycount58\n\
    \    local keycount59\n    local keycount60\n    local keycount61\n    local keycount62\n\
    \    local keycount63\n    local keycount64\n    local keycount65\n    local keycount66\n\
    \    local keycount67\n    local keycount68\n    local keycount69\n    local keycount70\n\
    \    local keycount71\n    local keycount72\n    local keycount73\n    local keycount74\n\
    \    local keycount75\n    local keycount76\n    local keycount77\n    local keycount78\n\
    \    local keycount79\n    local keycount80\n    local key\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_val\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local result\n\n    if\
    \ [[ $dict_len -eq 0 ]]; then\n        echo \"false\"\n        return\n    fi\n\
    \n    for dict_key in \"${dict_arr[@]}\"; do\n        dict_key_upper=$(echo $dict_key\
    \ | tr '[:upper:]' '[:lower:]')\n        dict_val_upper=$(echo $dict_key | tr\
    \ '[:upper:]' '[:upper:]')\n        dict_key_lower=$(echo $dict_key | tr '[:lower:]'\
    \ '[:lower:]')\n        dict_val_lower=$(echo $dict_key | tr '[:lower:]' '[:lower:]')\n\
    \        if [[ \"$dict_key_upper\" == \"$dict_key\" ]]; then\n            if [[\
    \ \"$dict_val_upper\" == \"$dict_key\" ]]; then\n                if [[ \"$dict_val_lower\"\
    \ == \"$dict_key\" ]]; then\n                    echo \"true\"\n             \
    \       return\n                fi\n            fi\n        fi\n    done\n\n \
    \   echo \"false\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_lower\n    local\
    \ dict_key_upper\n    local dict_value_lower\n    local dict_value_upper\n   \
    \ local ret=false\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local val\n    local key\n \
    \   local lower\n    local upper\n    local lower_in\n    local upper_in\n   \
    \ local lower_in_arr\n    local upper_in_arr\n    local lower_in_str\n    local\
    \ upper_in_str\n    local lower_in_str_cnt\n    local upper_in_str_cnt\n    local\
    \ lower_in_str_cnt2\n    local upper_in_str_cnt2\n    local lower_in_str_cnt3\n\
    \    local upper_in_str_cnt3\n    local lower_in_str_cnt4\n    local upper_in_str_cnt4\n\
    \    local lower_in_str_cnt5\n    local upper_in_str_cnt5\n    local lower_in_str_cnt6\n\
    \    local upper_in_str_cnt6\n    local lower_in_str_cnt7\n    local upper_in_str_cnt7\n\
    \    local lower_in_str_cnt8\n    local upper_in_str_cnt8\n    local lower_in_str_cnt9\n\
    \    local upper_in_str_cnt9\n    local lower_in_str_cnt10\n    local upper_in_str_cnt10\n\
    \    local lower_in_str_cnt11\n    local upper_in_str_cnt11\n    local lower_in_str_cnt12\n\
    \    local upper_in_str_cnt12\n    local lower_in_str_cnt13\n    local upper_in_str_cnt13\n\
    \    local lower_in_str_cnt14\n    local upper_in_str_cnt14\n    local lower_in_str_cnt15\n\
    \    local upper_in_str_cnt15\n    local lower_in_str_cnt16\n    local upper_in_str_cnt16\n\
    \    local lower_in_str_cnt17\n    local upper_in_str_cnt17\n    local lower_in_str_cnt18\n\
    \    local upper_in_str_cnt18\n    local lower_in_str_cnt19\n    local upper_in_str_cnt19\n\
    \    local lower_in_str_cnt20\n    local upper_in_str_cnt20\n    local lower_in_str_cnt21\n\
    \    local upper_in_str_cnt21\n    local lower_in_str_cnt22\n    local upper_in_str_cnt22\n\
    \    local lower_in_str_cnt23\n    local upper_in_str_cnt23\n    local lower_in_str_cnt24\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=\"$1\"\n    local dict_arr=($(echo \"$dict_str\" | tr\
    \ \",\" \"\\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n\
    \    local dict_vals=()\n    local dict_key_lower\n    local dict_key_upper\n\
    \    local dict_key_lower_in\n    local dict_key_upper_in\n    local dict_key_lower_in_all\n\
    \    local dict_key_upper_in_all\n    local dict_key_lower_in_all_upper\n    local\
    \ dict_key_upper_in_all_upper\n    local dict_key_lower_in_all_lower\n    local\
    \ dict_key_upper_in_all_lower\n    local dict_key_lower_in_all_lower_upper\n \
    \   local dict_key_upper_in_all_lower_upper\n    local dict_key_lower_in_all_lower_lower\n\
    \    local dict_key_upper_in_all_lower_lower\n    local dict_key_lower_in_all_lower_lower_upper\n\
    \    local dict_key_upper_in_all_lower_lower_upper\n    local dict_key_lower_in_all_lower_lower_lower\n\
    \    local dict_key_upper_in_all_lower_lower_lower\n    local dict_key_lower_in_all_lower_lower_lower_upper\n\
    \    local dict_key_upper_in_all_lower_lower_lower_upper\n    local dict_key_lower_in_all_lower_lower_lower_lower\n\
    \    local dict_key_upper_in_all_lower_lower_lower_lower\n    local dict_key_lower_in_all_lower_lower_lower_lower_upper\n\
    \    local dict_key_upper_in_all_lower_lower_lower_lower_upper\n    local dict_key_lower_in_all_lower_lower_lower_lower_lower\n\
    \    local dict_key_upper_in_all_lower_lower_lower_lower_lower\n    local dict_key_lower_in_all_lower_lower_lower_lower_upper_upper\n\
    \    local dict_key_upper_in_all_lower_lower_lower_lower_upper_upper\n    local\
    \ dict_key_lower_in_all_lower_lower_lower_lower_lower_upper\n    local dict_key_upper_in_all_lower_lower_lower_lower_lower_upper\n\
    \    local dict_key_lower_in_all_lower_lower_lower_lower_lower_lower_upper\n \
    \   local dict_key_upper_in_all_lower_lower_lower_lower_lower_lower_upper\n  \
    \  local dict_key_lower_in_all_lower_lower_lower_lower_lower_lower_upper_upper\n\
    \    local dict_key_upper_in_all_lower_lower_lower_lower_lower_lower_upper_upper\n\
    \    local dict_key_lower_in_all_lower_lower_lower_lower_lower_lower_upper_upper\n\
    \    local dict_key_upper_in_all_lower_lower_lower_lower_lower_lower_upper_upper\n\
    \    local dict_key_lower_in_all_lower_lower_lower_lower_lower_lower_upper_upper\n\
    \    local dict_key_upper_in_all_lower_lower_lower_lower_lower_upper_upper\n \
    \   local dict_key_lower_in_all_lower_lower_lower_lower_lower_upper_upper\n  \
    \  local dict_key_upper\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=\"$1\"\n    local dict_arr=($(echo \"$dict_str\" | tr\
    \ \",\" \"\\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_found=0\n\
    \    local dict_key\n    local dict_value\n    local dict_key2\n    local dict_value2\n\
    \    local dict_key3\n    local dict_value3\n    local dict_key4\n    local dict_value4\n\
    \    local dict_key5\n    local dict_value5\n    local dict_key6\n    local dict_value6\n\
    \    local dict_key7\n    local dict_value7\n    local dict_key8\n    local dict_value8\n\
    \    local dict_key9\n    local dict_value9\n    local dict_key10\n    local dict_value10\n\
    \    local dict_key11\n    local dict_value11\n    local dict_key12\n    local\
    \ dict_value12\n    local dict_key13\n    local dict_value13\n    local dict_key14\n\
    \    local dict_value14\n    local dict_key15\n    local dict_value15\n    local\
    \ dict_key16\n    local dict_value16\n    local dict_key17\n    local dict_value17\n\
    \    local dict_key18\n    local dict_value18\n    local dict_key19\n    local\
    \ dict_value19\n    local dict_key20\n    local dict_value20\n    local dict_key21\n\
    \    local dict_value21\n    local dict_key22\n    local dict_value22\n    local\
    \ dict_key23\n    local dict_value23\n    local dict_key24\n    local dict_value24\n\
    \    local dict_key25\n    local dict_value25\n    local dict_key26\n    local\
    \ dict_value26\n    local dict_key27\n    local dict_value27\n    local dict_key28\n\
    \    local dict_value28\n    local dict_key29\n    local dict_value29\n    local\
    \ dict_key30\n    local dict_value30\n    local dict_key31\n    local dict_value31\n\
    \    local dict_key32\n    local dict_value32\n    local dict_key33\n    local\
    \ dict_value33\n    local dict_key34\n    local dict_value34\n    local dict_key35\n\
    \    local dict_value35\n    local dict_key36\n    local dict_value36\n    local\
    \ dict_key37\n    local dict_value37\n    local dict_key38\n    local dict_value38\n\
    \    local dict_key39\n    local dict_value39\n    local dict_key40\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n   \
    \ local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local key_arr=()\n\
    \    local val_arr=()\n    local key_str\n    local val_str\n    local key\n \
    \   local val\n    local key_lower\n    local val_lower\n    local key_upper\n\
    \    local val_upper\n    local key_count\n    local val_count\n    local key_count2\n\
    \    local val_count2\n    local key_count3\n    local val_count3\n    local key_count4\n\
    \    local val_count4\n    local key_count5\n    local val_count5\n    local key_count6\n\
    \    local val_count6\n    local key_count7\n    local val_count7\n    local key_count8\n\
    \    local val_count8\n    local key_count9\n    local val_count9\n    local key_count10\n\
    \    local val_count10\n    local key_count11\n    local val_count11\n    local\
    \ key_count12\n    local val_count12\n    local key_count13\n    local val_count13\n\
    \    local key_count14\n    local val_count14\n    local key_count15\n    local\
    \ val_count15\n    local key_count16\n    local val_count16\n    local key_count17\n\
    \    local val_count17\n    local key_count18\n    local val_count18\n    local\
    \ key_count19\n    local val_count19\n    local key_count20\n    local val_count20\n\
    \    local key_count21\n    local val_count21\n    local key_count22\n    local\
    \ val_count22\n    local key_count23\n    local val_count23\n    local key_count24\n\
    \    local val_count24\n    local key_count25\n    local val_count25\n    local\
    \ key_count26\n    local val_count26\n    local key_count27\n    local val_count27\n\
    \    local key_count28\n    local val_count28\n    local key_count29\n    local\
    \ val_count29\n    local key_count30\n    local val_count30\n    local key_count31\n\
    \    local val_count31\n    local key_count32\n    local val_count32\n    local\
    \ key_count33\n    local val_count33\n    local key_count34\n    local val_count34\n\
    \    local key_count35\n    local val_count35\n    local key_count36\n    local\
    \ val_count36\n    local key_count37\n    local val_count37\n    local \n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_string=$1\n    local dict_array=($(echo $dict_string | tr\
    \ \",\" \"\\n\"))\n    local dict_length=${#dict_array[@]}\n    local dict_length=${dict_length-1}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_headers=$2\n    local dict_lower=$3\n\
    \    local dict_upper=$4\n    local dict_empty=$5\n    local dict_not_empty=$6\n\
    \    local dict_not_empty_keys=$7\n    local dict_not_empty_values=$8\n    local\
    \ dict_not_empty_keys_lower=$9\n    local dict_not_empty_values_lower=${10}\n\
    \    local dict_not_empty_keys_upper=${11}\n    local dict_not_empty_values_upper=${12}\n\
    \    local dict_not_empty_keys_upper=${13}\n    local dict_not_empty_values_upper=${14}\n\
    \    local dict_not_empty_keys_upper=${15}\n    local dict_not_empty_values_upper=${16}\n\
    \    local dict_not_empty_keys_upper=${17}\n    local dict_not_empty_values_upper=${18}\n\
    \    local dict_not_empty_keys_upper=${19}\n    local dict_not_empty_values_upper=${20}\n\
    \    local dict_not_empty_keys_upper=${21}\n    local dict_not_empty_values_upper=${22}\n\
    \    local dict_not_empty_keys_upper=${23}\n    local dict_not_empty_values_upper=${24}\n\
    \    local dict_not_empty_keys_upper=${25}\n    local dict_not_empty_values_upper=${26}\n\
    \    local dict_not_empty_keys_upper=${27}\n    local dict_not_empty_values_upper=${28}\n\
    \    local dict_not_empty_keys_upper=${29}\n    local dict_not_empty_values_upper=${30}\n\
    \    local dict_not_empty_keys_upper=${31}\n    local dict_not_empty_values_upper=${32}\n\
    \    local dict_not_empty_keys_upper=${33}\n    local dict_not_empty_values_upper=${34}\n\
    \    local dict_not_empty_keys_upper=${35}\n    local dict_not_empty_values_upper=${36}\n\
    \    local dict_not_empty_keys_upper=${37}\n    local dict_not_empty_values_upper=${38}\n\
    \    local dict_not_empty_keys_upper=${39}\n    local dict_not_empty_values_upper=${40}\n\
    \    local dict_not_empty_keys_upper=${41}\n    local dict_not_empty_values_upper=${42}\n\
    \    local dict_not_empty_keys_upper=${43}\n    local dict_not_empty_values_upper=${44}\n\
    \    local dict_not_empty_keys_upper=${45}\n    local dict_not_empty_value\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo $1 | tr \",\" \"\\n\")\n    local values=$(echo $1\
    \ | tr \",\" \"\\n\")\n    local lowercase_keys=$(echo $keys | tr [A-Z] [a-z])\n\
    \    local uppercase_keys=$(echo $keys | tr [a-z] [A-Z])\n    local lowercase_values=$(echo\
    \ $values | tr [A-Z] [a-z])\n    local uppercase_values=$(echo $values | tr [a-z]\
    \ [A-Z])\n    local all_lowercase_keys=$(echo $lowercase_keys | tr [A-Z] [a-z])\n\
    \    local all_uppercase_keys=$(echo $uppercase_keys | tr [a-z] [A-Z])\n    local\
    \ all_lowercase_values=$(echo $lowercase_values | tr [A-Z] [a-z])\n    local all_uppercase_values=$(echo\
    \ $uppercase_values | tr [a-z] [A-Z])\n    local all_keys=$(echo $all_lowercase_keys\
    \ $all_uppercase_keys $all_lowercase_values $all_uppercase_values)\n    local\
    \ all_values=$(echo $all_lowercase_values $all_uppercase_values $all_lowercase_keys\
    \ $all_uppercase_keys)\n    local all_keys_sorted=$(echo $all_keys | tr [A-Z]\
    \ [a-z] | sort -u)\n    local all_values_sorted=$(echo $all_values | tr [A-Z]\
    \ [a-z] | sort -u)\n    local all_keys_sorted_length=$(echo $all_keys_sorted |\
    \ wc -l)\n    local all_values_sorted_length=$(echo $all_values_sorted | wc -l)\n\
    \    local all_keys_sorted_length_diff=$(echo $all_keys_sorted_length - $all_keys_sorted_length_max)\n\
    \    local all_values_sorted_length_diff=$(echo $all_values_sorted_length - $all_values_sorted_length_max)\n\
    \    local all_keys_sorted_length_diff_max=$(echo $all_keys_sorted_length_diff\
    \ + 1)\n    local all_values_sorted_length_diff_max=$(echo $all_values_sorted_length_diff\
    \ + 1)\n    local all_keys_sorted_length_diff_min=$(echo $all_keys_sorted_length_diff\
    \ - $all_keys_sorted_length_diff_max)\n    local all_values_sorted_length_diff_min=$(echo\
    \ $all_values_sorted_length_diff - $all_values_sorted_length_diff_max)\n    local\
    \ all_keys_sorted_length_diff_min_max=$(echo $all_keys_sorted_length_diff_min\
    \ - $all_keys_sorted_length_diff_max)\n    local all_values_sorted_length_diff_min_max=$(echo\
    \ $all_values_sorted_length_diff_min - $all_values_sorted_length_diff_max)\n \
    \   local all_keys_sorted_length_diff_min_max_diff=$(echo $all_keys_sorted_length_diff_min_max\
    \ - $all_keys_sorted_length_diff_max)\n    local all_values_sorted_length_diff_min_max_diff=$(echo\
    \ $all_values_sorted_length_diff_min_max - \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpijo_9jzb.sh: line 44: unexpected EOF while looking for matching
    `)''

    /tmp/tmpijo_9jzb.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_key2\n    local dict_value2\n    local result\n \
    \   local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key_lower=()\n    local dict_key_upper=()\n   \
    \ local dict_key_count=${#dict_arr[@]}\n    local dict_val_lower=()\n    local\
    \ dict_val_upper=()\n    local dict_val_count=${#dict_arr[@]}\n    local dict_key_exists=()\n\
    \    local dict_val_exists=()\n    local dict_key_exists_count=${#dict_key_exists[@]}\n\
    \    local dict_val_exists_count=${#dict_val_exists[@]}\n    local dict_key_not_exists=()\n\
    \    local dict_val_not_exists=()\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \    local dict_val_not_exists_count=${#dict_val_not_exists[@]}\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \    local dict_val_not_exists_count=${#dict_val_not_exists[@]}\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \    local dict_val_not_exists_count=${#dict_val_not_exists[@]}\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \    local dict_val_not_exists_count=${#dict_val_not_exists[@]}\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \    local dict_val_not_exists_count=${#dict_val_not_exists[@]}\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \    local dict_val_not_exists_count=${#dict_val_not_exists[@]}\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \    local dict_val_not_exists_count=${#dict_val_not_exists[@]}\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \    local dict_val_not_exists_count=${#dict_val_not_exists[@]}\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \    local dict_val_not_exists_count=${#dict_val_not_exists[@]}\n    local dict_key_not_exists_count=${#dict_key_not_exists[@]}\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_keys=()\n    local dict_values=()\n    local dict_key_lower=()\n\
    \    local dict_key_upper=()\n    local dict_key_count=()\n    local dict_value_lower=()\n\
    \    local dict_value_upper=()\n    local dict_value_count=()\n    local dict_key_exists=()\n\
    \    local dict_value_exists=()\n    local dict_key_not_exists=()\n    local dict_value_not_exists=()\n\
    \    local dict_key_exists_count=()\n    local dict_value_exists_count=()\n  \
    \  local dict_key_not_exists_count=()\n    local dict_value_not_exists_count=()\n\
    \    local dict_key_exists_count_lower=()\n    local dict_value_exists_count_lower=()\n\
    \    local dict_key_exists_count_upper=()\n    local dict_value_exists_count_upper=()\n\
    \    local dict_key_not_exists_count_lower=()\n    local dict_value_not_exists_count_lower=()\n\
    \    local dict_key_not_exists_count_upper=()\n    local dict_value_not_exists_count_upper=()\n\
    \    local dict_key_exists_count_lower_upper=()\n    local dict_value_exists_count_lower_upper=()\n\
    \    local dict_key_exists_count_upper_lower=()\n    local dict_value_exists_count_upper_lower=()\n\
    \    local dict_key_exists_count_lower_upper_lower=()\n    local dict_value_exists_count_lower_upper_lower=()\n\
    \    local dict_key_exists_count_upper_lower_lower=()\n    local dict_value_exists_count_upper_lower_lower=()\n\
    \    local dict_key_not_exists_count_lower_upper=()\n    local dict_value_not_exists_count_lower_upper=()\n\
    \    local dict_key_not_exists_count_upper_lower=()\n    local dict_value_not_exists_count_upper_lower=()\n\
    \    local dict_key_exists_count_lower_upper_upper=()\n    local dict_value_exists_count_lower_upper_upper=()\n\
    \    local dict_key_exists_count_upper_lower_upper=()\n    local dict_value_exists_count_upper_lower_upper=()\n\
    \    local dict_key_not_exists_count_lower_upper_lower=()\n    local dict_value_not_exists_count_lower_upper_lower=()\n\
    \    local dict_key_not_exists_count_upper_lower_lower=()\n    local dict_value_not_exists_count_upper_lower_lower=()\n\
    \    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=\"$1\"\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local i=0\n    local dict_key\n    local dict_val\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_count\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line=$(echo $dict_lines | cut -d\
    \ ',' -f 1)\n    local dict_key=$(echo $dict_lines | cut -d ',' -f 2)\n    local\
    \ dict_value=$(echo $dict_lines | cut -d ',' -f 3)\n    local dict_key=$(echo\
    \ $dict_key | tr '[:upper:]' '[:lower:]')\n    local dict_value=$(echo $dict_value\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo $dict_key | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo\
    \ $dict_key | tr '[:upper:]' '[:lower:]')\n    local dict_value=$(echo $dict_value\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo $dict_key | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo\
    \ $dict_key | tr '[:upper:]' '[:lower:]')\n    local dict_value=$(echo $dict_value\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo $dict_key | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo\
    \ $dict_key | tr '[:upper:]' '[:lower:]')\n    local dict_value=$(echo $dict_value\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo $dict_key | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe9b088vo.sh: line 45: unexpected EOF while looking for matching
    `''''

    /tmp/tmpe9b088vo.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n   \
    \ local ret\n    local i\n    local j\n    local k\n    local v\n    local len\n\
    \    local len2\n    local len3\n    local len4\n    local len5\n    local len6\n\
    \    local len7\n    local len8\n    local len9\n    local len10\n    local len11\n\
    \    local len12\n    local len13\n    local len14\n    local len15\n    local\
    \ len16\n    local len17\n    local len18\n    local len19\n    local len20\n\
    \    local len21\n    local len22\n    local len23\n    local len24\n    local\
    \ len25\n    local len26\n    local len27\n    local len28\n    local len29\n\
    \    local len30\n    local len31\n    local len32\n    local len33\n    local\
    \ len34\n    local len35\n    local len36\n    local len37\n    local len38\n\
    \    local len39\n    local len40\n    local len41\n    local len42\n    local\
    \ len43\n    local len44\n    local len45\n    local len46\n    local len47\n\
    \    local len48\n    local len49\n    local len50\n    local len51\n    local\
    \ len52\n    local len53\n    local len54\n    local len55\n    local len56\n\
    \    local len57\n    local len58\n    local len59\n    local len60\n    local\
    \ len61\n    local len62\n    local len63\n    local len64\n    local len65\n\
    \    local len66\n    local len67\n    local len68\n    local len69\n    local\
    \ len70\n    local len71\n    local len72\n    local len73\n    local len74\n\
    \    local len75\n    local len76\n    local len77\n    local len78\n    local\
    \ len79\n    local len80\n    local len81\n    local len82\n    local len83\n\
    \    local len84\n    local len85\n    local len86\n    local \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key_count=0\n    local dict_val_count=0\n    local\
    \ dict_key_found=0\n    local dict_val_found=0\n    local dict_key_found2=0\n\
    \    local dict_val_found2=0\n    local dict_key_found3=0\n    local dict_val_found3=0\n\
    \    local dict_key_found4=0\n    local dict_val_found4=0\n    local dict_key_found5=0\n\
    \    local dict_val_found5=0\n    local dict_key_found6=0\n    local dict_val_found6=0\n\
    \    local dict_key_found7=0\n    local dict_val_found7=0\n    local dict_key_found8=0\n\
    \    local dict_val_found8=0\n    local dict_key_found9=0\n    local dict_val_found9=0\n\
    \    local dict_key_found10=0\n    local dict_val_found10=0\n    local dict_key_found11=0\n\
    \    local dict_val_found11=0\n    local dict_key_found12=0\n    local dict_val_found12=0\n\
    \    local dict_key_found13=0\n    local dict_val_found13=0\n    local dict_key_found14=0\n\
    \    local dict_val_found14=0\n    local dict_key_found15=0\n    local dict_val_found15=0\n\
    \    local dict_key_found16=0\n    local dict_val_found16=0\n    local dict_key_found17=0\n\
    \    local dict_val_found17=0\n    local dict_key_found18=0\n    local dict_val_found18=0\n\
    \    local dict_key_found19=0\n    local dict_val_found19=0\n    local dict_key_found20=0\n\
    \    local dict_val_found20=0\n    local dict_key_found21=0\n    local dict_val_found21=0\n\
    \    local dict_key_found22=0\n    local dict_val_found22=0\n    local dict_key_found23=0\n\
    \    local dict_val_found23=0\n    local dict_key_found24=0\n    local dict_val_found24=0\n\
    \    local dict_key_found25=0\n    local dict_val_found25=0\n    local dict_key_found26=0\n\
    \    local dict_val_found26=0\n    local dict_key_found27=0\n    local dict_val_found27=0\n\
    \    local dict_key_found28=0\n    local dict_val_found28=0\n    local dict_key_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local keys=\"$2\"\n    local lower=\"$(echo \"\
    $keys\" | tr '[:upper:]' '[:lower:]')\"\n    local upper=\"$(echo \"$keys\" |\
    \ tr '[:lower:]' '[:upper:]')\"\n    local length=\"$(echo \"$keys\" | wc -c)\"\
    \n    local result=\"$(echo \"$keys\" | sort | uniq -u)\"\n    local count=\"\
    $(echo \"$result\" | wc -l)\"\n    local count2=\"$(echo \"$result\" | wc -c)\"\
    \n    local count3=\"$(echo \"$result\" | wc -c)\"\n    local count4=\"$(echo\
    \ \"$result\" | wc -c)\"\n    local count5=\"$(echo \"$result\" | wc -c)\"\n \
    \   local count6=\"$(echo \"$result\" | wc -c)\"\n    local count7=\"$(echo \"\
    $result\" | wc -c)\"\n    local count8=\"$(echo \"$result\" | wc -c)\"\n    local\
    \ count9=\"$(echo \"$result\" | wc -c)\"\n    local count10=\"$(echo \"$result\"\
    \ | wc -c)\"\n    local count11=\"$(echo \"$result\" | wc -c)\"\n    local count12=\"\
    $(echo \"$result\" | wc -c)\"\n    local count13=\"$(echo \"$result\" | wc -c)\"\
    \n    local count14=\"$(echo \"$result\" | wc -c)\"\n    local count15=\"$(echo\
    \ \"$result\" | wc -c)\"\n    local count16=\"$(echo \"$result\" | wc -c)\"\n\
    \    local count17=\"$(echo \"$result\" | wc -c)\"\n    local count18=\"$(echo\
    \ \"$result\" | wc -c)\"\n    local count19=\"$(echo \"$result\" | wc -c)\"\n\
    \    local count20=\"$(echo \"$result\" | wc -c)\"\n    local count21=\"$(echo\
    \ \"$result\" | wc -c)\"\n    local count22=\"$(echo \"$result\" | wc -c)\"\n\
    \    local count23=\"$(echo \"$result\" | wc -c)\"\n    local count24=\"$(echo\
    \ \"$result\" | wc -c)\"\n    local count25=\"$(echo \"$result\" | wc -c)\"\n\
    \    local count26=\"$(echo \"$result\" | wc -c)\"\n    local count27=\"$(echo\
    \ \"$\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd7vfdj_v.sh: line 66: unexpected EOF while looking for matching
    `"''

    /tmp/tmpd7vfdj_v.sh: line 70: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=\"$1\"\n    local dict_arr=($(echo \"$dict_str\" | tr\
    \ \",\" \"\\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_len2=$((dict_len-1))\n\
    \    local dict_len3=$((dict_len-dict_len2))\n    local dict_len4=$((dict_len-dict_len3))\n\
    \    local dict_len5=$((dict_len-dict_len4))\n    local dict_len6=$((dict_len-dict_len5))\n\
    \    local dict_len7=$((dict_len-dict_len6))\n    local dict_len8=$((dict_len-dict_len7))\n\
    \    local dict_len9=$((dict_len-dict_len8))\n    local dict_len10=$((dict_len-dict_len9))\n\
    \    local dict_len11=$((dict_len-dict_len10))\n    local dict_len12=$((dict_len-dict_len11))\n\
    \    local dict_len13=$((dict_len-dict_len12))\n    local dict_len14=$((dict_len-dict_len13))\n\
    \    local dict_len15=$((dict_len-dict_len14))\n    local dict_len16=$((dict_len-dict_len15))\n\
    \    local dict_len17=$((dict_len-dict_len16))\n    local dict_len18=$((dict_len-dict_len17))\n\
    \    local dict_len19=$((dict_len-dict_len18))\n    local dict_len20=$((dict_len-dict_len19))\n\
    \    local dict_len21=$((dict_len-dict_len20))\n    local dict_len22=$((dict_len-dict_len21))\n\
    \    local dict_len23=$((dict_len-dict_len22))\n    local dict_len24=$((dict_len-dict_len23))\n\
    \    local dict_len25=$((dict_len-dict_len24))\n    local dict_len26=$((dict_len-dict_len25))\n\
    \    local dict_len27=$((dict_len-dict_len26))\n    local dict_len28=$((dict_len-dict_len27))\n\
    \    local dict_len29=$((dict_len-dict_len28))\n    local dict_len30=$((dict_len-dict_len29))\n\
    \    local dict_len31=$((dict_len-dict_len30))\n    local dict_len32=$((dict_len-dict_len31))\n\
    \    local dict_len33=$((dict_len-dict_len32))\n    local dict_len34=$((dict_len-dict_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2_qy7avs.sh: line 54: unexpected EOF while looking for matching
    `)''

    /tmp/tmp2_qy7avs.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key_str\n    local dict_val_str\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line=$(echo \"$dict_lines\" | head\
    \ -n 1)\n    local dict_line_key=$(echo \"$dict_line\" | cut -d ',' -f 1)\n  \
    \  local dict_line_val=$(echo \"$dict_line\" | cut -d ',' -f 2)\n    local dict_line_key_upper=$(echo\
    \ \"$dict_line_key\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_val_upper=$(echo\
    \ \"$dict_line_val\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_key_lower=$(echo\
    \ \"$dict_line_key\" | tr '[:lower:]' '[:upper:]')\n    local dict_line_val_lower=$(echo\
    \ \"$dict_line_val\" | tr '[:lower:]' '[:upper:]')\n    local dict_line_key_equal=$(echo\
    \ \"$dict_line_key\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_val_equal=$(echo\
    \ \"$dict_line_val\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_key_not_equal=$(echo\
    \ \"$dict_line_key\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_val_not_equal=$(echo\
    \ \"$dict_line_val\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_key_empty=$(echo\
    \ \"$dict_line_key\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_val_empty=$(echo\
    \ \"$dict_line_val\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_key_not_empty=$(echo\
    \ \"$dict_line_key\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_val_not_empty=$(echo\
    \ \"$dict_line_val\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_key_not_empty=$(echo\
    \ \"$dict_line_key\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_val_not_empty=$(echo\
    \ \"$dict_line_val\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_key_not_empty=$(echo\
    \ \"$dict_line_key\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_val_not_empty=$(echo\
    \ \"$dict_line_val\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_key_not_empty=$(echo\
    \ \"$dict_line_key\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_val_not_empty=$(echo\
    \ \"$dict_line_val\" | tr '[:upper:]' '[:lower:]')\n    local dict_line_key_not_empty=$(echo\
    \ \"$dict_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5cl9hj62.sh: line 56: unexpected EOF while looking for matching
    `"''

    /tmp/tmp5cl9hj62.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_key=${dict_arr[0]}\n\
    \    local dict_val=${dict_arr[1]}\n    local dict_lower=${dict_key^^}\n    local\
    \ dict_upper=${dict_key^^}\n    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpttqjseh9.sh: line 88: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_val\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local result\n    local\
    \ i\n    local j\n    local k\n    local v\n    local len\n    local key_len\n\
    \    local val_len\n    local key_upper\n    local val_upper\n    local key_lower\n\
    \    local val_lower\n    local key_found\n    local val_found\n    local key_not_found\n\
    \    local val_not_found\n    local key_found\n    local val_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_found\n    local val_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_found\n    local\
    \ val_found\n    local key_not_found\n    local val_not_found\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_found\n    local val_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_found\n    local val_found\n    local key_not_found\n    local\
    \ val_not_found\n    local key_found\n    local val_found\n    local key_not_found\n\
    \    local val_not_found\n    local key_found\n    local val_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_found\n    local val_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_found\n    local\
    \ val_found\n    local key_not_found\n    local val_not_found\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_found\n    local val_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_found\n    local val_found\n    local key_not_found\n    local\
    \ val_not_found\n    local key_found\n    local val_found\n    local key_not_found\n\
    \    local val_not_found\n    local key_found\n    local val_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_found\n    local val_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_found\n    local\
    \ val_found\n    local key_not_found\n    local val_not_found\n    \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_lower\n    local dict_upper\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_key_index\n\
    \    local dict_value_index\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_key_index\n    local dict_value_index\n    local dict_lower_index\n\
    \    local dict_upper_index\n    local dict_key_index\n    local dict_value_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_key_index\n\
    \    local dict_value_index\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_key_index\n    local dict_value_index\n    local dict_lower_index\n\
    \    local dict_upper_index\n    local dict_key_index\n    local dict_value_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_key_index\n\
    \    local dict_value_index\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_key_index\n    local dict_value_index\n    local dict_lower_index\n\
    \    local dict_upper_index\n    local dict_key_index\n    local dict_value_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_key_index\n\
    \    local dict_value_index\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_key_index\n    local dict_value_index\n    local dict_lower_index\n\
    \    local dict_upper_index\n    local dict_key_index\n    local dict_value_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_key_index\n\
    \    local dict_value_index\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_key_index\n    local dict_value_index\n    local dict_lower_index\n\
    \    local dict_upper_index\n    local dict_key_index\n    local dict_value_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_key_index\n\
    \    local dict_value_index\n    local dict_lower_index\n    local dict_upper_index\n\
    \    local dict_key_index\n    local dict_value_index\n    local dict_lower_index\n\
    \    local dict_upper_index\n    local dict_key_index\n    local dict_value_index\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_key_index\n\
    \    local dict_value_index\n    local dict_lower_index\n    local dict_\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_lower\n    local dict_upper\n\
    \    local dict_found\n    local dict_found1\n    local dict_found2\n    local\
    \ dict_found3\n    local dict_found4\n    local dict_found5\n    local dict_found6\n\
    \    local dict_found7\n    local dict_found8\n    local dict_found9\n    local\
    \ dict_found10\n    local dict_found11\n    local dict_found12\n    local dict_found13\n\
    \    local dict_found14\n    local dict_found15\n    local dict_found16\n    local\
    \ dict_found17\n    local dict_found18\n    local dict_found19\n    local dict_found20\n\
    \    local dict_found21\n    local dict_found22\n    local dict_found23\n    local\
    \ dict_found24\n    local dict_found25\n    local dict_found26\n    local dict_found27\n\
    \    local dict_found28\n    local dict_found29\n    local dict_found30\n    local\
    \ dict_found31\n    local dict_found32\n    local dict_found33\n    local dict_found34\n\
    \    local dict_found35\n    local dict_found36\n    local dict_found37\n    local\
    \ dict_found38\n    local dict_found39\n    local dict_found40\n    local dict_found41\n\
    \    local dict_found42\n    local dict_found43\n    local dict_found44\n    local\
    \ dict_found45\n    local dict_found46\n    local dict_found47\n    local dict_found48\n\
    \    local dict_found49\n    local dict_found50\n    local dict_found51\n    local\
    \ dict_found52\n    local dict_found53\n    local dict_found54\n    local dict_found55\n\
    \    local dict_found56\n    local dict_found57\n    local dict_found58\n    local\
    \ dict_found59\n    local dict_found60\n    local dict_found61\n    local dict_found62\n\
    \    local dict_found63\n    local dict_found64\n    local dict_found65\n    local\
    \ dict_found66\n    local dict_found67\n    local dict_found68\n    local dict_found69\n\
    \    local dict_found70\n    local dict_found71\n    local dict_found72\n    local\
    \ dict_found73\n    local dict_found74\n    local dict_found75\n    local dict_found76\n\
    \    local dict_found\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n    lower=$(echo $dict | awk -F, '{print $1}')\n  \
    \  upper=$(echo $dict | awk -F, '{print $2}')\n    if [ -z \"$lower\" -o -z \"\
    $upper\" ]; then\n        result=\"false\"\n    else\n        result=\"true\"\n\
    \        for value in $lower; do\n            if [ -z \"$value\" ]; then\n   \
    \             result=\"false\"\n                break\n            fi\n      \
    \  done\n        for value in $upper; do\n            if [ -z \"$value\" ]; then\n\
    \                result=\"false\"\n                break\n            fi\n   \
    \     done\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local i=0\n    local dict_key\n    local dict_value\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict_lines=$1\n  local dict_line\n  local dict_key\n  local dict_value\n\
    \  local dict_keys=()\n  local dict_values=()\n  local dict_key\n  local dict_value\n\
    \  local dict_key_upper\n  local dict_value_upper\n  local dict_key_lower\n  local\
    \ dict_value_lower\n  local dict_key_upper\n  local dict_value_upper\n  local\
    \ dict_key_lower\n  local dict_value_lower\n  local dict_key_upper\n  local dict_value_upper\n\
    \  local dict_key_lower\n  local dict_value_lower\n  local dict_key_upper\n  local\
    \ dict_value_upper\n  local dict_key_lower\n  local dict_value_lower\n  local\
    \ dict_key_upper\n  local dict_value_upper\n  local dict_key_lower\n  local dict_value_lower\n\
    \  local dict_key_upper\n  local dict_value_upper\n  local dict_key_lower\n  local\
    \ dict_value_lower\n  local dict_key_upper\n  local dict_value_upper\n  local\
    \ dict_key_lower\n  local dict_value_lower\n  local dict_key_upper\n  local dict_value_upper\n\
    \  local dict_key_lower\n  local dict_value_lower\n  local dict_key_upper\n  local\
    \ dict_value_upper\n  local dict_key_lower\n  local dict_value_lower\n  local\
    \ dict_key_upper\n  local dict_value_upper\n  local dict_key_lower\n  local dict_value_lower\n\
    \  local dict_key_upper\n  local dict_value_upper\n  local dict_key_lower\n  local\
    \ dict_value_lower\n  local dict_key_upper\n  local dict_value_upper\n  local\
    \ dict_key_lower\n  local dict_value_lower\n  local dict_key_upper\n  local dict_value_upper\n\
    \  local dict_key_lower\n  local dict_value_lower\n  local dict_key_upper\n  local\
    \ dict_value_upper\n  local dict_key_lower\n  local dict_value_lower\n  local\
    \ dict_key_upper\n  local dict_value_upper\n  local dict_key_lower\n  local dict_value_lower\n\
    \  local dict_key_upper\n  local dict_value_upper\n  local dict_key_lower\n  local\
    \ dict_value_lower\n  local dict_key_upper\n  local dict_value_upper\n  local\
    \ dict_key_lower\n  local dict_value_lower\n  local dict_key_upper\n  local dict_value_upper\n\
    \  local dict_key_lower\n  local dict_value_lower\n  local dict_key_upper\n  local\
    \ dict_value_upper\n  local dict_key_lower\n  local dict_value_lower\n  local\
    \ dict_key_upper\n  local dict_value_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_key2\n    local dict_value2\n    local dict_key3\n\
    \    local dict_value3\n    local dict_key4\n    local dict_value4\n    local\
    \ dict_key5\n    local dict_value5\n    local dict_key6\n    local dict_value6\n\
    \    local dict_key7\n    local dict_value7\n    local dict_key8\n    local dict_value8\n\
    \    local dict_key9\n    local dict_value9\n    local dict_key10\n    local dict_value10\n\
    \    local dict_key11\n    local dict_value11\n    local dict_key12\n    local\
    \ dict_value12\n    local dict_key13\n    local dict_value13\n    local dict_key14\n\
    \    local dict_value14\n    local dict_key15\n    local dict_value15\n    local\
    \ dict_key16\n    local dict_value16\n    local dict_key17\n    local dict_value17\n\
    \    local dict_key18\n    local dict_value18\n    local dict_key19\n    local\
    \ dict_value19\n    local dict_key20\n    local dict_value20\n    local dict_key21\n\
    \    local dict_value21\n    local dict_key22\n    local dict_value22\n    local\
    \ dict_key23\n    local dict_value23\n    local dict_key24\n    local dict_value24\n\
    \    local dict_key25\n    local dict_value25\n    local dict_key26\n    local\
    \ dict_value26\n    local dict_key27\n    local dict_value27\n    local dict_key28\n\
    \    local dict_value28\n    local dict_key29\n    local dict_value29\n    local\
    \ dict_key30\n    local dict_value30\n    local dict_key31\n    local dict_value31\n\
    \    local dict_key32\n    local dict_value32\n    local dict_key33\n    local\
    \ dict_value33\n    local dict_key34\n    local dict_value34\n    local dict_key35\n\
    \    local dict_value35\n    local dict_key36\n    local dict_value36\n    local\
    \ dict_key37\n    local dict_value37\n    local dict_key38\n    local dict_value38\n\
    \    local dict_key39\n    local dict_value39\n    local dict_key40\n    local\
    \ dict_value40\n    local dict_key41\n    local dict_value41\n    local dict_key42\n\
    \    local dict_value\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo $1 | tr \",\" \"\\n\")\n    local vals=$(echo $1 |\
    \ tr \",\" \"\\n\")\n    local lower=false\n    local upper=false\n    local count=0\n\
    \    local key\n    local val\n    local val2\n    local lower2\n    local upper2\n\
    \    local key2\n    local val2\n    local lower3\n    local upper3\n    local\
    \ key3\n    local val3\n    local lower4\n    local upper4\n    local key4\n \
    \   local val4\n    local lower5\n    local upper5\n    local key5\n    local\
    \ val5\n    local lower6\n    local upper6\n    local key6\n    local val6\n \
    \   local lower7\n    local upper7\n    local key7\n    local val7\n    local\
    \ lower8\n    local upper8\n    local key8\n    local val8\n    local lower9\n\
    \    local upper9\n    local key9\n    local val9\n    local lower10\n    local\
    \ upper10\n    local key10\n    local val10\n    local lower11\n    local upper11\n\
    \    local key11\n    local val11\n    local lower12\n    local upper12\n    local\
    \ key12\n    local val12\n    local lower13\n    local upper13\n    local key13\n\
    \    local val13\n    local lower14\n    local upper14\n    local key14\n    local\
    \ val14\n    local lower15\n    local upper15\n    local key15\n    local val15\n\
    \    local lower16\n    local upper16\n    local key16\n    local val16\n    local\
    \ lower17\n    local upper17\n    local key17\n    local val17\n    local lower18\n\
    \    local upper18\n    local key18\n    local val18\n    local lower19\n    local\
    \ upper19\n    local key19\n    local val19\n    local lower20\n    local upper20\n\
    \    local key20\n    local val20\n    local lower21\n    local upper21\n    local\
    \ key21\n    local val21\n    local lower22\n    local upper22\n    local key22\n\
    \    local val22\n    local lower23\n    local upper23\n    local key23\n    local\
    \ val23\n    local lower24\n    local upper24\n    local key24\n    local val\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_val\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_equal\n\
    \    local dict_val_equal\n    local dict_key_not_equal\n    local dict_val_not_equal\n\
    \    local dict_key_empty\n    local dict_val_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n    local dict_val_not_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n    local dict_val_not_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n    local dict_val_not_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n    local dict_val_not_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n    local dict_val_not_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n    local dict_val_not_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n    local dict_val_not_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n    local dict_val_not_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n    local dict_val_not_empty\n    local dict_key_not_empty\n\
    \    local dict_val_not_empty\n    local dict_key_not_empty\n    local dict_val_not_empty\n\
    \    local dict_key_not_empty\n\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key=\n\
    \    local dict_value=\n    local dict_line_key\n    local dict_line_value\n \
    \   local dict_key_value\n    local dict_key_values=()\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n    local dict_key_value_upper\n\
    \    local dict_key_value_lower\n    local dict_key_value_upper\n    local dict_key_value_lower\n\
    \    local dict_key_value_upper\n    local dict_key_value_lower\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local key_len=0\n    local val_len=0\n    local all_keys_are_str=false\n\
    \    local all_keys_are_upper=false\n    local i=0\n    local j=0\n    local k=0\n\
    \    local val\n    local key\n    local val\n    local key_is_str=false\n   \
    \ local val_is_str=false\n    local key_is_upper=false\n    local val_is_upper=false\n\
    \    local key_is_lower=false\n    local val_is_lower=false\n    local all_keys_are_str_or_upper=false\n\
    \    local all_keys_are_str_or_lower=false\n    local all_keys_are_upper_or_lower=false\n\
    \    local all_keys_are_str_or_upper_or_lower=false\n    local all_keys_are_str_or_upper_or_lower_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal=false\n    local\
    \ all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal=false\n    local\
    \ all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal=false\n\
    \    local all_keys_are_str_or_upper_or_lower_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line=$(echo $dict_lines | cut -d','\
    \ -f1)\n    local dict_key=$(echo $dict_lines | cut -d',' -f2)\n    local dict_value=$(echo\
    \ $dict_lines | cut -d',' -f3)\n    local dict_key=$(echo $dict_key | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo\
    \ $dict_key | tr '[:upper:]' '[:lower:]')\n    local dict_value=$(echo $dict_value\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo $dict_key | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo\
    \ $dict_key | tr '[:upper:]' '[:lower:]')\n    local dict_value=$(echo $dict_value\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo $dict_key | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo\
    \ $dict_key | tr '[:upper:]' '[:lower:]')\n    local dict_value=$(echo $dict_value\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo $dict_key | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n    local dict_key=$(echo\
    \ $dict_key | tr '[:upper:]' '[:lower\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzp9bqa3z.sh: line 45: unexpected EOF while looking for matching
    `''''

    /tmp/tmpzp9bqa3z.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dictionary=\"$1\"\n    local string_keys=\"$(echo \"$dictionary\"\
    \ | cut -d ',' -f 1)\"\n    local string_values=\"$(echo \"$dictionary\" | cut\
    \ -d ',' -f 2)\"\n    local string_keys_lower=\"$(echo \"$string_keys\" | tr '[:upper:]'\
    \ '[:lower:]')\"\n    local string_values_lower=\"$(echo \"$string_values\" |\
    \ tr '[:upper:]' '[:lower:]')\"\n    local string_keys_upper=\"$(echo \"$string_keys\"\
    \ | tr '[:lower:]' '[:upper:]')\"\n    local string_values_upper=\"$(echo \"$string_values\"\
    \ | tr '[:lower:]' '[:upper:]')\"\n    local string_keys_equal=\"$(echo \"$string_keys\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]')\"\n    local string_values_equal=\"\
    $(echo \"$string_values\" | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]')\"\
    \n    local string_keys_not_equal=\"$(echo \"$string_keys\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]')\"\n    local string_values_not_equal=\"\
    $(echo \"$string_values\" | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:upper:]' '[:lower:]')\"\n    local string_keys_empty=\"$(echo \"$string_keys\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]')\"\
    \n    local string_values_empty=\"$(echo \"$string_values\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]' | tr '[:upper:]' '[:lower:]')\"\
    \n    local string_keys_not_empty=\"$(echo \"$string_keys\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcjr7j6do.sh: line 32: unexpected EOF while looking for matching
    `''''

    /tmp/tmpcjr7j6do.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local key_len=0\n    local key_str\n    local val_str\n    local val_arr\n\
    \    local val_len\n    local key_is_upper\n    local val_is_upper\n    local\
    \ key_is_lower\n    local val_is_lower\n    local key_is_empty\n    local val_is_empty\n\
    \    local key_is_number\n    local val_is_number\n    local key_is_comma\n  \
    \  local val_is_comma\n    local key_is_comma\n    local val_is_comma\n    local\
    \ key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local val_is_comma\n\
    \    local key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local\
    \ val_is_comma\n    local key_is_comma\n    local val_is_comma\n    local key_is_comma\n\
    \    local val_is_comma\n    local key_is_comma\n    local val_is_comma\n    local\
    \ key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local val_is_comma\n\
    \    local key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local\
    \ val_is_comma\n    local key_is_comma\n    local val_is_comma\n    local key_is_comma\n\
    \    local val_is_comma\n    local key_is_comma\n    local val_is_comma\n    local\
    \ key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local val_is_comma\n\
    \    local key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local\
    \ val_is_comma\n    local key_is_comma\n    local val_is_comma\n    local key_is_comma\n\
    \    local val_is_comma\n    local key_is_comma\n    local val_is_comma\n    local\
    \ key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local val_is_comma\n\
    \    local key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local\
    \ val_is_comma\n    local key_is_comma\n    local val_is_comma\n    local key_is_comma\n\
    \    local val_is_comma\n    local key_is_comma\n    local val_is_comma\n    local\
    \ key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local val_is_comma\n\
    \    local key_is_comma\n    local val_is_comma\n    local key_is_comma\n    local\
    \ val_is_comma\n    local key_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo $1 | tr \",\" \"\\n\")\n    local values=$(echo $1\
    \ | tr \",\" \"\\n\")\n    local lower=false\n    local upper=false\n    local\
    \ count=0\n    local key\n    local value\n    local keylen\n    local valuelen\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local keychars\n    local valuechars\n\
    \    local keychar\n    local valuechar\n    local key\n}\n\ncandidate() {\n \
    \   check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local key_str\n    local val_str\n\
    \    local key_arr\n    local val_arr\n    local key_len\n    local val_len\n\
    \    local key_lower\n    local val_lower\n    local key_upper\n    local val_upper\n\
    \    local key_found\n    local val_found\n    local key_not_found\n    local\
    \ val_not_found\n    local key_not_found\n    local val_not_found\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_found\n    local val_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_found\n    local\
    \ val_found\n    local key_not_found\n    local val_not_found\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_found\n    local val_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_found\n    local val_found\n    local key_not_found\n    local\
    \ val_not_found\n    local key_found\n    local val_found\n    local key_not_found\n\
    \    local val_not_found\n    local key_found\n    local val_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_found\n    local val_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_found\n    local\
    \ val_found\n    local key_not_found\n    local val_not_found\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_found\n    local val_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_found\n    local val_found\n    local key_not_found\n    local\
    \ val_not_found\n    local key_found\n    local val_found\n    local key_not_found\n\
    \    local val_not_found\n    local key_found\n    local val_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_found\n    local val_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_found\n    local\
    \ val_found\n    local key_not_found\n    local val_not_found\n    local key_found\n\
    \    local val_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local found\n    local count\n    local keycount\n    local valuecount\n\
    \    local lowercount\n    local uppercount\n    local foundcount\n    local key\n\
    \    local value\n    local lower\n    local upper\n    local found\n    local\
    \ count\n    local keycount\n    local valuecount\n    local lowercount\n    local\
    \ uppercount\n    local foundcount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local valuecount\n    local lowercount\n    local uppercount\n    local foundcount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local valuecount\n    local lowercount\n\
    \    local uppercount\n    local foundcount\n    local key\n    local value\n\
    \    local lower\n    local upper\n    local found\n    local count\n    local\
    \ keycount\n    local valuecount\n    local lowercount\n    local uppercount\n\
    \    local foundcount\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local found\n    local count\n    local keycount\n    local valuecount\n\
    \    local lowercount\n    local uppercount\n    local foundcount\n    local key\n\
    \    local value\n    local lower\n    local upper\n    local found\n    local\
    \ count\n    local keycount\n    local valuecount\n    local lowercount\n    local\
    \ uppercount\n    local foundcount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local valuecount\n    local lowercount\n    local uppercount\n    local foundcount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local valuecount\n    local lowercount\n\
    \    local uppercount\n    local foundcount\n    local key\n    local value\n\
    \    local lower\n    local upper\n    local found\n    local count\n    local\
    \ keycount\n    local valuecount\n    local lowercount\n    local uppercount\n\
    \    local foundcount\n    local key\n    local value\n    local lower\n    local\
    \ upper\n\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower_in\n    local dict_value_lower_in\n    local dict_key_upper_in\n\
    \    local dict_value_upper_in\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower_in\n\
    \    local dict_value_lower_in\n    local dict_key_upper_in\n    local dict_value_upper_in\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower_in\n    local dict_value_lower_in\n\
    \    local dict_key_upper_in\n    local dict_value_upper_in\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower_in\n    local dict_value_lower_in\n    local dict_key_upper_in\n\
    \    local dict_value_upper_in\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower_in\n\
    \    local dict_value_lower_in\n    local dict_key_upper_in\n    local dict_value_upper_in\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower_in\n    local dict_value_lower_in\n\
    \    local dict_key_upper_in\n    local dict_value_upper_in\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower_in\n    local dict_value_lower_in\n    local dict_key_upper_in\n\
    \    local dict_value_upper_in\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower_in\n\
    \    local dict_value_lower_in\n    local dict_key_upper_in\n    local dict_value_upper_in\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower_in\n    local dict_value_lower_in\n\
    \    local dict_key_upper_in\n    local dict_value_upper_in\n    local dict_key_lower\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local key\n    local value\n    local key2\n    local\
    \ value2\n    local result\n    local count\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_len=$((dict_len-1))\n    local dict_key\n    local dict_value\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local result\n    local i\n    local j\n    local\
    \ k\n    local v\n    local dict_key_count\n    local dict_value_count\n    local\
    \ dict_key_count_upper\n    local dict_value_count_upper\n    local dict_key_count_lower\n\
    \    local dict_value_count_lower\n    local dict_key_count_equal\n    local dict_value_count_equal\n\
    \    local dict_key_count_not_equal\n    local dict_value_count_not_equal\n  \
    \  local dict_key_count_empty\n    local dict_value_count_empty\n    local dict_key_count_not_empty\n\
    \    local dict_value_count_not_empty\n    local dict_key_count_not_empty\n  \
    \  local dict_value_count_not_empty\n    local dict_key_count_not_empty\n    local\
    \ dict_value_count_not_empty\n    local dict_key_count_not_empty\n    local dict_value_count_not_empty\n\
    \    local dict_key_count_not_empty\n    local dict_value_count_not_empty\n  \
    \  local dict_key_count_not_empty\n    local dict_value_count_not_empty\n    local\
    \ dict_key_count_not_empty\n    local dict_value_count_not_empty\n    local dict_key_count_not_empty\n\
    \    local dict_value_count_not_empty\n    local dict_key_count_not_empty\n  \
    \  local dict_value_count_not_empty\n    local dict_key_count_not_empty\n    local\
    \ dict_value_count_not_empty\n    local dict_key_count_not_empty\n    local dict_value_count_not_empty\n\
    \    local dict_key_count_not_empty\n    local dict_value_count_not_empty\n  \
    \  local dict_key_count_not_empty\n    local dict_value_count_not_empty\n    local\
    \ dict_key_count_not_empty\n    local dict_value_count_not_empty\n    local dict_key_count_not_empty\n\
    \    local dict_value_count_not_empty\n    local dict_key_count_not_empty\n  \
    \  local dict_value_count_not_empty\n    local dict_key_count_not_empty\n    local\
    \ dict_value_count_not_empty\n    local dict_key_count_not_empty\n    local dict_value_count_not_empty\n\
    \    local dict_key_count_not_empty\n    local dict_value_count_not_empty\n  \
    \  local dict_key_count_not_empty\n    local dict_value_count_not_empty\n    local\
    \ dict_key_count_not_empty\n    local dict_value_count_not_empty\n    \n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_key\n    local dict_value\n\
    \    local dict_lower\n    local dict_upper\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_found\n    local dict_found\n    local dict_found\n\
    \    local dict_found\n    local dict_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dictionary=\"$1\"\n    local dictionaryKeys=\"$2\"\n    local dictionaryValues=\"\
    $3\"\n    local dictionaryKeysLower=\"$4\"\n    local dictionaryKeysUpper=\"$5\"\
    \n    local dictionaryValuesLower=\"$6\"\n    local dictionaryValuesUpper=\"$7\"\
    \n    local dictionaryKeysCount=\"$8\"\n    local dictionaryValuesCount=\"$9\"\
    \n    local dictionaryKeysCountLower=\"$10\"\n    local dictionaryKeysCountUpper=\"\
    $11\"\n    local dictionaryValuesCountLower=\"$12\"\n    local dictionaryValuesCountUpper=\"\
    $13\"\n    local dictionaryKeysCountCount=\"$14\"\n    local dictionaryValuesCountCount=\"\
    $15\"\n    local dictionaryKeysCountCountLower=\"$16\"\n    local dictionaryKeysCountCountUpper=\"\
    $17\"\n    local dictionaryValuesCountCountLower=\"$18\"\n    local dictionaryValuesCountCountUpper=\"\
    $19\"\n    local dictionaryKeysCountCountCount=\"$20\"\n    local dictionaryValuesCountCountCount=\"\
    $21\"\n    local dictionaryKeysCountCountCountLower=\"$22\"\n    local dictionaryKeysCountCountCountUpper=\"\
    $23\"\n    local dictionaryValuesCountCountCountLower=\"$24\"\n    local dictionaryValuesCountCountCountUpper=\"\
    $25\"\n    local dictionaryKeysCountCountCountCount=\"$26\"\n    local dictionaryValuesCountCountCountCount=\"\
    $27\"\n    local dictionaryKeysCountCountCountCountLower=\"$28\"\n    local dictionaryKeysCountCountCountCountUpper=\"\
    $29\"\n    local dictionaryValuesCountCountCountCountLower=\"$30\"\n    local\
    \ dictionaryValuesCountCountCountUpper=\"$31\"\n    local dictionaryKeysCountCountCountCountCount=\"\
    $32\"\n    local dictionaryValuesCountCountCountCount=\"$33\"\n    local dictionaryKeysCountCountCountCountCountLower=\"\
    $34\"\n    local dictionaryKeysCountCountCountCountCountUpper=\"$35\"\n    local\
    \ dictionaryValuesCountCountCountCountLower=\"$36\"\n    local dictionaryValuesCountCountCountCountUpper=\"\
    $37\"\n    local dictionaryKeysCountCountCountCountCount=\"$38\"\n    local dictionaryValuesCountCountCountCountUpper=\"\
    $39\"\n    local dictionaryKeysCountCountCountCountCountLower=\"$40\"\n    local\
    \ dictionaryKeysCountCountCountCountCountCountUpper=\"$41\"\n    local dictionaryValuesCountCountCountCountCountUpper=\"\
    $42\"\n    local dictionaryKeysCountCountCountCountCountCount=\"$43\"\n    local\
    \ dictionaryValuesCountCountCountCount\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_val\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local result\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict_str=$1\n  local dict_arr=($dict_str)\n  local dict_len=${#dict_arr[@]}\n\
    \  local dict_key\n  local dict_val\n  local dict_key_upper\n  local dict_val_upper\n\
    \  local dict_key_lower\n  local dict_val_lower\n  local dict_key_count\n  local\
    \ dict_val_count\n  local dict_key_count2\n  local dict_val_count2\n  local dict_key_count3\n\
    \  local dict_val_count3\n  local dict_key_count4\n  local dict_val_count4\n \
    \ local dict_key_count5\n  local dict_val_count5\n  local dict_key_count6\n  local\
    \ dict_val_count6\n  local dict_key_count7\n  local dict_val_count7\n  local dict_key_count8\n\
    \  local dict_val_count8\n  local dict_key_count9\n  local dict_val_count9\n \
    \ local dict_key_count10\n  local dict_val_count10\n  local dict_key_count11\n\
    \  local dict_val_count11\n  local dict_key_count12\n  local dict_val_count12\n\
    \  local dict_key_count13\n  local dict_val_count13\n  local dict_key_count14\n\
    \  local dict_val_count14\n  local dict_key_count15\n  local dict_val_count15\n\
    \  local dict_key_count16\n  local dict_val_count16\n  local dict_key_count17\n\
    \  local dict_val_count17\n  local dict_key_count18\n  local dict_val_count18\n\
    \  local dict_key_count19\n  local dict_val_count19\n  local dict_key_count20\n\
    \  local dict_val_count20\n  local dict_key_count21\n  local dict_val_count21\n\
    \  local dict_key_count22\n  local dict_val_count22\n  local dict_key_count23\n\
    \  local dict_val_count23\n  local dict_key_count24\n  local dict_val_count24\n\
    \  local dict_key_count25\n  local dict_val_count25\n  local dict_key_count26\n\
    \  local dict_val_count26\n  local dict_key_count27\n  local dict_val_count27\n\
    \  local dict_key_count28\n  local dict_val_count28\n  local dict_key_count29\n\
    \  local dict_val_count29\n  local dict_key_count30\n  local dict_val_count30\n\
    \  local dict_key_count31\n  local dict_val_count31\n  local dict_key_count32\n\
    \  local dict_val_count32\n  local dict_key_count\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr ',' '\\\
    n'))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local dict_values=()\n\
    \    local dict_key_str\n    local dict_value_str\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n   \
    \ local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_key=${dict_arr[0]}\n\
    \    local dict_val=${dict_arr[1]}\n    local dict_lower=${dict_key%,*}\n    local\
    \ dict_upper=${dict_key#*,}\n    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_lower\n    local dict_upper\n\
    \    local dict_lower_index\n    local dict_upper_index\n    local dict_lower_index\n\
    \    local dict_upper_index\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_upper_count\n\
    \    local dict_lower_count\n    local dict_upper_count\n    local dict_lower_count\n\
    \    local dict_upper_count\n    local dict_lower_count\n    local dict_\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n    \n    # Return false if the dictionary is empty\n\
    \    if [ -z \"$dict\" ]; then\n        echo \"false\"\n        return\n    fi\n\
    \    \n    # Return false if the dictionary has only one line\n    if [ ${#dict}\
    \ -eq 1 ]; then\n        echo \"false\"\n        return\n    fi\n    \n    # Return\
    \ false if the dictionary has more than one line\n    if [ ${#dict} -gt 1 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    \n    # Return false if the\
    \ dictionary has only one column\n    if [ ${#dict} -eq 2 ]; then\n        echo\
    \ \"false\"\n        return\n    fi\n    \n    # Return false if the dictionary\
    \ has more than one column\n    if [ ${#dict} -gt 2 ]; then\n        echo \"false\"\
    \n        return\n    fi\n    \n    # Return false if the dictionary has only\
    \ one key\n    if [ ${#dict} -eq 1 ]; then\n        echo \"false\"\n        return\n\
    \    fi\n    \n    # Return false if the dictionary has more than one key\n  \
    \  if [ ${#dict} -gt 1 ]; then\n        echo \"false\"\n        return\n    fi\n\
    \    \n    # Return false if the dictionary has only one value\n    if [ ${#dict}\
    \ -eq 2 ]; then\n        echo \"false\"\n        return\n    fi\n    \n    # Return\
    \ false if the dictionary has more than one value\n    if [ ${#dict} -gt 2 ];\
    \ then\n        echo \"false\"\n        return\n    fi\n    \n    # Return false\
    \ if the dictionary has only one key and value\n    if [ ${#dict} -eq 2 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    \n    # Return false if the\
    \ dictionary has more than one key and value\n    if [ ${#dict} -gt 2 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    \n    # Return false if the\
    \ dictionary has only one key and one value\n    if [ ${#dict} -eq 1 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    \n    # Return false if the\
    \ dictionary has more than one key and one value\n    if [ ${#dict} -gt 1 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    \n    # Return false if the\
    \ dictionary has only one key and two values\n    if [ ${#dict} -eq 2 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    \n    # Return false if the\
    \ dictionary has more than one key and two values\n    if [ ${#dict} -gt 2 ];\
    \ then\n        echo \"false\"\n        return\n    fi\n    \n    # Return false\
    \ if the dictionary has \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local key\n    local value\n    local dict\n    local keys_in_lower\n\
    \    local keys_in_upper\n    local result\n\n    IFS=',' read -r -a array <<<\
    \ \"$1\"\n    IFS=',' read -r -a keys <<< \"$2\"\n\n    dict=()\n    for (( i=0;\
    \ i<${#array[@]}; i++ )); do\n        key=${array[$i]}\n        value=${array[$((i+1))]}\n\
    \        dict+=(\"$key=$value\")\n    done\n\n    keys_in_lower=0\n    keys_in_upper=0\n\
    \    for (( i=0; i<${#dict[@]}; i++ )); do\n        key=${dict[$i]}\n        value=${dict[$((i+1))]}\n\
    \        if [[ \"$key\" =~ ^[a-z]$ ]]; then\n            keys_in_lower=$((keys_in_lower+1))\n\
    \        else\n            keys_in_upper=$((keys_in_upper+1))\n        fi\n  \
    \  done\n\n    if [[ $keys_in_lower -eq 0 ]]; then\n        result=\"true\"\n\
    \    elif [[ $keys_in_upper -eq 0 ]]; then\n        result=\"false\"\n    else\n\
    \        result=\"false\"\n    fi\n    \n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dictionary=\"$1\"\n    local dictionaryKeys=$(echo \"$dictionary\"\
    \ | cut -d ',' -f 1)\n    local dictionaryValues=$(echo \"$dictionary\" | cut\
    \ -d ',' -f 2)\n    local dictionaryKeysLower=$(echo \"$dictionaryKeys\" | tr\
    \ '[:upper:]' '[:lower:]')\n    local dictionaryKeysUpper=$(echo \"$dictionaryKeys\"\
    \ | tr '[:lower:]' '[:upper:]')\n    local dictionaryValuesLower=$(echo \"$dictionaryValues\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local dictionaryValuesUpper=$(echo \"$dictionaryValues\"\
    \ | tr '[:lower:]' '[:upper:]')\n    local dictionaryKeysCount=$(echo \"$dictionaryKeys\"\
    \ | wc -w)\n    local dictionaryValuesCount=$(echo \"$dictionaryValues\" | wc\
    \ -w)\n    local dictionaryKeysCountLower=$(echo \"$dictionaryKeysLower\" | wc\
    \ -w)\n    local dictionaryKeysCountUpper=$(echo \"$dictionaryKeysUpper\" | wc\
    \ -w)\n    local dictionaryValuesCountLower=$(echo \"$dictionaryValuesLower\"\
    \ | wc -w)\n    local dictionaryValuesCountUpper=$(echo \"$dictionaryValuesUpper\"\
    \ | wc -w)\n    local dictionaryKeysCountEqual=$(echo \"$dictionaryKeysCount\"\
    \ == \"$dictionaryKeysCountLower\" \"$dictionaryKeysCountUpper\")\n    local dictionaryValuesCountEqual=$(echo\
    \ \"$dictionaryValuesCount\" == \"$dictionaryValuesCountLower\" \"$dictionaryValuesCountUpper\"\
    )\n    local dictionaryKeysCountNotEqual=$(echo \"$dictionaryKeysCount\" != \"\
    $dictionaryKeysCountLower\" \"$dictionaryKeysCountUpper\")\n    local dictionaryValuesCountNotEqual=$(echo\
    \ \"$dictionaryValuesCount\" != \"$dictionaryValuesCountLower\" \"$dictionaryValuesCountUpper\"\
    )\n    local dictionaryKeysCountGreater=$(echo \"$dictionaryKeysCount\" > \"$dictionaryKeysCountLower\"\
    \ \"$dictionaryKeysCountUpper\")\n    local dictionaryValuesCountGreater=$(echo\
    \ \"$dictionaryValuesCount\" > \"$dictionaryValuesCountLower\" \"$dictionaryValuesCountUpper\"\
    )\n    local dictionaryKeysCountLesser=$(echo \"$dictionaryKeysCount\" < \"$dictionaryKeysCountLower\"\
    \ \"$dictionaryKeysCountUpper\")\n    local dictionaryValuesCountLesser=$(echo\
    \ \"$dictionaryValuesCount\" < \"$dictionaryValuesCountLower\" \"$dictionaryValuesCountUpper\"\
    )\n    local dictionaryKeysCountGreaterEqual=$(echo \"$dictionaryKeysCount\" >=\
    \ \"$dictionaryKeysCountLower\" \"$dictionaryKeys\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgi7xe76n.sh: line 55: unexpected EOF while looking for matching
    `"''

    /tmp/tmpgi7xe76n.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key=${dict_arr[0]}\n    local dict_val=${dict_arr[1]}\n    local\
    \ dict_lower=${dict_key^^}\n    local dict_upper=${dict_key^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n\
    \    local dict_upper=${dict_upper^^}\n    local dict_lower=${\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy6iwq6td.sh: line 89: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_line=\"$1\"\n    local dict_line2=\"$2\"\n    local dict_line3=\"\
    $3\"\n    local dict_line4=\"$4\"\n    local dict_line5=\"$5\"\n    local dict_line6=\"\
    $6\"\n    local dict_line7=\"$7\"\n    local dict_line8=\"$8\"\n    local dict_line9=\"\
    $9\"\n    local dict_line10=\"$10\"\n    local dict_line11=\"$11\"\n    local\
    \ dict_line12=\"$12\"\n    local dict_line13=\"$13\"\n    local dict_line14=\"\
    $14\"\n    local dict_line15=\"$15\"\n    local dict_line16=\"$16\"\n    local\
    \ dict_line17=\"$17\"\n    local dict_line18=\"$18\"\n    local dict_line19=\"\
    $19\"\n    local dict_line20=\"$20\"\n    local dict_line21=\"$21\"\n    local\
    \ dict_line22=\"$22\"\n    local dict_line23=\"$23\"\n    local dict_line24=\"\
    $24\"\n    local dict_line25=\"$25\"\n    local dict_line26=\"$26\"\n    local\
    \ dict_line27=\"$27\"\n    local dict_line28=\"$28\"\n    local dict_line29=\"\
    $29\"\n    local dict_line30=\"$30\"\n    local dict_line31=\"$31\"\n    local\
    \ dict_line32=\"$32\"\n    local dict_line33=\"$33\"\n    local dict_line34=\"\
    $34\"\n    local dict_line35=\"$35\"\n    local dict_line36=\"$36\"\n    local\
    \ dict_line37=\"$37\"\n    local dict_line38=\"$38\"\n    local dict_line39=\"\
    $39\"\n    local dict_line40=\"$40\"\n    local dict_line41=\"$41\"\n    local\
    \ dict_line42=\"$42\"\n    local dict_line43=\"$43\"\n    local dict_line44=\"\
    $44\"\n    local dict_line45=\"$45\"\n    local dict_line46=\"$46\"\n    local\
    \ dict_line47=\"$47\"\n    local dict_line48=\"$48\"\n    local dict_line49=\"\
    $49\"\n    local dict_line50=\"$50\"\n    local dict_line51=\"$51\"\n    local\
    \ dict_line52=\"$52\"\n    local dict_line53=\"$53\"\n    local dict_line54=\"\
    $54\"\n    local dict_line55=\"$55\"\n    local dict_line56=\"$56\"\n    local\
    \ dict_line57=\"$57\"\n    local dict_line58=\"$58\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp119vhlk3.sh: line 91: unexpected EOF while looking for matching
    `"''

    /tmp/tmp119vhlk3.sh: line 95: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_val\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local ret\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n\n    lower=$(echo $dict | awk -F, '{print $1}')\n\
    \    upper=$(echo $dict | awk -F, '{print $2}')\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    upper=${upper,,}\n\
    \    lower=${lower,,}\n    upper=${upper,,}\n    lower=${lower,,}\n    \n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local i=0\n    local dict_key\n    local dict_val\n    local dict_lower\n\
    \    local dict_upper\n    local result\n    \n    if [[ $dict_len -eq 0 ]]; then\n\
    \        echo \"false\"\n        return\n    fi\n    \n    dict_lower=$(echo \"\
    ${dict_arr[@]}\" | awk -F, '{print $1}')\n    dict_upper=$(echo \"${dict_arr[@]}\"\
    \ | awk -F, '{print $2}')\n    \n    for dict_key in ${dict_lower[@]}; do\n  \
    \      dict_val=$(echo \"${dict_arr[$i]}\" | awk -F, '{print $1}')\n        if\
    \ [[ ${dict_key} == ${dict_val} ]]; then\n            ((i++))\n        fi\n  \
    \  done\n    \n    for dict_key in ${dict_upper[@]}; do\n        dict_val=$(echo\
    \ \"${dict_arr[$i]}\" | awk -F, '{print $2}')\n        if [[ ${dict_key} == ${dict_val}\
    \ ]]; then\n            ((i++))\n        fi\n    done\n    \n    if [[ $i -eq\
    \ $dict_len ]]; then\n        result=\"true\"\n    else\n        result=\"false\"\
    \n    fi\n    \n    echo \"$result\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local key\n    local value\n    local dict\n    local result\n    dict=$1\n\
    \    if [ -z \"$dict\" ]; then\n        return 0\n    fi\n    IFS=,\n    for k\
    \ in $dict; do\n        key=$(echo $k | cut -d',' -f1)\n        value=$(echo $k\
    \ | cut -d',' -f2)\n        if [ \"$key\" == \"$key\" ]; then\n            if\
    \ [ \"$value\" == \"$value\" ]; then\n                result=\"true\"\n      \
    \      else\n                result=\"false\"\n            fi\n        else\n\
    \            if [ \"$value\" == \"$value\" ]; then\n                result=\"\
    false\"\n            else\n                result=\"true\"\n            fi\n \
    \       fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local i=0\n    local dict_str_key\n    local dict_str_val\n    local dict_str_key_upper\n\
    \    local dict_str_val_upper\n    local dict_str_key_lower\n    local dict_str_val_lower\n\
    \    local dict_str_key_upper\n    local dict_str_val_upper\n    local dict_str_key_lower\n\
    \    local dict_str_val_lower\n    local dict_str_key_upper\n    local dict_str_val_upper\n\
    \    local dict_str_key_lower\n    local dict_str_val_lower\n    local dict_str_key_upper\n\
    \    local dict_str_val_upper\n    local dict_str_key_lower\n    local dict_str_val_lower\n\
    \    local dict_str_key_upper\n    local dict_str_val_upper\n    local dict_str_key_lower\n\
    \    local dict_str_val_lower\n    local dict_str_key_upper\n    local dict_str_val_upper\n\
    \    local dict_str_key_lower\n    local dict_str_val_lower\n    local dict_str_key_upper\n\
    \    local dict_str_val_upper\n    local dict_str_key_lower\n    local dict_str_val_lower\n\
    \    local dict_str_key_upper\n    local dict_str_val_upper\n    local dict_str_key_lower\n\
    \    local dict_str_val_lower\n    local dict_str_key_upper\n    local dict_str_val_upper\n\
    \    local dict_str_key_lower\n    local dict_str_val_lower\n    local dict_str_key_upper\n\
    \    local dict_str_val_upper\n    local dict_str_key_lower\n    local dict_str_val_lower\n\
    \    local dict_str_key_upper\n    local dict_str_val_upper\n    local dict_str_key_lower\n\
    \    local dict_str_val_lower\n    local dict_str_key_upper\n    local dict_str_val_upper\n\
    \    local dict_str_key_lower\n    local dict_str_val_lower\n    local dict_str_key_upper\n\
    \    local dict_str_val_upper\n    local dict_str_key_lower\n    local dict_str_val_lower\n\
    \    local dict_str_key_upper\n    local dict_str_val_upper\n    local dict_str_key_lower\n\
    \    local dict_str_val_lower\n    local dict_str_key_upper\n    local dict_str_val_upper\n\
    \    local dict_str_key_lower\n    local dict_str_val_lower\n    local dict_str_key_upper\n\
    \    local dict_str_val_upper\n    local dict_str_key_lower\n    local dict_str_val_lower\n\
    \    local dict_str_key_upper\n    local dict_str_val_upper\n    local dict_str_key_lower\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_line=$1\n    local dict_lines=$2\n    local dict_line\n  \
    \  local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n    local dict_line_split\n    local dict_line_split\n\
    \    local dict_line_split\n\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict_lines=$1\n  local dict_line\n  local dict_key\n  local dict_value\n\
    \  local dict_keys=()\n  local dict_values=()\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  local dict_value\n  local dict_key\n  local dict_value\n\
    \  local dict_key\n  \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_string=$1\n    local dict_array=( $(echo $dict_string | tr\
    \ \",\" \"\\n\" | sort -k 1,1 -k 2,2 | tr \"\\n\" \",\" ) )\n    local dict_length=${#dict_array[@]}\n\
    \    local dict_length=${dict_length-1}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#,/}\n\
    \    local dict_length=${dict_length/#,/}\n    local dict_length=${dict_length/#\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsg_yds1k.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr ',' '\\\
    n'))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local dict_values=()\n\
    \    local dict_key_str\n    local dict_value_str\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dictionary=\"$1\"\n    local keys=\"$2\"\n    local lower=\"$(echo\
    \ \"$keys\" | tr '[:upper:]' '[:lower:]')\"\n    local upper=\"$(echo \"$keys\"\
    \ | tr '[:lower:]' '[:upper:]')\"\n    local result=\"$(echo \"$dictionary\" |\
    \ awk -F, 'BEGIN{print \"true\"}{for(i=1;i<=NF;i++){if($i==$lower){print \"true\"\
    };if($i==$upper){print \"true\"};else{print \"false\"}}}END{print \"false\"}')\"\
    \n    echo $result\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: BEGIN{print "true"}{for(i=1;i<=NF;i++){if($i==$lower){print
    "true"};if($i==$upper){print "true"};else{print "false"}}}END{print "false"}

    awk: cmd. line:1:                                                                                                  ^
    syntax error

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_lower\n    local dict_upper\n\
    \    local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dictionary=\"$1\"\n    local keys=\"$2\"\n    local upper=false\n\
    \    local lower=false\n    local result=false\n    local key\n    local value\n\
    \    IFS=',' read -ra keys <<< \"$keys\"\n    for k in \"${keys[@]}\"; do\n  \
    \      value=$(echo \"$dictionary\" | awk -F, '$1 ~ /^'\"$k\"'$/ { print $2 }')\n\
    \        if [ -z \"$value\" ]; then\n            result=false\n            break\n\
    \        fi\n        if [ \"$upper\" == \"true\" ]; then\n            value=$(echo\
    \ \"$value\" | tr '[:upper:]' '[:lower:]')\n        fi\n        if [ \"$lower\"\
    \ == \"true\" ]; then\n            value=$(echo \"$value\" | tr '[:lower:]' '[:upper:]')\n\
    \        fi\n        if [ \"$value\" == \"$k\" ]; then\n            result=true\n\
    \            break\n        fi\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key=${dict_arr[0]}\n    local dict_val=${dict_arr[1]}\n    local\
    \ dict_lower=${dict_key%,*}\n    local dict_upper=${dict_key##*,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    local dict_lower=${dict_lower,,}\n\
    \    local dict_upper=${dict_upper,,}\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=\"$1\"\n    local dict_arr=($(echo \"$dict_str\" | tr\
    \ \",\" \"\\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_key\n  \
    \  local dict_val\n    local dict_key_lower\n    local dict_val_lower\n    local\
    \ dict_key_upper\n    local dict_val_upper\n    local dict_key_found\n    local\
    \ dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    \n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n   \
    \ local ret=false\n    local i\n    local j\n    local k\n    local v\n    local\
    \ len\n    local key\n    local value\n    local key_upper\n    local value_upper\n\
    \    local key_lower\n    local value_lower\n    local key_count\n    local value_count\n\
    \    local key_count2\n    local value_count2\n    local key_count3\n    local\
    \ value_count3\n    local key_count4\n    local value_count4\n    local key_count5\n\
    \    local value_count5\n    local key_count6\n    local value_count6\n    local\
    \ key_count7\n    local value_count7\n    local key_count8\n    local value_count8\n\
    \    local key_count9\n    local value_count9\n    local key_count10\n    local\
    \ value_count10\n    local key_count11\n    local value_count11\n    local key_count12\n\
    \    local value_count12\n    local key_count13\n    local value_count13\n   \
    \ local key_count14\n    local value_count14\n    local key_count15\n    local\
    \ value_count15\n    local key_count16\n    local value_count16\n    local key_count17\n\
    \    local value_count17\n    local key_count18\n    local value_count18\n   \
    \ local key_count19\n    local value_count19\n    local key_count20\n    local\
    \ value_count20\n    local key_count21\n    local value_count21\n    local key_count22\n\
    \    local value_count22\n    local key_count23\n    local value_count23\n   \
    \ local key_count24\n    local value_count24\n    local key_count25\n    local\
    \ value_count25\n    local key_count26\n    local value_count26\n    local key_count27\n\
    \    local value_count27\n    local key_count28\n    local value_count28\n   \
    \ local key_count29\n    local value_count29\n    local key_count30\n    local\
    \ value_count30\n    local key_count31\n    local value_count31\n    local key_count32\n\
    \    local value_count32\n    local key_count33\n    local value_count33\n   \
    \ local key_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_lower\n    local\
    \ dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n   \
    \ local result\n    local i\n    local j\n    local k\n    local v\n    local\
    \ dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key\n    local dict_value\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key\n    local dict_value\n    local dict_key_lower\n    local\
    \ dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n   \
    \ local dict_key\n    local dict_value\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key\n  \
    \  local dict_value\n    local dict_key_lower\n    local dict_value_lower\n  \
    \  local dict_key_upper\n    local dict_value_upper\n    local dict_key\n    local\
    \ dict_value\n    local dict_key_lower\n    local dict_value_lower\n    local\
    \ dict_key_upper\n    local dict_value_upper\n    local dict_key\n    local dict_value\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key\n    local dict_value\n    local\
    \ dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key\n    local dict_value\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key\n    local dict_value\n    local dict_key_lower\n    local\
    \ dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n   \
    \ local dict_key\n    local dict_value\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key\n  \
    \  local dict_value\n    local dict_key_lower\n    local dict_value_lower\n  \
    \  local dict_key_upper\n    local dict_value_upper\n    local dict_key\n    local\
    \ dict_value\n    local dict_key_lower\n    local dict_value_lower\n    local\
    \ dict_key_upper\n    local dict_value_upper\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key_str\n    local dict_val_str\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_count\n    local dict_val_count\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key=${dict_arr[0]}\n    local dict_val=${dict_arr[1]}\n    local\
    \ dict_lower=${dict_key}\n    local dict_upper=${dict_key^^}\n    local dict_lower=${dict_lower//,/}\n\
    \    local dict_upper=${dict_upper//,/}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local dict_upper=${dict_upper//\\//}\n    local dict_lower=${dict_lower//\\\
    //}\n    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local key_len=0\n    local val_len=0\n    local key_str\n    local val_str\n\
    \    local key\n    local val\n    local key_lower\n    local val_lower\n    local\
    \ key_upper\n    local val_upper\n    local key_found\n    local val_found\n \
    \   local key_not_found\n    local val_not_found\n    local key_not_found\n  \
    \  local val_not_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    local key_found\n    local val_found\n    local key_found\n\
    \    local val_found\n    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=\"$1\"\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_val\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local result\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n   \
    \ local result\n\n    if [[ $dict_len -eq 0 ]]; then\n        echo \"false\"\n\
    \        return\n    fi\n\n    local i\n    for (( i=0; i<dict_len; i++ )); do\n\
    \        dict_key=${dict_arr[$i]}\n        dict_value=${dict_arr[$((i+1))]}\n\
    \        dict_key_upper=$(echo \"$dict_key\" | tr '[:upper:]' '[:lower:]')\n \
    \       dict_value_upper=$(echo \"$dict_value\" | tr '[:upper:]' '[:lower:]')\n\
    \        dict_key_lower=$(echo \"$dict_key\" | tr '[:lower:]' '[:upper:]')\n \
    \       dict_value_lower=$(echo \"$dict_value\" | tr '[:lower:]' '[:upper:]')\n\
    \n        if [[ $dict_key_upper != $dict_key_lower ]]; then\n            echo\
    \ \"false\"\n            return\n        fi\n\n        if [[ $dict_value_upper\
    \ != $dict_value_lower ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n\n    echo \"true\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_headers=$2\n    local dict_lower=$3\n\
    \    local dict_upper=$4\n    local dict_empty=$5\n    local dict_empty_value=$6\n\
    \    local dict_empty_key=$7\n    local dict_empty_key_value=$8\n    local dict_empty_key_value_header=$9\n\
    \    local dict_empty_key_value_header_lower=$10\n    local dict_empty_key_value_header_upper=$11\n\
    \    local dict_empty_key_value_header_empty=$12\n    local dict_empty_key_value_header_empty_value=$13\n\
    \    local dict_empty_key_value_header_empty_value_key=$14\n    local dict_empty_key_value_header_empty_value_key=$15\n\
    \    local dict_empty_key_value_header_empty_value_key=$16\n    local dict_empty_key_value_header_empty_value_key=$17\n\
    \    local dict_empty_key_value_header_empty_value_key=$18\n    local dict_empty_key_value_header_empty_value_key=$19\n\
    \    local dict_empty_key_value_header_empty_value_key=$20\n    local dict_empty_key_value_header_empty_value_key=$21\n\
    \    local dict_empty_key_value_header_empty_value_key=$22\n    local dict_empty_key_value_header_empty_value_key=$23\n\
    \    local dict_empty_key_value_header_empty_value_key=$24\n    local dict_empty_key_value_header_empty_value_key=$25\n\
    \    local dict_empty_key_value_header_empty_value_key=$26\n    local dict_empty_key_value_header_empty_value_key=$27\n\
    \    local dict_empty_key_value_header_empty_value_key=$28\n    local dict_empty_key_value_header_empty_value_key=$29\n\
    \    local dict_empty_key_value_header_empty_value_key=$30\n    local dict_empty_key_value_header_empty_value_key=$31\n\
    \    local dict_empty_key_value_header_empty_value_key=$32\n    local dict_empty_key_value_header_empty_value_key=$33\n\
    \    local dict_empty_key_value_header_empty_value_key=$34\n    local dict_empty_key_value_header_empty_value_key=$35\n\
    \    local dict_empty_key_value_header_empty_value_key=$36\n    local dict_empty_key_value_header_empty_value_key=$37\n\
    \    local dict_empty_key_value_header_empty_value_key=$38\n    local dict_empty_key_value_header_empty_value_key=$39\n\
    \    local dict_empty_key_value_header_empty_value_key=$40\n    local dict_empty_key_value_header_empty_value_key=$41\n\
    \    local dict_empty_key_value_header_empty_value_key=$42\n    local dict_empty_key_value_header_empty_value_key=$43\n\
    \    local dict_empty_key_value_header_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_headers=$2\n    local dict_lower=$3\n\
    \    local dict_upper=$4\n    local dict_empty=$5\n    local dict_not_empty=$6\n\
    \    local dict_not_empty_keys=$7\n    local dict_not_empty_values=$8\n    local\
    \ dict_not_empty_headers=$9\n    local dict_not_empty_lower=$10\n    local dict_not_empty_upper=$11\n\
    \    local dict_not_empty_empty=$12\n    local dict_not_empty_not_empty=$13\n\
    \    local dict_not_empty_not_empty_keys=$14\n    local dict_not_empty_not_empty_values=$15\n\
    \    local dict_not_empty_not_empty_headers=$16\n    local dict_not_empty_not_empty_lower=$17\n\
    \    local dict_not_empty_not_empty_upper=$18\n    local dict_not_empty_not_empty_empty=$19\n\
    \    local dict_not_empty_not_empty_not_empty=$20\n    local dict_not_empty_not_empty_not_empty_keys=$21\n\
    \    local dict_not_empty_not_empty_not_empty_values=$22\n    local dict_not_empty_not_empty_not_empty_headers=$23\n\
    \    local dict_not_empty_not_empty_not_empty_lower=$24\n    local dict_not_empty_not_empty_not_empty_upper=$25\n\
    \    local dict_not_empty_not_empty_not_empty_empty=$26\n    local dict_not_empty_not_empty_not_empty_not_empty=$27\n\
    \    local dict_not_empty_not_empty_not_empty_not_empty_keys=$28\n    local dict_not_empty_not_empty_not_empty_not_empty_values=$29\n\
    \    local dict_not_empty_not_empty_not_empty_not_empty_headers=$30\n    local\
    \ dict_not_empty_not_empty_not_empty_not_empty_lower=$31\n    local dict_not_empty_not_empty_not_empty_not_empty_upper=$32\n\
    \    local dict_not_empty_not_empty_not_empty_not_empty_empty=$33\n    local dict_not_empty_not_empty_not_empty_not_empty_not_empty=$34\n\
    \    local dict_not_empty_not_empty_not_empty_not_empty_not_empty_keys=$35\n \
    \   local dict_not_empty_not_empty_not_empty_not_empty_not_empty_values=$36\n\
    \    local dict_not_empty_not_empty_not_empty_not_empty_not_empty_headers=$37\n\
    \    local dict_not_empty_not_empty_not_empty_not_empty_not_empty_lower=$38\n\
    \    local dict_not_empty_not_empty_not_empty_not_empty_not_empty_upper=$39\n\
    \    local dict_not_empty_not_empty_not_empty_not_empty_not_empty_empty=$40\n\
    \    local dict_not_empty_not_empty_not_empty_not_empty_not_empty_not_empty=$41\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_lower\n    local\
    \ dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n   \
    \ local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo \"$1\" | sed 's/,/ /g' | awk '{print $1}')\n    local\
    \ vals=$(echo \"$1\" | sed 's/,/ /g' | awk '{print $2}')\n    local lower=false\n\
    \    local upper=false\n    local count=0\n    local fail=false\n    for k in\
    \ $keys; do\n        if [ \"$k\" == \"$k\" ]; then\n            ((count++))\n\
    \        else\n            if [ \"$k\" == \"$k\" ] && [ \"$k\" == \"$k\" ]; then\n\
    \                ((count++))\n            else\n                if [ \"$k\" ==\
    \ \"$k\" ]; then\n                    lower=true\n                    upper=true\n\
    \                else\n                    if [ \"$k\" == \"$k\" ]; then\n   \
    \                     lower=true\n                    else\n                 \
    \       if [ \"$k\" == \"$k\" ]; then\n                            upper=true\n\
    \                        else\n                            if [ \"$lower\" ==\
    \ \"true\" ] && [ \"$upper\" == \"true\" ]; then\n                           \
    \     lower=false\n                                upper=false\n             \
    \               else\n                                fail=true\n            \
    \                fi\n                        fi\n                    fi\n    \
    \            fi\n            fi\n        fi\n    done\n    if [ \"$count\" ==\
    \ \"$keys\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr ',' '\\\
    n'))\n    local dict_len=${#dict_arr[@]}\n    local dict_key=${dict_arr[0]}\n\
    \    local dict_val=${dict_arr[1]}\n    local dict_lower=${dict_key}\n    local\
    \ dict_upper=${dict_key^^}\n    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    \    local dict_lower=${dict_lower,,}\n    local dict_upper=${dict_upper,,}\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=\"$1\"\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_lower\n    local dict_upper\n\
    \    local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_found\n    local dict_not_found\n    local dict_found\n\
    \    local dict_not_found\n    local dict_found\n    local dict_not_found\n  \
    \  local dict_found\n    local dict_not_found\n    local dict_found\n    local\
    \ dict_not_found\n    local dict_\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_line=$1\n    local dict_line_keys=$(echo $dict_line | cut\
    \ -d ',' -f 1)\n    local dict_line_values=$(echo $dict_line | cut -d ',' -f 2)\n\
    \    local dict_line_lower=$(echo $dict_line_keys | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_line_upper=$(echo $dict_line_keys | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_line_count=0\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_lower\n    local dict_line_upper\n\
    \    local dict_line_count\n    local dict_line_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local i=0\n    local dict_lower=false\n\
    \    local dict_upper=false\n    local dict_ok=false\n    local dict_err=false\n\
    \    local dict_err_count=0\n    local dict_err_line=\"\"\n    local dict_err_line_count=0\n\
    \    local dict_err_line_chars=0\n    local dict_err_line_chars_max=0\n    local\
    \ dict_err_line_chars_min=0\n    local dict_err_line_chars_avg=0\n    local dict_err_line_chars_sum=0\n\
    \    local dict_err_line_chars_sum2=0\n    local dict_err_line_chars_sum3=0\n\
    \    local dict_err_line_chars_sum4=0\n    local dict_err_line_chars_sum5=0\n\
    \    local dict_err_line_chars_sum6=0\n    local dict_err_line_chars_sum7=0\n\
    \    local dict_err_line_chars_sum8=0\n    local dict_err_line_chars_sum9=0\n\
    \    local dict_err_line_chars_sum10=0\n    local dict_err_line_chars_sum11=0\n\
    \    local dict_err_line_chars_sum12=0\n    local dict_err_line_chars_sum13=0\n\
    \    local dict_err_line_chars_sum14=0\n    local dict_err_line_chars_sum15=0\n\
    \    local dict_err_line_chars_sum16=0\n    local dict_err_line_chars_sum17=0\n\
    \    local dict_err_line_chars_sum18=0\n    local dict_err_line_chars_sum19=0\n\
    \    local dict_err_line_chars_sum20=0\n    local dict_err_line_chars_sum21=0\n\
    \    local dict_err_line_chars_sum22=0\n    local dict_err_line_chars_sum23=0\n\
    \    local dict_err_line_chars_sum24=0\n    local dict_err_line_chars_sum25=0\n\
    \    local dict_err_line_chars_sum26=0\n    local dict_err_line_chars_sum27=0\n\
    \    local dict_err_line_chars_sum28=0\n    local dict_err_line_chars_sum29=0\n\
    \    local dict_err_line_chars_sum30=0\n    local dict_err_line_chars_sum31=0\n\
    \    local dict_err_line_chars_sum32=0\n    local dict_err_line_chars_sum33=0\n\
    \    local dict_err_line_chars_sum34=0\n    local dict_err_line_chars_sum35=0\n\
    \    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_len=$((dict_len-1))\n    local dict_key\n    local dict_value\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    \    local dict_key_found\n    local dict_value_found\n    local dict_key_not_found\n\
    \    local dict_value_not_found\n    local dict_key_found\n    local dict_value_found\n\
    \    local dict_key_not_found\n    local dict_value_not_found\n    local dict_key_found\n\
    \    local dict_value_found\n    local dict_key_not_found\n    local dict_value_not_found\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_keys=()\n    local dict_vals=()\n    local dict_key=\n    local\
    \ dict_val=\n    local dict_key_lower=\n    local dict_val_lower=\n    local dict_key_upper=\n\
    \    local dict_val_upper=\n    local i=\n    local j=\n    local k=\n    local\
    \ l=\n    local result=\n    local num_keys=\n    local num_vals=\n    local num_keys_lower=\n\
    \    local num_vals_lower=\n    local num_keys_upper=\n    local num_vals_upper=\n\
    \    local num_keys_not_in_dict=\n    local num_vals_not_in_dict=\n    local num_keys_not_in_dict_lower=\n\
    \    local num_vals_not_in_dict_lower=\n    local num_keys_not_in_dict_upper=\n\
    \    local num_vals_not_in_dict_upper=\n    local num_keys_not_in_dict_not_in_dict=\n\
    \    local num_vals_not_in_dict_not_in_dict=\n    local num_keys_not_in_dict_not_in_dict_lower=\n\
    \    local num_vals_not_in_dict_not_in_dict_lower=\n    local num_keys_not_in_dict_not_in_dict_upper=\n\
    \    local num_vals_not_in_dict_not_in_dict_upper=\n    local num_keys_not_in_dict_not_in_dict_not_in_dict=\n\
    \    local num_vals_not_in_dict_not_in_dict_not_in_dict=\n    local num_keys_not_in_dict_not_in_dict_not_in_dict_lower=\n\
    \    local num_vals_not_in_dict_not_in_dict_not_in_dict_lower=\n    local num_keys_not_in_dict_not_in_dict_not_in_dict_upper=\n\
    \    local num_vals_not_in_dict_not_in_dict_not_in_dict_upper=\n    local num_keys_not_in_dict_not_in_dict_not_in_dict_not_in_dict=\n\
    \    local num_vals_not_in_dict_not_in_dict_not_in_dict_not_in_dict=\n    local\
    \ num_keys_not_in_dict_not_in_dict_not_in_dict_not_in_dict_lower=\n    local num_vals_not_in_dict_not_in_dict_not_in_dict_not_in_dict_lower=\n\
    \    local num_keys_not_in_dict_not_in_dict_not_in_dict_not_in_dict_upper=\n \
    \   local num_vals_not_in_dict_not_in_dict_not_in_dict_not_in_dict_upper=\n  \
    \  local num_keys_not_in_dict_not_in_dict_not_in_dict_not_in_dict_not_in_dict=\n\
    \    local num_vals_not_in_dict_not_in_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local key_arr=()\n\
    \    local val_arr=()\n    local key_str\n    local val_str\n    local key\n \
    \   local val\n    local key_lower\n    local val_lower\n    local key_upper\n\
    \    local val_upper\n    local key_count\n    local val_count\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_not_found\n \
    \   local val_not_found\n    local key_not_found\n    local val_not_found\n  \
    \  local key_not_found\n    local val_not_found\n    local key_not_found\n   \
    \ local val_not_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_not_found\n \
    \   local val_not_found\n    local key_not_found\n    local val_not_found\n  \
    \  local key_not_found\n    local val_not_found\n    local key_not_found\n   \
    \ local val_not_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_not_found\n \
    \   local val_not_found\n    local key_not_found\n    local val_not_found\n  \
    \  local key_not_found\n    local val_not_found\n    local key_not_found\n   \
    \ local val_not_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_not_found\n \
    \   local val_not_found\n    local key_not_found\n    local val_not_found\n  \
    \  local key_not_found\n    local val_not_found\n    local key_not_found\n   \
    \ local val_not_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_not_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_line=$1\n    local dict_lines=$2\n    local dict_line\n  \
    \  local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_counts\n    local dict_line_count\n    local dict_line_counts\n\
    \    local dict_line_count\n    local dict_line_counts\n    local dict_line_count\n\
    \    local dict_line_count\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dictionary=\"$1\"\n    local dictionaryKeys=$(echo \"$dictionary\"\
    \ | cut -d ',' -f 1)\n    local dictionaryValues=$(echo \"$dictionary\" | cut\
    \ -d ',' -f 2)\n    local dictionaryKeysLower=$(echo \"$dictionaryKeys\" | tr\
    \ '[:upper:]' '[:lower:]')\n    local dictionaryKeysUpper=$(echo \"$dictionaryKeys\"\
    \ | tr '[:lower:]' '[:upper:]')\n    local dictionaryValuesLower=$(echo \"$dictionaryValues\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local dictionaryValuesUpper=$(echo \"$dictionaryValues\"\
    \ | tr '[:lower:]' '[:upper:]')\n    local dictionaryKeysCount=$(echo \"$dictionaryKeys\"\
    \ | wc -w)\n    local dictionaryValuesCount=$(echo \"$dictionaryValues\" | wc\
    \ -w)\n    local dictionaryKeysCountLower=$(echo \"$dictionaryKeysLower\" | wc\
    \ -w)\n    local dictionaryKeysCountUpper=$(echo \"$dictionaryKeysUpper\" | wc\
    \ -w)\n    local dictionaryValuesCountLower=$(echo \"$dictionaryValuesLower\"\
    \ | wc -w)\n    local dictionaryValuesCountUpper=$(echo \"$dictionaryValuesUpper\"\
    \ | wc -w)\n    local dictionaryKeysCountEqual=$(echo \"$dictionaryKeysCount\"\
    \ == \"$dictionaryKeysCountLower\" \"$dictionaryKeysCountUpper\")\n    local dictionaryValuesCountEqual=$(echo\
    \ \"$dictionaryValuesCount\" == \"$dictionaryValuesCountLower\" \"$dictionaryValuesCountUpper\"\
    )\n    local dictionaryKeysCountEqualUpper=$(echo \"$dictionaryKeysCount\" ==\
    \ \"$dictionaryKeysCountUpper\" \"$dictionaryKeysCountLower\")\n    local dictionaryValuesCountEqualUpper=$(echo\
    \ \"$dictionaryValuesCount\" == \"$dictionaryValuesCountUpper\" \"$dictionaryValuesCountLower\"\
    )\n    local dictionaryKeysCountEqualLower=$(echo \"$dictionaryKeysCount\" ==\
    \ \"$dictionaryKeysCountLower\" \"$dictionaryKeysCountUpper\")\n    local dictionaryValuesCountEqualLower=$(echo\
    \ \"$dictionaryValuesCount\" == \"$dictionaryValuesCountUpper\" \"$dictionaryValuesCountLower\"\
    )\n    local dictionaryKeysCountEqualEqual=$(echo \"$dictionaryKeysCount\" ==\
    \ \"$dictionaryKeysCountEqualLower\" \"$dictionaryKeysCountEqualUpper\")\n   \
    \ local dictionaryValuesCountEqualEqual=$(echo \"$dictionaryValuesCount\" == \"\
    $dictionaryValuesCountEqualLower\" \"$dictionaryValuesCountEqualUpper\")\n   \
    \ local dictionaryKeysCountEqualEqualUpper=$(echo \"$dictionaryKeysCount\" ==\
    \ \"$dictionaryKeysCountEqualUpper\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp54apm3sk.sh: line 55: unexpected EOF while looking for matching
    `"''

    /tmp/tmp54apm3sk.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local result\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_key_upper\n    local dict_value_upper\n    local\
    \ dict_key_lower\n    local dict_value_lower\n    local result\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local keys=$(echo $1 | tr \",\" \"\\n\")\n  local values=$(echo $1 | tr\
    \ \",\" \"\\n\")\n  local key\n  local value\n  local result\n  local count\n\
    \  local keycount\n  local valuecount\n  local key\n  local value\n  local keycount\n\
    \  local valuecount\n  local key\n  local value\n  local keycount\n  local valuecount\n\
    \  local key\n  local value\n  local keycount\n  local valuecount\n  local key\n\
    \  local value\n  local keycount\n  local valuecount\n  local key\n  local value\n\
    \  local keycount\n  local valuecount\n  local key\n  local value\n  local keycount\n\
    \  local valuecount\n  local key\n  local value\n  local keycount\n  local valuecount\n\
    \  local key\n  local value\n  local keycount\n  local valuecount\n  local key\n\
    \  local value\n  local keycount\n  local valuecount\n  local key\n  local value\n\
    \  local keycount\n  local valuecount\n  local key\n  local value\n  local keycount\n\
    \  local valuecount\n  local key\n  local value\n  local keycount\n  local valuecount\n\
    \  local key\n  local value\n  local keycount\n  local valuecount\n  local key\n\
    \  local value\n  local keycount\n  local valuecount\n  local key\n  local value\n\
    \  local keycount\n  local valuecount\n  local key\n  local value\n  local keycount\n\
    \  local valuecount\n  local key\n  local value\n  local keycount\n  local valuecount\n\
    \  local key\n  local value\n  local keycount\n  local valuecount\n  local key\n\
    \  local value\n  local keycount\n  local valuecount\n  local key\n  local value\n\
    \  local keycount\n  local valuecount\n  local key\n  local value\n  local keycount\n\
    \  local valuecount\n  local key\n  local value\n  local keycount\n  local valuecount\n\
    \  local key\n  local value\n  local keycount\n  local valuecount\n  local key\n\
    \  local value\n  local keycount\n  local valuecount\n  local key\n  local value\n\
    \  local keycount\n  local valuecount\n  local key\n  local value\n  local keycount\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key_count=0\n    local dict_val_count=0\n    local\
    \ dict_key_upper=0\n    local dict_val_upper=0\n    local dict_key_lower=0\n \
    \   local dict_val_lower=0\n    local dict_key_equal=0\n    local dict_val_equal=0\n\
    \    local dict_key_not_equal=0\n    local dict_val_not_equal=0\n    local dict_key_not_in_arr=0\n\
    \    local dict_val_not_in_arr=0\n    local dict_key_not_in_arr_upper=0\n    local\
    \ dict_val_not_in_arr_upper=0\n    local dict_key_not_in_arr_lower=0\n    local\
    \ dict_val_not_in_arr_lower=0\n    local dict_key_in_arr_upper=0\n    local dict_val_in_arr_upper=0\n\
    \    local dict_key_in_arr_lower=0\n    local dict_val_in_arr_lower=0\n    local\
    \ dict_key_not_in_arr_equal=0\n    local dict_val_not_in_arr_equal=0\n    local\
    \ dict_key_not_in_arr_not_equal=0\n    local dict_val_not_in_arr_not_equal=0\n\
    \    local dict_key_not_in_arr_not_in_arr=0\n    local dict_val_not_in_arr_not_in_arr=0\n\
    \    local dict_key_not_in_arr_not_in_arr_upper=0\n    local dict_val_not_in_arr_not_in_arr_upper=0\n\
    \    local dict_key_not_in_arr_not_in_arr_lower=0\n    local dict_val_not_in_arr_not_in_arr_lower=0\n\
    \    local dict_key_in_arr_not_in_arr_upper=0\n    local dict_val_in_arr_not_in_arr_upper=0\n\
    \    local dict_key_in_arr_not_in_arr_lower=0\n    local dict_val_in_arr_not_in_arr_lower=0\n\
    \    local dict_key_not_in_arr_not_in_arr_equal=0\n    local dict_val_not_in_arr_not_in_arr_equal=0\n\
    \    local dict_key_not_in_arr_not_in_arr_not_equal=0\n    local dict_val_not_in_arr_not_in_arr_not_equal=0\n\
    \    local dict_key_not_in_arr_not_in_arr_not_in_arr=0\n    local dict_val_not_in_arr_not_in_arr_not_in_arr=0\n\
    \    local dict_key_not_in_arr_not_in_arr_not_in_arr_upper=0\n    local dict_val_not_in_arr_not_in_arr_not_in_arr_upper=0\n\
    \    local dict_key_not_in_arr_not_in_arr_not_in_arr_lower=0\n\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_key2\n    local dict_value2\n    local dict_key3\n\
    \    local dict_value3\n    local dict_key4\n    local dict_value4\n    local\
    \ dict_key5\n    local dict_value5\n    local dict_key6\n    local dict_value6\n\
    \    local dict_key7\n    local dict_value7\n    local dict_key8\n    local dict_value8\n\
    \    local dict_key9\n    local dict_value9\n    local dict_key10\n    local dict_value10\n\
    \    local dict_key11\n    local dict_value11\n    local dict_key12\n    local\
    \ dict_value12\n    local dict_key13\n    local dict_value13\n    local dict_key14\n\
    \    local dict_value14\n    local dict_key15\n    local dict_value15\n    local\
    \ dict_key16\n    local dict_value16\n    local dict_key17\n    local dict_value17\n\
    \    local dict_key18\n    local dict_value18\n    local dict_key19\n    local\
    \ dict_value19\n    local dict_key20\n    local dict_value20\n    local dict_key21\n\
    \    local dict_value21\n    local dict_key22\n    local dict_value22\n    local\
    \ dict_key23\n    local dict_value23\n    local dict_key24\n    local dict_value24\n\
    \    local dict_key25\n    local dict_value25\n    local dict_key26\n    local\
    \ dict_value26\n    local dict_key27\n    local dict_value27\n    local dict_key28\n\
    \    local dict_value28\n    local dict_key29\n    local dict_value29\n    local\
    \ dict_key30\n    local dict_value30\n    local dict_key31\n    local dict_value31\n\
    \    local dict_key32\n    local dict_value32\n    local dict_key33\n    local\
    \ dict_value33\n    local dict_key34\n    local dict_value34\n    local dict_key35\n\
    \    local dict_value35\n    local dict_key36\n    local dict_value36\n    local\
    \ dict_key37\n    local dict_value37\n    local dict_key38\n    local dict_value38\n\
    \    local dict_key39\n    local dict_value39\n    local dict_key40\n    local\
    \ dict_value40\n    local dict_key41\n    local dict_value41\n    local dict_key42\n\
    \    local dict_value\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo \"$1\" | sed 's/,/\\n/g' | awk '{print $1}')\n    local\
    \ values=$(echo \"$1\" | sed 's/,/\\n/g' | awk '{print $2}')\n    local lower\n\
    \    local upper\n    local result\n    lower=$(echo \"$keys\" | sed 's/,/\\n/g'\
    \ | awk '{print tolower($0)}')\n    upper=$(echo \"$keys\" | sed 's/,/\\n/g' |\
    \ awk '{print toupper($0)}')\n    if [ -z \"$keys\" ]; then\n        result=\"\
    false\"\n    else\n        result=$(echo \"$lower\" | grep -q \"$lower\" && echo\
    \ \"$lower\" | grep -q \"$upper\")\n    fi\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_keys=()\n    local dict_vals=()\n    local dict_key_count=0\n\
    \    local dict_val_count=0\n    local dict_key_upper=0\n    local dict_val_upper=0\n\
    \    local dict_key_lower=0\n    local dict_val_lower=0\n    local dict_key_equal=0\n\
    \    local dict_val_equal=0\n    local dict_key_not_equal=0\n    local dict_val_not_equal=0\n\
    \    local dict_key_empty=0\n    local dict_val_empty=0\n    local dict_key_not_empty=0\n\
    \    local dict_val_not_empty=0\n    local dict_key_not_in_arr=0\n    local dict_val_not_in_arr=0\n\
    \    local dict_key_not_in_arr_lower=0\n    local dict_val_not_in_arr_lower=0\n\
    \    local dict_key_not_in_arr_upper=0\n    local dict_val_not_in_arr_upper=0\n\
    \    local dict_key_not_in_arr_equal=0\n    local dict_val_not_in_arr_equal=0\n\
    \    local dict_key_not_in_arr_not_equal=0\n    local dict_val_not_in_arr_not_equal=0\n\
    \    local dict_key_not_in_arr_empty=0\n    local dict_val_not_in_arr_empty=0\n\
    \    local dict_key_not_in_arr_not_empty=0\n    local dict_val_not_in_arr_not_empty=0\n\
    \    local dict_key_not_in_arr_not_in_arr=0\n    local dict_val_not_in_arr_not_in_arr=0\n\
    \    local dict_key_not_in_arr_not_in_arr_lower=0\n    local dict_val_not_in_arr_not_in_arr_lower=0\n\
    \    local dict_key_not_in_arr_not_in_arr_upper=0\n    local dict_val_not_in_arr_not_in_arr_upper=0\n\
    \    local dict_key_not_in_arr_not_in_arr_equal=0\n    local dict_val_not_in_arr_not_in_arr_equal=0\n\
    \    local dict_key_not_in_arr_not_in_arr_not_equal=0\n    local dict_val_not_in_arr_not_in_arr_not_equal=0\n\
    \    local dict_key_not_in_arr_not_in_arr_empty=0\n    local dict_val_not_in_arr_not_in_arr_empty=0\n\
    \    local dict_key_not_in_arr_not_in_arr_not_empty=0\n    local dict_val_not_in_arr_not_in_arr_not_empty=0\n\
    \    local dict_key_not_in_arr_not_in_arr_not_in_arr=0\n    local dict_val_not_in_arr_not_in_arr_not_in_arr=0\n\
    \    local dict_key_not_in_arr_not_in_arr_not_in_arr_\n}\n\ncandidate() {\n  \
    \  check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dictionary=\"$1\"\n    local string_keys=\"$2\"\n    local string_keys_upper=\"\
    $(echo \"$string_keys\" | tr '[:upper:]' '[:lower:]')\"\n    local string_keys_lower=\"\
    $(echo \"$string_keys\" | tr '[:lower:]' '[:upper:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys\" | grep -v '^$')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:upper:]' '[:lower:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:lower:]' '[:upper:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:upper:]' '[:lower:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:lower:]' '[:upper:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:upper:]' '[:lower:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:lower:]' '[:upper:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:upper:]' '[:lower:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:lower:]' '[:upper:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:upper:]' '[:lower:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:lower:]' '[:upper:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:upper:]' '[:lower:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:lower:]' '[:upper:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:upper:]' '[:lower:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '[:lower:]' '[:upper:]')\"\n    local string_keys_not_empty=\"\
    $(echo \"$string_keys_not_empty\" | tr '\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl6_r_wmr.sh: line 38: unexpected EOF while looking for matching
    `''''

    /tmp/tmpl6_r_wmr.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dictionary=\"$1\"\n    local keys=\"$2\"\n    local upper=false\n\
    \    local lower=false\n    local result=false\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n    local\
    \ E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n\
    \    local K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n \
    \   local P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n  \
    \  local U=0\n    local V=0\n    local W=0\n    local X=0\n    local Y=0\n   \
    \ local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local\
    \ e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n    local\
    \ E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n\
    \    local K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n \
    \   local P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n  \
    \  local U=0\n    local V=0\n    local W=0\n    local X=0\n    local Y=0\n   \
    \ local Z=0\n    local a\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_line=$1\n    local dict_line_tmp=${dict_line//,/ }\n    local\
    \ dict_line_tmp_tmp=${dict_line_tmp//\\n/ }\n    local dict_line_tmp_tmp_tmp=${dict_line_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp//,/ }\n    local\
    \ dict_line_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp//,/ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ }\n    local dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${dict_line_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//,/\
    \ \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe0jxojvs.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n   \
    \ local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_upper\n    local\
    \ dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n   \
    \ local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_len2=$((dict_len / 2))\n    local dict_len3=$((dict_len % 2))\n\
    \    local dict_len4=$((dict_len2 - dict_len3))\n    local dict_len5=$((dict_len4\
    \ - dict_len2))\n    local dict_len6=$((dict_len5 - dict_len4))\n    local dict_len7=$((dict_len6\
    \ - dict_len5))\n    local dict_len8=$((dict_len7 - dict_len6))\n    local dict_len9=$((dict_len8\
    \ - dict_len7))\n    local dict_len10=$((dict_len9 - dict_len8))\n    local dict_len11=$((dict_len10\
    \ - dict_len9))\n    local dict_len12=$((dict_len11 - dict_len10))\n    local\
    \ dict_len13=$((dict_len12 - dict_len11))\n    local dict_len14=$((dict_len13\
    \ - dict_len12))\n    local dict_len15=$((dict_len14 - dict_len13))\n    local\
    \ dict_len16=$((dict_len15 - dict_len14))\n    local dict_len17=$((dict_len16\
    \ - dict_len15))\n    local dict_len18=$((dict_len17 - dict_len16))\n    local\
    \ dict_len19=$((dict_len18 - dict_len17))\n    local dict_len20=$((dict_len19\
    \ - dict_len18))\n    local dict_len21=$((dict_len20 - dict_len19))\n    local\
    \ dict_len22=$((dict_len21 - dict_len20))\n    local dict_len23=$((dict_len22\
    \ - dict_len21))\n    local dict_len24=$((dict_len23 - dict_len22))\n    local\
    \ dict_len25=$((dict_len24 - dict_len23))\n    local dict_len26=$((dict_len25\
    \ - dict_len24))\n    local dict_len27=$((dict_len26 - dict_len25))\n    local\
    \ dict_len28=$((dict_len27 - dict_len26))\n    local dict_len29=$((dict_len28\
    \ - dict_len27))\n    local dict_len30=$((dict_len29 - dict_len28))\n    local\
    \ dict_len31=$((dict_len30 - dict_len29))\n    local dict_len32=$((dict_len31\
    \ - dict_len30))\n    local dict_len33=$((dict_len\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkziritu9.sh: line 53: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkziritu9.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key_vals=()\n    local dict_key_val_len=()\n  \
    \  local dict_key_val_len_max=()\n    local dict_key_val_len_min=()\n    local\
    \ dict_key_val_len_sum=()\n    local dict_key_val_len_max=$(echo $dict_len | cut\
    \ -d \",\" -f 1)\n    local dict_key_val_len_min=$(echo $dict_len | cut -d \"\
    ,\" -f 2)\n    local dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f 3)\n\
    \    local dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f 4)\n    local\
    \ dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f 5)\n    local dict_key_val_len_sum=$(echo\
    \ $dict_len | cut -d \",\" -f 6)\n    local dict_key_val_len_sum=$(echo $dict_len\
    \ | cut -d \",\" -f 7)\n    local dict_key_val_len_sum=$(echo $dict_len | cut\
    \ -d \",\" -f 8)\n    local dict_key_val_len_sum=$(echo $dict_len | cut -d \"\
    ,\" -f 9)\n    local dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f 10)\n\
    \    local dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f 11)\n    local\
    \ dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f 12)\n    local dict_key_val_len_sum=$(echo\
    \ $dict_len | cut -d \",\" -f 13)\n    local dict_key_val_len_sum=$(echo $dict_len\
    \ | cut -d \",\" -f 14)\n    local dict_key_val_len_sum=$(echo $dict_len | cut\
    \ -d \",\" -f 15)\n    local dict_key_val_len_sum=$(echo $dict_len | cut -d \"\
    ,\" -f 16)\n    local dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f\
    \ 17)\n    local dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f 18)\n\
    \    local dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f 19)\n    local\
    \ dict_key_val_len_sum=$(echo $dict_len | cut -d \",\" -f 20)\n    local dict_key_val_len_sum=$(echo\
    \ $dict_len | cut -d \",\" -f 21)\n    local dict_key_val_len_sum=$(echo $dict_len\
    \ | cut -d \",\" -f 22)\n\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local keys=\"$2\"\n    local lower=\"$(echo \"\
    $keys\" | tr '[:upper:]' '[:lower:]')\"\n    local upper=\"$(echo \"$keys\" |\
    \ tr '[:lower:]' '[:upper:]')\"\n    local len=\"$(echo \"$keys\" | wc -c)\"\n\
    \    local result=\"$(echo \"$dict\" | tr '\\n' ' ')\"\n    local count=\"$(echo\
    \ \"$result\" | grep -c \"$lower\")\"\n    local count2=\"$(echo \"$result\" |\
    \ grep -c \"$upper\")\"\n    if [ \"$count\" -eq \"$len\" ]; then\n        if\
    \ [ \"$count2\" -eq \"$len\" ]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_val\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local result\n    \n\
    \    if [[ $dict_len -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \    fi\n    \n    for (( dict_key = 0; dict_key < dict_len; dict_key++ )); do\n\
    \        dict_key_lower=${dict_arr[dict_key]}\n        dict_val_lower=${dict_arr[dict_key+1]}\n\
    \        dict_key_upper=${dict_arr[dict_key+2]}\n        dict_val_upper=${dict_arr[dict_key+3]}\n\
    \        \n        if [[ $dict_key_lower =~ ^[[:lower:]]+$ ]]; then\n        \
    \    if [[ $dict_val_lower =~ ^[[:lower:]]+$ ]]; then\n                if [[ $dict_key_upper\
    \ =~ ^[[:upper:]]+$ ]]; then\n                    if [[ $dict_val_upper =~ ^[[:upper:]]+$\
    \ ]]; then\n                        result=true\n                    else\n  \
    \                      result=false\n                    fi\n                else\n\
    \                    result=false\n                fi\n            else\n    \
    \            result=false\n            fi\n        else\n            result=false\n\
    \        fi\n        \n        if [[ $result == \"true\" ]]; then\n          \
    \  echo \"true\"\n            return\n        fi\n    done\n    \n    echo \"\
    false\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict_str=$1\n  local dict_arr=($dict_str)\n  local dict_len=${#dict_arr[@]}\n\
    \  local dict_key=${dict_arr[0]}\n  local dict_value=${dict_arr[1]}\n  local dict_lower=${dict_key^^}\n\
    \  local dict_upper=${dict_key^^}\n  local dict_lower=${dict_lower^^}\n  local\
    \ dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n\
    \  local dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n  local\
    \ dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n\
    \  local dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n  local\
    \ dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n\
    \  local dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n  local\
    \ dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n\
    \  local dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n  local\
    \ dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n\
    \  local dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n  local\
    \ dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n\
    \  local dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n  local\
    \ dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n\
    \  local dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n  local\
    \ dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n\
    \  local dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n  local\
    \ dict_upper=${dict_upper^^}\n  local dict_lower=${dict_lower^^}\n  local dict_upper=${dict_upper^^}\n\
    \  local dict_lower=${\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpc4lcehnf.sh: line 89: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_key2\n    local dict_value2\n    local result\n \
    \   local key\n    local value\n    local key2\n    local value2\n    local key3\n\
    \    local value3\n    local key4\n    local value4\n    local key5\n    local\
    \ value5\n    local key6\n    local value6\n    local key7\n    local value7\n\
    \    local key8\n    local value8\n    local key9\n    local value9\n    local\
    \ key10\n    local value10\n    local key11\n    local value11\n    local key12\n\
    \    local value12\n    local key13\n    local value13\n    local key14\n    local\
    \ value14\n    local key15\n    local value15\n    local key16\n    local value16\n\
    \    local key17\n    local value17\n    local key18\n    local value18\n    local\
    \ key19\n    local value19\n    local key20\n    local value20\n    local key21\n\
    \    local value21\n    local key22\n    local value22\n    local key23\n    local\
    \ value23\n    local key24\n    local value24\n    local key25\n    local value25\n\
    \    local key26\n    local value26\n    local key27\n    local value27\n    local\
    \ key28\n    local value28\n    local key29\n    local value29\n    local key30\n\
    \    local value30\n    local key31\n    local value31\n    local key32\n    local\
    \ value32\n    local key33\n    local value33\n    local key34\n    local value34\n\
    \    local key35\n    local value35\n    local key36\n    local value36\n    local\
    \ key37\n    local value37\n    local key38\n    local value38\n    local key39\n\
    \    local value39\n    local key40\n    local value40\n    local key41\n    local\
    \ value41\n    local key42\n    local value42\n    local key43\n    local value43\n\
    \    local key44\n    local value44\n    local key45\n    local value45\n    local\
    \ key46\n    local value46\n    local key47\n    local value47\n    local key48\n\
    \    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local i=0\n    local dict_key\n    local dict_value\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower_in\n    local dict_upper_in\n    local\
    \ dict_lower_in_key\n    local dict_upper_in_key\n    local dict_lower_in_val\n\
    \    local dict_upper_in_val\n    local dict_lower_in_key_val\n    local dict_upper_in_key_val\n\
    \    local dict_lower_in_key_val_arr\n    local dict_upper_in_key_val_arr\n  \
    \  local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_arr_len\n    local dict_upper_in_key_val_arr_len\n\
    \    local dict_lower_in_key_val_\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local result\n\
    \    local keyIsString\n    local valueIsString\n    local keyIsUpper\n    local\
    \ valueIsUpper\n    local keyIsLower\n    local valueIsLower\n    local keyIsNumber\n\
    \    local valueIsNumber\n    local keyIsEmpty\n    local valueIsEmpty\n    local\
    \ keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n\
    \    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local\
    \ valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n\
    \    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local\
    \ keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n\
    \    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local\
    \ valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n\
    \    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local\
    \ keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n\
    \    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local\
    \ valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n\
    \    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local\
    \ keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n\
    \    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local\
    \ valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n\
    \    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local\
    \ keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n\
    \    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n    local\
    \ valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local keyIsEmpty\n\
    \    local valueIsEmpty\n    local keyIsEmpty\n    local valueIsEmpty\n    local\
    \ keyIsEmpty\n    local valueIsEmpty\n    local \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo $1 | tr ',' '\\n' | sort -k 1,1 -k 2,2 | tr '\\n' ','\
    \ | sed 's/,$//')\n    local values=$(echo $1 | tr ',' '\\n' | sort -k 1,1 -k\
    \ 2,2 | tr '\\n' ',' | sed 's/,$//')\n    local lower=false\n    local upper=false\n\
    \    local count=$(echo $keys | wc -l)\n    for (( i=0; i<$count; i++ )); do\n\
    \        local key=$(echo $keys | cut -d ',' -f $i)\n        local value=$(echo\
    \ $values | cut -d ',' -f $i)\n        if [[ $key =~ ^[a-z]$ ]]; then\n      \
    \      lower=true\n        elif [[ $key =~ ^[A-Z]$ ]]; then\n            upper=true\n\
    \        fi\n    done\n    if [[ $lower == true && $upper == true ]]; then\n \
    \       echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo $1 | tr \",\" \"\\n\")\n    local values=$(echo $1\
    \ | tr \",\" \"\\n\")\n    local key\n    local value\n    local result\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key=\n    local dict_val=\n    local dict_key_lower=\n\
    \    local dict_val_lower=\n    local dict_key_upper=\n    local dict_val_upper=\n\
    \    local i=\n    local j=0\n    local result=\n    local status=\n    local\
    \ dict_key_lower=\n    local dict_val_lower=\n    local dict_key_upper=\n    local\
    \ dict_val_upper=\n    local dict_key=\n    local dict_val=\n    local dict_keys=()\n\
    \    local dict_vals=()\n    local dict_key=\n    local dict_val=\n    local dict_key_lower=\n\
    \    local dict_val_lower=\n    local dict_key_upper=\n    local dict_val_upper=\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_key_lower=\n    local\
    \ dict_val_lower=\n    local dict_key_upper=\n    local dict_val_upper=\n    local\
    \ dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n    local dict_vals=()\n\
    \    local dict_key=\n    local dict_val=\n    local dict_keys=()\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_key_upper\n    local dict_value_upper\n    local\
    \ dict_key_lower\n    local dict_value_lower\n    local result\n    local count\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_values=()\n    local dict_lower=()\n    local dict_upper=()\n    local\
    \ dict_lower_indx=-1\n    local dict_upper_indx=-1\n    local dict_lower_indx_upper=-1\n\
    \    local dict_upper_indx_lower=-1\n    local dict_lower_indx_upper_values=-1\n\
    \    local dict_upper_indx_lower_values=-1\n    local dict_lower_indx_upper_keys=-1\n\
    \    local dict_upper_indx_lower_keys=-1\n    local dict_lower_indx_upper_values_keys=-1\n\
    \    local dict_upper_indx_lower_values_keys=-1\n    local dict_lower_indx_upper_key_values=-1\n\
    \    local dict_upper_indx_lower_key_values=-1\n    local dict_lower_indx_upper_key_value_keys=-1\n\
    \    local dict_upper_indx_lower_key_value_keys=-1\n    local dict_lower_indx_upper_key_value_keys_values=-1\n\
    \    local dict_upper_indx_lower_key_value_keys_values=-1\n    local dict_lower_indx_upper_key_value_keys_values_keys=-1\n\
    \    local dict_upper_indx_lower_key_value_keys_values_keys=-1\n    local dict_lower_indx_upper_key_value_keys_values_keys_values=-1\n\
    \    local dict_upper_indx_lower_key_value_keys_values_keys_values=-1\n    local\
    \ dict_lower_indx_upper_key_value_keys_values_keys_values_keys=-1\n    local dict_upper_indx_lower_key_value_keys_values_keys_values_keys=-1\n\
    \    local dict_lower_indx_upper_key_value_keys_values_keys_values_keys_values=-1\n\
    \    local dict_upper_indx_lower_key_value_keys_values_keys_values_keys_values=-1\n\
    \    local dict_lower_indx_upper_key_value_keys_values_keys_values_keys_values=-1\n\
    \    local dict_upper_indx_lower_key_value_keys_values_keys_values_keys_values=-1\n\
    \    local dict_lower_indx_upper_key_value_keys_values_keys_values_keys_values_keys=-1\n\
    \    local dict_upper_indx_lower_key_value_keys_values_keys_values_keys_values_keys=-1\n\
    \    local dict_lower_indx_upper_key_value_keys_values_keys_values_keys_values_keys_values=-1\n\
    \    local dict_upper_indx_lower_key_value_keys_values_keys_values_keys_values_keys_values=-1\n\
    \    local dict_lower_ind\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local key_arr=()\n\
    \    local val_arr=()\n    local key_str\n    local val_str\n    local key_lower\n\
    \    local val_lower\n    local key_upper\n    local val_upper\n    local key_count\n\
    \    local val_count\n    local key_count2\n    local val_count2\n    local key_count3\n\
    \    local val_count3\n    local key_count4\n    local val_count4\n    local key_count5\n\
    \    local val_count5\n    local key_count6\n    local val_count6\n    local key_count7\n\
    \    local val_count7\n    local key_count8\n    local val_count8\n    local key_count9\n\
    \    local val_count9\n    local key_count10\n    local val_count10\n    local\
    \ key_count11\n    local val_count11\n    local key_count12\n    local val_count12\n\
    \    local key_count13\n    local val_count13\n    local key_count14\n    local\
    \ val_count14\n    local key_count15\n    local val_count15\n    local key_count16\n\
    \    local val_count16\n    local key_count17\n    local val_count17\n    local\
    \ key_count18\n    local val_count18\n    local key_count19\n    local val_count19\n\
    \    local key_count20\n    local val_count20\n    local key_count21\n    local\
    \ val_count21\n    local key_count22\n    local val_count22\n    local key_count23\n\
    \    local val_count23\n    local key_count24\n    local val_count24\n    local\
    \ key_count25\n    local val_count25\n    local key_count26\n    local val_count26\n\
    \    local key_count27\n    local val_count27\n    local key_count28\n    local\
    \ val_count28\n    local key_count29\n    local val_count29\n    local key_count30\n\
    \    local val_count30\n    local key_count31\n    local val_count31\n    local\
    \ key_count32\n    local val_count32\n    local key_count33\n    local val_count33\n\
    \    local key_count34\n    local val_count34\n    local key_count35\n    local\
    \ val_count35\n    local key_count36\n    local val_count36\n    local key_count37\n\
    \    local val_count37\n    local key_count38\n    local val_count\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_key=${dict_arr[0]}\n\
    \    local dict_val=${dict_arr[1]}\n    local dict_lower=${dict_key}\n    local\
    \ dict_upper=${dict_key^^}\n    local dict_lower=${dict_lower^^}\n    local dict_upper=${dict_upper^^}\n\
    \    local dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local\
    \ dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n\
    \    local dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n    local\
    \ dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n\
    \    local dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local\
    \ dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n\
    \    local dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n    local\
    \ dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n\
    \    local dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local\
    \ dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n\
    \    local dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n    local\
    \ dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n\
    \    local dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local\
    \ dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n\
    \    local dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n    local\
    \ dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n\
    \    local dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local\
    \ dict_lower=${dict_lower}\n    local dict_upper=${dict_upper}\n    local dict_lower=${dict_lower}\n\
    \    local dict_upper=${dict_upper}\n    local dict_lower=${\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr8i1t2am.sh: line 93: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_key=${dict_arr[0]}\n\
    \    local dict_value=${dict_arr[1]}\n    local dict_lower=${dict_key^^}\n   \
    \ local dict_upper=${dict_key^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptit4ib8e.sh: line 88: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local keys=$(echo $dict | awk -F, '{print $1}')\n\
    \    local values=$(echo $dict | awk -F, '{print $2}')\n    local lower\n    local\
    \ upper\n    lower=$(echo $keys | awk '{print tolower($0)}')\n    upper=$(echo\
    \ $keys | awk '{print toupper($0)}')\n    if [ -z \"$keys\" ]; then\n        echo\
    \ \"$dict\"\n        echo \"$lower\"\n        echo \"$upper\"\n        echo \"\
    $keys\"\n        echo \"$values\"\n        echo \"$lower\"\n        echo \"$upper\"\
    \n        echo \"$keys\"\n        echo \"$values\"\n        echo \"$lower\"\n\
    \        echo \"$upper\"\n        echo \"$keys\"\n        echo \"$values\"\n \
    \       echo \"$lower\"\n        echo \"$upper\"\n        echo \"$keys\"\n   \
    \     echo \"$values\"\n        echo \"$lower\"\n        echo \"$upper\"\n   \
    \     echo \"$keys\"\n        echo \"$values\"\n        echo \"$lower\"\n    \
    \    echo \"$upper\"\n        echo \"$keys\"\n        echo \"$values\"\n     \
    \   echo \"$lower\"\n        echo \"$upper\"\n        echo \"$keys\"\n       \
    \ echo \"$values\"\n        echo \"$lower\"\n        echo \"$upper\"\n       \
    \ echo \"$keys\"\n        echo \"$values\"\n        echo \"$lower\"\n        echo\
    \ \"$upper\"\n        echo \"$keys\"\n        echo \"$values\"\n        echo \"\
    $lower\"\n        echo \"$upper\"\n        echo \"$keys\"\n        echo \"$values\"\
    \n        echo \"$lower\"\n        echo \"$upper\"\n        echo \"$keys\"\n \
    \       echo \"$values\"\n        echo \"$lower\"\n        echo \"$upper\"\n \
    \       echo \"$keys\"\n        echo \"$values\"\n        echo \"$lower\"\n  \
    \      echo \"$upper\"\n        echo \"$keys\"\n        echo \"$values\"\n   \
    \     echo \"$lower\"\n        echo \"$upper\"\n        echo \"$keys\"\n     \
    \   echo \"$values\"\n        echo \"$lower\"\n        echo \"$upper\"\n     \
    \   echo \"$keys\"\n        echo \"$values\"\n        echo \"$lower\"\n      \
    \  echo \"$upper\"\n        echo \"$keys\"\n        echo \"$values\"\n       \
    \ echo \"$lower\"\n        echo \"$upper\"\n        echo \"$keys\"\n        echo\
    \ \"$values\"\n        echo \"$lower\"\n        echo \"$\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzsye9x5k.sh: line 112: unexpected EOF while looking for matching
    `"''

    /tmp/tmpzsye9x5k.sh: line 116: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_len2=$((dict_len / 2))\n    local dict_len3=$((dict_len % 2))\n\
    \    local dict_len4=$((dict_len / 2))\n    local dict_len5=$((dict_len / 4))\n\
    \    local dict_len6=$((dict_len / 8))\n    local dict_len7=$((dict_len / 16))\n\
    \    local dict_len8=$((dict_len / 32))\n    local dict_len9=$((dict_len / 64))\n\
    \    local dict_len10=$((dict_len / 128))\n    local dict_len11=$((dict_len /\
    \ 256))\n    local dict_len12=$((dict_len / 512))\n    local dict_len13=$((dict_len\
    \ / 1024))\n    local dict_len14=$((dict_len / 2048))\n    local dict_len15=$((dict_len\
    \ / 4096))\n    local dict_len16=$((dict_len / 8192))\n    local dict_len17=$((dict_len\
    \ / 16384))\n    local dict_len18=$((dict_len / 32768))\n    local dict_len19=$((dict_len\
    \ / 65536))\n    local dict_len20=$((dict_len / 131072))\n    local dict_len21=$((dict_len\
    \ / 262144))\n    local dict_len22=$((dict_len / 524288))\n    local dict_len23=$((dict_len\
    \ / 1048576))\n    local dict_len24=$((dict_len / 2097152))\n    local dict_len25=$((dict_len\
    \ / 4194304))\n    local dict_len26=$((dict_len / 8388608))\n    local dict_len27=$((dict_len\
    \ / 16777216))\n    local dict_len28=$((dict_len / 33554432))\n    local dict_len29=$((dict_len\
    \ / 67108864))\n    local dict_len30=$((dict_len / 134217728))\n    local dict_len31=$((dict_len\
    \ / 268435456))\n    local dict_len32=$((dict_len / 536870912))\n    local dict_len33=$((dict_len\
    \ / 1073741824))\n    local dict_len34=$((dict_len / 2147483648))\n    local dict_len35=$((dict_len\
    \ / 4294967296))\n    local dict_len36=$((dict_len / \n}\n\ncandidate() {\n  \
    \  check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4_20pl9z.sh: line 56: unexpected EOF while looking for matching
    `)''

    /tmp/tmp4_20pl9z.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo $1 | tr \",\" \"\\n\")\n    local values=$(echo $1\
    \ | tr \",\" \"\\n\")\n    local lower=0\n    local upper=0\n    local count=0\n\
    \    local result=0\n    local key\n    local value\n    local keylen\n    local\
    \ valuelen\n    local keychar\n    local valuechar\n    local keychars\n    local\
    \ valuechars\n    local keychar\n    local valuechar\n    local keychars\n   \
    \ local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n    local keychars\n\
    \    local valuechars\n    local keychar\n    local valuechar\n\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_key2\n    local dict_value2\n    local dict_key3\n\
    \    local dict_value3\n    local dict_key4\n    local dict_value4\n    local\
    \ dict_key5\n    local dict_value5\n    local dict_key6\n    local dict_value6\n\
    \    local dict_key7\n    local dict_value7\n    local dict_key8\n    local dict_value8\n\
    \    local dict_key9\n    local dict_value9\n    local dict_key10\n    local dict_value10\n\
    \    local dict_key11\n    local dict_value11\n    local dict_key12\n    local\
    \ dict_value12\n    local dict_key13\n    local dict_value13\n    local dict_key14\n\
    \    local dict_value14\n    local dict_key15\n    local dict_value15\n    local\
    \ dict_key16\n    local dict_value16\n    local dict_key17\n    local dict_value17\n\
    \    local dict_key18\n    local dict_value18\n    local dict_key19\n    local\
    \ dict_value19\n    local dict_key20\n    local dict_value20\n    local dict_key21\n\
    \    local dict_value21\n    local dict_key22\n    local dict_value22\n    local\
    \ dict_key23\n    local dict_value23\n    local dict_key24\n    local dict_value24\n\
    \    local dict_key25\n    local dict_value25\n    local dict_key26\n    local\
    \ dict_value26\n    local dict_key27\n    local dict_value27\n    local dict_key28\n\
    \    local dict_value28\n    local dict_key29\n    local dict_value29\n    local\
    \ dict_key30\n    local dict_value30\n    local dict_key31\n    local dict_value31\n\
    \    local dict_key32\n    local dict_value32\n    local dict_key33\n    local\
    \ dict_value33\n    local dict_key34\n    local dict_value34\n    local dict_key35\n\
    \    local dict_value35\n    local dict_key36\n    local dict_value36\n    local\
    \ dict_key37\n    local dict_value37\n    local dict_key38\n    local dict_value38\n\
    \    local dict_key39\n    local dict_value39\n    local dict_key40\n    local\
    \ dict_value40\n    local dict_key41\n    local dict_value41\n    local dict_key42\n\
    \    local dict_value\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys\n    local dict_keys_lower\n    local dict_keys_upper\n\
    \    local dict_keys_match\n    local dict_keys_not_match\n    local dict_keys_match_value\n\
    \    local dict_keys_not_match_value\n    local dict_keys_match_values\n    local\
    \ dict_keys_not_match_values\n    local dict_keys_match_values_lower\n    local\
    \ dict_keys_not_match_values_lower\n    local dict_keys_match_values_upper\n \
    \   local dict_keys_not_match_values_upper\n    local dict_keys_match_values_match\n\
    \    local dict_keys_not_match_values_match\n    local dict_keys_match_values_not_match\n\
    \    local dict_keys_not_match_values_not_match\n    local dict_keys_match_values_match_values\n\
    \    local dict_keys_not_match_values_match_values\n    local dict_keys_match_values_not_match_values\n\
    \    local dict_keys_not_match_values_not_match_values\n    local dict_keys_match_values_match_values_lower\n\
    \    local dict_keys_not_match_values_match_values_lower\n    local dict_keys_match_values_not_match_values_lower\n\
    \    local dict_keys_match_values_match_values_upper\n    local dict_keys_not_match_values_match_values_upper\n\
    \    local dict_keys_match_values_not_match_values_upper\n    local dict_keys_match_values_match_values_match\n\
    \    local dict_keys_not_match_values_match_values_match\n    local dict_keys_match_values_not_match_values_match\n\
    \    local dict_keys_match_values_match_values_not_match\n    local dict_keys_not_match_values_match_values_not_match\n\
    \    local dict_keys_match_values_match_values_match_values\n    local dict_keys_not_match_values_match_values_match_values\n\
    \    local dict_keys_match_values_not_match_values_match_values\n    local dict_keys_match_values_match_values_not_match_values\n\
    \    local dict_keys_not_match_values_match_values_not_match_values\n    local\
    \ dict_keys_match_values_match_values_match_values_lower\n    local dict_keys_not_match_values_match_values_match_values_lower\n\
    \    local dict_keys_match_values_not_match_values_match_values_lower\n    local\
    \ dict_keys_match_values_match_values_not_match_values_lower\n    local dict_keys_not_match_values_match_values_not_match_values_lower\n\
    \    local dict_keys_match_value\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=\"$1\"\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_value\n    local dict_key_lower\n    local\
    \ dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n   \
    \ local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local dict_key\n    local dict_val\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper_cnt\n\
    \    local dict_val_upper_cnt\n    local dict_key_lower_cnt\n    local dict_val_lower_cnt\n\
    \    local dict_key_upper_cnt2\n    local dict_val_upper_cnt2\n    local dict_key_lower_cnt2\n\
    \    local dict_val_lower_cnt2\n    local dict_key_upper_cnt3\n    local dict_val_upper_cnt3\n\
    \    local dict_key_lower_cnt3\n    local dict_val_lower_cnt3\n    local dict_key_upper_cnt4\n\
    \    local dict_val_upper_cnt4\n    local dict_key_lower_cnt4\n    local dict_val_lower_cnt4\n\
    \    local dict_key_upper_cnt5\n    local dict_val_upper_cnt5\n    local dict_key_lower_cnt5\n\
    \    local dict_val_lower_cnt5\n    local dict_key_upper_cnt6\n    local dict_val_upper_cnt6\n\
    \    local dict_key_lower_cnt6\n    local dict_val_lower_cnt6\n    local dict_key_upper_cnt7\n\
    \    local dict_val_upper_cnt7\n    local dict_key_lower_cnt7\n    local dict_val_lower_cnt7\n\
    \    local dict_key_upper_cnt8\n    local dict_val_upper_cnt8\n    local dict_key_lower_cnt8\n\
    \    local dict_val_lower_cnt8\n    local dict_key_upper_cnt9\n    local dict_val_upper_cnt9\n\
    \    local dict_key_lower_cnt9\n    local dict_val_lower_cnt9\n    local dict_key_upper_cnt10\n\
    \    local dict_val_upper_cnt10\n    local dict_key_lower_cnt10\n    local dict_val_lower_cnt10\n\
    \    local dict_key_upper_cnt11\n    local dict_val_upper_cnt11\n    local dict_key_lower_cnt11\n\
    \    local dict_val_lower_cnt11\n    local dict_key_upper_cnt12\n    local dict_val_upper_cnt12\n\
    \    local dict_key_lower_cnt12\n    local dict_val_lower_cnt12\n    local dict_key_upper_cnt13\n\
    \    local dict_val_upper_cnt13\n    local dict_key_lower_cnt13\n    local dict_val_lower_cnt13\n\
    \    local dict_key_upper_cnt14\n    local dict_val_\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local keys=\"$2\"\n    local lower=\"$(echo \"\
    $keys\" | tr '[:upper:]' '[:lower:]')\"\n    local upper=\"$(echo \"$keys\" |\
    \ tr '[:lower:]' '[:upper:]')\"\n    local len=\"$(echo \"$keys\" | wc -c)\"\n\
    \    local result=\"$(echo \"$dict\" | awk -F, 'BEGIN {print \"true\"}; {if (length($1)\
    \ != $len) {print \"false\";} else {for (k in $lower) {if ($1 ~ k) {print \"false\"\
    ;} else {print \"true\";}}for (k in $upper) {if ($1 ~ k) {print \"false\";} else\
    \ {print \"true\";}}}}')\"\n    echo \"$result\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: BEGIN {print "true"}; {if (length($1) != $len) {print
    "false";} else {for (k in $lower) {if ($1 ~ k) {print "false";} else {print "true";}}for
    (k in $upper) {if ($1 ~ k) {print "false";} else {print "true";}}}}

    awk: cmd. line:1:                                                                                 ^
    syntax error

    awk: cmd. line:1: BEGIN {print "true"}; {if (length($1) != $len) {print "false";}
    else {for (k in $lower) {if ($1 ~ k) {print "false";} else {print "true";}}for
    (k in $upper) {if ($1 ~ k) {print "false";} else {print "true";}}}}

    awk: cmd. line:1:                                                                                                                                                      ^
    syntax error

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_line\n    local dict_line2\n    local dict_line3\n    local\
    \ dict_line4\n    local dict_line5\n    local dict_line6\n    local dict_line7\n\
    \    local dict_line8\n    local dict_line9\n    local dict_line10\n    local\
    \ dict_line11\n    local dict_line12\n    local dict_line13\n    local dict_line14\n\
    \    local dict_line15\n    local dict_line16\n    local dict_line17\n    local\
    \ dict_line18\n    local dict_line19\n    local dict_line20\n    local dict_line21\n\
    \    local dict_line22\n    local dict_line23\n    local dict_line24\n    local\
    \ dict_line25\n    local dict_line26\n    local dict_line27\n    local dict_line28\n\
    \    local dict_line29\n    local dict_line30\n    local dict_line31\n    local\
    \ dict_line32\n    local dict_line33\n    local dict_line34\n    local dict_line35\n\
    \    local dict_line36\n    local dict_line37\n    local dict_line38\n    local\
    \ dict_line39\n    local dict_line40\n    local dict_line41\n    local dict_line42\n\
    \    local dict_line43\n    local dict_line44\n    local dict_line45\n    local\
    \ dict_line46\n    local dict_line47\n    local dict_line48\n    local dict_line49\n\
    \    local dict_line50\n    local dict_line51\n    local dict_line52\n    local\
    \ dict_line53\n    local dict_line54\n    local dict_line55\n    local dict_line56\n\
    \    local dict_line57\n    local dict_line58\n    local dict_line59\n    local\
    \ dict_line60\n    local dict_line61\n    local dict_line62\n    local dict_line63\n\
    \    local dict_line64\n    local dict_line65\n    local dict_line66\n    local\
    \ dict_line67\n    local dict_line68\n    local dict_line69\n    local dict_line70\n\
    \    local dict_line71\n    local dict_line72\n    local dict_line73\n    local\
    \ dict_line74\n    local dict_line75\n    local dict_line76\n    local dict_line77\n\
    \    local dict_line78\n    local dict_line79\n    local dict_line80\n    local\
    \ dict_line81\n    local dict_line82\n    local dict_line83\n    local dict_line84\n\
    \    local dict_line85\n    local dict_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local key_arr=()\n\
    \    local val_arr=()\n    local key_str\n    local val_str\n    local key_lower\n\
    \    local val_lower\n    local key_upper\n    local val_upper\n    local key_count\n\
    \    local val_count\n    local key_found\n    local val_found\n    local key_not_found\n\
    \    local val_not_found\n    local key_found\n    local val_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_found\n    local val_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_found\n    local\
    \ val_found\n    local key_not_found\n    local val_not_found\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_found\n    local val_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_found\n    local val_found\n    local key_not_found\n    local\
    \ val_not_found\n    local key_found\n    local val_found\n    local key_not_found\n\
    \    local val_not_found\n    local key_found\n    local val_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_found\n    local val_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_found\n    local\
    \ val_found\n    local key_not_found\n    local val_not_found\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_found\n    local val_found\n    local key_not_found\n    local val_not_found\n\
    \    local key_found\n    local val_found\n    local key_not_found\n    local\
    \ val_not_found\n    local key_found\n    local val_found\n    local key_not_found\n\
    \    local val_not_found\n    local key_found\n    local val_found\n    local\
    \ key_not_found\n    local val_not_found\n    local key_found\n    local val_found\n\
    \    local key_not_found\n    local val_not_found\n    local key_found\n    local\
    \ val_found\n    local key_not_found\n    local val_not_found\n    local key_found\n\
    \    local val_found\n    local key_not_found\n    local val_not_found\n    local\
    \ key_found\n    local val_found\n    local key_not_found\n    local val_not_found\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_string=$1\n    local dict_array=($(echo $dict_string | tr\
    \ \",\" \"\\n\"))\n    local dict_length=${#dict_array[@]}\n    local dict_length=${dict_length%?}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\
    \    local dict_length=${dict_length}\n    local dict_length=${dict_length}\n\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local keys=$(echo $1 | tr \",\" \"\\n\")\n  local values=$(echo $1 | tr\
    \ \",\" \"\\n\")\n  local lowercase_keys=$(echo $keys | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \" \" \"\\n\" | tr \" \" \"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm48lpzer.sh: line 36: unexpected EOF while looking for matching
    `"''

    /tmp/tmpm48lpzer.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local key\n    local value\n    local dict\n    local result\n    \n\
    \    IFS=,\n    dict=$1\n    \n    for key in $(echo $dict | cut -d ',' -f 1);\
    \ do\n        if [[ $key =~ ^[[:lower:]]+$ ]]; then\n            result=true\n\
    \        elif [[ $key =~ ^[[:upper:]]+$ ]]; then\n            result=false\n \
    \       else\n            result=false\n        fi\n    done\n    \n    if [[\
    \ $result == \"true\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_headers=$2\n    local dict_case=$3\n\
    \    local dict_headers_lower=$4\n    local dict_headers_upper=$5\n    local dict_headers_both=$6\n\
    \    local dict_headers_both_lower=$7\n    local dict_headers_both_upper=$8\n\
    \    local dict_headers_both_both=$9\n    local dict_headers_both_both_lower=$10\n\
    \    local dict_headers_both_both_upper=$11\n    local dict_headers_both_both_both=$12\n\
    \    local dict_headers_both_both_both_lower=$13\n    local dict_headers_both_both_both_upper=$14\n\
    \    local dict_headers_both_both_both_both=$15\n    local dict_headers_both_both_both_both_lower=$16\n\
    \    local dict_headers_both_both_both_both_upper=$17\n    local dict_headers_both_both_both_both_both=$18\n\
    \    local dict_headers_both_both_both_both_both_lower=$19\n    local dict_headers_both_both_both_both_both_upper=$20\n\
    \    local dict_headers_both_both_both_both_both_both_lower=$21\n    local dict_headers_both_both_both_both_both_both_upper=$22\n\
    \    local dict_headers_both_both_both_both_both_both_both_lower=$23\n    local\
    \ dict_headers_both_both_both_both_both_both_both_upper=$24\n    local dict_headers_both_both_both_both_both_both_both_both_lower=$25\n\
    \    local dict_headers_both_both_both_both_both_both_both_both_upper=$26\n  \
    \  local dict_headers_both_both_both_both_both_both_both_both_both_lower=$27\n\
    \    local dict_headers_both_both_both_both_both_both_both_both_both_upper=$28\n\
    \    local dict_headers_both_both_both_both_both_both_both_both_both_both_lower=$29\n\
    \    local dict_headers_both_both_both_both_both_both_both_both_both_both_upper=$30\n\
    \    local dict_headers_both_both\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local key_str\n    local val_str\n    local key_len\n    local val_len\n\
    \    local key_lower\n    local val_lower\n    local key_upper\n    local val_upper\n\
    \    local key_found\n    local val_found\n    local key_not_found\n    local\
    \ val_not_found\n    local key_not_found2\n    local val_not_found2\n    local\
    \ key_found2\n    local val_found2\n    local key_found3\n    local val_found3\n\
    \    local key_found4\n    local val_found4\n    local key_found5\n    local val_found5\n\
    \    local key_found6\n    local val_found6\n    local key_found7\n    local val_found7\n\
    \    local key_found8\n    local val_found8\n    local key_found9\n    local val_found9\n\
    \    local key_found10\n    local val_found10\n    local key_found11\n    local\
    \ val_found11\n    local key_found12\n    local val_found12\n    local key_found13\n\
    \    local val_found13\n    local key_found14\n    local val_found14\n    local\
    \ key_found15\n    local val_found15\n    local key_found16\n    local val_found16\n\
    \    local key_found17\n    local val_found17\n    local key_found18\n    local\
    \ val_found18\n    local key_found19\n    local val_found19\n    local key_found20\n\
    \    local val_found20\n    local key_found21\n    local val_found21\n    local\
    \ key_found22\n    local val_found22\n    local key_found23\n    local val_found23\n\
    \    local key_found24\n    local val_found24\n    local key_found25\n    local\
    \ val_found25\n    local key_found26\n    local val_found26\n    local key_found27\n\
    \    local val_found27\n    local key_found28\n    local val_found28\n    local\
    \ key_found29\n    local val_found29\n    local key_found30\n    local val_found30\n\
    \    local key_found31\n    local val_found31\n    local key_found32\n    local\
    \ val_found32\n    local key_found33\n    local val_found33\n    local key_found34\n\
    \    local val_found34\n    local key_found35\n    local val_found35\n    \n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key_val\n    local dict_key_val_len\n    local\
    \ dict_key_val_len_count\n    local dict_key_val_len_count2\n    local dict_key_val_len_count3\n\
    \    local dict_key_val_len_count4\n    local dict_key_val_len_count5\n    local\
    \ dict_key_val_len_count6\n    local dict_key_val_len_count7\n    local dict_key_val_len_count8\n\
    \    local dict_key_val_len_count9\n    local dict_key_val_len_count10\n    local\
    \ dict_key_val_len_count11\n    local dict_key_val_len_count12\n    local dict_key_val_len_count13\n\
    \    local dict_key_val_len_count14\n    local dict_key_val_len_count15\n    local\
    \ dict_key_val_len_count16\n    local dict_key_val_len_count17\n    local dict_key_val_len_count18\n\
    \    local dict_key_val_len_count19\n    local dict_key_val_len_count20\n    local\
    \ dict_key_val_len_count21\n    local dict_key_val_len_count22\n    local dict_key_val_len_count23\n\
    \    local dict_key_val_len_count24\n    local dict_key_val_len_count25\n    local\
    \ dict_key_val_len_count26\n    local dict_key_val_len_count27\n    local dict_key_val_len_count28\n\
    \    local dict_key_val_len_count29\n    local dict_key_val_len_count30\n    local\
    \ dict_key_val_len_count31\n    local dict_key_val_len_count32\n    local dict_key_val_len_count33\n\
    \    local dict_key_val_len_count34\n    local dict_key_val_len_count35\n    local\
    \ dict_key_val_len_count36\n    local dict_key_val_len_count37\n    local dict_key_val_len_count38\n\
    \    local dict_key_val_len_count39\n    local dict_key_val_len_count40\n    local\
    \ dict_key_val_len_count41\n    local dict_key_val_len_count42\n    local dict_key_val_len_count43\n\
    \    local dict_key_val_len_count44\n    local dict_key_val_len_count45\n    local\
    \ dict_key_val_len_count46\n    local dict_key_val_len_count47\n    local dict_key_val_len_count48\n\
    \    local dict_key_val_len_count49\n    local dict_key_val_len_count50\n    local\
    \ \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local key_len=0\n    local val_len=0\n    local key_is_upper=false\n    local\
    \ val_is_upper=false\n    local key_is_lower=false\n    local val_is_lower=false\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local val_key\n\
    \    local val_key2\n    local val_key3\n    local val_key4\n    local val_key5\n\
    \    local val_key6\n    local val_key7\n    local val_key8\n    local val_key9\n\
    \    local val_key10\n    local val_key11\n    local val_key12\n    local val_key13\n\
    \    local val_key14\n    local val_key15\n    local val_key16\n    local val_key17\n\
    \    local val_key18\n    local val_key19\n    local val_key20\n    local val_key21\n\
    \    local val_key22\n    local val_key23\n    local val_key24\n    local val_key25\n\
    \    local val_key26\n    local val_key27\n    local val_key28\n    local val_key29\n\
    \    local val_key30\n    local val_key31\n    local val_key32\n    local val_key33\n\
    \    local val_key34\n    local val_key35\n    local val_key36\n    local val_key37\n\
    \    local val_key38\n    local val_key39\n    local val_key40\n    local val_key41\n\
    \    local val_key42\n    local val_key43\n    local val_key44\n    local val_key45\n\
    \    local val_key46\n    local val_key47\n    local val_key48\n    local val_key49\n\
    \    local val_key50\n    local val_key51\n    local val_key52\n    local val_key53\n\
    \    local val_key54\n    local val_key55\n    local val_key56\n    local val_key57\n\
    \    local val_key58\n    local val_key59\n    local val_key60\n    local val_key61\n\
    \    local val_key62\n    local val_key63\n    local val_key64\n    local val_key65\n\
    \    local val_key66\n    local val_key67\n    local val_key68\n    local val_key69\n\
    \    local val_key70\n    local val\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local key_arr=()\n\
    \    local value_arr=()\n    local key_str\n    local value_str\n    local key_lower\n\
    \    local value_lower\n    local key_upper\n    local value_upper\n    local\
    \ key_count\n    local value_count\n    local key_found\n    local value_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \    local key_not_found\n    local value_not_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_found\n    local value_not_found\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local dict_value_upper\n    local dict_key_lower\n    local dict_value_lower\n\
    \    local dict_key_upper\n    local dict_value_upper\n    local dict_key_lower\n\
    \    local dict_value_lower\n    local dict_key_upper\n    local dict_value_upper\n\
    \    local dict_key_lower\n    local dict_value_lower\n    local dict_key_upper\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_string=\"$1\"\n    local dict_array=( $(echo $dict_string\
    \ | tr \",\" \"\\n\" ) )\n    local dict_length=${#dict_array[@]}\n    local dict_length=${dict_length%?}\n\
    \    local dict_length=${dict_length/#0}\n    local dict_length=${dict_length/#/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_length=${dict_length/:/}\n    local dict_length=${dict_length/:/}\n\
    \    local dict_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_string=$1\n    local dict_array=($(echo $dict_string | tr\
    \ \",\" \"\\n\"))\n    local dict_length=${#dict_array[@]}\n    local dict_keys=()\n\
    \    local dict_values=()\n    local dict_lowercase_keys=()\n    local dict_uppercase_keys=()\n\
    \    local dict_lowercase_values=()\n    local dict_uppercase_values=()\n    local\
    \ dict_lowercase_keys_length=${#dict_lowercase_keys[@]}\n    local dict_uppercase_keys_length=${#dict_uppercase_keys[@]}\n\
    \    local dict_lowercase_values_length=${#dict_lowercase_values[@]}\n    local\
    \ dict_uppercase_values_length=${#dict_uppercase_values[@]}\n    local dict_keys_length=${#dict_keys[@]}\n\
    \    local dict_values_length=${#dict_values[@]}\n    local dict_lowercase_keys_count=${#dict_lowercase_keys[@]}\n\
    \    local dict_uppercase_keys_count=${#dict_uppercase_keys[@]}\n    local dict_lowercase_values_count=${#dict_lowercase_values[@]}\n\
    \    local dict_uppercase_values_count=${#dict_uppercase_values[@]}\n    local\
    \ dict_keys_count=${#dict_keys[@]}\n    local dict_values_count=${#dict_values[@]}\n\
    \    local dict_lowercase_keys_found=false\n    local dict_uppercase_keys_found=false\n\
    \    local dict_lowercase_values_found=false\n    local dict_uppercase_values_found=false\n\
    \    local dict_keys_found=false\n    local dict_values_found=false\n    local\
    \ dict_lowercase_keys_not_found=false\n    local dict_uppercase_keys_not_found=false\n\
    \    local dict_lowercase_values_not_found=false\n    local dict_uppercase_values_not_found=false\n\
    \    local dict_keys_not_found=false\n    local dict_values_not_found=false\n\
    \    local dict_lowercase_keys_found=false\n    local dict_uppercase_keys_found=false\n\
    \    local dict_lowercase_values_found=false\n    local dict_uppercase_values_found=false\n\
    \    local dict_keys_found=false\n    local dict_values_found=false\n    local\
    \ dict_lowercase_keys_not_found=false\n    local dict_uppercase_keys_not_found=false\n\
    \    local dict_lowercase_values_not_found=false\n    local dict_uppercase_values_not_found=false\n\
    \    local dict_keys_not_found=false\n    local dict_values_not_found=false\n\
    \    local dict_lowercase_keys_found=false\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_key=${dict_arr[0]}\n\
    \    local dict_value=${dict_arr[1]}\n    local dict_lower=${dict_key^^}\n   \
    \ local dict_upper=${dict_key^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^}\n    local dict_lower=${dict_lower^^}\n    local\
    \ dict_upper=${dict_upper^^\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptit4ib8e.sh: line 88: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_len2=0\n    local\
    \ dict_len3=0\n    local dict_len4=0\n    local dict_len5=0\n    local dict_len6=0\n\
    \    local dict_len7=0\n    local dict_len8=0\n    local dict_len9=0\n    local\
    \ dict_len10=0\n    local dict_len11=0\n    local dict_len12=0\n    local dict_len13=0\n\
    \    local dict_len14=0\n    local dict_len15=0\n    local dict_len16=0\n    local\
    \ dict_len17=0\n    local dict_len18=0\n    local dict_len19=0\n    local dict_len20=0\n\
    \    local dict_len21=0\n    local dict_len22=0\n    local dict_len23=0\n    local\
    \ dict_len24=0\n    local dict_len25=0\n    local dict_len26=0\n    local dict_len27=0\n\
    \    local dict_len28=0\n    local dict_len29=0\n    local dict_len30=0\n    local\
    \ dict_len31=0\n    local dict_len32=0\n    local dict_len33=0\n    local dict_len34=0\n\
    \    local dict_len35=0\n    local dict_len36=0\n    local dict_len37=0\n    local\
    \ dict_len38=0\n    local dict_len39=0\n    local dict_len40=0\n    local dict_len41=0\n\
    \    local dict_len42=0\n    local dict_len43=0\n    local dict_len44=0\n    local\
    \ dict_len45=0\n    local dict_len46=0\n    local dict_len47=0\n    local dict_len48=0\n\
    \    local dict_len49=0\n    local dict_len50=0\n    local dict_len51=0\n    local\
    \ dict_len52=0\n    local dict_len53=0\n    local dict_len54=0\n    local dict_len55=0\n\
    \    local dict_len56=0\n    local dict_len57=0\n    local dict_len58=0\n    local\
    \ dict_len59=0\n    local dict_len60=0\n    local dict_len61=0\n    local dict_len62=0\n\
    \    local dict_len63=0\n    local dict_len64=0\n    local dict_len65=0\n    local\
    \ dict_len66=0\n    local dict_len67=0\n    local dict_len68=0\n    local dict_len69=0\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_len2=0\n    local\
    \ dict_len3=0\n    local dict_len4=0\n    local dict_len5=0\n    local dict_len6=0\n\
    \    local dict_len7=0\n    local dict_len8=0\n    local dict_len9=0\n    local\
    \ dict_len10=0\n    local dict_len11=0\n    local dict_len12=0\n    local dict_len13=0\n\
    \    local dict_len14=0\n    local dict_len15=0\n    local dict_len16=0\n    local\
    \ dict_len17=0\n    local dict_len18=0\n    local dict_len19=0\n    local dict_len20=0\n\
    \    local dict_len21=0\n    local dict_len22=0\n    local dict_len23=0\n    local\
    \ dict_len24=0\n    local dict_len25=0\n    local dict_len26=0\n    local dict_len27=0\n\
    \    local dict_len28=0\n    local dict_len29=0\n    local dict_len30=0\n    local\
    \ dict_len31=0\n    local dict_len32=0\n    local dict_len33=0\n    local dict_len34=0\n\
    \    local dict_len35=0\n    local dict_len36=0\n    local dict_len37=0\n    local\
    \ dict_len38=0\n    local dict_len39=0\n    local dict_len40=0\n    local dict_len41=0\n\
    \    local dict_len42=0\n    local dict_len43=0\n    local dict_len44=0\n    local\
    \ dict_len45=0\n    local dict_len46=0\n    local dict_len47=0\n    local dict_len48=0\n\
    \    local dict_len49=0\n    local dict_len50=0\n    local dict_len51=0\n    local\
    \ dict_len52=0\n    local dict_len53=0\n    local dict_len54=0\n    local dict_len55=0\n\
    \    local dict_len56=0\n    local dict_len57=0\n    local dict_len58=0\n    local\
    \ dict_len59=0\n    local dict_len60=0\n    local dict_len61=0\n    local dict_len62=0\n\
    \    local dict_len63=0\n    local dict_len64=0\n    local dict_len65=0\n    local\
    \ dict_len66=0\n    local dict_len67=0\n    local dict_len68=0\n    local dict_len69=0\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict_lines=$1\n  local dict_line\n  local dict_key\n  local dict_value\n\
    \  local dict_key_upper\n  local dict_value_upper\n  local dict_key_lower\n  local\
    \ dict_value_lower\n  local result\n  local count\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($(echo $dict_str | tr \",\" \"\
    \\n\"))\n    local dict_len=${#dict_arr[@]}\n    local dict_keys=()\n    local\
    \ dict_vals=()\n    local dict_key_upper=()\n    local dict_key_lower=()\n   \
    \ local dict_key_count=()\n    local dict_val_upper=()\n    local dict_val_lower=()\n\
    \    local dict_val_count=()\n    local key_upper=()\n    local key_lower=()\n\
    \    local key_count=()\n    local val_upper=()\n    local val_lower=()\n    local\
    \ val_count=()\n    local key_exists=()\n    local val_exists=()\n    local key_exists_count=()\n\
    \    local val_exists_count=()\n    local key_exists_exists=()\n    local val_exists_exists=()\n\
    \    local key_exists_exists_count=()\n    local val_exists_exists_count=()\n\
    \    local key_exists_exists_exists=()\n    local val_exists_exists_exists=()\n\
    \    local key_exists_exists_exists_count=()\n    local val_exists_exists_exists_count=()\n\
    \    local key_exists_exists_exists_exists=()\n    local val_exists_exists_exists_exists=()\n\
    \    local key_exists_exists_exists_exists_count=()\n    local val_exists_exists_exists_exists_count=()\n\
    \    local key_exists_exists_exists_exists_exists=()\n    local val_exists_exists_exists_exists_exists=()\n\
    \    local key_exists_exists_exists_exists_exists_count=()\n    local val_exists_exists_exists_exists_exists_count=()\n\
    \    local key_exists_exists_exists_exists_exists_exists=()\n    local val_exists_exists_exists_exists_exists_exists=()\n\
    \    local key_exists_exists_exists_exists_exists_exists_count=()\n    local val_exists_exists_exists_exists_exists_exists_count=()\n\
    \    local key_exists_exists_exists_exists_exists_exists_exists=()\n    local\
    \ val_exists_exists_exists_exists_exists_exists_exists=()\n    local key_exists_exists_exists_exists_exists_exists_exists_count=()\n\
    \    local val_exists_exists_exists_exists_exists_exists_exists_count=()\n\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_line=\"$1\"\n    local dict_line_cut=\"$2\"\n    local dict_line_split=(${dict_line//,/\
    \ })\n    local dict_line_count=0\n    local dict_line_lower=0\n    local dict_line_upper=0\n\
    \    local dict_line_lower_in=0\n    local dict_line_upper_in=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_upper_in_count=0\n    local dict_line_lower_in_count=0\n\
    \    local dict_line_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict_str=$1\n  local dict_arr=($dict_str)\n  local key_arr=()\n \
    \ local val_arr=()\n  local key_str\n  local val_str\n  local key\n  local val\n\
    \  local key_lower\n  local val_lower\n  local key_upper\n  local val_upper\n\
    \  local key_found\n  local val_found\n  local key_not_found\n  local val_not_found\n\
    \  local key_not_found_lower\n  local val_not_found_lower\n  local key_not_found_upper\n\
    \  local val_not_found_upper\n  local key_not_found_both\n  local val_not_found_both\n\
    \  local key_not_found_both_lower\n  local val_not_found_both_lower\n  local key_not_found_both_upper\n\
    \  local val_not_found_both_upper\n  local key_not_found_both_lower\n  local val_not_found_both_lower\n\
    \  local key_not_found_both_upper\n  local val_not_found_both_upper\n  local key_not_found_both_lower\n\
    \  local val_not_found_both_lower\n  local key_not_found_both_upper\n  local val_not_found_both_upper\n\
    \  local key_not_found_both_lower\n  local val_not_found_both_lower\n  local key_not_found_both_upper\n\
    \  local val_not_found_both_upper\n  local key_not_found_both_lower\n  local val_not_found_both_lower\n\
    \  local key_not_found_both_upper\n  local val_not_found_both_upper\n  local key_not_found_both_lower\n\
    \  local val_not_found_both_lower\n  local key_not_found_both_upper\n  local val_not_found_both_upper\n\
    \  local key_not_found_both_lower\n  local val_not_found_both_lower\n  local key_not_found_both_upper\n\
    \  local val_not_found_both_upper\n  local key_not_found_both_lower\n  local val_not_found_both_lower\n\
    \  local key_not_found_both_upper\n  local val_not_found_both_upper\n  local key_not_found_both_lower\n\
    \  local val_not_found_both_lower\n  local key_not_found_both_upper\n  local val_not_found_both_upper\n\
    \  local key_not_found_both_lower\n  local val_not_found_both_lower\n  local key_not_found_both_upper\n\
    \  local val_not_found_both_upper\n  local key_not_found_both_lower\n  local val_not_found_both_lower\n\
    \  local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local keys=$(echo $1 | tr \",\" \"\\n\")\n    local values=$(echo $1\
    \ | tr \",\" \"\\n\")\n    local lower\n    local upper\n    local result\n  \
    \  lower=$(echo $keys | tr [A-Z] [a-z])\n    upper=$(echo $keys | tr [a-z] [A-Z])\n\
    \    lower=$(echo $lower | tr [A-Z] [a-z])\n    upper=$(echo $upper | tr [a-z]\
    \ [A-Z])\n    if [ -z \"$keys\" ]; then\n        result=\"false\"\n    else\n\
    \        result=$(echo $lower | tr [A-Z] [a-z]) && \\\n            $(echo $upper\
    \ | tr [A-Z] [a-z])\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy9mjq_ia.sh: line 32: p: command not found

    '
  stdout: ''
  timestamp: 1660050595
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_line=$1\n    local dict_line_keys=$(echo $dict_line | awk\
    \ -F, '{print $1}')\n    local dict_line_vals=$(echo $dict_line | awk -F, '{print\
    \ $2}')\n    local dict_line_vals_lower=$(echo $dict_line_vals | awk '{print tolower($0)}')\n\
    \    local dict_line_vals_upper=$(echo $dict_line_vals | awk '{print toupper($0)}')\n\
    \    local dict_line_vals_count=$(echo $dict_line_vals | wc -l)\n    local dict_line_vals_count_lower=$(echo\
    \ $dict_line_vals_count | awk '{print tolower($0)}')\n    local dict_line_vals_count_upper=$(echo\
    \ $dict_line_vals_count | awk '{print toupper($0)}')\n    local dict_line_vals_count_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($0==$1)}')\n    local dict_line_vals_count_not_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($0!=$1)}')\n    local dict_line_vals_count_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($0==$1)}')\n    local dict_line_vals_count_not_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($0!=$1)}')\n    local dict_line_vals_count_greater_than=$(echo\
    \ $dict_line_vals_count | awk '{print ($0>$1)}')\n    local dict_line_vals_count_less_than=$(echo\
    \ $dict_line_vals_count | awk '{print ($0<$1)}')\n    local dict_line_vals_count_greater_than_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($0>=$1)}')\n    local dict_line_vals_count_less_than_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($0<=$1)}')\n    local dict_line_vals_count_between_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($0>=1 && $1<=$2)}')\n    local dict_line_vals_count_between_not_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($0>1 && $1<=$2)}')\n    local dict_line_vals_count_between_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($0>=1 && $1<=$2)}')\n    local dict_line_vals_count_between_not_equal=$(echo\
    \ $dict_line_vals_count | awk '{print ($\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpurn72gte.sh: line 38: unexpected EOF while looking for matching
    `''''

    /tmp/tmpurn72gte.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_string=$1\n    local dict_array=($(echo $dict_string | tr\
    \ \",\" \"\\n\"))\n    local dict_length=${#dict_array[@]}\n    local dict_length=${dict_length-1}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_lines=$1\n    local dict_line\n    local dict_key\n    local\
    \ dict_value\n    local dict_keys=()\n    local dict_values=()\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    local dict_value\n    local dict_key\n\
    \    local dict_value\n    local dict_key\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_str=$1\n    local dict_arr=($dict_str)\n    local dict_len=${#dict_arr[@]}\n\
    \    local i=0\n    local dict_key_str\n    local dict_val_str\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_key_found\n\
    \    local dict_val_found\n    local dict_key_not_found\n    local dict_val_not_found\n\
    \    local dict_key_found\n    local dict_val_found\n    local dict_key_not_found\n\
    \    local dict_val_not_found\n    local dict_key_found\n    local dict_val_found\n\
    \    local dict_key_not_found\n    local dict_val_not_found\n    local dict_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict_string=$1\n    local dict_array=($(echo $dict_string | tr\
    \ \",\" \"\\n\"))\n    local dict_length=${#dict_array[@]}\n    local dict_length=${dict_length-1}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    local dict_length=${dict_length/#/0}\n\
    \    local dict_length=${dict_length/#/0}\n    \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050594
