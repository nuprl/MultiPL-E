language: sh
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_note=()\n\
    \    local music_last_beat=()\n    local music_last_beat_note=()\n    local music_last_beat_beat=()\n\
    \    local music_last_beat_beat_note=()\n    local music_last_beat_beat_beat=()\n\
    \    local music_last_beat_beat_beat_note=()\n    local music_last_beat_beat_beat_beat=()\n\
    \    local music_last_beat_beat_beat_beat_note=()\n    local music_last_beat_beat_beat_beat_beat=()\n\
    \    local music_last_beat_beat_beat_beat_beat_note=()\n    local music_last_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_beat_beat_beat_beat_beat_beat_note=()\n    local music_last_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_beat_beat_beat_beat_beat_beat_note=()\n    local music_last_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_beat_beat_beat_beat_beat_beat_beat_note=()\n    local music_last_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_beat_beat_beat_beat_beat_beat_beat_beat_note=()\n    local\
    \ music_last_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_beat_beat_beat_beat_beat_beat_beat_beat_note=()\n\
    \    local music_last_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_note=()\n\
    \    local music_last_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_beat_beat_beat_beat_beat_beat_beat_be\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_notes=()\n    local music_notes_str=()\n    local music_notes_arr=()\n\
    \    local music_notes_beats=()\n    local music_notes_notes=()\n    local music_notes_notes_str=()\n\
    \    local music_notes_notes_arr=()\n    local music_notes_notes_beats=()\n  \
    \  local music_notes_notes_notes=()\n    local music_notes_notes_notes_str=()\n\
    \    local music_notes_notes_notes_arr=()\n    local music_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes=()\n    local music_notes_notes_notes_notes_str=()\n\
    \    local music_notes_notes_notes_notes_arr=()\n    local music_notes_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes_notes=()\n    local music_notes_notes_notes_notes_notes_str=()\n\
    \    local music_notes_notes_notes_notes_notes_arr=()\n    local music_notes_notes_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes_notes_notes=()\n    local music_notes_notes_notes_notes_notes_notes_str=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_arr=()\n    local music_notes_notes_notes_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes=()\n    local music_notes_notes_notes_notes_notes_notes_notes_str=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_arr=()\n    local music_notes_notes_notes_notes_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_notes=()\n    local\
    \ music_notes_notes_notes_notes_notes_notes_notes_notes_str=()\n    local music_notes_notes_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_tmp=()\n\
    \    local music_arr_len=0\n    local music_arr_len_tmp=0\n    local music_arr_len_tmp2=0\n\
    \    local music_arr_len_tmp3=0\n    local music_arr_len_tmp4=0\n    local music_arr_len_tmp5=0\n\
    \    local music_arr_len_tmp6=0\n    local music_arr_len_tmp7=0\n    local music_arr_len_tmp8=0\n\
    \    local music_arr_len_tmp9=0\n    local music_arr_len_tmp10=0\n    local music_arr_len_tmp11=0\n\
    \    local music_arr_len_tmp12=0\n    local music_arr_len_tmp13=0\n    local music_arr_len_tmp14=0\n\
    \    local music_arr_len_tmp15=0\n    local music_arr_len_tmp16=0\n    local music_arr_len_tmp17=0\n\
    \    local music_arr_len_tmp18=0\n    local music_arr_len_tmp19=0\n    local music_arr_len_tmp20=0\n\
    \    local music_arr_len_tmp21=0\n    local music_arr_len_tmp22=0\n    local music_arr_len_tmp23=0\n\
    \    local music_arr_len_tmp24=0\n    local music_arr_len_tmp25=0\n    local music_arr_len_tmp26=0\n\
    \    local music_arr_len_tmp27=0\n    local music_arr_len_tmp28=0\n    local music_arr_len_tmp29=0\n\
    \    local music_arr_len_tmp30=0\n    local music_arr_len_tmp31=0\n    local music_arr_len_tmp32=0\n\
    \    local music_arr_len_tmp33=0\n    local music_arr_len_tmp34=0\n    local music_arr_len_tmp35=0\n\
    \    local music_arr_len_tmp36=0\n    local music_arr_len_tmp37=0\n    local music_arr_len_tmp38=0\n\
    \    local music_arr_len_tmp39=0\n    local music_arr_len_tmp40=0\n    local music_arr_len_tmp41=0\n\
    \    local music_arr_len_tmp42=0\n    local music_arr_len_tmp43=0\n    local music_arr_len_tmp44=0\n\
    \    local music_arr_len_tmp45=0\n    local music_arr_len_tmp46=0\n    local music_arr_len_tmp47=0\n\
    \    local music_arr_len_tmp48=0\n\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_str=()\n    local music_last_notes_beats_str_str_arr=()\n\
    \    local music_last_notes_beats_str_str_str=()\n    local music_last_notes_beats_str_str_str_arr=()\n\
    \    local music_last_notes_beats_str_str_str_str=()\n    local music_last_notes_beats_str_str_str_str_arr=()\n\
    \    local music_last_notes_beats_str_str_str_str_str=()\n    local music_last_notes_beats_str_str_str_str_str_arr=()\n\
    \    local music_last_notes_beats_str_str_str_str_str_str=()\n    local music_last_notes_beats_str_str_str_str_str_str_arr=()\n\
    \    local music_last_notes_beats_str_str_str_str_str_str_str=()\n    local music_last_notes_beats_str_str_str_str_str_str_str_arr=()\n\
    \    local music_last_notes_beats_str_str_str_str_str_str_str_str=()\n    local\
    \ music_last_notes_beats_str_str_str_str_str_str_str_str_arr=()\n    local music_last_notes_beats_str_str_str_str_str_str_str_str_str=()\n\
    \    local music_last_notes_beats_str_str_str_str_str_str_str_str_arr=()\n   \
    \ local music_last_notes_beats_str_str_str_str_str_str_str_str_str=()\n    local\
    \ music_last_notes_beats_str_str_str_str_str_str_str_str_str_arr=()\n    local\
    \ music_last_notes_beats_str_str_str_str_str_str_str_str_str_str=()\n    local\
    \ music_last_notes_beats_str_str_str_str_str_str_str_str_str_str_arr=()\n    local\
    \ music_last_notes_beats_str_str_str_str_str_str_str_str_str_str_str=()\n    local\
    \ music_last_notes_beats_str_str_str_str_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_array=()\n    local music_last_notes_beats_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array=()\n    local music_last_notes_beats_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array=()\n   \
    \ local music_last_notes_beats_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last=()\n    local music_last_beats=()\n\
    \    local music_last_notes=()\n    local music_last_last_beats=()\n    local\
    \ music_last_last_notes=()\n    local music_last_last_last_beats=()\n    local\
    \ music_last_last_last_notes=()\n    local music_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_notes=()\n    local music_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_note=()\n\
    \    local music_last_beat=()\n    local music_last_beat_beats=()\n    local music_last_beat_beats_count=()\n\
    \    local music_last_beat_beats_count_count=()\n    local music_last_beat_beats_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count=()\n    local music_last_beat_beats_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count=()\n    local\
    \ music_last_beat_beats_count_count_count_count_count_count_count=()\n    local\
    \ music_last_beat_beats_count_count_count_count_count_count_count_count=()\n \
    \   local music_last_beat_beats_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_last_beat_beats_count_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beat=()\n  local music_last_note=()\n\
    \  local music_last_note_beat=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ music_last_note_beat_index=()\n  local music_last_note_beat_index=()\n  local\
    \ \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr_len=()\n    local music_last_notes_beats_str_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len=()\n    local music_last_notes_beats_str_arr_len_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len=()\n    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len=()\n   \
    \ local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr=()\n  \
    \  local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_beat=()\n\
    \    local music_last_note_beat_count=()\n    local music_last_note_beat_count_index=()\n\
    \    local music_last_note_beat_count_index_count=()\n    local music_last_note_beat_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count=()\n    local music_last_note_beat_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_last_beats=()\n\
    \    local music_last_notes=()\n    local music_last_beats_str=()\n    local music_last_notes_str=()\n\
    \    local music_last_beats_str_count=0\n    local music_last_notes_str_count=0\n\
    \    local music_last_beats_str_count_str=()\n    local music_last_notes_str_count_str=()\n\
    \    local music_last_beats_str_count_str_count=0\n    local music_last_notes_str_count_str_count=0\n\
    \    local music_last_beats_str_count_str_str=()\n    local music_last_notes_str_count_str_str=()\n\
    \    local music_last_beats_str_count_str_str_count=0\n    local music_last_notes_str_count_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str=()\n    local music_last_notes_str_count_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_count=0\n    local music_last_notes_str_count_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str=()\n    local music_last_notes_str_count_str_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_str_count=0\n    local music_last_notes_str_count_str_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str_str=()\n    local music_last_notes_str_count_str_str_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_str_str_count=0\n    local music_last_notes_str_count_str_str_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str=()\n    local music_last_notes_str_count_str_str_str_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_count=0\n    local\
    \ music_last_notes_str_count_str_str_str_str_str_str_count=0\n    local music_last_beats_str_count_str_str_str_str_str_str_str=()\n\
    \    local music_last_notes_str_count_str_str_str_str_str_str_str=()\n\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_std=()\n    local music_last_notes_beats_count_std_max=()\n\
    \    local music_last_notes_beats_count_std_min=()\n    local music_last_notes_beats_count_var=()\n\
    \    local music_last_notes_beats_count_var_max=()\n    local music_last_notes_beats_count_var_min=()\n\
    \    local music_last_notes_beats_count_count_max=()\n    local music_last_notes_beats_count_count_min=()\n\
    \    local music_last_notes_beats_count_count_sum=()\n    local music_last_notes_beats_count_count_sum_max=()\n\
    \    local music_last_notes_beats_count_count_sum_min=()\n    local music_last_notes_beats_count_count_avg=()\n\
    \    local music_last_notes_beats_count_count_avg_max=()\n    local music_last_notes_beats_count_count_avg_min=()\n\
    \    local music_last_notes_beats_count_count_std=()\n    local music_last_notes_beats_count_count_std_max=()\n\
    \    local music_last_notes_beats_count_count_std_min=()\n    local music_last_notes_beats_count_count_var=()\n\
    \    local music_last_notes_beats_count_count_var_max=()\n    local music_last_notes_beats_count_count_var_min=()\n\
    \    local music_last_notes_beats_count_count_count_max=()\n    local music_last_notes_beats_count_count_count_min=()\n\
    \    local music_last_notes_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_beats_string=()\n    local music_beats_string2=()\n    local music_beats_string3=()\n\
    \    local music_beats_string4=()\n    local music_beats_string5=()\n    local\
    \ music_beats_string6=()\n    local music_beats_string7=()\n    local music_beats_string8=()\n\
    \    local music_beats_string9=()\n    local music_beats_string10=()\n    local\
    \ music_beats_string11=()\n    local music_beats_string12=()\n    local music_beats_string13=()\n\
    \    local music_beats_string14=()\n    local music_beats_string15=()\n    local\
    \ music_beats_string16=()\n    local music_beats_string17=()\n    local music_beats_string18=()\n\
    \    local music_beats_string19=()\n    local music_beats_string20=()\n    local\
    \ music_beats_string21=()\n    local music_beats_string22=()\n    local music_beats_string23=()\n\
    \    local music_beats_string24=()\n    local music_beats_string25=()\n    local\
    \ music_beats_string26=()\n    local music_beats_string27=()\n    local music_beats_string28=()\n\
    \    local music_beats_string29=()\n    local music_beats_string30=()\n    local\
    \ music_beats_string31=()\n    local music_beats_string32=()\n    local music_beats_string33=()\n\
    \    local music_beats_string34=()\n    local music_beats_string35=()\n    local\
    \ music_beats_string36=()\n    local music_beats_string37=()\n    local music_beats_string38=()\n\
    \    local music_beats_string39=()\n    local music_beats_string40=()\n    local\
    \ music_beats_string41=()\n    local music_beats_string42=()\n    local music_beats_string43=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_beats_str=''\n    local music_beats_arr=()\n    local music_beats_beats=()\n\
    \    local music_beats_beats_str=''\n    local music_beats_beats_arr=()\n    local\
    \ music_beats_beats_beats=()\n    local music_beats_beats_beats_str=''\n    local\
    \ music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_str=''\n    local music_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=''\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_str=''\n    local music_beats_beats_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=''\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_str=''\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_str=''\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beat\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n\
    \    local music_note_count=()\n    local music_note_beat_count=()\n    local\
    \ music_note_beat_beat_count=()\n    local music_note_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_count=()\n    local music_note_beat_beat_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_beat_beat_count=()\n    local music_note_beat_beat_beat_beat_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n    local\
    \ music_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n    local\
    \ music_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n    local\
    \ music_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_count=()\n\
    \    local music_note_beat_beat_beat_beat_beat_beat_be\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_beats=()\n\
    \  local music_beats_str=\"\"\n  local music_beats_str_index=0\n  local music_beats_str_index2=0\n\
    \  local music_beats_str_index3=0\n  local music_beats_str_index4=0\n  local music_beats_str_index5=0\n\
    \  local music_beats_str_index6=0\n  local music_beats_str_index7=0\n  local music_beats_str_index8=0\n\
    \  local music_beats_str_index9=0\n  local music_beats_str_index10=0\n  local\
    \ music_beats_str_index11=0\n  local music_beats_str_index12=0\n  local music_beats_str_index13=0\n\
    \  local music_beats_str_index14=0\n  local music_beats_str_index15=0\n  local\
    \ music_beats_str_index16=0\n  local music_beats_str_index17=0\n  local music_beats_str_index18=0\n\
    \  local music_beats_str_index19=0\n  local music_beats_str_index20=0\n  local\
    \ music_beats_str_index21=0\n  local music_beats_str_index22=0\n  local music_beats_str_index23=0\n\
    \  local music_beats_str_index24=0\n  local music_beats_str_index25=0\n  local\
    \ music_beats_str_index26=0\n  local music_beats_str_index27=0\n  local music_beats_str_index28=0\n\
    \  local music_beats_str_index29=0\n  local music_beats_str_index30=0\n  local\
    \ music_beats_str_index31=0\n  local music_beats_str_index32=0\n  local music_beats_str_index33=0\n\
    \  local music_beats_str_index34=0\n  local music_beats_str_index35=0\n  local\
    \ music_beats_str_index36=0\n  local music_beats_str_index37=0\n  local music_beats_str_index38=0\n\
    \  local music_beats_str_index39=0\n  local music_beats_str_index40=0\n  local\
    \ music_beats_str_index41=0\n  local music_beats_str_index42=0\n  local music_beats_str_index43=0\n\
    \  local music_beats_str\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_str=()\n  \
    \  local music_last_beat_str_count_arr=()\n    local music_last_beat_str_count_str_count=0\n\
    \    local music_last_beat_str_count_str_arr=()\n    local music_last_beat_str_count_str_count_arr=()\n\
    \    local music_last_beat_str_count_str_count_str=()\n    local music_last_beat_str_count_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_count_str_str=()\n    local music_last_beat_str_count_str_count_str_str_arr=()\n\
    \    local music_last_beat_str_count_str_count_str_str_str=()\n    local music_last_beat_str_count_str_count_str_str_arr=()\n\
    \    local music_last_beat_str_count_str_count_str_str_str=()\n    local music_last_beat_str_count_str_count_str_str_str_arr=()\n\
    \    local music_last_beat_str_count_str_count_str_str_str_str=()\n    local music_last_beat_str_count_str_count_str_str_str_arr=()\n\
    \    local music_last_beat_str_count_str_count_str_str_str_str=()\n    local music_last_beat_str_count_str_count_str_str_str_arr=()\n\
    \    local music_last_beat_str_count_str_count_str_str_str_str=()\n    local music_last_beat_str_count_str_count_str_str_str_arr=()\n\
    \    local music_last_beat_str_count_str_count_str_str_str_str=()\n    local music_last_beat_str_count_str_count_str_str_str_arr=()\n\
    \    local music_last_beat_str_count_str_count_str_str_str_str=()\n    local music_last_beat_str_count_str_count_str_str_str_str_arr=()\n\
    \    local music_last_beat_str_count_str_count_str_str_str_str_str=()\n    local\
    \ music_last_beat_str_count_str_count_str_str_str_str_arr=()\n    local music_last_beat_str_count_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_length=()\n    local music_notes_count=()\n\
    \    local music_notes_count_length=()\n    local music_notes_count_index=()\n\
    \    local music_notes_count_index_length=()\n    local music_notes_count_index_count=()\n\
    \    local music_notes_count_index_count_length=()\n    local music_notes_count_index_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_length=()\n    local music_notes_count_index_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_length=()\n \
    \   local music_notes_count_index_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_std=()\n    local music_last_notes_beats_count_std_max=()\n\
    \    local music_last_notes_beats_count_std_min=()\n    local music_last_notes_beats_count_var=()\n\
    \    local music_last_notes_beats_count_var_max=()\n    local music_last_notes_beats_count_var_min=()\n\
    \    local music_last_notes_beats_count_count=()\n    local music_last_notes_beats_count_count_max=()\n\
    \    local music_last_notes_beats_count_count_min=()\n    local music_last_notes_beats_count_count_sum=()\n\
    \    local music_last_notes_beats_count_count_sum_max=()\n    local music_last_notes_beats_count_count_sum_min=()\n\
    \    local music_last_notes_beats_count_count_avg=()\n    local music_last_notes_beats_count_count_avg_max=()\n\
    \    local music_last_notes_beats_count_count_avg_min=()\n    local music_last_notes_beats_count_count_std=()\n\
    \    local music_last_notes_beats_count_count_std_max=()\n    local music_last_notes_beats_count_count_std_min=()\n\
    \    local music_last_notes_beats_count_count_var=()\n    local music_last_notes_beats_count_count_var_max=()\n\
    \    local music_last_notes_beats_count_count_var_min=()\n    local music_last_notes_beats_count_count_count=()\n\
    \    local music_last_notes_beats_count_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_notes_array=()\n \
    \   local music_beats_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_beats_array_length=()\n    local music_notes_beats_array_length_length=()\n\
    \    local music_notes_beats_array_length_length_length=()\n    local music_notes_beats_array_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length=()\n   \
    \ local music_notes_beats_array_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_str=()\n  \
    \  local music_last_note_beat_str_arr=()\n    local music_last_note_beat_str_arr_len=0\n\
    \    local music_last_note_beat_str_arr_len_max=0\n    local music_last_note_beat_str_arr_len_min=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_str_arr_len_max=100\n\
    \    local music_last_note_beat_str_arr_len_min=100\n    local music_last_note_beat_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_count=()\n    local music_notes_last_beat=()\n\
    \    local music_notes_last_beat_count=()\n    local music_notes_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_count=()\n    local music_notes_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_count=()\n    local music_notes_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_count=()\n    local\
    \ music_notes_last_beat_last_beat_last_beat_last_beat_last_beat=()\n    local\
    \ music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n   \
    \ local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_\n}\n\ncandidate() {\n  \
    \  parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last=()\n    local music_last_beats=()\n\
    \    local music_last_notes=()\n    local music_last_last_beats=()\n    local\
    \ music_last_last_notes=()\n    local music_last_last_last_beats=()\n    local\
    \ music_last_last_last_notes=()\n    local music_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_notes=()\n    local music_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_notes=()\n    local\
    \ music_last_last_last_last_last_last_last_last_last_beats=()\n    local music_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_beats=()\n    local\
    \ music_last_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_str_count=0\n    local music_beats_str_count_max=0\n  \
    \  local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max=0\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local musi\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_notes_str=()\n    local music_beats_str=()\n\
    \    local music_notes_arr=()\n    local music_beats_arr=()\n    local music_notes_str_count=0\n\
    \    local music_beats_str_count=0\n    local music_notes_str_count_max=0\n  \
    \  local music_beats_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local music_notes_str_count_max=0\n\
    \    local music_beats_str_count_min=0\n    local \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_notes=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//'|'/}\n\
    \    local music_str_tmp=${music_str_tmp//'o'/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'.|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_reversed=\"${music_str//[^A-Za-z]/}\"\
    \n    local music_str_reversed_split=(${music_str_reversed//\\|/ })\n    local\
    \ music_str_reversed_split_length=${#music_str_reversed_split[@]}\n    local music_str_reversed_split_length_reversed=${music_str_reversed_split_length//\\\
    //}\n    local music_str_reversed_split_length_reversed_reversed=${music_str_reversed_split_length_reversed//\\\
    //}\n    local music_str_reversed_split_length_reversed_reversed_split=(${music_str_reversed_split_length_reversed_reversed//\\\
    //})\n    local music_str_reversed_split_length_reversed_reversed_split_length=${#music_str_reversed_split_length_reversed_reversed_split[@]}\n\
    \    local music_str_reversed_split_length_reversed_reversed_split_length_reversed=${music_str_reversed_split_length_reversed_reversed_split_length_reversed//\\\
    //}\n    local music_str_reversed_split_length_reversed_reversed_split_length_reversed_reversed=${music_str_reversed_split_length_reversed_reversed_split_length_reversed_reversed//\\\
    //}\n    local music_str_reversed_split_length_reversed_reversed_split_length_reversed_reversed_split=(${music_str_reversed_split_length_reversed_reversed_split_length_reversed_reversed_split[@]})\n\
    \    local music_str_reversed_split_length_reversed_reversed_split_length_reversed_reversed_split_length=${#music_str_reversed_split_length_reversed_reversed_split_length_reversed_split[@]}\n\
    \    local music_str_reversed_split_length_reversed_reversed_split_length_reversed_reversed_split_length_reversed=${music_str_reversed_split_length_reversed_reversed_split_length_reversed_reversed_split_length_reversed_reversed//\\\
    //}\n    local music_str_reversed_split_length_reversed_reversed_split_length_reversed_reversed_split_length_reversed_reversed_split=(${music_str_reversed_split_length_reversed_reversed_split_length_reversed_reversed_split_length_reversed_reversed_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjik0j7nv.sh: line 30: syntax error near unexpected token `(''

    /tmp/tmpjik0j7nv.sh: line 30: `candidate() {''

    /tmp/tmpjik0j7nv.sh: line 31: parse_music: command not found

    /tmp/tmpjik0j7nv.sh: line 32: syntax error near unexpected token `}''

    /tmp/tmpjik0j7nv.sh: line 32: `}''

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_notes=()\n    local music_last_beats=()\n    local music_last_beats_str=()\n\
    \    local music_last_beats_str_count=0\n    local music_last_beats_str_count_str=''\n\
    \    local music_last_beats_str_count_str_arr=()\n    local music_last_beats_str_count_str_arr_count=0;\n\
    \    local music_last_beats_str_count_str_arr_count_str=''\n    local music_last_beats_str_count_str_arr_count_str_arr=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count=0;\n    local\
    \ music_last_beats_str_count_str_arr_count_str_arr_str=''\n    local music_last_beats_str_count_str_arr_count_str_arr_count_str=''\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count=0;\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_str=''\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str=''\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=0;\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_str=''\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=''\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=0;\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_str=''\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=''\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_beats_string=()\n    local music_beats_string_index=0\n    local\
    \ music_beats_string_index2=0\n    local music_beats_string_index3=0\n    local\
    \ music_beats_string_index4=0\n    local music_beats_string_index5=0\n    local\
    \ music_beats_string_index6=0\n    local music_beats_string_index7=0\n    local\
    \ music_beats_string_index8=0\n    local music_beats_string_index9=0\n    local\
    \ music_beats_string_index10=0\n    local music_beats_string_index11=0\n    local\
    \ music_beats_string_index12=0\n    local music_beats_string_index13=0\n    local\
    \ music_beats_string_index14=0\n    local music_beats_string_index15=0\n    local\
    \ music_beats_string_index16=0\n    local music_beats_string_index17=0\n    local\
    \ music_beats_string_index18=0\n    local music_beats_string_index19=0\n    local\
    \ music_beats_string_index20=0\n    local music_beats_string_index21=0\n    local\
    \ music_beats_string_index22=0\n    local music_beats_string_index23=0\n    local\
    \ music_beats_string_index24=0\n    local music_beats_string_index25=0\n    local\
    \ music_beats_string_index26=0\n    local music_beats_string_index27=0\n    local\
    \ music_beats_string_index28=0\n    local music_beats_string_index29=0\n    local\
    \ music_beats_string_index30=0\n    local music_beats_string_index31=0\n    local\
    \ music_beats_string_index32=0\n    local music_beats_string_index33=0\n    local\
    \ music_beats_string_index34=0\n    local music_beats_string_index35=0\n    local\
    \ music_beats_string_index36=0\n    local music_beats_string_index37=0\n    local\
    \ music_beats_string_index38=0\n    local music_beats_string_index39=0\n    local\
    \ music_beats_string_index40=0\n    local music_beats_string_index41=0\n    local\
    \ music_beats_string_index42=0\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb6f4w726.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_lasts_str=()\n\
    \    local music_lasts_beats=()\n    local music_lasts_beats_str=()\n    local\
    \ music_lasts_beats_str_count=0\n    local music_lasts_beats_str_count2=0\n  \
    \  local music_lasts_beats_str_count3=0\n    local music_lasts_beats_str_count4=0\n\
    \    local music_lasts_beats_str_count5=0\n    local music_lasts_beats_str_count6=0\n\
    \    local music_lasts_beats_str_count7=0\n    local music_lasts_beats_str_count8=0\n\
    \    local music_lasts_beats_str_count9=0\n    local music_lasts_beats_str_count10=0\n\
    \    local music_lasts_beats_str_count11=0\n    local music_lasts_beats_str_count12=0\n\
    \    local music_lasts_beats_str_count13=0\n    local music_lasts_beats_str_count14=0\n\
    \    local music_lasts_beats_str_count15=0\n    local music_lasts_beats_str_count16=0\n\
    \    local music_lasts_beats_str_count17=0\n    local music_lasts_beats_str_count18=0\n\
    \    local music_lasts_beats_str_count19=0\n    local music_lasts_beats_str_count20=0\n\
    \    local music_lasts_beats_str_count21=0\n    local music_lasts_beats_str_count22=0\n\
    \    local music_lasts_beats_str_count23=0\n    local music_lasts_beats_str_count24=0\n\
    \    local music_lasts_beats_str_count25=0\n    local music_lasts_beats_str_count26=0\n\
    \    local music_lasts_beats_str_count27=0\n    local music_lasts_beats_str_count28=0\n\
    \    local music_lasts_beats_str_count29=0\n    local music_lasts_beats_str_count30=0\n\
    \    local music_lasts_beats_str_count31=0\n    local music_lasts_beats_str_count32=0\n\
    \    local music_lasts_beats_str_count33=0\n    local music_lasts_beats_str_count34=0\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_octave=()\n    local music_last_octave_note=()\n\
    \    local music_last_octave_beat=()\n    local music_octave_note=()\n    local\
    \ music_octave_beat=()\n    local music_octave=()\n    local music_octave_note=()\n\
    \    local music_octave_octave=()\n    local music_octave_octave_note=()\n   \
    \ local music_octave_octave_beat=()\n    local music_octave_octave_octave=()\n\
    \    local music_octave_octave_octave_note=()\n    local music_octave_octave_octave_beat=()\n\
    \    local music_octave_octave_octave_octave=()\n    local music_octave_octave_octave_octave_note=()\n\
    \    local music_octave_octave_octave_octave_beat=()\n    local music_octave_octave_octave_octave_octave=()\n\
    \    local music_octave_octave_octave_octave_octave_note=()\n    local music_octave_octave_octave_octave_octave_beat=()\n\
    \    local music_octave_octave_octave_octave_octave_octave=()\n    local music_octave_octave_octave_octave_octave_octave_note=()\n\
    \    local music_octave_octave_octave_octave_octave_octave_beat=()\n    local\
    \ music_octave_octave_octave_octave_octave_octave_octave=()\n    local music_octave_octave_octave_octave_octave_octave_octave_note=()\n\
    \    local music_octave_octave_octave_octave_octave_octave_octave_beat=()\n  \
    \  local music_octave_octave_oct\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_length=0\n    local music_notes_length_count=0\n\
    \    local music_notes_length_index=0\n    local music_notes_length_count2=0\n\
    \    local music_notes_length_index2=0\n    local music_notes_length_count3=0\n\
    \    local music_notes_length_index3=0\n    local music_notes_length_count4=0\n\
    \    local music_notes_length_index4=0\n    local music_notes_length_count5=0\n\
    \    local music_notes_length_index5=0\n    local music_notes_length_count6=0\n\
    \    local music_notes_length_index6=0\n    local music_notes_length_count7=0\n\
    \    local music_notes_length_index7=0\n    local music_notes_length_count8=0\n\
    \    local music_notes_length_index8=0\n    local music_notes_length_count9=0\n\
    \    local music_notes_length_index9=0\n    local music_notes_length_count10=0\n\
    \    local music_notes_length_index10=0\n    local music_notes_length_count11=0\n\
    \    local music_notes_length_index11=0\n    local music_notes_length_count12=0\n\
    \    local music_notes_length_index12=0\n    local music_notes_length_count13=0\n\
    \    local music_notes_length_index13=0\n    local music_notes_length_count14=0\n\
    \    local music_notes_length_index14=0\n    local music_notes_length_count15=0\n\
    \    local music_notes_length_index15=0\n    local music_notes_length_count16=0\n\
    \    local music_notes_length_index16=0\n    local music_notes_length_count17=0\n\
    \    local music_notes_length_index17=0\n    local music_notes_length_count18=0\n\
    \    local music_notes_length_index18=0\n    local music_notes_length_count19=0\n\
    \    local music_notes_length_index19=0\n    local music_notes_length_count20=0\n\
    \    local music_notes_length_index20=0\n    local music_notes_length_count21=0\n\
    \    local music_notes_length_index21=0\n    local music_notes_length_count22=0\n\
    \    local music_notes_length_index\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_notes_count=()\n  local music_notes_count_array=()\n  local music_notes_count_array_length=()\n\
    \  local music_notes_count_array_length_count=0\n  local music_notes_count_array_length_count1=0\n\
    \  local music_notes_count_array_length_count2=0\n  local music_notes_count_array_length_count3=0\n\
    \  local music_notes_count_array_length_count4=0\n  local music_notes_count_array_length_count5=0\n\
    \  local music_notes_count_array_length_count6=0\n  local music_notes_count_array_length_count7=0\n\
    \  local music_notes_count_array_length_count8=0\n  local music_notes_count_array_length_count9=0\n\
    \  local music_notes_count_array_length_count10=0\n  local music_notes_count_array_length_count11=0\n\
    \  local music_notes_count_array_length_count12=0\n  local music_notes_count_array_length_count13=0\n\
    \  local music_notes_count_array_length_count14=0\n  local music_notes_count_array_length_count15=0\n\
    \  local music_notes_count_array_length_count16=0\n  local music_notes_count_array_length_count17=0\n\
    \  local music_notes_count_array_length_count18=0\n  local music_notes_count_array_length_count19=0\n\
    \  local music_notes_count_array_length_count20=0\n  local music_notes_count_array_length_count21=0\n\
    \  local music_notes_count_array_length_count22=0\n  local music_notes_count_array_length_count23=0\n\
    \  local music_notes_count_array_length_count24=0\n  local music_notes_count_array_length_count25=0\n\
    \  local music_notes_count_array_length_count26=0\n  local music_notes_count_array_length_count27=0\n\
    \  local music_notes_count_array_length_count28=0\n  local music_notes_count_array_length_count29=0\n\
    \  local music_notes_count_array_length_count30=0\n  local music_notes_count_array_length_count31=0\n\
    \  local music_notes_count_array_length_count32=0\n  local music_notes_count_array_length_count33=0\n\
    \  local music_notes_count_array_length_count34=0\n  local musi\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_length=()\n\
    \    local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_shift=()\n    local music_last_note_octave_shift2=()\n\
    \    local music_last_note_octave_shift3=()\n    local music_last_note_octave_shift4=()\n\
    \    local music_last_note_octave_shift5=()\n    local music_last_note_octave_shift6=()\n\
    \    local music_last_note_octave_shift7=()\n    local music_last_note_octave_shift8=()\n\
    \    local music_last_note_octave_shift9=()\n    local music_last_note_octave_shift10=()\n\
    \    local music_last_note_octave_shift11=()\n    local music_last_note_octave_shift12=()\n\
    \    local music_last_note_octave_shift13=()\n    local music_last_note_octave_shift14=()\n\
    \    local music_last_note_octave_shift15=()\n    local music_last_note_octave_shift16=()\n\
    \    local music_last_note_octave_shift17=()\n    local music_last_note_octave_shift18=()\n\
    \    local music_last_note_octave_shift19=()\n    local music_last_note_octave_shift20=()\n\
    \    local music_last_note_octave_shift21=()\n    local music_last_note_octave_shift22=()\n\
    \    local music_last_note_octave_shift23=()\n    local music_last_note_octave_shift24=()\n\
    \    local music_last_note_octave_shift25=()\n    local music_last_note_octave_shift26=()\n\
    \    local music_last_note_octave_shift27=()\n    local music_last_note_octave_shift28=()\n\
    \    local music_last_note_octave_shift29=()\n    local music_last_note_octave_shift30=()\n\
    \    local music_last_note_oct\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_arr_count=()\n    local music_last_notes_beats_arr_count_max=()\n\
    \    local music_last_notes_beats_arr_count_min=()\n    local music_last_notes_beats_arr_count_sum=()\n\
    \    local music_last_notes_beats_arr_count_sum_max=()\n    local music_last_notes_beats_arr_count_sum_min=()\n\
    \    local music_last_notes_beats_arr_count_avg=()\n    local music_last_notes_beats_arr_count_avg_max=()\n\
    \    local music_last_notes_beats_arr_count_avg_min=()\n    local music_last_notes_beats_arr_count_min=()\n\
    \    local music_last_notes_beats_arr_count_max=()\n    local music_last_notes_beats_arr_count_sum=()\n\
    \    local music_last_notes_beats_arr_count_sum_max=()\n    local music_last_notes_beats_arr_count_sum_min=()\n\
    \    local music_last_notes_beats_arr_count_avg=()\n    local music_last_notes_beats_arr_count_avg_max=()\n\
    \    local music_last_notes_beats_arr_count_avg_min=()\n    local music_last_notes_beats_arr_count_max=()\n\
    \    local music_last_notes_beats_arr_count_sum=()\n    local music_last_notes_beats_arr_count_sum_max=()\n\
    \    local music_last_notes_beats_arr_count_sum_min=()\n    local music_last_notes_beats_arr_count_avg=()\n\
    \    local music_last_notes_beats_arr_count_avg_max=()\n    local music_last_notes_beats_arr_count_avg_min=()\n\
    \    local music_last_notes_beats_arr_count_min=()\n    local music_last_notes_beats_arr_count_max=()\n\
    \    local music_last_notes_beats_arr_count_sum=()\n    local music_last_notes_beats_arr_count_sum_max=()\n\
    \    local music_last_notes_beats_arr_count_sum_min=()\n    local music_last_notes_beats_arr_count_avg\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_str_index=0\n    local\
    \ music_notes_str_index2=0\n    local music_notes_str_index3=0\n    local music_notes_str_index4=0\n\
    \    local music_notes_str_index5=0\n    local music_notes_str_index6=0\n    local\
    \ music_notes_str_index7=0\n    local music_notes_str_index8=0\n    local music_notes_str_index9=0\n\
    \    local music_notes_str_index10=0\n    local music_notes_str_index11=0\n  \
    \  local music_notes_str_index12=0\n    local music_notes_str_index13=0\n    local\
    \ music_notes_str_index14=0\n    local music_notes_str_index15=0\n    local music_notes_str_index16=0\n\
    \    local music_notes_str_index17=0\n    local music_notes_str_index18=0\n  \
    \  local music_notes_str_index19=0\n    local music_notes_str_index20=0\n    local\
    \ music_notes_str_index21=0\n    local music_notes_str_index22=0\n    local music_notes_str_index23=0\n\
    \    local music_notes_str_index24=0\n    local music_notes_str_index25=0\n  \
    \  local music_notes_str_index26=0\n    local music_notes_str_index27=0\n    local\
    \ music_notes_str_index28=0\n    local music_notes_str_index29=0\n    local music_notes_str_index30=0\n\
    \    local music_notes_str_index31=0\n    local music_notes_str_index32=0\n  \
    \  local music_notes_str_index33=0\n    local music_notes_str_index34=0\n    local\
    \ music_notes_str_index35=0\n    local music_notes_str_index36=0\n    local music_notes_str_index37=0\n\
    \    local music_notes_str_index38=0\n    local music_notes_str_index39=0\n  \
    \  local music_notes_str_index40=0\n    local music_notes_str_index41=0\n    local\
    \ music_notes_str_index42=0\n    local music_notes_str_index43=0\n    local music_notes_str\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr_len=0\n    local music_last_notes_beats_str_arr_len_cnt=0\n\
    \    local music_last_notes_beats_str_arr_len_max=0\n    local music_last_notes_beats_str_arr_len_max_cnt=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt2=0\n    local music_last_notes_beats_str_arr_len_max_cnt3=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt4=0\n    local music_last_notes_beats_str_arr_len_max_cnt5=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt6=0\n    local music_last_notes_beats_str_arr_len_max_cnt7=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt8=0\n    local music_last_notes_beats_str_arr_len_max_cnt9=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt10=0\n    local music_last_notes_beats_str_arr_len_max_cnt11=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt12=0\n    local music_last_notes_beats_str_arr_len_max_cnt13=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt14=0\n    local music_last_notes_beats_str_arr_len_max_cnt15=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt16=0\n    local music_last_notes_beats_str_arr_len_max_cnt17=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt18=0\n    local music_last_notes_beats_str_arr_len_max_cnt19=0\n\
    \    local music_last_notes_beats_str_arr_len_max_cnt20=0\n    local music_last_notes_beats_str_arr_len_max_cnt21=0\n\
    \    local music_last_notes_beats_str_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_array=()\n    local music_notes_count=()\n\
    \    local music_notes_count_array=()\n    local music_notes_count_count=()\n\
    \    local music_notes_count_count_array=()\n    local music_notes_count_count_count=()\n\
    \    local music_notes_count_count_count_array=()\n    local music_notes_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_array=()\n    local music_notes_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_array=()\n    local music_notes_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_array=()\n    local\
    \ music_notes_count_count_count_count_count_count_count=()\n    local music_notes_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count=()\n  \
    \  local music_notes_count_count_count_count_count_count_count_array=()\n    local\
    \ music_notes_count_count_count_count_count_count_count_count=()\n    local music_notes_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_beats_string=()\n    local music_beats_string_array=()\n    local\
    \ music_beats_string_array_length=()\n    local music_beats_string_array_length_length=()\n\
    \    local music_beats_string_array_length_length_length=()\n    local music_beats_string_array_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length=()\n  \
    \  local music_beats_string_array_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_beats_string_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_str_index=()\n  \
    \  local music_last_beat_str_length=()\n    local music_last_beat_str_length_index=()\n\
    \    local music_last_beat_str_length_max=()\n    local music_last_beat_str_length_max_index=()\n\
    \    local music_last_beat_str_length_min=()\n    local music_last_beat_str_length_min_index=()\n\
    \    local music_last_beat_str_length_avg=()\n    local music_last_beat_str_length_avg_index=()\n\
    \    local music_last_beat_str_length_median=()\n    local music_last_beat_str_length_median_index=()\n\
    \    local music_last_beat_str_length_min=()\n    local music_last_beat_str_length_min_index=()\n\
    \    local music_last_beat_str_length_max=()\n    local music_last_beat_str_length_max_index=()\n\
    \    local music_last_beat_str_length_avg=()\n    local music_last_beat_str_length_avg_index=()\n\
    \    local music_last_beat_str_length_median=()\n    local music_last_beat_str_length_median_index=()\n\
    \    local music_last_beat_str_length_min=()\n    local music_last_beat_str_length_min_index=()\n\
    \    local music_last_beat_str_length_max=()\n    local music_last_beat_str_length_max_index=()\n\
    \    local music_last_beat_str_length_avg=()\n    local music_last_beat_str_length_avg_index=()\n\
    \    local music_last_beat_str_length_median=()\n    local music_last_beat_str_length_median_index=()\n\
    \    local music_last_beat_str_length_min=()\n    local music_last_beat_str_length_min_index=()\n\
    \    local music_last_beat_str_length_max=()\n    local music_last_beat_str_length_max_index=()\n\
    \    local music_last_beat_str_length_avg=()\n    local music_last_beat_str_length_avg_index=()\n\
    \    local music_last_beat_str_length_median=()\n    local music_last_beat_str_length_median_index=()\n\
    \    local music_last_beat_str_length_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_count=()\n    local music_last_beat_count_temp=()\n\
    \    local music_last_beat_count_temp_temp=()\n    local music_last_beat_count_temp_temp2=()\n\
    \    local music_last_beat_count_temp_temp3=()\n    local music_last_beat_count_temp_temp4=()\n\
    \    local music_last_beat_count_temp_temp5=()\n    local music_last_beat_count_temp_temp6=()\n\
    \    local music_last_beat_count_temp_temp7=()\n    local music_last_beat_count_temp_temp8=()\n\
    \    local music_last_beat_count_temp_temp9=()\n    local music_last_beat_count_temp_temp10=()\n\
    \    local music_last_beat_count_temp_temp11=()\n    local music_last_beat_count_temp_temp12=()\n\
    \    local music_last_beat_count_temp_temp13=()\n    local music_last_beat_count_temp_temp14=()\n\
    \    local music_last_beat_count_temp_temp15=()\n    local music_last_beat_count_temp_temp16=()\n\
    \    local music_last_beat_count_temp_temp17=()\n    local music_last_beat_count_temp_temp18=()\n\
    \    local music_last_beat_count_temp_temp19=()\n    local music_last_beat_count_temp_temp20=()\n\
    \    local music_last_beat_count_temp_temp21=()\n    local music_last_beat_count_temp_temp22=()\n\
    \    local music_last_beat_count_temp_temp23=()\n    local music_last_beat_count_temp_temp24=()\n\
    \    local music_last_beat_count_temp_temp25=()\n    local music_last_beat_count_temp_temp26=()\n\
    \    local music_last_beat_count_temp_temp27=()\n    local music_last_beat_count_temp_temp28=()\n\
    \    local music_last_beat_count_temp_temp29=()\n    local music_last_beat_count_temp_temp30=()\n\
    \    local music_last_beat_count_temp_temp31=()\n    local music_last_beat_count_temp_temp32=()\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n\
    \    local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_notes_length=()\n\
    \    local music_beats_length=()\n    local music_notes_index=0\n    local music_beats_index=0\n\
    \    local music_notes_length_index=0\n    local music_beats_length_index=0\n\
    \    local music_notes_length_index2=0\n    local music_beats_length_index2=0\n\
    \    local music_notes_length_index3=0\n    local music_beats_length_index3=0\n\
    \    local music_notes_length_index4=0\n    local music_beats_length_index4=0\n\
    \    local music_notes_length_index5=0\n    local music_beats_length_index5=0\n\
    \    local music_notes_length_index6=0\n    local music_beats_length_index6=0\n\
    \    local music_notes_length_index7=0\n    local music_beats_length_index7=0\n\
    \    local music_notes_length_index8=0\n    local music_beats_length_index8=0\n\
    \    local music_notes_length_index9=0\n    local music_beats_length_index9=0\n\
    \    local music_notes_length_index10=0\n    local music_beats_length_index10=0\n\
    \    local music_notes_length_index11=0\n    local music_beats_length_index11=0\n\
    \    local music_notes_length_index12=0\n    local music_beats_length_index12=0\n\
    \    local music_notes_length_index13=0\n    local music_beats_length_index13=0\n\
    \    local music_notes_length_index14=0\n    local music_beats_length_index14=0\n\
    \    local music_notes_length_index15=0\n    local music_beats_length_index15=0\n\
    \    local music_notes_length_index16=0\n    local music_beats_length_index16=0\n\
    \    local music_notes_length_index17=0\n    local music_beats_length_index17=0\n\
    \    local music_notes_length_index18=0\n    local music_beats_length_index18=0\n\
    \    local music_notes_length_index19=0\n    local music_beats_length_index19=0\n\
    \    local music_notes_length_index20=0\n    local music_beats_length_index20=0\n\
    \    local music_notes_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n \
    \   local music_notes_count=()\n    local music_notes_count_max=4\n    local music_notes_count_min=1\n\
    \    local music_notes_count_step=1\n    local music_notes_count_max=4\n    local\
    \ music_notes_count_min=1\n    local music_notes_count_step=1\n    local music_notes_count_max=4\n\
    \    local music_notes_count_min=1\n    local music_notes_count_step=1\n    local\
    \ music_notes_count_max=4\n    local music_notes_count_min=1\n    local music_notes_count_step=1\n\
    \    local music_notes_count_max=4\n    local music_notes_count_min=1\n    local\
    \ music_notes_count_step=1\n    local music_notes_count_max=4\n    local music_notes_count_min=1\n\
    \    local music_notes_count_step=1\n    local music_notes_count_max=4\n    local\
    \ music_notes_count_min=1\n    local music_notes_count_step=1\n    local music_notes_count_max=4\n\
    \    local music_notes_count_min=1\n    local music_notes_count_step=1\n    local\
    \ music_notes_count_max=4\n    local music_notes_count_min=1\n    local music_notes_count_step=1\n\
    \    local music_notes_count_max=4\n    local music_notes_count_min=1\n    local\
    \ music_notes_count_step=1\n    local music_notes_count_max=4\n    local music_notes_count_min=1\n\
    \    local music_notes_count_step=1\n    local music_notes_count_max=4\n    local\
    \ music_notes_count_min=1\n    local music_notes_count_step=1\n    local music_notes_count_max=4\n\
    \    local music_notes_count_min=1\n    local music_notes_count_step=1\n    local\
    \ music_notes_count_max=4\n    local music_notes_count_min=1\n    local music_notes_count_step=1\n\
    \    local music_notes_count_max=4\n    local music_notes_count_min=1\n    local\
    \ music_notes_count_step=1\n    local music_notes_count_max=4\n    local \n}\n\
    \ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_arr=()\n  \
    \  local music_last_beat_str_count_arr_count=-1\n    local music_last_beat_str_count_arr_count_last=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last=-1\n    local music_last_beat_str_count_arr_count_last_last2=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last3=-1\n    local music_last_beat_str_count_arr_count_last_last4=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last5=-1\n    local music_last_beat_str_count_arr_count_last_last6=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last7=-1\n    local music_last_beat_str_count_arr_count_last_last8=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last9=-1\n    local music_last_beat_str_count_arr_count_last_last10=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last11=-1\n    local music_last_beat_str_count_arr_count_last_last12=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last13=-1\n    local music_last_beat_str_count_arr_count_last_last14=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last15=-1\n    local music_last_beat_str_count_arr_count_last_last16=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last17=-1\n    local music_last_beat_str_count_arr_count_last_last18=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last19=-1\n    local music_last_beat_str_count_arr_count_last_last20=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last21=-1\n    local music_last_beat_str_count_arr_count_last_last22=-1\n\
    \    local music_last_beat_str_count_arr_count_last_last23=-1\n\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_octave=()\n    local music_octave_offset=()\n    local music_octave=0\n\
    \    local music_note_count=0\n    local music_notes_count=${#music_str}\n   \
    \ local music_octave_count=${music_notes_count}\n    local music_octave_offset=0\n\
    \    local music_octave_offset_count=0\n    local music_octave_offset_count2=0\n\
    \    local music_octave_offset_count3=0\n    local music_octave_offset_count4=0\n\
    \    local music_octave_offset_count5=0\n    local music_octave_offset_count6=0\n\
    \    local music_octave_offset_count7=0\n    local music_octave_offset_count8=0\n\
    \    local music_octave_offset_count9=0\n    local music_octave_offset_count10=0\n\
    \    local music_octave_offset_count11=0\n    local music_octave_offset_count12=0\n\
    \    local music_octave_offset_count13=0\n    local music_octave_offset_count14=0\n\
    \    local music_octave_offset_count15=0\n    local music_octave_offset_count16=0\n\
    \    local music_octave_offset_count17=0\n    local music_octave_offset_count18=0\n\
    \    local music_octave_offset_count19=0\n    local music_octave_offset_count20=0\n\
    \    local music_octave_offset_count21=0\n    local music_octave_offset_count22=0\n\
    \    local music_octave_offset_count23=0\n    local music_octave_offset_count24=0\n\
    \    local music_octave_offset_count25=0\n    local music_octave_offset_count26=0\n\
    \    local music_octave_offset_count27=0\n    local music_octave_offset_count28=0\n\
    \    local music_octave_offset_count29=0\n    local music_octave_offset_count30=0\n\
    \    local music_octave_offset_count31=0\n    local music_octave_offset_count32=0\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_octave=()\n    local music_last_octave_note=()\n    local\
    \ music_last_octave_beat=()\n    local music_last_octave_last_beat=()\n    local\
    \ music_last_octave_last_note=()\n    local music_last_octave_last_octave=()\n\
    \    local music_last_octave_last_octave_note=()\n    local music_last_octave_last_octave_beat=()\n\
    \    local music_last_octave_last_octave_last_beat=()\n    local music_last_octave_last_octave_last_note=()\n\
    \    local music_last_octave_last_octave_last_octave=()\n    local music_last_octave_last_octave_last_octave_note=()\n\
    \    local music_last_octave_last_octave_last_octave_beat=()\n    local music_last_octave_last_octave_last_octave_last_beat=()\n\
    \    local music_last_octave_last_octave_last_octave_last_note=()\n    local music_last_octave_last_octave_last_octave_last_octave=()\n\
    \    local music_last_octave_last_octave_last_octave_last_octave_note=()\n   \
    \ local music_last_octave_last_octave_last_octave_last_octave_beat=()\n    local\
    \ music_last_octave_last_octave_last_octave_last_octave_last_beat=()\n    local\
    \ music_last_octave_last_octave_last_octave_last_octave_last_note=()\n    local\
    \ music_last_octave_last_octave_last_octave_last_octave_last_octave=()\n    local\
    \ music_last_octave_last_octave_last_octave_last_octave_last_octave_note=()\n\
    \    local music_last_octave_last_octave_last_octave_last_octave_last_octave_beat=()\n\
    \    local music_last_octave_last_octave_last_octave_last_octave_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_rests=()\n\
    \    local music_rests_str=\"\"\n    local music_rests_arr=()\n    local music_rests_notes=()\n\
    \    local music_rests_beats=()\n    local music_rests_lasts=()\n    local music_rests_rests=()\n\
    \    local music_rests_rests_str=\"\"\n    local music_rests_rests_arr=()\n  \
    \  local music_rests_rests_notes=()\n    local music_rests_rests_beats=()\n  \
    \  local music_rests_rests_lasts=()\n    local music_rests_rests_rests=()\n  \
    \  local music_rests_rests_rests_str=\"\"\n    local music_rests_rests_rests_arr=()\n\
    \    local music_rests_rests_rests_notes=()\n    local music_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_lasts=()\n    local music_rests_rests_rests_rests=()\n\
    \    local music_rests_rests_rests_rests_str=\"\"\n    local music_rests_rests_rests_rests_arr=()\n\
    \    local music_rests_rests_rests_rests_notes=()\n    local music_rests_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_rests_lasts=()\n    local music_rests_rests_rests_rests_rests=()\n\
    \    local music_rests_rests_rests_rests_rests_str=\"\"\n    local music_rests_rests_rests_rests_rests_arr=()\n\
    \    local music_rests_rests_rests_rests_rests_notes=()\n    local music_rests_rests_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_rests_rests_lasts=()\n    local music_rests_rests_rests_rests_rests_rests=()\n\
    \    local music_rests_rests_rests_rests_rests_rests_str=\"\"\n    local music_rests_rests_rests_rests_rests_rests_arr=()\n\
    \    local music_rests_rests_rests_\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]\\|/}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_beats=0\n\
    \  local music_notes=0\n  local music_last_note=\n  local music_last_beat=\n \
    \ local music_last_beats=\n  local music_last_beats_str=\n  local music_last_beats_str2=\n\
    \  local music_last_beats_str3=\n  local music_last_beats_str4=\n  local music_last_beats_str5=\n\
    \  local music_last_beats_str6=\n  local music_last_beats_str7=\n  local music_last_beats_str8=\n\
    \  local music_last_beats_str9=\n  local music_last_beats_str10=\n  local music_last_beats_str11=\n\
    \  local music_last_beats_str12=\n  local music_last_beats_str13=\n  local music_last_beats_str14=\n\
    \  local music_last_beats_str15=\n  local music_last_beats_str16=\n  local music_last_beats_str17=\n\
    \  local music_last_beats_str18=\n  local music_last_beats_str19=\n  local music_last_beats_str20=\n\
    \  local music_last_beats_str21=\n  local music_last_beats_str22=\n  local music_last_beats_str23=\n\
    \  local music_last_beats_str24=\n  local music_last_beats_str25=\n  local music_last_beats_str26=\n\
    \  local music_last_beats_str27=\n  local music_last_beats_str28=\n  local music_last_beats_str29=\n\
    \  local music_last_beats_str30=\n  local music_last_beats_str31=\n  local music_last_beats_str32=\n\
    \  local music_last_beats_str33=\n  local music_last_beats_str34=\n  local music_last_beats_str35=\n\
    \  local music_last_beats_str36=\n  local music_last_beats_str37=\n  local music_last_beats_str38=\n\
    \  local music_last_beats_str39=\n  local music_last_beats_str40=\n  local music_last_beats_str41=\n\
    \  local music_last_beats_str\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_notes=()\n    local music_last_beat_beats=()\n    local music_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat=()\n    local music_last_beat_last_beat_str=()\n\
    \    local music_last_beat_last_beat_arr=()\n    local music_last_beat_last_beat_notes=()\n\
    \    local music_last_beat_last_beat_beats=()\n    local music_last_beat_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat_last_beat=()\n    local music_last_beat_last_beat_last_beat_str=()\n\
    \    local music_last_beat_last_beat_last_beat_arr=()\n    local music_last_beat_last_beat_last_beat_notes=()\n\
    \    local music_last_beat_last_beat_last_beat_beats=()\n    local music_last_beat_last_beat_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat=()\n    local music_last_beat_last_beat_last_beat_last_beat_str=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_arr=()\n    local music_last_beat_last_beat_last_beat_last_beat_notes=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_beats=()\n    local music_last_beat_last_beat_last_beat_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_last_beat=()\n    local\
    \ music_last_beat_last_beat_last_beat_last_beat_last_beat_str=()\n    local music_last_beat_last_beat_last_beat_last_beat_last_beat_arr=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_last_beat_notes=()\n\
    \    local music_last_beat_last_beat_last_beat_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp=${music_str_tmp//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]/}\n    \n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_note=()\n    local music_last_beat=()\n    local music_last_beat_str=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_len=()\n\
    \    local music_last_beat_str_len_max=()\n    local music_last_beat_str_len_min=()\n\
    \    local music_last_beat_str_len_avg=()\n    local music_last_beat_str_len_median=()\n\
    \    local music_last_beat_str_len_min=()\n    local music_last_beat_str_len_max=()\n\
    \    local music_last_beat_str_len_min=()\n    local music_last_beat_str_len_avg=()\n\
    \    local music_last_beat_str_len_median=()\n    local music_last_beat_str_len_min=()\n\
    \    local music_last_beat_str_len_max=()\n    local music_last_beat_str_len_min=()\n\
    \    local music_last_beat_str_len_avg=()\n    local music_last_beat_str_len_median=()\n\
    \    local music_last_beat_str_len_min=()\n    local music_last_beat_str_len_max=()\n\
    \    local music_last_beat_str_len_min=()\n    local music_last_beat_str_len_avg=()\n\
    \    local music_last_beat_str_len_median=()\n    local music_last_beat_str_len_min=()\n\
    \    local music_last_beat_str_len_max=()\n    local music_last_beat_str_len_min=()\n\
    \    local music_last_beat_str_len_avg=()\n    local music_last_beat_str_len_median=()\n\
    \    local music_last_beat_str_len_min=()\n    local music_last_beat_str_len_max=()\n\
    \    local music_last_beat_str_len_min=()\n    local music_last_beat_str_len_avg=()\n\
    \    local music_last_beat_str_len_median=()\n    local music_last_beat_str_len_min=()\n\
    \    local music_last_beat_str_len_max=()\n    local music_last_beat_str_len_min=()\n\
    \    local music_last_beat_str_len_avg=()\n    local music_last_beat_str_len_median=()\n\
    \    local music_last_beat_str_len_min=()\n    local musi\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_last_note=()\n  local music_last_beat=()\n  local music_last_beat_str=()\n\
    \  local music_last_beat_arr=()\n  local music_last_beat_str_count=0\n  local\
    \ music_last_beat_str_count_arr=()\n  local music_last_beat_str_count_arr_count=-1\n\
    \  local music_last_beat_str_count_arr_count_prev=-1\n  local music_last_beat_str_count_arr_count_prev2=-1\n\
    \  local music_last_beat_str_count_arr_count_prev3=-1\n  local music_last_beat_str_count_arr_count_prev4=-1\n\
    \  local music_last_beat_str_count_arr_count_prev5=-1\n  local music_last_beat_str_count_arr_count_prev6=-1\n\
    \  local music_last_beat_str_count_arr_count_prev7=-1\n  local music_last_beat_str_count_arr_count_prev8=-1\n\
    \  local music_last_beat_str_count_arr_count_prev9=-1\n  local music_last_beat_str_count_arr_count_prev10=-1\n\
    \  local music_last_beat_str_count_arr_count_prev11=-1\n  local music_last_beat_str_count_arr_count_prev12=-1\n\
    \  local music_last_beat_str_count_arr_count_prev13=-1\n  local music_last_beat_str_count_arr_count_prev14=-1\n\
    \  local music_last_beat_str_count_arr_count_prev15=-1\n  local music_last_beat_str_count_arr_count_prev16=-1\n\
    \  local music_last_beat_str_count_arr_count_prev17=-1\n  local music_last_beat_str_count_arr_count_prev18=-1\n\
    \  local music_last_beat_str_count_arr_count_prev19=-1\n  local music_last_beat_str_count_arr_count_prev20=-1\n\
    \  local music_last_beat_str_count_arr_count_prev21=-1\n  local music_last_beat_str_count_arr_count_prev22=-1\n\
    \  local music_last_beat_str_count_arr_count_prev23=-1\n  local music_last_beat_str_count_arr_count_prev24=-1\n\
    \  local music_last_beat_str_count_arr_count_prev25=-1\n  local music_last_beat_str_count_arr_count_prev26=\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_arr=()\n    local music_beats_str=()\n\
    \    local music_beats_str_arr=()\n    local music_beats_str_arr_len=()\n    local\
    \ music_beats_str_arr_len_count=0\n    local music_beats_str_arr_len_count_max=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_arr_len_count_max_idx=0\n\
    \    local music_beats_str_arr_len_count_max_idx=0\n    local music_beats_str_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_index=()\n    local music_last_beat_count=()\n\
    \    local music_last_beat_count_index=()\n    local music_last_beat_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index=()\n    local music_last_beat_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index=()\n    local music_last_beat_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_arr=()\n  \
    \  local music_last_beat_str_count_arr_count=-1\n    local music_last_beat_str_count_arr_count_prev=-1\n\
    \    local music_last_beat_str_count_arr_count_prev2=-1\n    local music_last_beat_str_count_arr_count_prev3=-1\n\
    \    local music_last_beat_str_count_arr_count_prev4=-1\n    local music_last_beat_str_count_arr_count_prev5=-1\n\
    \    local music_last_beat_str_count_arr_count_prev6=-1\n    local music_last_beat_str_count_arr_count_prev7=-1\n\
    \    local music_last_beat_str_count_arr_count_prev8=-1\n    local music_last_beat_str_count_arr_count_prev9=-1\n\
    \    local music_last_beat_str_count_arr_count_prev10=-1\n    local music_last_beat_str_count_arr_count_prev11=-1\n\
    \    local music_last_beat_str_count_arr_count_prev12=-1\n    local music_last_beat_str_count_arr_count_prev13=-1\n\
    \    local music_last_beat_str_count_arr_count_prev14=-1\n    local music_last_beat_str_count_arr_count_prev15=-1\n\
    \    local music_last_beat_str_count_arr_count_prev16=-1\n    local music_last_beat_str_count_arr_count_prev17=-1\n\
    \    local music_last_beat_str_count_arr_count_prev18=-1\n    local music_last_beat_str_count_arr_count_prev19=-1\n\
    \    local music_last_beat_str_count_arr_count_prev20=-1\n    local music_last_beat_str_count_arr_count_prev21=-1\n\
    \    local music_last_beat_str_count_arr_count_prev22=-1\n    local music_last_beat_str_count_arr_count_prev23=-1\n\
    \    local music_last_beat_str_count_arr_count_prev24=-1\n    local music_last_beat_str_count_arr_count_prev25=-1\n\
    \    local music_last_be\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beat=()\n  local music_last_note=()\n\
    \  local music_last_note_beat=()\n  local music_last_note_beat_str=()\n  local\
    \ music_last_note_beat_str_arr=()\n  local music_last_note_beat_str_arr_len=0\n\
    \  local music_last_note_beat_str_arr_len2=0\n  local music_last_note_beat_str_arr_len3=0\n\
    \  local music_last_note_beat_str_arr_len4=0\n  local music_last_note_beat_str_arr_len5=0\n\
    \  local music_last_note_beat_str_arr_len6=0\n  local music_last_note_beat_str_arr_len7=0\n\
    \  local music_last_note_beat_str_arr_len8=0\n  local music_last_note_beat_str_arr_len9=0\n\
    \  local music_last_note_beat_str_arr_len10=0\n  local music_last_note_beat_str_arr_len11=0\n\
    \  local music_last_note_beat_str_arr_len12=0\n  local music_last_note_beat_str_arr_len13=0\n\
    \  local music_last_note_beat_str_arr_len14=0\n  local music_last_note_beat_str_arr_len15=0\n\
    \  local music_last_note_beat_str_arr_len16=0\n  local music_last_note_beat_str_arr_len17=0\n\
    \  local music_last_note_beat_str_arr_len18=0\n  local music_last_note_beat_str_arr_len19=0\n\
    \  local music_last_note_beat_str_arr_len20=0\n  local music_last_note_beat_str_arr_len21=0\n\
    \  local music_last_note_beat_str_arr_len22=0\n  local music_last_note_beat_str_arr_len23=0\n\
    \  local music_last_note_beat_str_arr_len24=0\n  local music_last_note_beat_str_arr_len25=0\n\
    \  local music_last_note_beat_str_arr_len26=0\n  local music_last_note_beat_str_arr_len27=0\n\
    \  local music_last_note_beat_str_arr_len28=0\n  local music_last_note_beat_str_arr_len29=0\n\
    \  local music_last_note_beat_str_arr_len30=0\n  local music_last_note_beat_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_str_count=0\n   \
    \ local music_last_beat_str_count_str=()\n    local music_last_beat_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count=()\n    local music_last_beat_str_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr=()\n    local music_last_beat_str_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count=()\n   \
    \ local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beat=()\n  local music_last_note=()\n\
    \  local music_last_note_beat=()\n  local music_last_note_beat_count=()\n  local\
    \ music_last_note_beat_count_index=()\n  local music_last_note_beat_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index=()\n  local music_last_note_beat_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index=()\n  local\
    \ music_last_note_beat_count_index_count_index_count_index_count=()\n  local music_last_note_beat_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_arr=()\n  \
    \  local music_last_note_beat_arr_len=()\n    local music_last_note_beat_arr_len_max=()\n\
    \    local music_last_note_beat_arr_len_min=()\n    local music_last_note_beat_arr_len_avg=()\n\
    \    local music_last_note_beat_arr_len_median=()\n    local music_last_note_beat_arr_len_min=()\n\
    \    local music_last_note_beat_arr_len_max=()\n    local music_last_note_beat_arr_len_min=()\n\
    \    local music_last_note_beat_arr_len_avg=()\n    local music_last_note_beat_arr_len_median=()\n\
    \    local music_last_note_beat_arr_len_min=()\n    local music_last_note_beat_arr_len_max=()\n\
    \    local music_last_note_beat_arr_len_min=()\n    local music_last_note_beat_arr_len_avg=()\n\
    \    local music_last_note_beat_arr_len_median=()\n    local music_last_note_beat_arr_len_min=()\n\
    \    local music_last_note_beat_arr_len_max=()\n    local music_last_note_beat_arr_len_min=()\n\
    \    local music_last_note_beat_arr_len_avg=()\n    local music_last_note_beat_arr_len_median=()\n\
    \    local music_last_note_beat_arr_len_min=()\n    local music_last_note_beat_arr_len_max=()\n\
    \    local music_last_note_beat_arr_len_min=()\n    local music_last_note_beat_arr_len_avg=()\n\
    \    local music_last_note_beat_arr_len_median=()\n    local music_last_note_beat_arr_len_min=()\n\
    \    local music_last_note_beat_arr_len_max=()\n    local music_last_note_beat_arr_len_min=()\n\
    \    local music_last_note_beat_arr_len_avg=()\n    local music_last_note_beat_arr_len_median=()\n\
    \    local music_last_note_beat_arr_len_min=()\n    local music_last_note_beat_arr_len_max=()\n\
    \    local music_last_note_beat_arr_len_min=()\n\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=()\n\
    \    local music_arr_count=()\n    local music_arr_count_index=()\n    local music_arr_count_index_count=()\n\
    \    local music_arr_count_index_count_index=()\n    local music_arr_count_index_count_index_count=()\n\
    \    local music_arr_count_index_count_index_count_index=()\n    local music_arr_count_index_count_index_count_index_count=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index=()\n    local\
    \ music_arr_count_index_count_index_count_index_count_index_count=()\n    local\
    \ music_arr_count_index_count_index_count_index_count_index_count_index=()\n \
    \   local music_arr_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_arr_count_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_notes=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_beats=()\n    local music_last_beat_notes=()\n    local music_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat=()\n    local music_last_beat_last_beat_str=()\n\
    \    local music_last_beat_last_beat_arr=()\n    local music_last_beat_last_beat_beats=()\n\
    \    local music_last_beat_last_beat_notes=()\n    local music_last_beat_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat_last_beat=()\n    local music_last_beat_last_beat_last_beat_str=()\n\
    \    local music_last_beat_last_beat_last_beat_arr=()\n    local music_last_beat_last_beat_last_beat_beats=()\n\
    \    local music_last_beat_last_beat_last_beat_notes=()\n    local music_last_beat_last_beat_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat=()\n    local music_last_beat_last_beat_last_beat_last_beat_str=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_arr=()\n    local music_last_beat_last_beat_last_beat_last_beat_beats=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_notes=()\n    local music_last_beat_last_beat_last_beat_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_last_beat=()\n    local\
    \ music_last_beat_last_beat_last_beat_last_beat_last_beat_str=()\n    local music_last_beat_last_beat_last_beat_last_beat_last_beat_arr=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_last_beat_beats=()\n\
    \    local music_last_beat_last_beat_last_beat_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_note=()\n\
    \    local music_last_beat=()\n    local music_last_beat_beats=()\n    local music_last_beat_beats_count=()\n\
    \    local music_last_beat_beats_count_max=()\n    local music_last_beat_beats_count_min=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_count_max=()\n\
    \    local music_last_beat_beats_count_count_min=()\n    local music_last_beat_beats_count_count_sum=()\n\
    \    local music_last_beat_beats_count_count_sum_max=()\n    local music_last_beat_beats_count_count_sum_min=()\n\
    \    local music_last_beat_beats_count_count_count_max=()\n    local music_last_beat_beats_count_count_count_min=()\n\
    \    local music_last_beat_beats_count_count_count_sum=()\n    local music_last_beat_beats_count_count_count_sum_max=()\n\
    \    local music_last_beat_beats_count_count_count_sum_min=()\n    local music_last_beat_beats_count_count_count_count_max=()\n\
    \    local music_last_beat_beats_count_count_count_count_min=()\n    local music_last_beat_beats_count_count_count_count_sum=()\n\
    \    local music_last_beat_beats_count_count_count_count_sum_max=()\n    local\
    \ music_last_beat_beats_count_count_count_count_sum_min=()\n    local music_last_beat_beats_count_count_count_count_count_max=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_min=()\n    local\
    \ music_last_beat_beats_count_count_count_count_count_sum=()\n    local music_last_beat_beats_count_count_count_count_count_sum_max=()\n\
    \    local music_last_beat_beats_count_count_count_count_count_sum_min=()\n  \
    \  local music_last_beat_beats_count_count_count_count_count_count_max=()\n  \
    \  local music_last_beat_beats_count_count_count_count_count_count_min=()\n  \
    \  local music_last_beat_beats_count_count_count_count_\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_count=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_tmp=()\n\
    \    local music_notes_arr_tmp=()\n    local music_notes_str_tmp2=()\n    local\
    \ music_notes_arr_tmp2=()\n    local music_notes_str_tmp3=()\n    local music_notes_arr_tmp3=()\n\
    \    local music_notes_str_tmp4=()\n    local music_notes_arr_tmp4=()\n    local\
    \ music_notes_str_tmp5=()\n    local music_notes_arr_tmp5=()\n    local music_notes_str_tmp6=()\n\
    \    local music_notes_arr_tmp6=()\n    local music_notes_str_tmp7=()\n    local\
    \ music_notes_arr_tmp7=()\n    local music_notes_str_tmp8=()\n    local music_notes_arr_tmp8=()\n\
    \    local music_notes_str_tmp9=()\n    local music_notes_arr_tmp9=()\n    local\
    \ music_notes_str_tmp10=()\n    local music_notes_arr_tmp10=()\n    local music_notes_str_tmp11=()\n\
    \    local music_notes_arr_tmp11=()\n    local music_notes_str_tmp12=()\n    local\
    \ music_notes_arr_tmp12=()\n    local music_notes_str_tmp13=()\n    local music_notes_arr_tmp13=()\n\
    \    local music_notes_str_tmp14=()\n    local music_notes_arr_tmp14=()\n    local\
    \ music_notes_str_tmp15=()\n    local music_notes_arr_tmp15=()\n    local music_notes_str_tmp16=()\n\
    \    local music_notes_arr_tmp16=()\n    local music_notes_str_tmp17=()\n    local\
    \ music_notes_arr_tmp17=()\n    local music_notes_str_tmp18=()\n    local music_notes_arr_tmp18=()\n\
    \    local music_notes_str_tmp19=()\n    local music_notes_arr_tmp19=()\n    local\
    \ music_notes_str_tmp20=()\n    local music_notes_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr2=()\n    local music_last_notes_beats_str_arr3=()\n\
    \    local music_last_notes_beats_str_arr4=()\n    local music_last_notes_beats_str_arr5=()\n\
    \    local music_last_notes_beats_str_arr6=()\n    local music_last_notes_beats_str_arr7=()\n\
    \    local music_last_notes_beats_str_arr8=()\n    local music_last_notes_beats_str_arr9=()\n\
    \    local music_last_notes_beats_str_arr10=()\n    local music_last_notes_beats_str_arr11=()\n\
    \    local music_last_notes_beats_str_arr12=()\n    local music_last_notes_beats_str_arr13=()\n\
    \    local music_last_notes_beats_str_arr14=()\n    local music_last_notes_beats_str_arr15=()\n\
    \    local music_last_notes_beats_str_arr16=()\n    local music_last_notes_beats_str_arr17=()\n\
    \    local music_last_notes_beats_str_arr18=()\n    local music_last_notes_beats_str_arr19=()\n\
    \    local music_last_notes_beats_str_arr20=()\n    local music_last_notes_beats_str_arr21=()\n\
    \    local music_last_notes_beats_str_arr22=()\n    local music_last_notes_beats_str_arr23=()\n\
    \    local music_last_notes_beats_str_arr24=()\n    local music_last_notes_beats_str_arr25=()\n\
    \    local music_last_notes_beats_str_arr26=()\n    local music_last_notes_beats_str_arr27=()\n\
    \    local music_last_notes_beats_str_arr28=()\n    local music_last_notes_beat\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]\\|/}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//'|'/}\n\
    \    local music_str_tmp=${music_str_tmp//'o'/}\n    local music_str_tmp=${music_str_tmp//'o|'/}\n\
    \    local music_str_tmp=${music_str_tmp//'.|'/}\n    local music_str_tmp=${music_str_tmp//'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpko2w4pxc.sh: line 19: unexpected EOF while looking for matching
    `''''

    /tmp/tmpko2w4pxc.sh: line 36: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_str_tmp=${music_str//[|.]/\
    \ }\n  local music_str_tmp=${music_str_tmp//[|o]/ }\n  local music_str_tmp=${music_str_tmp//[|o|]/\
    \ }\n  local music_str_tmp=${music_str_tmp//[|o|o]/ }\n  local music_str_tmp=${music_str_tmp//[|o|o|]/\
    \ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o]/ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|]/\
    \ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o]/ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|]/\
    \ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o]/ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o|]/\
    \ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o|o]/ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o|o]/\
    \ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o|o|]/ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o|o|o]/\
    \ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o|o|o]/ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o|o|o|]/\
    \ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o|o|o|o]/ }\n  local music_str_tmp=${music_str_tmp//[|o|o|o|o|o|o|o|o]/\
    \ }\n  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_beats_str=\"\
    \"\n    local music_lasts_str=\"\"\n    local music_notes_str=\"\"\n    local\
    \ music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_beats=()\n\
    \    local music_notes_lasts=()\n    local music_notes_beats_str=\"\"\n    local\
    \ music_notes_lasts_str=\"\"\n    local music_notes_beats_arr=()\n    local music_notes_lasts_arr=()\n\
    \    local music_notes_beats_str=\"\"\n    local music_notes_lasts_str=\"\"\n\
    \    local music_notes_beats_arr=()\n    local music_notes_lasts_arr=()\n    local\
    \ music_notes_beats_str=\"\"\n    local music_notes_lasts_str=\"\"\n    local\
    \ music_notes_beats_arr=()\n    local music_notes_lasts_arr=()\n    local music_notes_beats_str=\"\
    \"\n    local music_notes_lasts_str=\"\"\n    local music_notes_beats_arr=()\n\
    \    local music_notes_lasts_arr=()\n    local music_notes_beats_str=\"\"\n  \
    \  local music_notes_lasts_str=\"\"\n    local music_notes_beats_arr=()\n    local\
    \ music_notes_lasts_arr=()\n    local music_notes_beats_str=\"\"\n    local music_notes_lasts_str=\"\
    \"\n    local music_notes_beats_arr=()\n    local music_notes_lasts_arr=()\n \
    \   local music_notes_beats_str=\"\"\n    local music_notes_lasts_str=\"\"\n \
    \   local music_notes_beats_arr=()\n    local music_notes_lasts_arr=()\n    local\
    \ music_notes_beats_str=\"\"\n    local music_notes_lasts_str=\"\"\n    local\
    \ music_notes_beats_arr=()\n    local music_notes_lasts_arr=()\n    local music_notes_beats_str=\"\
    \"\n    local music_notes_lasts_str=\"\"\n    local music_notes_beats_arr=()\n\
    \    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_shift=()\n    local music_last_note_octave_shift2=()\n\
    \    local music_last_note_octave_shift3=()\n    local music_last_note_octave_shift4=()\n\
    \    local music_last_note_octave_shift5=()\n    local music_last_note_octave_shift6=()\n\
    \    local music_last_note_octave_shift7=()\n    local music_last_note_octave_shift8=()\n\
    \    local music_last_note_octave_shift9=()\n    local music_last_note_octave_shift10=()\n\
    \    local music_last_note_octave_shift11=()\n    local music_last_note_octave_shift12=()\n\
    \    local music_last_note_octave_shift13=()\n    local music_last_note_octave_shift14=()\n\
    \    local music_last_note_octave_shift15=()\n    local music_last_note_octave_shift16=()\n\
    \    local music_last_note_octave_shift17=()\n    local music_last_note_octave_shift18=()\n\
    \    local music_last_note_octave_shift19=()\n    local music_last_note_octave_shift20=()\n\
    \    local music_last_note_octave_shift21=()\n    local music_last_note_octave_shift22=()\n\
    \    local music_last_note_octave_shift23=()\n    local music_last_note_octave_shift24=()\n\
    \    local music_last_note_octave_shift25=()\n    local music_last_note_octave_shift26=()\n\
    \    local music_last_note_octave_shift27=()\n    local music_last_note_octave_shift28=()\n\
    \    local music_last_note_octave_shift29=()\n    local music_last_note_octave_shift30=()\n\
    \    local music_last_note_oct\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_index=()\n    local music_last_notes_beats_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index=()\n    local music_last_notes_beats_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index=()\n   \
    \ local music_last_notes_beats_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last=()\n    local music_lasts=()\n\
    \    local music_lasts_str=()\n    local music_lasts_strs=()\n    local music_lasts_beats=()\n\
    \    local music_lasts_beats_str=()\n    local music_lasts_beats_strs=()\n   \
    \ local music_lasts_beats_strs_str=()\n    local music_lasts_beats_strs_strs=()\n\
    \    local music_lasts_beats_strs_strs_str=()\n    local music_lasts_beats_strs_strs_strs=()\n\
    \    local music_lasts_beats_strs_strs_strs_str=()\n    local music_lasts_beats_strs_strs_strs_strs=()\n\
    \    local music_lasts_beats_strs_strs_strs_strs_str=()\n    local music_lasts_beats_strs_strs_strs_strs_strs=()\n\
    \    local music_lasts_beats_strs_strs_strs_strs_strs_str=()\n    local music_lasts_beats_strs_strs_strs_strs_strs_strs=()\n\
    \    local music_lasts_beats_strs_strs_strs_strs_strs_strs_str=()\n    local music_lasts_beats_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local music_lasts_beats_strs_strs_strs_strs_strs_strs_strs_str=()\n    local\
    \ music_lasts_beats_strs_strs_strs_strs_strs_strs_strs_strs=()\n    local music_lasts_beats_strs_strs_strs_strs_strs_strs_strs_strs_str=()\n\
    \    local music_lasts_beats_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=()\n\
    \    local music_lasts_beats_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=()\n\
    \    local music_lasts_beats_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=()\n\
    \    local music_lasts_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_octave=()\n    local music_octave=()\n\
    \    local music_octave_counter=0\n    local music_octave_last_note=()\n    local\
    \ music_octave_last_octave=()\n    local music_octave_last_beat=()\n    local\
    \ music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_note_index=()\n    local music_octave_last_note_index=()\n\
    \    local music_octave_last_octave_index=()\n    local music_octave_last_octave_index=()\n\
    \    local music_octave_last_note_index=()\n    local music_octave_last_note_index=()\n\
    \    local music_octave_last_octave_index=()\n    local music_octave_last_octave_index=()\n\
    \    local music_octave_last_note_index=()\n    local music_octave_last_note_index=()\n\
    \    local music_octave_last_octave_index=()\n    local music_octave_last_octave_index=()\n\
    \    local music_octave_last_note_index=()\n    local music_octave_last_note_index=()\n\
    \    local music_octave_last_octave_index=()\n    local music_octave_last_octave_index=()\n\
    \    local music_octave_last_note_index=()\n    local music_octave_last_note_index=()\n\
    \    local music_octave_last_octave_index=()\n    local music_octave_last_octave_index=()\n\
    \    local music_octave_last_note_index=()\n    local music_octave_last_note_index=()\n\
    \    local music_octave_last_octave_index=()\n    local music_octave_last_octave_index=()\n\
    \    local music_octave_last_note_index=()\n    local music_octave_last_note_index=()\n\
    \    local music_octave_last_octave_index=()\n    local music_octave_last_octave_index=()\n\
    \    local music_octave_last_note_index=()\n    local music_octave_last_note_index=\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_note=()\n\
    \    local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_notes_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_beats_array2=()\n    local music_notes_beats_array3=()\n    local\
    \ music_notes_beats_array4=()\n    local music_notes_beats_array5=()\n    local\
    \ music_notes_beats_array6=()\n    local music_notes_beats_array7=()\n    local\
    \ music_notes_beats_array8=()\n    local music_notes_beats_array9=()\n    local\
    \ music_notes_beats_array10=()\n    local music_notes_beats_array11=()\n    local\
    \ music_notes_beats_array12=()\n    local music_notes_beats_array13=()\n    local\
    \ music_notes_beats_array14=()\n    local music_notes_beats_array15=()\n    local\
    \ music_notes_beats_array16=()\n    local music_notes_beats_array17=()\n    local\
    \ music_notes_beats_array18=()\n    local music_notes_beats_array19=()\n    local\
    \ music_notes_beats_array20=()\n    local music_notes_beats_array21=()\n    local\
    \ music_notes_beats_array22=()\n    local music_notes_beats_array23=()\n    local\
    \ music_notes_beats_array24=()\n    local music_notes_beats_array25=()\n    local\
    \ music_notes_beats_array26=()\n    local music_notes_beats_array27=()\n    local\
    \ music_notes_beats_array28=()\n    local music_notes_beats_array29=()\n    local\
    \ music_notes_beats_array30=()\n    local music_notes_beats_array31=()\n    local\
    \ music_notes_beats_array32=()\n    local music_notes_beats_array33=()\n    local\
    \ music_notes_beats_array34=()\n    local music_notes_beats_array35=()\n    local\
    \ music_notes_beats_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr_len=()\n    local music_last_notes_beats_str_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len=()\n    local music_last_notes_beats_str_arr_len_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len=()\n    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len=()\n   \
    \ local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len=()\n    local\
    \ music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr=()\n    local\
    \ music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len=()\n    local\
    \ music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=()\n\
    \    local music_last_notes_beats_str_arr_len_arr_len_arr_len_arr_len_arr_\n}\n\
    \ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local musi\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_lasts_str=\"\
    \"\n    local music_lasts_beats=0\n    local music_lasts_beats_str=\"\"\n    local\
    \ music_lasts_beats_str2=\"\"\n    local music_lasts_beats_str3=\"\"\n    local\
    \ music_lasts_beats_str4=\"\"\n    local music_lasts_beats_str5=\"\"\n    local\
    \ music_lasts_beats_str6=\"\"\n    local music_lasts_beats_str7=\"\"\n    local\
    \ music_lasts_beats_str8=\"\"\n    local music_lasts_beats_str9=\"\"\n    local\
    \ music_lasts_beats_str10=\"\"\n    local music_lasts_beats_str11=\"\"\n    local\
    \ music_lasts_beats_str12=\"\"\n    local music_lasts_beats_str13=\"\"\n    local\
    \ music_lasts_beats_str14=\"\"\n    local music_lasts_beats_str15=\"\"\n    local\
    \ music_lasts_beats_str16=\"\"\n    local music_lasts_beats_str17=\"\"\n    local\
    \ music_lasts_beats_str18=\"\"\n    local music_lasts_beats_str19=\"\"\n    local\
    \ music_lasts_beats_str20=\"\"\n    local music_lasts_beats_str21=\"\"\n    local\
    \ music_lasts_beats_str22=\"\"\n    local music_lasts_beats_str23=\"\"\n    local\
    \ music_lasts_beats_str24=\"\"\n    local music_lasts_beats_str25=\"\"\n    local\
    \ music_lasts_beats_str26=\"\"\n    local music_lasts_beats_str27=\"\"\n    local\
    \ music_lasts_beats_str28=\"\"\n    local music_lasts_beats_str29=\"\"\n    local\
    \ music_lasts_beats_str30=\"\"\n    local music_lasts_beats_str31=\"\"\n    local\
    \ music_lasts_beats_str32=\"\"\n    local music_lasts_beats_str33=\"\"\n    local\
    \ music_lasts_beats_str34=\"\"\n    local music_lasts_beats_str35=\"\"\n    local\
    \ music_lasts_beats_str36=\"\"\n    local music_lasts_beats_str37=\"\"\n    local\
    \ music_lasts_beats_str38\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last=()\n    local\
    \ music_last_beats=()\n    local music_last_notes=()\n    local music_last_beats_str=()\n\
    \    local music_last_notes_str=()\n    local music_last_beats_str_count=0\n \
    \   local music_last_notes_str_count=0\n    local music_last_beats_str_count=0\n\
    \    local music_last_notes_str_count=0\n    local music_last_beats_str_count_str=()\n\
    \    local music_last_notes_str_count_str=()\n    local music_last_beats_str_count_str_count=0\n\
    \    local music_last_notes_str_count_str_count=0\n    local music_last_beats_str_count_str_str=()\n\
    \    local music_last_notes_str_count_str_str=()\n    local music_last_beats_str_count_str_str_count=0\n\
    \    local music_last_notes_str_count_str_str_count=0\n    local music_last_beats_str_count_str_str_str=()\n\
    \    local music_last_notes_str_count_str_str_str=()\n    local music_last_beats_str_count_str_str_str_count=0\n\
    \    local music_last_notes_str_count_str_str_str_count=0\n    local music_last_beats_str_count_str_str_str_str=()\n\
    \    local music_last_notes_str_count_str_str_str_str=()\n    local music_last_beats_str_count_str_str_str_str_count=0\n\
    \    local music_last_notes_str_count_str_str_str_str_count=0\n    local music_last_beats_str_count_str_str_str_str_str=()\n\
    \    local music_last_notes_str_count_str_str_str_str_str=()\n    local music_last_beats_str_count_str_str_str_str_str_count=0\n\
    \    local music_last_notes_str_count_str_str_str_str_str_count=0\n    local music_last_beats_str_count_str_str_str_str_str_str=()\n\
    \    local music_last_notes_str_count_str_str_str_str_str_str=()\n    local music_last_beats_str_count_str_str_str_str_str_str_count=0\n\
    \    local music_last_notes_str_count_str_str_str_str_str_str_count=0\n    local\
    \ music_last_beats_str_count_str_str_str_str_str_str_str\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_notes=()\n    local music_last_beats=()\n    local music_last_beats_str=()\n\
    \    local music_last_beats_arr=()\n    local music_last_beats_str_arr=()\n  \
    \  local music_last_beats_str_arr_len=0\n    local music_last_beats_str_arr_len_max=0\n\
    \    local music_last_beats_str_arr_len_min=0\n    local music_last_beats_str_arr_len_avg=0\n\
    \    local music_last_beats_str_arr_len_med=0\n    local music_last_beats_str_arr_len_maxmed=0\n\
    \    local music_last_beats_str_arr_len_minmed=0\n    local music_last_beats_str_arr_len_avgmed=0\n\
    \    local music_last_beats_str_arr_len_medmed=0\n    local music_last_beats_str_arr_len_maxmedmed=0\n\
    \    local music_last_beats_str_arr_len_minmedmed=0\n    local music_last_beats_str_arr_len_avgmedmed=0\n\
    \    local music_last_beats_str_arr_len_medmedmed=0\n    local music_last_beats_str_arr_len_maxmedmedmed=0\n\
    \    local music_last_beats_str_arr_len_minmedmed=0\n    local music_last_beats_str_arr_len_avgmedmed=0\n\
    \    local music_last_beats_str_arr_len_medmedmed=0\n    local music_last_beats_str_arr_len_maxmedmedmed=0\n\
    \    local music_last_beats_str_arr_len_minmedmed=0\n    local music_last_beats_str_arr_len_avgmedmed=0\n\
    \    local music_last_beats_str_arr_len_medmedmed=0\n    local music_last_beats_str_arr_len_maxmedmedmed=0\n\
    \    local music_last_beats_str_arr_len_minmedmed=0\n    local music_last_beats_str_arr_len_avgmedmed=0\n\
    \    local music_last_beats_str_arr_len_medmedmed=0\n    local music_last_beats_str_arr_len_maxmedmedmed=0\n\
    \    local music_last_beats_str_arr_len_minmedmed=0\n    local music_last_beats_str_arr_len_avgmedmed=0\n\
    \    local music_last_beats_str_arr_len_medmedmed=0\n    local music_last_beats_str_arr_len_maxmed\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=0\n\
    \    local music_notes=0\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_beats=0\n    local music_notes_notes=0\n    local music_notes_notes_str=\"\
    \"\n    local music_notes_notes_arr=()\n    local music_notes_notes_beats=0\n\
    \    local music_notes_notes_notes=0\n    local music_notes_notes_notes_str=\"\
    \"\n    local music_notes_notes_notes_arr=()\n    local music_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_str=\"\
    \"\n    local music_notes_notes_notes_notes_arr=()\n    local music_notes_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_notes_str=\"\
    \"\n    local music_notes_notes_notes_notes_notes_arr=()\n    local music_notes_notes_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_notes_notes_str=\"\
    \"\n    local music_notes_notes_notes_notes_notes_notes_arr=()\n    local music_notes_notes_notes_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_notes_notes_notes_str=\"\
    \"\n    local music_notes_notes_notes_notes_notes_notes_notes_arr=()\n    local\
    \ music_notes_notes_notes_notes_notes_notes_notes_beats=0\n    local music_notes_notes_notes_notes_notes_notes_notes_notes=0\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_notes_str=\"\"\n  \
    \  local music_notes_notes_notes_notes_notes_notes_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_note=()\n\
    \    local music_last_beat=()\n    local music_last_beat_beats=()\n    local music_last_beat_beats_count=()\n\
    \    local music_last_beat_beats_count_max=()\n    local music_last_beat_beats_count_min=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_average=()\n\
    \    local music_last_beat_beats_count_average_max=()\n    local music_last_beat_beats_count_average_min=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_average=()\n\
    \    local music_last_beat_beats_count_average_max=()\n    local music_last_beat_beats_count_average_min=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_average=()\n\
    \    local music_last_beat_beats_count_average_max=()\n    local music_last_beat_beats_count_average_min=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_average=()\n\
    \    local music_last_beat_beats_count_average_max=()\n    local music_last_beat_beats_count_average_min=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_average=()\n\
    \    local music_last_beat_beats_count_average_max=()\n    local music_last_beat_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n \
    \   local music_beats_count_index=()\n    local music_note_count=()\n    local\
    \ music_note_count_index=()\n    local music_note_length=()\n    local music_note_length_index=()\n\
    \    local music_note_type=()\n    local music_note_type_index=()\n    local music_note_octave=()\n\
    \    local music_note_octave_index=()\n    local music_note_octave_count=()\n\
    \    local music_note_octave_count_index=()\n    local music_note_octave_type=()\n\
    \    local music_note_octave_type_index=()\n    local music_note_octave_octave=()\n\
    \    local music_note_octave_octave_index=()\n    local music_note_octave_octave_count=()\n\
    \    local music_note_octave_octave_count_index=()\n    local music_note_octave_octave_type()\n\
    \    local music_note_octave_octave_type_index=()\n    local music_note_octave_octave_octave=()\n\
    \    local music_note_octave_octave_octave_index=()\n    local music_note_octave_octave_octave_count=()\n\
    \    local music_note_octave_octave_octave_count_index=()\n    local music_note_octave_octave_octave_type()\n\
    \    local music_note_octave_octave_type_index=()\n    local music_note_octave_octave_octave_octave=()\n\
    \    local music_note_octave_octave_octave_octave_index=()\n    local music_note_octave_octave_octave_octave_count=()\n\
    \    local music_note_octave_octave_octave_octave_count_index=()\n    local music_note_octave_octave_octave_type()\n\
    \    local music_note_octave_octave_type_index=()\n    local music_note_octave_octave_octave_octave_octave=()\n\
    \    local music_note_octave_octave_octave_octave_octave_index=()\n    local music_note_octave_octave_oct\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxv5_9wc4.sh: line 36: syntax error near unexpected token `(''

    /tmp/tmpxv5_9wc4.sh: line 36: `    local music_note_octave_octave_type()''

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_count=()\n    local music_notes_count_array=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_array=()\n    local music_notes_string=()\n\
    \    local music_notes_string_index=()\n    local music_notes_string_index_array=()\n\
    \    local music_notes_string_index_array_length=()\n    local music_notes_string_index_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length=()\n    local music_notes_string_index_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length_array_length=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local music_notes_string_index_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_tmp=()\n\
    \    local music_arr_len=0\n    local music_arr_len_tmp=0\n    local music_arr_len_tmp2=0\n\
    \    local music_arr_len_tmp3=0\n    local music_arr_len_tmp4=0\n    local music_arr_len_tmp5=0\n\
    \    local music_arr_len_tmp6=0\n    local music_arr_len_tmp7=0\n    local music_arr_len_tmp8=0\n\
    \    local music_arr_len_tmp9=0\n    local music_arr_len_tmp10=0\n    local music_arr_len_tmp11=0\n\
    \    local music_arr_len_tmp12=0\n    local music_arr_len_tmp13=0\n    local music_arr_len_tmp14=0\n\
    \    local music_arr_len_tmp15=0\n    local music_arr_len_tmp16=0\n    local music_arr_len_tmp17=0\n\
    \    local music_arr_len_tmp18=0\n    local music_arr_len_tmp19=0\n    local music_arr_len_tmp20=0\n\
    \    local music_arr_len_tmp21=0\n    local music_arr_len_tmp22=0\n    local music_arr_len_tmp23=0\n\
    \    local music_arr_len_tmp24=0\n    local music_arr_len_tmp25=0\n    local music_arr_len_tmp26=0\n\
    \    local music_arr_len_tmp27=0\n    local music_arr_len_tmp28=0\n    local music_arr_len_tmp29=0\n\
    \    local music_arr_len_tmp30=0\n    local music_arr_len_tmp31=0\n    local music_arr_len_tmp32=0\n\
    \    local music_arr_len_tmp33=0\n    local music_arr_len_tmp34=0\n    local music_arr_len_tmp35=0\n\
    \    local music_arr_len_tmp36=0\n    local music_arr_len_tmp37=0\n    local music_arr_len_tmp38=0\n\
    \    local music_arr_len_tmp39=0\n    local music_arr_len_tmp40=0\n    local music_arr_len_tmp41=0\n\
    \    local music_arr_len_tmp42=0\n    local music_arr_len_tmp43=0\n    local music_arr_len_tmp44=0\n\
    \    local music_arr_len_tmp45=0\n    local music_arr_len_tmp46=0\n    local music_arr_len_tmp47=0\n\
    \    local music_arr_len_tmp48=0\n\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_str=()\n  \
    \  local music_last_beat_str_count_arr=()\n    local music_last_beat_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count=()\n    local music_last_beat_str_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr=()\n    local music_last_beat_str_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count=()\n   \
    \ local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_beats_string=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n    local music_beats_string_index=()\n    local\
    \ music_beats_string_index=()\n\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp_tmp_tmp=${music_str_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp//[|.]/}\n    local\
    \ music_str_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp//[|.]/}\n    local\
    \ music_str_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw3ae4pbn.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|o]/}\n    local music_str_tmp=${music_str_tmp//[|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|]/}\n    local music_str_tmp=${music_str_tmp//[|.|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|o|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|o|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|o|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|o|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|.|o|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_yoiflh7.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_count=()\n\
    \    local music_notes_str_count_arr=()\n    local music_notes_str_count_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index=()\n    local music_notes_str_count_arr_count_index_arr=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count=()\n    local music_notes_str_count_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr=()\n    local\
    \ music_notes_str_count_arr_count_index_arr_count_index_arr_count=()\n    local\
    \ music_notes_str_count_arr_count_index_arr_count_index_arr_count_index=()\n \
    \   local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index=()\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=0\n\
    \    local music_arr_length=${#music_str}\n    local music_arr_elements=0\n  \
    \  local music_arr_elements_length=0\n    local music_arr_elements_index=0\n \
    \   local music_arr_elements_last=0\n    local music_arr_elements_last_index=0\n\
    \    local music_arr_elements_last_beats=0\n    local music_arr_elements_last_beats_index=0\n\
    \    local music_arr_elements_last_beats_length=0\n    local music_arr_elements_last_beats_index=0\n\
    \    local music_arr_elements_last_beats_last_index=0\n    local music_arr_elements_last_beats_last_beats=0\n\
    \    local music_arr_elements_last_beats_last_beats_index=0\n    local music_arr_elements_last_beats_last_beats_length=0\n\
    \    local music_arr_elements_last_beats_last_beats_index=0\n    local music_arr_elements_last_beats_last_beats_last_index=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats=0\n    local music_arr_elements_last_beats_last_beats_last_beats_index=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats_length=0\n    local\
    \ music_arr_elements_last_beats_last_beats_last_beats_index=0\n    local music_arr_elements_last_beats_last_beats_last_beats_last_index=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats_last_beats=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats_last_beats_index=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats_last_beats_length=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats_last_beats_index=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats_last_beats_last_index=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats_last_beats_last_beats=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats_last_beats_last_beats_index=0\n\
    \    local music_arr_elements_last_beats_last_beats_last_beats_last_beats_last_beats_length=0\n\
    \    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_lasts_str=\"\
    \"\n    local music_lasts_beats=0\n    local music_lasts_beats_str=\"\"\n    local\
    \ music_lasts_beats_str_tmp=\"\"\n    local music_lasts_beats_str_tmp2=\"\"\n\
    \    local music_lasts_beats_str_tmp3=\"\"\n    local music_lasts_beats_str_tmp4=\"\
    \"\n    local music_lasts_beats_str_tmp5=\"\"\n    local music_lasts_beats_str_tmp6=\"\
    \"\n    local music_lasts_beats_str_tmp7=\"\"\n    local music_lasts_beats_str_tmp8=\"\
    \"\n    local music_lasts_beats_str_tmp9=\"\"\n    local music_lasts_beats_str_tmp10=\"\
    \"\n    local music_lasts_beats_str_tmp11=\"\"\n    local music_lasts_beats_str_tmp12=\"\
    \"\n    local music_lasts_beats_str_tmp13=\"\"\n    local music_lasts_beats_str_tmp14=\"\
    \"\n    local music_lasts_beats_str_tmp15=\"\"\n    local music_lasts_beats_str_tmp16=\"\
    \"\n    local music_lasts_beats_str_tmp17=\"\"\n    local music_lasts_beats_str_tmp18=\"\
    \"\n    local music_lasts_beats_str_tmp19=\"\"\n    local music_lasts_beats_str_tmp20=\"\
    \"\n    local music_lasts_beats_str_tmp21=\"\"\n    local music_lasts_beats_str_tmp22=\"\
    \"\n    local music_lasts_beats_str_tmp23=\"\"\n    local music_lasts_beats_str_tmp24=\"\
    \"\n    local music_lasts_beats_str_tmp25=\"\"\n    local music_lasts_beats_str_tmp26=\"\
    \"\n    local music_lasts_beats_str_tmp27=\"\"\n    local music_lasts_beats_str_tmp28=\"\
    \"\n    local music_lasts_beats_str_tmp29=\"\"\n    local music_lasts_beats_str_tmp30=\"\
    \"\n    local music_lasts_beats_str_tmp31=\"\"\n    local music_lasts_beats_str_tmp32=\"\
    \"\n    local music_lasts_beats_str_tmp33=\"\"\n    local music_lasts_beats_str_tmp34=\"\
    \"\n    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n\
    \    local music_last_notes=()\n    local music_last_notes_beats=()\n    local\
    \ music_last_notes_beats_count=()\n    local music_last_notes_beats_count_array=()\n\
    \    local music_last_notes_beats_count_array_count=()\n    local music_last_notes_beats_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count=()\n    local\
    \ music_last_notes_beats_count_array_count_array_count_array=()\n    local music_last_notes_beats_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count=()\n\
    \    local music_last_notes_beats_count_array_count_array_count_array_count_array_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n\
    \    local music_last_notes=()\n    local music_last_notes_beats=()\n    local\
    \ music_last_notes_beats_count=()\n    local music_last_notes_beats_count_index=()\n\
    \    local music_last_notes_beats_count_index_count=()\n    local music_last_notes_beats_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count=()\n    local\
    \ music_last_notes_beats_count_index_count_index_count_index=()\n    local music_last_notes_beats_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_notes_beats_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_rests=()\n\
    \    local music_rests_str=\"\"\n    local music_rests_arr=()\n    local music_rests_notes=()\n\
    \    local music_rests_beats=()\n    local music_rests_lasts=()\n    local music_rests_rests=()\n\
    \    local music_rests_rests_str=\"\"\n    local music_rests_rests_arr=()\n  \
    \  local music_rests_rests_notes=()\n    local music_rests_rests_beats=()\n  \
    \  local music_rests_rests_lasts=()\n    local music_rests_rests_rests=()\n  \
    \  local music_rests_rests_rests_str=\"\"\n    local music_rests_rests_rests_arr=()\n\
    \    local music_rests_rests_rests_notes=()\n    local music_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_lasts=()\n    local music_rests_rests_rests_rests=()\n\
    \    local music_rests_rests_rests_rests_str=\"\"\n    local music_rests_rests_rests_rests_arr=()\n\
    \    local music_rests_rests_rests_rests_notes=()\n    local music_rests_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_rests_lasts=()\n    local music_rests_rests_rests_rests_rests=()\n\
    \    local music_rests_rests_rests_rests_rests_str=\"\"\n    local music_rests_rests_rests_rests_rests_arr=()\n\
    \    local music_rests_rests_rests_rests_rests_notes=()\n    local music_rests_rests_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_rests_rests_lasts=()\n    local music_rests_rests_rests_rests_rests_rests=()\n\
    \    local music_rests_rests_rests_rests_rests_rests_str=\"\"\n    local music_rests_rests_rests_rests_rests_rests_arr=()\n\
    \    local music_rests_rests_rests_\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_note=()\n    local music_last_beat=()\n    local music_last_beat_str=()\n\
    \    local music_last_beat_int=()\n    local music_last_beat_ints=()\n    local\
    \ music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n    local\
    \ music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n \
    \   local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local music_last_beat_ints_ints_\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_count=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_str_tmp=()\n    local music_notes_str_tmp2=()\n\
    \    local music_notes_str_tmp3=()\n    local music_notes_str_tmp4=()\n    local\
    \ music_notes_str_tmp5=()\n    local music_notes_str_tmp6=()\n    local music_notes_str_tmp7=()\n\
    \    local music_notes_str_tmp8=()\n    local music_notes_str_tmp9=()\n    local\
    \ music_notes_str_tmp10=()\n    local music_notes_str_tmp11=()\n    local music_notes_str_tmp12=()\n\
    \    local music_notes_str_tmp13=()\n    local music_notes_str_tmp14=()\n    local\
    \ music_notes_str_tmp15=()\n    local music_notes_str_tmp16=()\n    local music_notes_str_tmp17=()\n\
    \    local music_notes_str_tmp18=()\n    local music_notes_str_tmp19=()\n    local\
    \ music_notes_str_tmp20=()\n    local music_notes_str_tmp21=()\n    local music_notes_str_tmp22=()\n\
    \    local music_notes_str_tmp23=()\n    local music_notes_str_tmp24=()\n    local\
    \ music_notes_str_tmp25=()\n    local music_notes_str_tmp26=()\n    local music_notes_str_tmp27=()\n\
    \    local music_notes_str_tmp28=()\n    local music_notes_str_tmp29=()\n    local\
    \ music_notes_str_tmp30=()\n    local music_notes_str_tmp31=()\n    local music_notes_str_tmp32=()\n\
    \    local music_notes_str_tmp33=()\n    local music_notes_str_tmp34=()\n    local\
    \ music_notes_str_tmp35=()\n    local music_notes_str_tmp36=()\n    local music_notes_str_tmp37=()\n\
    \    local music_notes_str_tmp38=()\n    local music_notes_str_tmp39=()\n    local\
    \ music_notes_str_tmp40=()\n    \n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=\"$1\"\n  local music_array=()\n  local\
    \ music_notes=()\n  local music_beats=()\n  local music_last_note=()\n  local\
    \ music_last_beat=()\n  local music_last_beat_beats=()\n  local music_last_beat_beats_array=()\n\
    \  local music_last_beat_beats_string=()\n  local music_last_beat_beats_string_size=()\n\
    \  local music_last_beat_beats_string_size=${#music_last_beat_beats_string[@]}\n\
    \  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//,/}\n\
    \  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    //}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    %/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    #/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    $/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    &/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    */}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    >/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    ?/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    </}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    >/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    >/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    >/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_string_size//\\\
    >/}\n  local music_last_beat_beats_string_size=${music_last_beat_beats_\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpropwle7y.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_str_tmp=${music_str//[|.]/}\n\
    \  local music_str_tmp_tmp=${music_str_tmp//[|.]/}\n  local music_str_tmp_tmp_tmp=${music_str_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp//[|.]/}\n  local music_str_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \  local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9sengpan.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_str=()\n  \
    \  local music_last_note_beat_str_arr=()\n    local music_last_note_beat_str_arr_len=()\n\
    \    local music_last_note_beat_str_arr_len_max=()\n    local music_last_note_beat_str_arr_len_min=()\n\
    \    local music_last_note_beat_str_arr_len_avg=()\n    local music_last_note_beat_str_arr_len_min=()\n\
    \    local music_last_note_beat_str_arr_len_max=()\n    local music_last_note_beat_str_arr_len_min=()\n\
    \    local music_last_note_beat_str_arr_len_avg=()\n    local music_last_note_beat_str_arr_len_max=()\n\
    \    local music_last_note_beat_str_arr_len_min=()\n    local music_last_note_beat_str_arr_len_avg=()\n\
    \    local music_last_note_beat_str_arr_len_max=()\n    local music_last_note_beat_str_arr_len_min=()\n\
    \    local music_last_note_beat_str_arr_len_avg=()\n    local music_last_note_beat_str_arr_len_max=()\n\
    \    local music_last_note_beat_str_arr_len_min=()\n    local music_last_note_beat_str_arr_len_avg=()\n\
    \    local music_last_note_beat_str_arr_len_max=()\n    local music_last_note_beat_str_arr_len_min=()\n\
    \    local music_last_note_beat_str_arr_len_avg=()\n    local music_last_note_beat_str_arr_len_max=()\n\
    \    local music_last_note_beat_str_arr_len_min=()\n    local music_last_note_beat_str_arr_len_avg=()\n\
    \    local music_last_note_beat_str_arr_len_max=()\n    local music_last_note_beat_str_arr_len_min=()\n\
    \    local music_last_note_beat_str_arr_len_avg=()\n    local music_last_note_beat_str_arr_len_max=()\n\
    \    local music_last_note_beat_str_arr_len_min=()\n    local music_last_note_beat_str_arr_len_avg=()\n\
    \    local music_last_note_beat_str_arr_len_max=()\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n\
    \    local music_last_notes=()\n    local music_last_notes_beats=()\n    local\
    \ music_last_notes_beats_count=()\n    local music_last_notes_beats_count_max=()\n\
    \    local music_last_notes_beats_count_min=()\n    local music_last_notes_beats_count_sum=()\n\
    \    local music_last_notes_beats_count_sum_max=()\n    local music_last_notes_beats_count_sum_min=()\n\
    \    local music_last_notes_beats_count_avg=()\n    local music_last_notes_beats_count_avg_max=()\n\
    \    local music_last_notes_beats_count_avg_min=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_sum=()\n\
    \    local music_last_notes_beats_count_sum_max=()\n    local music_last_notes_beats_count_sum_min=()\n\
    \    local music_last_notes_beats_count_avg=()\n    local music_last_notes_beats_count_avg_max=()\n\
    \    local music_last_notes_beats_count_avg_min=()\n    local music_last_notes_beats_count_max=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_min=()\n    local music_last_notes_beats_count_max=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_min=()\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local musi\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_sum_squares=()\n\
    \    local music_last_notes_beats_count_sum_squares_max=()\n    local music_last_notes_beats_count_sum_squares_min=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum=()\n    local music_last_notes_beats_count_sum_squares_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_min=()\n    local music_last_notes_beats_count_sum_squares_sum_squares=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_max=()\n    local\
    \ music_last_notes_beats_count_sum_squares_sum_squares_min=()\n    local music_last_notes_beats_count_sum_squares_sum_squares_sum=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_max=()\n \
    \   local music_last_notes_beats_count_sum_squares_sum_squares_sum_min=()\n  \
    \  local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_max=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_min=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_sum=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_sum_squares_max=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_sum_squares_min=()\n\
    \    local music_last_notes_beats_count_sum_squares_\n}\n\ncandidate() {\n   \
    \ parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_notes_length=0\n\
    \    local music_beat_length=0\n    local music_notes_length_count=0\n    local\
    \ music_beat_length_count=0\n    local music_notes_length_index=0\n    local music_beat_length_index=0\n\
    \    local music_notes_length_count2=0\n    local music_beat_length_count2=0\n\
    \    local music_notes_length_index2=0\n    local music_beat_length_index2=0\n\
    \    local music_notes_length_count3=0\n    local music_beat_length_count3=0\n\
    \    local music_notes_length_index3=0\n    local music_beat_length_index3=0\n\
    \    local music_notes_length_count4=0\n    local music_beat_length_count4=0\n\
    \    local music_notes_length_index4=0\n    local music_beat_length_index4=0\n\
    \    local music_notes_length_count5=0\n    local music_beat_length_count5=0\n\
    \    local music_notes_length_index5=0\n    local music_beat_length_index5=0\n\
    \    local music_notes_length_count6=0\n    local music_beat_length_count6=0\n\
    \    local music_notes_length_index6=0\n    local music_beat_length_index6=0\n\
    \    local music_notes_length_count7=0\n    local music_beat_length_count7=0\n\
    \    local music_notes_length_index7=0\n    local music_beat_length_index7=0\n\
    \    local music_notes_length_count8=0\n    local music_beat_length_count8=0\n\
    \    local music_notes_length_index8=0\n    local music_beat_length_index8=0\n\
    \    local music_notes_length_count9=0\n    local music_beat_length_count9=0\n\
    \    local music_notes_length_index9=0\n    local music_beat_length_index9=0\n\
    \    local music_notes_length_count10=0\n    local music_beat_length_count10=0\n\
    \    local music_notes_length_index10=0\n    local music_beat_length_index10=0\n\
    \    local music_notes_length_count11=0\n    local music_beat_length_count11=0\n\
    \    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_beats_str=()\n  local music_beats_arr=()\n\
    \  local music_beats_notes=()\n  local music_beats_beats=()\n  local music_beats_beats_str=()\n\
    \  local music_beats_beats_arr=()\n  local music_beats_beats_notes=()\n  local\
    \ music_beats_beats_beats=()\n  local music_beats_beats_beats_str=()\n  local\
    \ music_beats_beats_beats_arr=()\n  local music_beats_beats_beats_notes=()\n \
    \ local music_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_beats_beats_arr=()\n  local music_beats_beats_beats_beats_notes=()\n\
    \  local music_beats_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_beats_beats_beats_arr=()\n  local music_beats_beats_beats_beats_beats_notes=()\n\
    \  local music_beats_beats_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_beats_beats_beats_beats_arr=()\n  local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \  local music_beats_beats_beats_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n  local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \  local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_count=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_idx=0\n\
    \    local music_notes_str_count_max_idx2=0\n    local music_notes_str_count_max_idx3=0\n\
    \    local music_notes_str_count_max_idx4=0\n    local music_notes_str_count_max_idx5=0\n\
    \    local music_notes_str_count_max_idx6=0\n    local music_notes_str_count_max_idx7=0\n\
    \    local music_notes_str_count_max_idx8=0\n    local music_notes_str_count_max_idx9=0\n\
    \    local music_notes_str_count_max_idx10=0\n    local music_notes_str_count_max_idx11=0\n\
    \    local music_notes_str_count_max_idx12=0\n    local music_notes_str_count_max_idx13=0\n\
    \    local music_notes_str_count_max_idx14=0\n    local music_notes_str_count_max_idx15=0\n\
    \    local music_notes_str_count_max_idx16=0\n    local music_notes_str_count_max_idx17=0\n\
    \    local music_notes_str_count_max_idx18=0\n    local music_notes_str_count_max_idx19=0\n\
    \    local music_notes_str_count_max_idx20=0\n    local music_notes_str_count_max_idx21=0\n\
    \    local music_notes_str_count_max_idx22=0\n    local music_notes_str_count_max_idx23=0\n\
    \    local music_notes_str_count_max_idx24=0\n    local music_notes_str_count_max_idx25=0\n\
    \    local music_notes_str_count_max_idx26=0\n    local music_notes_str_count_max_idx27=0\n\
    \    local music_notes_str_count_max_idx28=0\n    local music_notes_str_count_max_idx29=0\n\
    \    local music_notes_str_count_max_idx30=0\n    local music_notes_str_count_max_idx31=0\n\
    \    local music_notes_str_count_max_idx32=0\n    local music_notes_str_count_max_idx33=0\n\
    \    local music_notes_str_count_max_idx34=0\n    local music_notes_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_beats_str=\"\"\n    local music_beats_arr=()\n    local music_beats_beats=()\n\
    \    local music_beats_beats_str=\"\"\n    local music_beats_beats_arr=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=\"\"\
    \n    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_str=\"\"\n    local music_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=\"\
    \"\n    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_str=\"\"\n    local music_beats_beats_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=\"\
    \"\n    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_beats_str=\"\
    \"\n    local music_beats_beats_beats_beats_beats_beats_beats_beats_arr=()\n \
    \   local music_beats_beats_beats_beats_beats_beats_beats_beats_beats=()\n   \
    \ local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_str=\"\"\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beat\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_notes_length=()\n    local music_notes_count=()\n\
    \    local music_notes_last_beat=()\n    local music_notes_last_beat_length=()\n\
    \    local music_notes_last_beat_count=()\n    local music_notes_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_length=()\n    local music_notes_last_beat_last_beat_count=()\n\
    \    local music_notes_last_beat_last_beat_last_beat=()\n    local music_notes_last_beat_last_beat_last_beat_length=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_count=()\n    local music_notes_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_length=()\n   \
    \ local music_notes_last_beat_last_beat_last_beat_last_beat_count=()\n    local\
    \ music_notes_last_beat_last_beat_last_beat_last_beat_last_beat=()\n    local\
    \ music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n  \
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb6f4w726.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb6f4w726.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_beats_string=()\n    local music_beats_string_array=()\n    local\
    \ music_beats_string_array_length=()\n    local music_beats_string_array_length_max=()\n\
    \    local music_beats_string_array_length_min=()\n    local music_beats_string_array_length_avg=()\n\
    \    local music_beats_string_array_length_median=()\n    local music_beats_string_array_length_min=()\n\
    \    local music_beats_string_array_length_max=()\n    local music_beats_string_array_length_avg=()\n\
    \    local music_beats_string_array_length_median=()\n    local music_beats_string_array_length_min=()\n\
    \    local music_beats_string_array_length_max=()\n    local music_beats_string_array_length_avg=()\n\
    \    local music_beats_string_array_length_median=()\n    local music_beats_string_array_length_min=()\n\
    \    local music_beats_string_array_length_max=()\n    local music_beats_string_array_length_avg=()\n\
    \    local music_beats_string_array_length_median=()\n    local music_beats_string_array_length_min=()\n\
    \    local music_beats_string_array_length_max=()\n    local music_beats_string_array_length_avg=()\n\
    \    local music_beats_string_array_length_median=()\n    local music_beats_string_array_length_min=()\n\
    \    local music_beats_string_array_length_max=()\n    local music_beats_string_array_length_avg=()\n\
    \    local music_beats_string_array_length_median=()\n    local music_beats_string_array_length_min=()\n\
    \    local music_beats_string_array_length_max=()\n    local music_beats_string_array_length_avg=()\n\
    \    local music_beats_string_array_length_median=()\n    local music_beats_string_array_length_min=()\n\
    \    local music_beats_string_array_length_max=()\n    local music_beats_string_array_length_avg=()\n\
    \    local music_beats_string_array_length_median=()\n    local music_beats_string_array_length_min=()\n\
    \    local music_beats_string_array_length_max=()\n    local music_beats_string_array_length_avg=()\n\
    \    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=0\n\
    \    local music_arr_length=${#music_str}\n    local music_arr_elements=0\n  \
    \  local music_arr_elements_length=0\n    local music_arr_elements_index=0\n \
    \   local music_arr_elements_last_index=0\n    local music_arr_elements_last_length=0\n\
    \    local music_arr_elements_last_index2=0\n    local music_arr_elements_last_length2=0\n\
    \    local music_arr_elements_last_index3=0\n    local music_arr_elements_last_length3=0\n\
    \    local music_arr_elements_last_index4=0\n    local music_arr_elements_last_length4=0\n\
    \    local music_arr_elements_last_index5=0\n    local music_arr_elements_last_length5=0\n\
    \    local music_arr_elements_last_index6=0\n    local music_arr_elements_last_length6=0\n\
    \    local music_arr_elements_last_index7=0\n    local music_arr_elements_last_length7=0\n\
    \    local music_arr_elements_last_index8=0\n    local music_arr_elements_last_length8=0\n\
    \    local music_arr_elements_last_index9=0\n    local music_arr_elements_last_length9=0\n\
    \    local music_arr_elements_last_index10=0\n    local music_arr_elements_last_length10=0\n\
    \    local music_arr_elements_last_index11=0\n    local music_arr_elements_last_length11=0\n\
    \    local music_arr_elements_last_index12=0\n    local music_arr_elements_last_length12=0\n\
    \    local music_arr_elements_last_index13=0\n    local music_arr_elements_last_length13=0\n\
    \    local music_arr_elements_last_index14=0\n    local music_arr_elements_last_length14=0\n\
    \    local music_arr_elements_last_index15=0\n    local music_arr_elements_last_length15=0\n\
    \    local music_arr_elements_last_index16=0\n    local music_arr_elements_last_length16=0\n\
    \    local music_arr_elements_last_index17=0\n    local music_arr_elements_last_length17=0\n\
    \    local music_arr_elements_last_index18=0\n    local music_arr_elements_last_length18=0\n\
    \    local music_arr_elements_last_index19=0\n    local music_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_note=()\n    local music_last_beat=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_count=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max_index=0\n\
    \    local music_notes_str_count_max_index2=0\n    local music_notes_str_count_max_index3=0\n\
    \    local music_notes_str_count_max_index4=0\n    local music_notes_str_count_max_index5=0\n\
    \    local music_notes_str_count_max_index6=0\n    local music_notes_str_count_max_index7=0\n\
    \    local music_notes_str_count_max_index8=0\n    local music_notes_str_count_max_index9=0\n\
    \    local music_notes_str_count_max_index10=0\n    local music_notes_str_count_max_index11=0\n\
    \    local music_notes_str_count_max_index12=0\n    local music_notes_str_count_max_index13=0\n\
    \    local music_notes_str_count_max_index14=0\n    local music_notes_str_count_max_index15=0\n\
    \    local music_notes_str_count_max_index16=0\n    local music_notes_str_count_max_index17=0\n\
    \    local music_notes_str_count_max_index18=0\n    local music_notes_str_count_max_index19=0\n\
    \    local music_notes_str_count_max_index20=0\n    local music_notes_str_count_max_index21=0\n\
    \    local music_notes_str_count_max_index22=0\n    local music_notes_str_count_max_index23=0\n\
    \    local music_notes_str_count_max_index24=0\n    local music_notes_str_count_max_index25=0\n\
    \    local music_notes_str_count_max_index26=0\n    local music_notes_str_count_max_index27=0\n\
    \    local music_notes_str_count_max_index28=0\n    local music_notes_str_count_max_index29=0\n\
    \    local music_notes_str_count_max_index30=0\n    local music_notes_str_count_max_index31=0\n\
    \    local music_notes_str_count_max_index32=0\n    local music_notes_str_count_max_index33=0\n\
    \    local music_notes_str_count_max_index34=0\n    local music_notes_\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_notes_length=0\n \
    \   local music_beats_length=0\n    local music_notes_length_index=0\n    local\
    \ music_beats_length_index=0\n    local music_notes_length_index2=0\n    local\
    \ music_beats_length_index2=0\n    local music_notes_length_index3=0\n    local\
    \ music_beats_length_index3=0\n    local music_notes_length_index4=0\n    local\
    \ music_beats_length_index4=0\n    local music_notes_length_index5=0\n    local\
    \ music_beats_length_index5=0\n    local music_notes_length_index6=0\n    local\
    \ music_beats_length_index6=0\n    local music_notes_length_index7=0\n    local\
    \ music_beats_length_index7=0\n    local music_notes_length_index8=0\n    local\
    \ music_beats_length_index8=0\n    local music_notes_length_index9=0\n    local\
    \ music_beats_length_index9=0\n    local music_notes_length_index10=0\n    local\
    \ music_beats_length_index10=0\n    local music_notes_length_index11=0\n    local\
    \ music_beats_length_index11=0\n    local music_notes_length_index12=0\n    local\
    \ music_beats_length_index12=0\n    local music_notes_length_index13=0\n    local\
    \ music_beats_length_index13=0\n    local music_notes_length_index14=0\n    local\
    \ music_beats_length_index14=0\n    local music_notes_length_index15=0\n    local\
    \ music_beats_length_index15=0\n    local music_notes_length_index16=0\n    local\
    \ music_beats_length_index16=0\n    local music_notes_length_index17=0\n    local\
    \ music_beats_length_index17=0\n    local music_notes_length_index18=0\n    local\
    \ music_beats_length_index18=0\n    local music_notes_length_index19=0\n    local\
    \ music_beats_length_index19=0\n    local music_notes_length_index20=0\n    local\
    \ music_beats_length_index20=0\n    local music_notes_length_index21=0\n    local\
    \ music_beats_length_index21=0\n    local \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb6f4w726.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_offset=()\n    local music_last_note_octave_sign=()\n\
    \    local music_last_note_octave_number=()\n    local music_last_note_octave_number_offset=()\n\
    \    local music_last_note_octave_number_sign=()\n    local music_last_note_octave_number_number=()\n\
    \    local music_last_note_octave_number_number_offset=()\n    local music_last_note_octave_number_number_sign=()\n\
    \    local music_last_note_octave_number_number_number=()\n    local music_last_note_octave_number_number_number_offset=()\n\
    \    local music_last_note_octave_number_number_number_sign=()\n    local music_last_note_octave_number_number_number_number=()\n\
    \    local music_last_note_octave_number_number_number_number_offset=()\n    local\
    \ music_last_note_octave_number_number_number_number_sign=()\n    local music_last_note_octave_number_number_number_number_number=()\n\
    \    local music_last_note_octave_number_number_number_number_number_offset=()\n\
    \    local music_last_note_octave_number_number_number_number_number_sign=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_offset=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_sign=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_offset=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_sign=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_offset=()\n\
    \    local music_last_note_octave_number_number_number_number_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_offset=()\n    local music_last_note_octave_offset_beats=()\n\
    \    local music_last_note_octave_offset_beats_count=()\n    local music_last_note_octave_offset_beats_count_offset=()\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats=()\n    local\
    \ music_last_note_octave_offset_beats_count_offset_beats_count=()\n    local music_last_note_octave_offset_beats_count_offset_beats_count_offset=()\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats=()\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count=0\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count_offset=0\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats=0\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count=0\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count_offset=0\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count_offset=0\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats=0\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count=0\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count_offset=0\n\
    \    local music_last_note_octave_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats_count_offset_beats=0\n\
    \    local music_last_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_beats=0\n    local music_notes=0\n    local music_notes_array=()\n   \
    \ local music_notes_beats=0\n    local music_notes_notes=0\n    local music_notes_notes_array=()\n\
    \    local music_notes_notes_beats=0\n    local music_notes_notes_notes=0\n  \
    \  local music_notes_notes_notes_array=()\n    local music_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_array=()\n\
    \    local music_notes_notes_notes_notes_beats=0\n    local music_notes_notes_notes_notes_notes=0\n\
    \    local music_notes_notes_notes_notes_notes_array=()\n    local music_notes_notes_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_notes_notes_array=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_beats=0\n    local music_notes_notes_notes_notes_notes_notes_notes=0\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_array=()\n    local\
    \ music_notes_notes_notes_notes_notes_notes_notes_beats=0\n    local music_notes_notes_notes_notes_notes_notes_notes_notes=0\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_notes_array=()\n  \
    \  local music_notes_notes_notes_notes_notes_notes_notes_notes_beats=0\n    local\
    \ music_notes_notes_notes_notes_notes_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_notes_notes_notes_notes_notes_array=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_notes_length=()\n    local music_notes_length_count=0\n\
    \    local music_notes_length_index=0\n    local music_notes_length_count2=0\n\
    \    local music_notes_length_index2=0\n    local music_notes_length_count3=0\n\
    \    local music_notes_length_index3=0\n    local music_notes_length_count4=0\n\
    \    local music_notes_length_index4=0\n    local music_notes_length_count5=0\n\
    \    local music_notes_length_index5=0\n    local music_notes_length_count6=0\n\
    \    local music_notes_length_index6=0\n    local music_notes_length_count7=0\n\
    \    local music_notes_length_index7=0\n    local music_notes_length_count8=0\n\
    \    local music_notes_length_index8=0\n    local music_notes_length_count9=0\n\
    \    local music_notes_length_index9=0\n    local music_notes_length_count10=0\n\
    \    local music_notes_length_index10=0\n    local music_notes_length_count11=0\n\
    \    local music_notes_length_index11=0\n    local music_notes_length_count12=0\n\
    \    local music_notes_length_index12=0\n    local music_notes_length_count13=0\n\
    \    local music_notes_length_index13=0\n    local music_notes_length_count14=0\n\
    \    local music_notes_length_index14=0\n    local music_notes_length_count15=0\n\
    \    local music_notes_length_index15=0\n    local music_notes_length_count16=0\n\
    \    local music_notes_length_index16=0\n    local music_notes_length_count17=0\n\
    \    local music_notes_length_index17=0\n    local music_notes_length_count18=0\n\
    \    local music_notes_length_index18=0\n    local music_notes_length_count19=0\n\
    \    local music_notes_length_index19=0\n    local music_notes_length_count20=0\n\
    \    local music_notes_length_index20=0\n    local music_notes_length_count21=0\n\
    \    local music_notes_length_index21=0\n    local music_notes_length_count22=0\n\
    \    local music_notes_length_index\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=\"\"\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=\"\
    \"\n    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n\
    \    local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=\"\
    \"\n    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=\"\
    \"\n    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=\"\
    \"\n    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=\"\
    \"\n    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=\"\
    \"\n    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_notes=()\n    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_str=\"\"\
    \n    local music_beats_beats_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_tmp=()\n\
    \    local music_arr_len=0\n    local music_arr_len_tmp=0\n    local music_arr_len_tmp2=0\n\
    \    local music_arr_len_tmp3=0\n    local music_arr_len_tmp4=0\n    local music_arr_len_tmp5=0\n\
    \    local music_arr_len_tmp6=0\n    local music_arr_len_tmp7=0\n    local music_arr_len_tmp8=0\n\
    \    local music_arr_len_tmp9=0\n    local music_arr_len_tmp10=0\n    local music_arr_len_tmp11=0\n\
    \    local music_arr_len_tmp12=0\n    local music_arr_len_tmp13=0\n    local music_arr_len_tmp14=0\n\
    \    local music_arr_len_tmp15=0\n    local music_arr_len_tmp16=0\n    local music_arr_len_tmp17=0\n\
    \    local music_arr_len_tmp18=0\n    local music_arr_len_tmp19=0\n    local music_arr_len_tmp20=0\n\
    \    local music_arr_len_tmp21=0\n    local music_arr_len_tmp22=0\n    local music_arr_len_tmp23=0\n\
    \    local music_arr_len_tmp24=0\n    local music_arr_len_tmp25=0\n    local music_arr_len_tmp26=0\n\
    \    local music_arr_len_tmp27=0\n    local music_arr_len_tmp28=0\n    local music_arr_len_tmp29=0\n\
    \    local music_arr_len_tmp30=0\n    local music_arr_len_tmp31=0\n    local music_arr_len_tmp32=0\n\
    \    local music_arr_len_tmp33=0\n    local music_arr_len_tmp34=0\n    local music_arr_len_tmp35=0\n\
    \    local music_arr_len_tmp36=0\n    local music_arr_len_tmp37=0\n    local music_arr_len_tmp38=0\n\
    \    local music_arr_len_tmp39=0\n    local music_arr_len_tmp40=0\n    local music_arr_len_tmp41=0\n\
    \    local music_arr_len_tmp42=0\n    local music_arr_len_tmp43=0\n    local music_arr_len_tmp44=0\n\
    \    local music_arr_len_tmp45=0\n    local music_arr_len_tmp46=0\n    local music_arr_len_tmp47=0\n\
    \    local music_arr_len_tmp48=0\n\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_notes=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_str_index=()\n  \
    \  local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_arr_index=()\n\
    \  local music_arr_count=()\n  local music_arr_element=()\n  local music_arr_element_count=()\n\
    \  local music_arr_element_index=()\n  local music_arr_element_str=()\n  local\
    \ music_arr_element_str_count=()\n  local music_arr_element_str_element=()\n \
    \ local music_arr_element_str_element_count=()\n  local music_arr_element_str_element_index=()\n\
    \  local music_arr_element_str_element_str=()\n  local music_arr_element_str_element_str_count=()\n\
    \  local music_arr_element_str_element_str_element=()\n  local music_arr_element_str_element_str_element_count=()\n\
    \  local music_arr_element_str_element_str_element_index=()\n  local music_arr_element_str_element_str_element_str=()\n\
    \  local music_arr_element_str_element_str_element_str_count=()\n  local music_arr_element_str_element_str_element_str_element=()\n\
    \  local music_arr_element_str_element_str_element_str_element_count=()\n  local\
    \ music_arr_element_str_element_str_element_str_element_index=()\n  local music_arr_element_str_element_str_element_str_element_str=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_count=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_count=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_index=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_str=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_str_count=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_str_element_count=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_str_element_index=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_str_element_str=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_str_element_str_count=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_str_element_str_element_count=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_str_element_str_element_index=()\n\
    \  local music_arr_element_str_element_str_element_str_element_str_element_str_element_str_element_str=()\n\
    \  local music_arr_element_str_element_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr_len=()\n    local music_last_notes_beats_str_arr_len_len=()\n\
    \    local music_last_notes_beats_str_arr_len_len_len=()\n    local music_last_notes_beats_str_arr_len_len_len_len=()\n\
    \    local music_last_notes_beats_str_arr_len_len_len_len_len=()\n    local music_last_notes_beats_str_arr_len_len_len_len_len_len_len=()\n\
    \    local music_last_notes_beats_str_arr_len_len_len_len_len_len_len_len_len=()\n\
    \    local music_last_notes_beats_str_arr_len_len_len_len_len_len_len_len_len_len=()\n\
    \    local music_last_notes_beats_str_arr_len_len_len_len_len_len_len_len_len_len_len_len=()\n\
    \    local music_last_notes_beats_str_arr_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len=()\n\
    \    local music_last_notes_beats_str_arr_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len=()\n\
    \    local music_last_notes_beats_str_arr_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len=()\n\
    \    local music_last_notes_beats_str_arr_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=\"$1\"\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_note=()\n  local music_last_beat=()\n\
    \  local music_last_beat_str=()\n  local music_last_beat_str_index=()\n  local\
    \ music_last_beat_str_indexes=()\n  local music_last_beat_str_indexes_str=()\n\
    \  local music_last_beat_str_indexes_str_index=()\n  local music_last_beat_str_indexes_str_indexes=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str=()\n  local music_last_beat_str_indexes_str_indexes_str_index=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str_indexes=()\n  local music_last_beat_str_indexes_str_indexes_str_indexes_str=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str_indexes_str_index=()\n  local\
    \ music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes=()\n  local\
    \ music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes_str=()\n  local\
    \ music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str=()\n\
    \  local music_last_beat_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str_indexes_str=()\n\
    \  \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_notes_length=()\n\
    \    local music_beats_length=()\n    local music_notes_last_beat=()\n    local\
    \ music_beats_last_beat=()\n    local music_notes_last_beat_length=()\n    local\
    \ music_beats_last_beat_length=()\n    local music_notes_last_beat_last_beat=()\n\
    \    local music_beats_last_beat_last_beat=()\n    local music_notes_last_beat_last_beat_length=()\n\
    \    local music_beats_last_beat_last_beat_length=()\n    local music_notes_last_beat_last_beat_last_beat=()\n\
    \    local music_beats_last_beat_last_beat_last_beat=()\n    local music_notes_last_beat_last_beat_last_beat_length=()\n\
    \    local music_beats_last_beat_last_beat_last_beat_length=()\n    local music_notes_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_beats_last_beat_last_beat_last_beat_last_beat=()\n    local music_notes_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \    local music_beats_last_beat_last_beat_last_beat_last_beat_length=()\n   \
    \ local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat=()\n   \
    \ local music_beats_last_beat_last_beat_last_beat_last_beat_last_beat=()\n   \
    \ local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \    local music_beats_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_beats_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \    local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \    local music_beats_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \    local music_notes_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_str_index=0\n    local\
    \ music_notes_str_index2=0\n    local music_notes_str_index3=0\n    local music_notes_str_index4=0\n\
    \    local music_notes_str_index5=0\n    local music_notes_str_index6=0\n    local\
    \ music_notes_str_index7=0\n    local music_notes_str_index8=0\n    local music_notes_str_index9=0\n\
    \    local music_notes_str_index10=0\n    local music_notes_str_index11=0\n  \
    \  local music_notes_str_index12=0\n    local music_notes_str_index13=0\n    local\
    \ music_notes_str_index14=0\n    local music_notes_str_index15=0\n    local music_notes_str_index16=0\n\
    \    local music_notes_str_index17=0\n    local music_notes_str_index18=0\n  \
    \  local music_notes_str_index19=0\n    local music_notes_str_index20=0\n    local\
    \ music_notes_str_index21=0\n    local music_notes_str_index22=0\n    local music_notes_str_index23=0\n\
    \    local music_notes_str_index24=0\n    local music_notes_str_index25=0\n  \
    \  local music_notes_str_index26=0\n    local music_notes_str_index27=0\n    local\
    \ music_notes_str_index28=0\n    local music_notes_str_index29=0\n    local music_notes_str_index30=0\n\
    \    local music_notes_str_index31=0\n    local music_notes_str_index32=0\n  \
    \  local music_notes_str_index33=0\n    local music_notes_str_index34=0\n    local\
    \ music_notes_str_index35=0\n    local music_notes_str_index36=0\n    local music_notes_str_index37=0\n\
    \    local music_notes_str_index38=0\n    local music_notes_str_index39=0\n  \
    \  local music_notes_str_index40=0\n    local music_notes_str_index41=0\n    local\
    \ music_notes_str_index42=0\n    local music_notes_str_index43=0\n    local music_notes_str\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_count=()\n    local\
    \ music_last_beat_count_index=()\n    local music_last_beat_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index=()\n    local music_last_beat_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index=()\n    local music_last_beat_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local musi\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_notes_array=()\n \
    \   local music_beats_array=()\n    local music_notes_beats=()\n    local music_notes_beats_array=()\n\
    \    local music_notes_beats_array_length=()\n    local music_notes_beats_array_length_length=()\n\
    \    local music_notes_beats_array_length_length_length=()\n    local music_notes_beats_array_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length=()\n   \
    \ local music_notes_beats_array_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local music_notes_beats_array_length_length_length_length_length_length_length_length_length_length_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_lasts_str=\"\
    \"\n    local music_lasts_beats=0\n    local music_lasts_beats_str=\"\"\n    local\
    \ music_lasts_beats_str_index=0\n    local music_lasts_beats_str_index_str=\"\"\
    \n    local music_lasts_beats_str_index_str_arr=()\n    local music_lasts_beats_str_index_str_arr_str=\"\
    \"\n    local music_lasts_beats_str_index_str_arr_str_arr=()\n    local music_lasts_beats_str_index_str_arr_str_arr_str=\"\
    \"\n    local music_lasts_beats_str_index_str_arr_str_arr_str_arr=()\n    local\
    \ music_lasts_beats_str_index_str_arr_str_arr_str_arr_str=\"\"\n    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr=()\n\
    \    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str=\"\"\
    \n    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str=\"\
    \"\n    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr=()\n\
    \    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr_str=\"\
    \"\n    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr=()\n\
    \    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str=\"\
    \"\n    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str=\"\
    \"\n    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str=\"\
    \"\n    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr=()\n\
    \    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str=\"\
    \"\n    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr=()\n\
    \    local music_lasts_beats_str_index_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_temp=()\n\
    \    local music_last_beat_count_temp_temp=()\n    local music_last_beat_count_temp_temp2=()\n\
    \    local music_last_beat_count_temp_temp3=()\n    local music_last_beat_count_temp_temp4=()\n\
    \    local music_last_beat_count_temp_temp5=()\n    local music_last_beat_count_temp_temp6=()\n\
    \    local music_last_beat_count_temp_temp7=()\n    local music_last_beat_count_temp_temp8=()\n\
    \    local music_last_beat_count_temp_temp9=()\n    local music_last_beat_count_temp_temp10=()\n\
    \    local music_last_beat_count_temp_temp11=()\n    local music_last_beat_count_temp_temp12=()\n\
    \    local music_last_beat_count_temp_temp13=()\n    local music_last_beat_count_temp_temp14=()\n\
    \    local music_last_beat_count_temp_temp15=()\n    local music_last_beat_count_temp_temp16=()\n\
    \    local music_last_beat_count_temp_temp17=()\n    local music_last_beat_count_temp_temp18=()\n\
    \    local music_last_beat_count_temp_temp19=()\n    local music_last_beat_count_temp_temp20=()\n\
    \    local music_last_beat_count_temp_temp21=()\n    local music_last_beat_count_temp_temp22=()\n\
    \    local music_last_beat_count_temp_temp23=()\n    local music_last_beat_count_temp_temp24=()\n\
    \    local music_last_beat_count_temp_temp25=()\n    local music_last_beat_count_temp_temp26=()\n\
    \    local music_last_beat_count_temp_temp27=()\n    local music_last_beat_count_temp_temp28=()\n\
    \    local music_last_beat_count_temp_temp29=()\n    local music_last_beat_count_temp_temp30=()\n\
    \    local music_last_beat_count_temp_temp31=()\n    local music_last_beat_count_temp_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_octave=()\n    local music_octave=()\n    local music_octave_str=()\n\
    \    local music_octave_arr=()\n    local music_octave_last_note=()\n    local\
    \ music_octave_last_octave=()\n    local music_octave_last_beat=()\n    local\
    \ music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \    local music_octave_last_beat_index=()\n    local music_octave_last_beat_index=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_notes_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_beats_array2=()\n    local music_notes_beats_array3=()\n    local\
    \ music_notes_beats_array4=()\n    local music_notes_beats_array5=()\n    local\
    \ music_notes_beats_array6=()\n    local music_notes_beats_array7=()\n    local\
    \ music_notes_beats_array8=()\n    local music_notes_beats_array9=()\n    local\
    \ music_notes_beats_array10=()\n    local music_notes_beats_array11=()\n    local\
    \ music_notes_beats_array12=()\n    local music_notes_beats_array13=()\n    local\
    \ music_notes_beats_array14=()\n    local music_notes_beats_array15=()\n    local\
    \ music_notes_beats_array16=()\n    local music_notes_beats_array17=()\n    local\
    \ music_notes_beats_array18=()\n    local music_notes_beats_array19=()\n    local\
    \ music_notes_beats_array20=()\n    local music_notes_beats_array21=()\n    local\
    \ music_notes_beats_array22=()\n    local music_notes_beats_array23=()\n    local\
    \ music_notes_beats_array24=()\n    local music_notes_beats_array25=()\n    local\
    \ music_notes_beats_array26=()\n    local music_notes_beats_array27=()\n    local\
    \ music_notes_beats_array28=()\n    local music_notes_beats_array29=()\n    local\
    \ music_notes_beats_array30=()\n    local music_notes_beats_array31=()\n    local\
    \ music_notes_beats_array32=()\n    local music_notes_beats_array33=()\n    local\
    \ music_notes_beats_array34=()\n    local music_notes_beats_array35=()\n    local\
    \ music_notes_beats_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_arr_tmp=()\n\
    \  local music_arr_len=()\n  local music_arr_len_tmp=()\n  local music_arr_len_max=()\n\
    \  local music_arr_len_max_tmp=()\n  local music_arr_len_max_tmp2=()\n  local\
    \ music_arr_len_max_tmp3=()\n  local music_arr_len_max_tmp4=()\n  local music_arr_len_max_tmp5=()\n\
    \  local music_arr_len_max_tmp6=()\n  local music_arr_len_max_tmp7=()\n  local\
    \ music_arr_len_max_tmp8=()\n  local music_arr_len_max_tmp9=()\n  local music_arr_len_max_tmp10=()\n\
    \  local music_arr_len_max_tmp11=()\n  local music_arr_len_max_tmp12=()\n  local\
    \ music_arr_len_max_tmp13=()\n  local music_arr_len_max_tmp14=()\n  local music_arr_len_max_tmp15=()\n\
    \  local music_arr_len_max_tmp16=()\n  local music_arr_len_max_tmp17=()\n  local\
    \ music_arr_len_max_tmp18=()\n  local music_arr_len_max_tmp19=()\n  local music_arr_len_max_tmp20=()\n\
    \  local music_arr_len_max_tmp21=()\n  local music_arr_len_max_tmp22=()\n  local\
    \ music_arr_len_max_tmp23=()\n  local music_arr_len_max_tmp24=()\n  local music_arr_len_max_tmp25=()\n\
    \  local music_arr_len_max_tmp26=()\n  local music_arr_len_max_tmp27=()\n  local\
    \ music_arr_len_max_tmp28=()\n  local music_arr_len_max_tmp29=()\n  local music_arr_len_max_tmp30=()\n\
    \  local music_arr_len_max_tmp31=()\n  local music_arr_len_max_tmp32=()\n  local\
    \ music_arr_len_max_tmp33=()\n  local music_arr_len_max_tmp34=()\n  local music_arr_len_max_tmp35=()\n\
    \  local music_arr_len_max_tmp36=()\n  local music_arr_len_max_tmp37=()\n  local\
    \ music_arr_len_max_tmp38=()\n  local music_arr_len_max_\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_notes=()\n    local music_last_beat_beats=()\n    local music_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat=()\n    local music_last_beat_last_beat_str=()\n\
    \    local music_last_beat_last_beat_arr=()\n    local music_last_beat_last_beat_notes=()\n\
    \    local music_last_beat_last_beat_beats=()\n    local music_last_beat_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat_last_beat=()\n    local music_last_beat_last_beat_last_beat_str=()\n\
    \    local music_last_beat_last_beat_last_beat_arr=()\n    local music_last_beat_last_beat_last_beat_notes=()\n\
    \    local music_last_beat_last_beat_last_beat_beats=()\n    local music_last_beat_last_beat_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat=()\n    local music_last_beat_last_beat_last_beat_last_beat_str=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_arr=()\n    local music_last_beat_last_beat_last_beat_last_beat_notes=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_beats=()\n    local music_last_beat_last_beat_last_beat_last_beat_last_note=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_last_beat=()\n    local\
    \ music_last_beat_last_beat_last_beat_last_beat_last_beat_str=()\n    local music_last_beat_last_beat_last_beat_last_beat_last_beat_arr=()\n\
    \    local music_last_beat_last_beat_last_beat_last_beat_last_beat_notes=()\n\
    \    local music_last_beat_last_beat_last_beat_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=()\n\
    \    local music_arr_length=()\n    local music_arr_note=()\n    local music_arr_beat=()\n\
    \    local music_arr_beat_index=()\n    local music_arr_beat_length=()\n    local\
    \ music_arr_beat_note=()\n    local music_arr_beat_note_index=()\n    local music_arr_beat_note_length=()\n\
    \    local music_arr_beat_note_octave=()\n    local music_arr_beat_note_octave_index=()\n\
    \    local music_arr_beat_note_octave_length=()\n    local music_arr_beat_note_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_index=()\n    local music_arr_beat_note_octave_octave_length=()\n\
    \    local music_arr_beat_note_octave_octave_octave=()\n    local music_arr_beat_note_octave_octave_octave_index=()\n\
    \    local music_arr_beat_note_octave_octave_octave_length=()\n    local music_arr_beat_note_octave_octave_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_octave_octave_index=()\n    local\
    \ music_arr_beat_note_octave_octave_octave_octave_length=()\n    local music_arr_beat_note_octave_octave_octave_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_octave_octave_index=()\n    local\
    \ music_arr_beat_note_octave_octave_octave_octave_length=()\n    local music_arr_beat_note_octave_octave_octave_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_octave_octave_octave_index=()\n \
    \   local music_arr_beat_note_octave_octave_octave_octave_octave_length=()\n \
    \   local music_arr_beat_note_octave_octave_octave_octave_octave_octave=()\n \
    \   local music_arr_beat_note_octave_octave_octave_octave_octave\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_arr_len=()\n    local music_last_notes_beats_arr_len_max=()\n\
    \    local music_last_notes_beats_arr_len_min=()\n    local music_last_notes_beats_arr_len_avg=()\n\
    \    local music_last_notes_beats_arr_len_median=()\n    local music_last_notes_beats_arr_len_std=()\n\
    \    local music_last_notes_beats_arr_len_min=()\n    local music_last_notes_beats_arr_len_max=()\n\
    \    local music_last_notes_beats_arr_len_min=()\n    local music_last_notes_beats_arr_len_avg=()\n\
    \    local music_last_notes_beats_arr_len_median=()\n    local music_last_notes_beats_arr_len_std=()\n\
    \    local music_last_notes_beats_arr_len_min=()\n    local music_last_notes_beats_arr_len_max=()\n\
    \    local music_last_notes_beats_arr_len_min=()\n    local music_last_notes_beats_arr_len_avg=()\n\
    \    local music_last_notes_beats_arr_len_median=()\n    local music_last_notes_beats_arr_len_std=()\n\
    \    local music_last_notes_beats_arr_len_min=()\n    local music_last_notes_beats_arr_len_max=()\n\
    \    local music_last_notes_beats_arr_len_min=()\n    local music_last_notes_beats_arr_len_avg=()\n\
    \    local music_last_notes_beats_arr_len_median=()\n    local music_last_notes_beats_arr_len_std=()\n\
    \    local music_last_notes_beats_arr_len_min=()\n    local music_last_notes_beats_arr_len_max=()\n\
    \    local music_last_notes_beats_arr_len_min=()\n    local music_last_notes_beats_arr_len_avg=()\n\
    \    local music_last_notes_beats_arr_len_median=()\n    local music_last_notes_beats_arr_len_std=()\n\
    \    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_beats_str=()\n  local music_beats_arr=()\n\
    \  local music_beats_notes=()\n  local music_beats_beats=()\n  local music_beats_beats_str=()\n\
    \  local music_beats_beats_arr=()\n  local music_beats_beats_notes=()\n  local\
    \ music_beats_beats_beats=()\n  local music_beats_beats_beats_str=()\n  local\
    \ music_beats_beats_beats_arr=()\n  local music_beats_beats_beats_notes=()\n \
    \ local music_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_beats_beats_arr=()\n  local music_beats_beats_beats_beats_notes=()\n\
    \  local music_beats_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_beats_beats_beats_arr=()\n  local music_beats_beats_beats_beats_beats_notes=()\n\
    \  local music_beats_beats_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_beats_beats_beats_beats_arr=()\n  local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \  local music_beats_beats_beats_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n  local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \  local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n  local music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \  local music_beats_beats_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_last_notes=()\n    local music_last_beats=()\n\
    \    local music_last_beats_count=()\n    local music_last_beats_count_index=()\n\
    \    local music_last_beats_count_index_count=()\n    local music_last_beats_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count=()\n    local music_last_beats_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count=()\n   \
    \ local music_last_beats_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beats_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last=()\n    local music_lastbeats=()\n\
    \    local music_lastlastbeats=()\n    local music_lastlastlastbeats=()\n    local\
    \ music_lastlastlastlastbeats=()\n    local music_lastlastlastlastlastbeats=()\n\
    \    local music_lastlastlastlastlastlastbeats=()\n    local music_lastlastlastlastlastlastlastbeats=()\n\
    \    local music_lastlastlastlastlastlastlastlastbeats=()\n    local music_lastlastlastlastlastlastlastlastlastbeats=()\n\
    \    local music_lastlastlastlastlastlastlastlastlastlastbeats=()\n    local music_lastlastlastlastlastlastlastlastlastlastbeats=()\n\
    \    local music_lastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local\
    \ music_lastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local music_lastlastlastlastlastlastlastlastlastlastlastbeats=()\n\
    \    local music_lastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local\
    \ music_lastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local music_lastlastlastlastlastlastlastlastlastlastlastbeats=()\n\
    \    local music_lastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n  \
    \  local music_lastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local\
    \ music_lastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local music_lastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n\
    \    local music_lastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n  \
    \  local music_lastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local\
    \ music_lastlastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local\
    \ music_lastlastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local\
    \ music_lastlastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n    local\
    \ music_lastlastlastlastlastlastlastlastlastlastlastlastlastbeats=()\n    \n}\n\
    \ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_notes_length=0\n \
    \   local music_beat_length=0\n    local music_beat_count=0\n    local music_note_count=0\n\
    \    local music_note_length=0\n    local music_note_start=0\n    local music_note_end=0\n\
    \    local music_note_length_count=0\n    local music_note_length_start=0\n  \
    \  local music_note_length_end=0\n    local music_note_length_beat=0\n    local\
    \ music_note_length_beat_count=0\n    local music_note_length_beat_start=0\n \
    \   local music_note_length_beat_end=0\n    local music_note_length_beat_beat=0\n\
    \    local music_note_length_beat_beat_count=0\n    local music_note_length_beat_beat_start=0\n\
    \    local music_note_length_beat_beat_end=0\n    local music_note_length_beat_beat_beat=0\n\
    \    local music_note_length_beat_beat_beat_count=0\n    local music_note_length_beat_beat_beat_start=0\n\
    \    local music_note_length_beat_beat_beat_end=0\n    local music_note_length_beat_beat_beat_beat=0\n\
    \    local music_note_length_beat_beat_beat_beat_count=0\n    local music_note_length_beat_beat_beat_beat_start=0\n\
    \    local music_note_length_beat_beat_beat_beat_end=0\n    local music_note_length_beat_beat_beat_beat_beat=0\n\
    \    local music_note_length_beat_beat_beat_beat_beat_count=0\n    local music_note_length_beat_beat_beat_beat_beat_start=0\n\
    \    local music_note_length_beat_beat_beat_beat_beat_end=0\n    local music_note_length_beat_beat_beat_beat_beat_beat=0\n\
    \    local music_note_length_beat_beat_beat_beat_beat_beat_count=0\n    local\
    \ music_note_length_beat_beat_beat_beat_beat_beat_start=0\n    local music_note_length_beat_beat_beat_beat_beat_beat_end=0\n\
    \    local music_note_length_beat_beat_beat_beat_beat_beat_beat=0\n    local music_note_length_be\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_beats_str=()\n    local music_last_notes_str=()\n    local\
    \ music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n   \
    \ local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049880
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_offset=()\n    local music_last_beat_count_index_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset=()\n    local music_last_beat_count_index_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset=()\n\
    \    local music_last_beat_count_index_offset_offset_offset_offset_offset_offset_offset_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049880
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_str_count=0\n    local music_beats_str_count_max=0\n  \
    \  local music_beats_str_count_max2=0\n    local music_beats_str_count_max3=0\n\
    \    local music_beats_str_count_max4=0\n    local music_beats_str_count_max5=0\n\
    \    local music_beats_str_count_max6=0\n    local music_beats_str_count_max7=0\n\
    \    local music_beats_str_count_max8=0\n    local music_beats_str_count_max9=0\n\
    \    local music_beats_str_count_max10=0\n    local music_beats_str_count_max11=0\n\
    \    local music_beats_str_count_max12=0\n    local music_beats_str_count_max13=0\n\
    \    local music_beats_str_count_max14=0\n    local music_beats_str_count_max15=0\n\
    \    local music_beats_str_count_max16=0\n    local music_beats_str_count_max17=0\n\
    \    local music_beats_str_count_max18=0\n    local music_beats_str_count_max19=0\n\
    \    local music_beats_str_count_max20=0\n    local music_beats_str_count_max21=0\n\
    \    local music_beats_str_count_max22=0\n    local music_beats_str_count_max23=0\n\
    \    local music_beats_str_count_max24=0\n    local music_beats_str_count_max25=0\n\
    \    local music_beats_str_count_max26=0\n    local music_beats_str_count_max27=0\n\
    \    local music_beats_str_count_max28=0\n    local music_beats_str_count_max29=0\n\
    \    local music_beats_str_count_max30=0\n    local music_beats_str_count_max31=0\n\
    \    local music_beats_str_count_max32=0\n    local music_beats_str_count_max33=0\n\
    \    local music_beats_str_count_max34=0\n    local music_beats_str_count_max35=0\n\
    \    local music_beats_str_count_max36=0\n    local music_beats_str_count_max37=0\n\
    \    local music_beats_str_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr_len=0\n    local music_last_notes_beats_str_arr_len_max=0\n\
    \    local music_last_notes_beats_str_arr_len_min=0\n    local music_last_notes_beats_str_arr_len_avg=0\n\
    \    local music_last_notes_beats_str_arr_len_median=0\n    local music_last_notes_beats_str_arr_len_min_index=0\n\
    \    local music_last_notes_beats_str_arr_len_max_index=0\n    local music_last_notes_beats_str_arr_len_avg_index=0\n\
    \    local music_last_notes_beats_str_arr_len_median_index=0\n    local music_last_notes_beats_str_arr_len_min_index2=0\n\
    \    local music_last_notes_beats_str_arr_len_max_index2=0\n    local music_last_notes_beats_str_arr_len_avg_index2=0\n\
    \    local music_last_notes_beats_str_arr_len_median_index2=0\n    local music_last_notes_beats_str_arr_len_min_index3=0\n\
    \    local music_last_notes_beats_str_arr_len_max_index3=0\n    local music_last_notes_beats_str_arr_len_avg_index3=0\n\
    \    local music_last_notes_beats_str_arr_len_median_index3=0\n    local music_last_notes_beats_str_arr_len_min_index4=0\n\
    \    local music_last_notes_beats_str_arr_len_max_index4=0\n    local music_last_notes_beats_str_arr_len_avg_index4=0\n\
    \    local music_last_notes_beats_str_arr_len_median_index4=0\n    local music_last_notes_beats_str_arr_len_min_index5=0\n\
    \    local music_last_notes_beats_str_arr_len_max_index5=0\n    local music_last_notes_beats_str_arr_len_avg_index5=0\n\
    \    local music_last_notes_beats_str_arr_len_median_index5=0\n    \n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_type=()\n    local music_last_note_octave_octave=()\n\
    \    local music_last_note_octave_octave_type=()\n    local music_last_note_octave_octave_octave=()\n\
    \    local music_last_note_octave_octave_octave_type=()\n    local music_last_note_octave_octave_octave_octave=()\n\
    \    local music_last_note_octave_octave_octave_octave_type=()\n    local music_last_note_octave_octave_octave_octave_octave=()\n\
    \    local music_last_note_octave_octave_octave_octave_octave_type=()\n    local\
    \ music_last_note_octave_octave_octave_octave_octave_octave=()\n    local music_last_note_octave_octave_octave_octave_octave_octave_type=()\n\
    \    local music_last_note_octave_octave_octave_octave_octave_octave_octave=()\n\
    \    local music_last_note_octave_octave_octave_octave_octave_octave_octave_type=()\n\
    \    local music_last_note_octave_octave_octave_octave_octave_octave_octave_octave=()\n\
    \    local music_last_note_octave_octave_octave_octave_octave_octave_octave_octave_type=()\n\
    \    local music_last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave=()\n\
    \    local music_last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_type=()\n\
    \    local music_last_note_octave_octave_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_beat=()\n    local music_last_note_beat_count=()\n\
    \    local music_last_note_beat_count_arr=()\n    local music_last_note_beat_count_arr_count=()\n\
    \    local music_last_note_beat_count_arr_count_index=()\n    local music_last_note_beat_count_arr_count_index_count=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index=()\n    local\
    \ music_last_note_beat_count_arr_count_index_count_index_count=()\n    local music_last_note_beat_count_arr_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_arr_count_index_count_index_count_\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o|}\n\
    \    local music_str_tmp=${\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpplr7xi3p.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049880
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_str=''\n   \
    \ local music_beats_str_index=0\n    local music_beats_str_index2=0\n    local\
    \ music_beats_str_index3=0\n    local music_beats_str_index4=0\n    local music_beats_str_index5=0\n\
    \    local music_beats_str_index6=0\n    local music_beats_str_index7=0\n    local\
    \ music_beats_str_index8=0\n    local music_beats_str_index9=0\n    local music_beats_str_index10=0\n\
    \    local music_beats_str_index11=0\n    local music_beats_str_index12=0\n  \
    \  local music_beats_str_index13=0\n    local music_beats_str_index14=0\n    local\
    \ music_beats_str_index15=0\n    local music_beats_str_index16=0\n    local music_beats_str_index17=0\n\
    \    local music_beats_str_index18=0\n    local music_beats_str_index19=0\n  \
    \  local music_beats_str_index20=0\n    local music_beats_str_index21=0\n    local\
    \ music_beats_str_index22=0\n    local music_beats_str_index23=0\n    local music_beats_str_index24=0\n\
    \    local music_beats_str_index25=0\n    local music_beats_str_index26=0\n  \
    \  local music_beats_str_index27=0\n    local music_beats_str_index28=0\n    local\
    \ music_beats_str_index29=0\n    local music_beats_str_index30=0\n    local music_beats_str_index31=0\n\
    \    local music_beats_str_index32=0\n    local music_beats_str_index33=0\n  \
    \  local music_beats_str_index34=0\n    local music_beats_str_index35=0\n    local\
    \ music_beats_str_index36=0\n    local music_beats_str_index37=0\n    local music_beats_str_index38=0\n\
    \    local music_beats_str_index39=0\n    local music_beats_str_index40=0\n  \
    \  local music_beats_str_index41=0\n    local music_beats_str_index42=0\n    local\
    \ music_beats_str_index43=0\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049880
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_shift=()\n    local music_last_note_octave_shift2=()\n\
    \    local music_last_note_octave_shift3=()\n    local music_last_note_octave_shift4=()\n\
    \    local music_last_note_octave_shift5=()\n    local music_last_note_octave_shift6=()\n\
    \    local music_last_note_octave_shift7=()\n    local music_last_note_octave_shift8=()\n\
    \    local music_last_note_octave_shift9=()\n    local music_last_note_octave_shift10=()\n\
    \    local music_last_note_octave_shift11=()\n    local music_last_note_octave_shift12=()\n\
    \    local music_last_note_octave_shift13=()\n    local music_last_note_octave_shift14=()\n\
    \    local music_last_note_octave_shift15=()\n    local music_last_note_octave_shift16=()\n\
    \    local music_last_note_octave_shift17=()\n    local music_last_note_octave_shift18=()\n\
    \    local music_last_note_octave_shift19=()\n    local music_last_note_octave_shift20=()\n\
    \    local music_last_note_octave_shift21=()\n    local music_last_note_octave_shift22=()\n\
    \    local music_last_note_octave_shift23=()\n    local music_last_note_octave_shift24=()\n\
    \    local music_last_note_octave_shift25=()\n    local music_last_note_octave_shift26=()\n\
    \    local music_last_note_octave_shift27=()\n    local music_last_note_octave_shift28=()\n\
    \    local music_last_note_octave_shift29=()\n    local music_last_note_octave_shift30=()\n\
    \    local music_last_note_oct\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_arr_count=()\n    local music_last_notes_beats_arr_count_max=()\n\
    \    local music_last_notes_beats_arr_count_min=()\n    local music_last_notes_beats_arr_count_sum=()\n\
    \    local music_last_notes_beats_arr_count_sum_max=()\n    local music_last_notes_beats_arr_count_sum_min=()\n\
    \    local music_last_notes_beats_arr_count_avg=()\n    local music_last_notes_beats_arr_count_avg_max=()\n\
    \    local music_last_notes_beats_arr_count_avg_min=()\n    local music_last_notes_beats_arr_count_min=()\n\
    \    local music_last_notes_beats_arr_count_max=()\n    local music_last_notes_beats_arr_count_sum=()\n\
    \    local music_last_notes_beats_arr_count_sum_max=()\n    local music_last_notes_beats_arr_count_sum_min=()\n\
    \    local music_last_notes_beats_arr_count_avg=()\n    local music_last_notes_beats_arr_count_avg_max=()\n\
    \    local music_last_notes_beats_arr_count_avg_min=()\n    local music_last_notes_beats_arr_count_max=()\n\
    \    local music_last_notes_beats_arr_count_sum=()\n    local music_last_notes_beats_arr_count_sum_max=()\n\
    \    local music_last_notes_beats_arr_count_sum_min=()\n    local music_last_notes_beats_arr_count_avg=()\n\
    \    local music_last_notes_beats_arr_count_avg_max=()\n    local music_last_notes_beats_arr_count_avg_min=()\n\
    \    local music_last_notes_beats_arr_count_min=()\n    local music_last_notes_beats_arr_count_max=()\n\
    \    local music_last_notes_beats_arr_count_sum=()\n    local music_last_notes_beats_arr_count_sum_max=()\n\
    \    local music_last_notes_beats_arr_count_sum_min=()\n    local music_last_notes_beats_arr_count_avg\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049879
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_octave=()\n    local music_octave_offset=()\n    local music_octave=0\n\
    \    local music_octave_str=\"\"\n    local music_octave_str_index=0\n    local\
    \ music_octave_str_len=0\n    local music_octave_str_len_index=0\n    local music_octave_str_len_max=0\n\
    \    local music_octave_str_len_max_index=0\n    local music_octave_str_len_min=0\n\
    \    local music_octave_str_len_min_index=0\n    local music_octave_str_len_min_index=0\n\
    \    local music_octave_str_len_max=0\n    local music_octave_str_len_max_index=0\n\
    \    local music_octave_str_len_min=0\n    local music_octave_str_len_min_index=0\n\
    \    local music_octave_str_len_min_index=0\n    local music_octave_str_len_max=0\n\
    \    local music_octave_str_len_max_index=0\n    local music_octave_str_len_min=0\n\
    \    local music_octave_str_len_min_index=0\n    local music_octave_str_len_min_index=0\n\
    \    local music_octave_str_len_max=0\n    local music_octave_str_len_max_index=0\n\
    \    local music_octave_str_len_min=0\n    local music_octave_str_len_min_index=0\n\
    \    local music_octave_str_len_min_index=0\n    local music_octave_str_len_max=0\n\
    \    local music_octave_str_len_max_index=0\n    local music_octave_str_len_min=0\n\
    \    local music_octave_str_len_min_index=0\n    local music_octave_str_len_min_index=0\n\
    \    local music_octave_str_len_max=0\n    local music_octave_str_len_max_index=0\n\
    \    local music_octave_str_len_min=0\n    local music_octave_str_len_min_index=0\n\
    \    local music_octave_str_len_min_index=0\n    local music_octave_str_len_max=0\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049880
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb6f4w726.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049879
