language: sh
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial_string=\"\"\n    for (( i=1; i<=$1; i++ ))\n\
    \    do\n        factorial=$((factorial*i))\n        factorial_string=\"$factorial_string$((factorial))\"\
    \n    done\n    echo $factorial_string\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial\n  factorial=$1\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factori\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsnhqq3li.sh: line 56: unexpected EOF while looking for matching
    `)''

    /tmp/tmpsnhqq3li.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=1\n    local n=$1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial*n))\n        n=$((n-1))\n    done\n    echo \"$factorial\"\
    \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ factorial * i ))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo $factorial\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=$1\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgcbs60oc.sh: line 56: factori: command not found

    '
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local factorial_string=\"\"\n  local factorial_count=0\n\
    \  local factorial_string2=\"\"\n  local factorial_count2=0\n  local factorial_string3=\"\
    \"\n  local factorial_count3=0\n  local factorial_string4=\"\"\n  local factorial_count4=0\n\
    \  local factorial_string5=\"\"\n  local factorial_count5=0\n  local factorial_string6=\"\
    \"\n  local factorial_count6=0\n  local factorial_string7=\"\"\n  local factorial_count7=0\n\
    \  local factorial_string8=\"\"\n  local factorial_count8=0\n  local factorial_string9=\"\
    \"\n  local factorial_count9=0\n  local factorial_string10=\"\"\n  local factorial_count10=0\n\
    \  local factorial_string11=\"\"\n  local factorial_count11=0\n  local factorial_string12=\"\
    \"\n  local factorial_count12=0\n  local factorial_string13=\"\"\n  local factorial_count13=0\n\
    \  local factorial_string14=\"\"\n  local factorial_count14=0\n  local factorial_string15=\"\
    \"\n  local factorial_count15=0\n  local factorial_string16=\"\"\n  local factorial_count16=0\n\
    \  local factorial_string17=\"\"\n  local factorial_count17=0\n  local factorial_string18=\"\
    \"\n  local factorial_count18=0\n  local factorial_string19=\"\"\n  local factorial_count19=0\n\
    \  local factorial_string20=\"\"\n  local factorial_count20=0\n  local factorial_string21=\"\
    \"\n  local factorial_count21=0\n  local factorial_string22=\"\"\n  local factorial_count22=0\n\
    \  local factorial_string23=\"\"\n  local factorial_count23=0\n  local factorial_string24=\"\
    \"\n  local factorial_count24=0\n  local factorial_string25=\"\"\n  local factorial_count25=0\n\
    \  local factorial_string26=\"\"\n  local factorial_count26=0\n  local factorial_string27=\"\
    \"\n  local factorial_count27=0\n  local factorial_string28=\"\"\n  local factorial_count28=0\n\
    \  local factorial_string29=\"\"\n  local factorial_count29=0\n  local factorial_string30=\"\
    \"\n  local factorial_count30=0\n  local factorial_string31=\"\"\n  local factorial_count31=0\n\
    \  local factorial_string32=\"\"\n  local factorial_\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ $factorial * $i ))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ )); do\n        factorial=$((\
    \ factorial * i ))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial_result\n    factorial_result=$(($1*$(($1-1))*$(($1-2))))\n\
    \    echo \"$factorial_result\"\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local i\n    local factorial_string\n\
    \    factorial_string=$(nproc --all --unbuffered --foreground --max-procs=$(nproc)\
    \ --joblog | awk '{print $1}')\n    while [ $n -gt 0 ]; do\n        factorial=$((factorial\
    \ * $factorial_string))\n        n=$((n - 1))\n    done\n    factorial=$((factorial))\n\
    \    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'nproc: unrecognized option ''--unbuffered''

    Try ''nproc --help'' for more information.

    /tmp/tmpjnhjenzd.sh: line 19: factorial * : syntax error: operand expected (error
    token is "* ")

    '
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial * i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++)); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_tmp\n    local\
    \ factorial_tmp2\n    local factorial_tmp3\n    local factorial_tmp4\n    local\
    \ factorial_tmp5\n    local factorial_tmp6\n    local factorial_tmp7\n    local\
    \ factorial_tmp8\n    local factorial_tmp9\n    local factorial_tmp10\n    local\
    \ factorial_tmp11\n    local factorial_tmp12\n    local factorial_tmp13\n    local\
    \ factorial_tmp14\n    local factorial_tmp15\n    local factorial_tmp16\n    local\
    \ factorial_tmp17\n    local factorial_tmp18\n    local factorial_tmp19\n    local\
    \ factorial_tmp20\n    local factorial_tmp21\n    local factorial_tmp22\n    local\
    \ factorial_tmp23\n    local factorial_tmp24\n    local factorial_tmp25\n    local\
    \ factorial_tmp26\n    local factorial_tmp27\n    local factorial_tmp28\n    local\
    \ factorial_tmp29\n    local factorial_tmp30\n    local factorial_tmp31\n    local\
    \ factorial_tmp32\n    local factorial_tmp33\n    local factorial_tmp34\n    local\
    \ factorial_tmp35\n    local factorial_tmp36\n    local factorial_tmp37\n    local\
    \ factorial_tmp38\n    local factorial_tmp39\n    local factorial_tmp40\n    local\
    \ factorial_tmp41\n    local factorial_tmp42\n    local factorial_tmp43\n    local\
    \ factorial_tmp44\n    local factorial_tmp45\n    local factorial_tmp46\n    local\
    \ factorial_tmp47\n    local factorial_tmp48\n    local factorial_tmp49\n    local\
    \ factorial_tmp50\n    local factorial_tmp51\n    local factorial_tmp52\n    local\
    \ factorial_tmp53\n    local factorial_tmp54\n    local factorial_tmp55\n    local\
    \ factorial_tmp56\n    local factorial_tmp57\n    local factorial_tmp58\n    local\
    \ factorial_tmp59\n    local factorial_tmp60\n    local factorial_tmp61\n    local\
    \ factorial_tmp62\n    local factorial_tmp63\n    local factorial_tmp64\n    local\
    \ factorial_tmp65\n    local factorial_tmp66\n    local factorial_tmp67\n    local\
    \ factorial_tmp68\n    local factorial_tmp69\n    local factorial_tmp70\n    local\
    \ factorial_tmp71\n    local factorial_\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local factorial_string=\"\"\n  local factorial_count=0\n\
    \  local factorial_string2=\"\"\n  local factorial_count2=0\n  local factorial_string3=\"\
    \"\n  local factorial_count3=0\n  local factorial_string4=\"\"\n  local factorial_count4=0\n\
    \  local factorial_string5=\"\"\n  local factorial_count5=0\n  local factorial_string6=\"\
    \"\n  local factorial_count6=0\n  local factorial_string7=\"\"\n  local factorial_count7=0\n\
    \  local factorial_string8=\"\"\n  local factorial_count8=0\n  local factorial_string9=\"\
    \"\n  local factorial_count9=0\n  local factorial_string10=\"\"\n  local factorial_count10=0\n\
    \  local factorial_string11=\"\"\n  local factorial_count11=0\n  local factorial_string12=\"\
    \"\n  local factorial_count12=0\n  local factorial_string13=\"\"\n  local factorial_count13=0\n\
    \  local factorial_string14=\"\"\n  local factorial_count14=0\n  local factorial_string15=\"\
    \"\n  local factorial_count15=0\n  local factorial_string16=\"\"\n  local factorial_count16=0\n\
    \  local factorial_string17=\"\"\n  local factorial_count17=0\n  local factorial_string18=\"\
    \"\n  local factorial_count18=0\n  local factorial_string19=\"\"\n  local factorial_count19=0\n\
    \  local factorial_string20=\"\"\n  local factorial_count20=0\n  local factorial_string21=\"\
    \"\n  local factorial_count21=0\n  local factorial_string22=\"\"\n  local factorial_count22=0\n\
    \  local factorial_string23=\"\"\n  local factorial_count23=0\n  local factorial_string24=\"\
    \"\n  local factorial_count24=0\n  local factorial_string25=\"\"\n  local factorial_count25=0\n\
    \  local factorial_string26=\"\"\n  local factorial_count26=0\n  local factorial_string27=\"\
    \"\n  local factorial_count27=0\n  local factorial_string28=\"\"\n  local factorial_count28=0\n\
    \  local factorial_string29=\"\"\n  local factorial_count29=0\n  local factorial_string30=\"\
    \"\n  local factorial_count30=0\n  local factorial_string31=\"\"\n  local factorial_count31=0\n\
    \  local factorial_string32=\"\"\n  local factorial_\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=$1\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local factorial_string=\"1\"\n  local factorial_count=$1\n\
    \  while [ $factorial_count -gt 0 ]; do\n    factorial=$((factorial*factorial_count))\n\
    \    factorial_string=\"$factorial_string$factorial\"\n    factorial_count=$((factorial_count-1))\n\
    \  done\n  echo $factorial_string\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=$1\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=1\n    local n=$1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=$n; i++)); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial\
    \ * i))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((\
    \ $factorial * $n ))\n    n=$(( $n - 1 ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=$1\n  local factorial_string=$((factorial))\n  factorial_string=${factorial_string//!/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  factorial_string=${factorial_string//*/}\n  factorial_string=${factorial_string//*/}\n\
    \  \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ factorial * i ))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=$n; i++)); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    if [ $n -lt 1 ]; then\n        echo \"Invalid input:\
    \ factorial of $n must be greater than 0\"\n        return 1\n    fi\n    local\
    \ factorial=1\n    for (( i=1; i<=$n; i++ )); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial\
    \ * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n\
    \    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial\
    \ * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n\
    \    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial\
    \ * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n\
    \    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial\
    \ * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n\
    \    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial\
    \ * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n\
    \    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial\
    \ * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n\
    \    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial\
    \ * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n\
    \    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial\
    \ * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n\
    \    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial\
    \ * $1))\n    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n\
    \    factorial=$(($factorial * $1))\n    factorial=$(($factorial * $1))\n    \n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial*$n))\n\
    \    n=$((n-1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial_result\n  factorial_result=$(($1*$(($1-1))*$(($1-2))))\n\
    \  echo $factorial_result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ $factorial * $i ))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++)); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_string=\"\"\n\
    \    local factorial_string_2=\"\"\n    local factorial_string_3=\"\"\n    local\
    \ factorial_string_4=\"\"\n    local factorial_string_5=\"\"\n    local factorial_string_6=\"\
    \"\n    local factorial_string_7=\"\"\n    local factorial_string_8=\"\"\n   \
    \ local factorial_string_9=\"\"\n    local factorial_string_10=\"\"\n    local\
    \ factorial_string_11=\"\"\n    local factorial_string_12=\"\"\n    local factorial_string_13=\"\
    \"\n    local factorial_string_14=\"\"\n    local factorial_string_15=\"\"\n \
    \   local factorial_string_16=\"\"\n    local factorial_string_17=\"\"\n    local\
    \ factorial_string_18=\"\"\n    local factorial_string_19=\"\"\n    local factorial_string_20=\"\
    \"\n    local factorial_string_21=\"\"\n    local factorial_string_22=\"\"\n \
    \   local factorial_string_23=\"\"\n    local factorial_string_24=\"\"\n    local\
    \ factorial_string_25=\"\"\n    local factorial_string_26=\"\"\n    local factorial_string_27=\"\
    \"\n    local factorial_string_28=\"\"\n    local factorial_string_29=\"\"\n \
    \   local factorial_string_30=\"\"\n    local factorial_string_31=\"\"\n    local\
    \ factorial_string_32=\"\"\n    local factorial_string_33=\"\"\n    local factorial_string_34=\"\
    \"\n    local factorial_string_35=\"\"\n    local factorial_string_36=\"\"\n \
    \   local factorial_string_37=\"\"\n    local factorial_string_38=\"\"\n    local\
    \ factorial_string_39=\"\"\n    local factorial_string_40=\"\"\n    local factorial_string_41=\"\
    \"\n    local factorial_string_42=\"\"\n    local factorial_string_43=\"\"\n \
    \   local factorial_string_44=\"\"\n    local factorial_string_45=\"\"\n    local\
    \ factorial_string_46=\"\"\n    local factorial_string_47=\"\"\n    local factorial_string_48=\"\
    \"\n    local factorial_string_49=\"\"\n    local factorial_string_50=\"\"\n \
    \   local factorial_string_51=\"\"\n    local factorial_string_52=\"\"\n    local\
    \ factorial_string_53=\"\"\n    local factorial_string_54=\"\"\n    local factorial_string_55=\"\
    \"\n    local factorial_string_56=\"\"\n    local factorial_string_57=\"\"\n \
    \   local factorial_string_58=\"\"\n    local factorial_string_59=\"\"\n    local\
    \ factorial_string_60=\"\"\n    local factorial_string_61=\"\"\n    local factorial_string_62=\"\
    \"\n    local factorial_string_\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((\
    \ $factorial * $n ))\n    n=$(( $n - 1 ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * $n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*$i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=$1\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=$n; i++)); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * $n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=1\n    local n=$1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * $n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=1\n    local n=$1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * $n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++)); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i = 1; i <= n; i++ ));\
    \ do\n        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\
    \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i <= n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    if [ $n -lt 1 ]; then\n        echo \"Error: factorial\
    \ of $n is undefined\"\n        return 1\n    fi\n    local factorial=1\n    for\
    \ ((i=1; i<=$n; i++)); do\n        factorial=$((factorial*i))\n    done\n    echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: -1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=1\n    local factorial_string=\"\"\n    local factorial_string_length=${#1}\n\
    \n    while [ $factorial_string_length -gt 0 ]; do\n        factorial=$((factorial*${1}))\n\
    \        factorial_string=$((factorial_string*${1}))\n        factorial_string_length=${#factorial_string}\n\
    \    done\n\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=6 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660053303
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((\
    \ $factorial * $n ))\n    n=$(( $n - 1 ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_tmp\n    local\
    \ factorial_tmp2\n    local factorial_tmp3\n    local factorial_tmp4\n    local\
    \ factorial_tmp5\n    local factorial_tmp6\n    local factorial_tmp7\n    local\
    \ factorial_tmp8\n    local factorial_tmp9\n    local factorial_tmp10\n    local\
    \ factorial_tmp11\n    local factorial_tmp12\n    local factorial_tmp13\n    local\
    \ factorial_tmp14\n    local factorial_tmp15\n    local factorial_tmp16\n    local\
    \ factorial_tmp17\n    local factorial_tmp18\n    local factorial_tmp19\n    local\
    \ factorial_tmp20\n    local factorial_tmp21\n    local factorial_tmp22\n    local\
    \ factorial_tmp23\n    local factorial_tmp24\n    local factorial_tmp25\n    local\
    \ factorial_tmp26\n    local factorial_tmp27\n    local factorial_tmp28\n    local\
    \ factorial_tmp29\n    local factorial_tmp30\n    local factorial_tmp31\n    local\
    \ factorial_tmp32\n    local factorial_tmp33\n    local factorial_tmp34\n    local\
    \ factorial_tmp35\n    local factorial_tmp36\n    local factorial_tmp37\n    local\
    \ factorial_tmp38\n    local factorial_tmp39\n    local factorial_tmp40\n    local\
    \ factorial_tmp41\n    local factorial_tmp42\n    local factorial_tmp43\n    local\
    \ factorial_tmp44\n    local factorial_tmp45\n    local factorial_tmp46\n    local\
    \ factorial_tmp47\n    local factorial_tmp48\n    local factorial_tmp49\n    local\
    \ factorial_tmp50\n    local factorial_tmp51\n    local factorial_tmp52\n    local\
    \ factorial_tmp53\n    local factorial_tmp54\n    local factorial_tmp55\n    local\
    \ factorial_tmp56\n    local factorial_tmp57\n    local factorial_tmp58\n    local\
    \ factorial_tmp59\n    local factorial_tmp60\n    local factorial_tmp61\n    local\
    \ factorial_tmp62\n    local factorial_tmp63\n    local factorial_tmp64\n    local\
    \ factorial_tmp65\n    local factorial_tmp66\n    local factorial_tmp67\n    local\
    \ factorial_tmp68\n    local factorial_tmp69\n    local factorial_tmp70\n    local\
    \ factorial_tmp71\n    local factorial_\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=$1\n  local factorial_string=\"\"\n  local factorial_count=0\n\
    \  local factorial_string2=\"\"\n  local factorial_count2=0\n  local factorial_string3=\"\
    \"\n  local factorial_count3=0\n  local factorial_string4=\"\"\n  local factorial_count4=0\n\
    \  local factorial_string5=\"\"\n  local factorial_count5=0\n  local factorial_string6=\"\
    \"\n  local factorial_count6=0\n  local factorial_string7=\"\"\n  local factorial_count7=0\n\
    \  local factorial_string8=\"\"\n  local factorial_count8=0\n  local factorial_string9=\"\
    \"\n  local factorial_count9=0\n  local factorial_string10=\"\"\n  local factorial_count10=0\n\
    \  local factorial_string11=\"\"\n  local factorial_count11=0\n  local factorial_string12=\"\
    \"\n  local factorial_count12=0\n  local factorial_string13=\"\"\n  local factorial_count13=0\n\
    \  local factorial_string14=\"\"\n  local factorial_count14=0\n  local factorial_string15=\"\
    \"\n  local factorial_count15=0\n  local factorial_string16=\"\"\n  local factorial_count16=0\n\
    \  local factorial_string17=\"\"\n  local factorial_count17=0\n  local factorial_string18=\"\
    \"\n  local factorial_count18=0\n  local factorial_string19=\"\"\n  local factorial_count19=0\n\
    \  local factorial_string20=\"\"\n  local factorial_count20=0\n  local factorial_string21=\"\
    \"\n  local factorial_count21=0\n  local factorial_string22=\"\"\n  local factorial_count22=0\n\
    \  local factorial_string23=\"\"\n  local factorial_count23=0\n  local factorial_string24=\"\
    \"\n  local factorial_count24=0\n  local factorial_string25=\"\"\n  local factorial_count25=0\n\
    \  local factorial_string26=\"\"\n  local factorial_count26=0\n  local factorial_string27=\"\
    \"\n  local factorial_count27=0\n  local factorial_string28=\"\"\n  local factorial_count28=0\n\
    \  local factorial_string29=\"\"\n  local factorial_count29=0\n  local factorial_string30=\"\
    \"\n  local factorial_count30=0\n  local factorial_string31=\"\"\n  local factorial_count31=0\n\
    \  local factorial_string32=\"\"\n  local factori\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=$1\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgcbs60oc.sh: line 56: factori: command not found

    '
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    if [ $n -lt 1 ]; then\n        echo \"Invalid input\"\
    \n        return 1\n    fi\n    local factorial=1\n    for (( i=1; i<=$n; i++\
    \ )); do\n        factorial=$(($factorial * $i))\n    done\n    echo \"$factorial\"\
    \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=$1\n    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprna6d4e9.sh: line 56: factori: command not found

    '
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ $factorial * $i ))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial * i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053298
