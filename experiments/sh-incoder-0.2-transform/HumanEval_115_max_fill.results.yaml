language: sh
name: HumanEval_115_max_fill
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i\n    local j\n    local bucket\n    local buckets\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local empty=0\n    local count=0\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local max=0\n    local min=0\n    local max1=0\n    local\
    \ min1=0\n    local max2=0\n    local min2=0\n    local max3=0\n    local min3=0\n\
    \    local max4=0\n    local min4=0\n    local max5=0\n    local min5=0\n    local\
    \ max6=0\n    local min6=0\n    local max7=0\n    local min7=0\n    local max8=0\n\
    \    local min8=0\n    local max9=0\n    local min9=0\n    local max10=0\n   \
    \ local min10=0\n    local max11=0\n    local min11=0\n    local max12=0\n   \
    \ local min12=0\n    local max13=0\n    local min13=0\n    local max14=0\n   \
    \ local min14=0\n    local max15=0\n    local min15=0\n    local max16=0\n   \
    \ local min16=0\n    local max17=0\n    local min17=0\n    local max18=0\n   \
    \ local min18=0\n    local max19=0\n    local min19=0\n    local max20=0\n   \
    \ local min20=0\n    local max21=0\n    local min21=0\n    local max22=0\n   \
    \ local min22=0\n    local max23=0\n    local min23=0\n    local max24=0\n   \
    \ local min24=0\n    local max25=0\n    local min25=0\n    local max26=0\n   \
    \ local min26=0\n    local max27=0\n    local min27=0\n    local max28=0\n   \
    \ local min28=0\n    local max29=0\n    local min29=0\n    local max30=0\n   \
    \ local min30=0\n    local max31=0\n    local min31=0\n    local max32=0\n   \
    \ local min32=0\n    local max33=0\n    local min33=0\n    local max34=0\n   \
    \ local min34=0\n    local max35=0\n    local min35=0\n    local max36=0\n   \
    \ local min36=0\n    local max37=0\n    local min37=0\n    local max38=0\n   \
    \ local min38=0\n    local max39=0\n    local min39=0\n    local max40=0\n   \
    \ local min40\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local bucket\n    local line\n    local i\n    local j\n    local n\n   \
    \ local count\n    local max\n    local min\n    local maxCount\n    local minCount\n\
    \    local minBucket\n    local maxBucket\n    local minBucketCount\n    local\
    \ maxBucketCount\n    local minBucketCapacity\n    local maxBucketCapacity\n \
    \   local minBucketCapacityCount\n    local maxBucketCapacityCount\n    local\
    \ minBucketCapacityCapacity\n    local maxBucketCapacityCapacity\n    local minBucketCapacityCapacityCount\n\
    \    local maxBucketCapacityCapacityCount\n    local minBucketCapacityCapacityCapacity\n\
    \    local maxBucketCapacityCapacityCapacity\n    local minBucketCapacityCapacityCapacity\n\
    \    local maxBucketCapacityCapacityCapacity\n    local minBucketCapacityCapacityCapacityCount\n\
    \    local maxBucketCapacityCapacityCapacityCount\n    local minBucketCapacityCapacityCapacityCapacity\n\
    \    local maxBucketCapacityCapacityCapacityCapacity\n    local minBucketCapacityCapacityCapacityCapacityCount\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCount\n    local minBucketCapacityCapacityCapacityCapacityCapacity\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCapacity\n    local minBucketCapacityCapacityCapacityCapacityCapacityCount\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCount\n    local minBucketCapacityCapacityCapacityCapacityCapacityCapacity\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCapacityCapacity\n    local\
    \ minBucketCapacityCapacityCapacityCapacityCapacityCapacityCount\n    local maxBucketCapacityCapacityCapacityCapacityCapacityCount\n\
    \    local minBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacity\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacity\n\
    \    local minBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCount\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCapacityCapacityCount\n  \
    \  local minBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacity\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacity\n\
    \    local minBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCount\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCount\n\
    \    local minBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacity\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacity\n\
    \    local minBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCount\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCount\n\
    \    local minBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacity\n\
    \    local maxBucketCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacityCapacity\n\
    \    local minBucketCapacityCapacityCapacityCapacityCapacityCapacity\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local max=0\n    local maxCount=0\n    local maxBucket=0\n\
    \    local maxBucketCount=0\n    local maxBucketIndex=0\n    local maxBucketValue=0\n\
    \    local maxBucketValueIndex=0\n    local maxBucketValueIndex2=0\n    local\
    \ maxBucketValueIndex3=0\n    local maxBucketValueIndex4=0\n    local maxBucketValueIndex5=0\n\
    \    local maxBucketValueIndex6=0\n    local maxBucketValueIndex7=0\n    local\
    \ maxBucketValueIndex8=0\n    local maxBucketValueIndex9=0\n    local maxBucketValueIndex10=0\n\
    \    local maxBucketValueIndex11=0\n    local maxBucketValueIndex12=0\n    local\
    \ maxBucketValueIndex13=0\n    local maxBucketValueIndex14=0\n    local maxBucketValueIndex15=0\n\
    \    local maxBucketValueIndex16=0\n    local maxBucketValueIndex17=0\n    local\
    \ maxBucketValueIndex18=0\n    local maxBucketValueIndex19=0\n    local maxBucketValueIndex20=0\n\
    \    local maxBucketValueIndex21=0\n    local maxBucketValueIndex22=0\n    local\
    \ maxBucketValueIndex23=0\n    local maxBucketValueIndex24=0\n    local maxBucketValueIndex25=0\n\
    \    local maxBucketValueIndex26=0\n    local maxBucketValueIndex27=0\n    local\
    \ maxBucketValueIndex28=0\n    local maxBucketValueIndex29=0\n    local maxBucketValueIndex30=0\n\
    \    local maxBucketValueIndex31=0\n    local maxBucketValueIndex32=0\n    local\
    \ maxBucketValueIndex33=0\n    local maxBucketValueIndex34=0\n    local maxBucketValueIndex35=0\n\
    \    local maxBucketValueIndex36=0\n    local maxBucketValueIndex37=0\n    local\
    \ maxBucketValueIndex38=0\n    local maxBucketValueIndex39=0\n    local maxBucketValueIndex40=0\n\
    \    local maxBucketValueIndex41=0\n    local maxBucketValueIndex42=0\n    local\
    \ maxBucketValueIndex43=0\n    local maxBucketValueIndex44=0\n    local maxBucketValueIndex45=0\n\
    \    local maxBucketValueIndex46=0\n    local maxBucketValueIndex47=0\n    local\
    \ maxBucketValueIndex48=0\n    local maxBucketValueIndex49=0\n    local maxBucketValueIndex50=0\n\
    \    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local i j\n    local count=0\n    \n    for ((i=0; i<${#lines[@]}; i++));\
    \ do\n        buckets[${#buckets[@]}]=0\n    done\n    \n    for ((i=0; i<${#lines[@]};\
    \ i++)); do\n        for ((j=0; j<${#lines[$i]}; j++)); do\n            if [[\
    \ ${lines[$i][$j]} -eq 1 ]]; then\n                buckets[$((${#buckets[@]} +\
    \ 1))]=$((${buckets[$((${#buckets[@]} + 1))]} + 1))\n            fi\n        done\n\
    \    done\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n        for ((j=0;\
    \ j<${#lines[$i]}; j++)); do\n            if [[ ${lines[$i][$j]} -eq 0 ]]; then\n\
    \                buckets[$((${#buckets[@]} + 1))]=$((${buckets[$((${#buckets[@]}\
    \ + 1))]} + 1))\n            fi\n        done\n    done\n    \n    for ((i=0;\
    \ i<${#lines[@]}; i++)); do\n        for ((j=0; j<${#lines[$i]}; j++)); do\n \
    \           if [[ ${lines[$i][$j]} -eq 1 ]]; then\n                buckets[$((${#buckets[@]}\
    \ + 1))]=$((${buckets[$((${#buckets[@]} + 1))]} + 1))\n            fi\n      \
    \  done\n    done\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n        for\
    \ ((j=0; j<${#lines[$i]}; j++)); do\n            if [[ ${lines[$i][$j]} -eq 0\
    \ ]]; then\n                buckets[$((${#buckets[@]} + 1))]=$((${buckets[$((${#buckets[@]}\
    \ + 1))]} + 1))\n            fi\n        done\n    done\n    \n    for ((i=0;\
    \ i<${#lines[@]}; i++)); do\n        for ((j=0; j<${#lines[$i]}; j++)); do\n \
    \           if [[ ${lines[$i][$j]} -eq 1 ]]; then\n                buckets[$((${#buckets[@]}\
    \ + 1))]=$((${buckets[$((${#buckets[@]} + 1))]} + 1))\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgwvkgp7w.sh: line 73: syntax error near unexpected token `}''

    /tmp/tmpgwvkgp7w.sh: line 73: `}''

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local count=0\n    local max=0\n    local min=$(capacity + 1)\n  \
    \  local i\n    local j\n    local bucket\n    local well\n    \n    for ((i =\
    \ 0; i < ${#lines[@]}; i++)); do\n        well=${lines[$i]}\n        for ((j =\
    \ 0; j < ${#well[@]}; j++)); do\n            bucket=${well[$j]}\n            if\
    \ [[ ${buckets[$bucket]} -eq 0 ]]; then\n                ((buckets[$bucket]++))\n\
    \            fi\n        done\n    done\n    \n    for ((i = 0; i < ${#lines[@]};\
    \ i++)); do\n        well=${lines[$i]}\n        for ((j = 0; j < ${#well[@]};\
    \ j++)); do\n            bucket=${well[$j]}\n            if [[ ${buckets[$bucket]}\
    \ -eq ${capacity} ]]; then\n                ((buckets[$bucket]--))\n         \
    \   fi\n        done\n    done\n    \n    for ((i = 0; i < ${#lines[@]}; i++));\
    \ do\n        well=${lines[$i]}\n        for ((j = 0; j < ${#well[@]}; j++));\
    \ do\n            bucket=${well[$j]}\n            if [[ ${buckets[$bucket]} -eq\
    \ 0 ]]; then\n                ((count++))\n            fi\n        done\n    done\n\
    \    \n    for ((i = 0; i < ${#lines[@]}; i++)); do\n        well=${lines[$i]}\n\
    \        for ((j = 0; j < ${#well[@]}; j++)); do\n            bucket=${well[$j]}\n\
    \            if [[ ${buckets[$bucket]} -eq ${capacity} ]]; then\n            \
    \    ((count--))\n            fi\n        done\n    done\n    \n    for ((i =\
    \ 0; i < ${#lines[@]}; i++)); do\n        well=${lines[$i]}\n        for ((j =\
    \ 0; j < ${#well[@]}; j++)); do\n            bucket=${well[$j]}\n            if\
    \ [[ ${buckets[$bucket]} -eq ${capacity} ]]; then\n                ((max++))\n\
    \            fi\n        done\n    done\n    \n    for ((i = 0; i < ${#lines[@]};\
    \ i++)); do\n        well=${lines[$i]}\n        for ((j = 0; j < ${#well[@]};\
    \ j++)); do\n            bucket=${well[$j]}\n            if [[ ${buckets[$bucket]}\
    \ -eq ${capacity} ]]; then\n                ((min--))\n            fi\n      \
    \  done\n\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[\
    \ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n  \
    \  [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp68rkaur4.sh: line 97: syntax error near unexpected token `}''

    /tmp/tmp68rkaur4.sh: line 97: `}''

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local max=0\n    local min=0\n    local maxlen=0\n   \
    \ local minlen=0\n    local maxlen2=0\n    local minlen2=0\n    local maxlen3=0\n\
    \    local minlen3=0\n    local maxlen4=0\n    local minlen4=0\n    local maxlen5=0\n\
    \    local minlen5=0\n    local maxlen6=0\n    local minlen6=0\n    local maxlen7=0\n\
    \    local minlen7=0\n    local maxlen8=0\n    local minlen8=0\n    local maxlen9=0\n\
    \    local minlen9=0\n    local maxlen10=0\n    local minlen10=0\n    local maxlen11=0\n\
    \    local minlen11=0\n    local maxlen12=0\n    local minlen12=0\n    local maxlen13=0\n\
    \    local minlen13=0\n    local maxlen14=0\n    local minlen14=0\n    local maxlen15=0\n\
    \    local minlen15=0\n    local maxlen16=0\n    local minlen16=0\n    local maxlen17=0\n\
    \    local minlen17=0\n    local maxlen18=0\n    local minlen18=0\n    local maxlen19=0\n\
    \    local minlen19=0\n    local maxlen20=0\n    local minlen20=0\n    local maxlen21=0\n\
    \    local minlen21=0\n    local maxlen22=0\n    local minlen22=0\n    local maxlen23=0\n\
    \    local minlen23=0\n    local maxlen24=0\n    local minlen24=0\n    local maxlen25=0\n\
    \    local minlen25=0\n    local maxlen26=0\n    local minlen26=0\n    local maxlen27=0\n\
    \    local minlen27=0\n    local maxlen28=0\n    local minlen28=0\n    local maxlen29=0\n\
    \    local minlen29=0\n    local maxlen30=0\n    local minlen30=0\n    local maxlen31=0\n\
    \    local minlen31=0\n    local maxlen32=0\n    local minlen32=0\n    local maxlen33=0\n\
    \    local minlen33=0\n    local maxlen34=0\n    local minlen34=0\n    local maxlen35\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local row\n    local col\n    local bucket\n    local well\n    local empty\n\
    \    local empty_capacity\n    local empty_wells\n    local empty_buckets\n  \
    \  local empty_capacity_buckets\n    local empty_wells\n    local empty_buckets_wells\n\
    \    local empty_buckets_capacity\n    local empty_wells_capacity\n    local empty_buckets_capacity_wells\n\
    \    local empty_buckets_capacity_buckets\n    local empty_buckets_capacity_wells_buckets\n\
    \    local empty_wells_capacity_wells\n    local empty_wells_capacity_buckets\n\
    \    local empty_wells_capacity_wells_buckets\n    local empty_buckets_capacity_wells_buckets\n\
    \    local empty_buckets_capacity_wells_buckets_wells\n    local empty_buckets_capacity_wells_buckets_wells_buckets\n\
    \    local empty_wells_capacity_wells_buckets_wells\n    local empty_wells_capacity_wells_buckets_wells_buckets\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells\n    local empty_wells_capacity_wells_buckets_wells_buckets_wells_buckets\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells_buckets_wells\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells_buckets_wells_buckets\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells_buckets\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells_wells\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells_wells\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells_buckets_wells_wells_wells\n\
    \    local empty_wells_capacity_wells_buckets_wells_buckets_wells_\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local buckets\n    local bucket\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local \n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ * ${#lines})\n    local empty=0\n    local count=0\n    local line\n    local\
    \ i\n    local j\n    local bucket\n    local empty\n    local buckets\n    local\
    \ line\n    local i\n    local j\n    local bucket\n    local empty\n    local\
    \ count\n    local line\n    local i\n    local j\n    local bucket\n    local\
    \ empty\n    local count\n    local line\n    local i\n    local j\n    local\
    \ bucket\n    local empty\n    local count\n    local line\n    local i\n    local\
    \ j\n    local bucket\n    local empty\n    local count\n    local line\n    local\
    \ i\n    local j\n    local bucket\n    local empty\n    local count\n    local\
    \ line\n    local i\n    local j\n    local bucket\n    local empty\n    local\
    \ count\n    local line\n    local i\n    local j\n    local bucket\n    local\
    \ empty\n    local count\n    local line\n    local i\n    local j\n    local\
    \ bucket\n    local empty\n    local count\n    local line\n    local i\n    local\
    \ j\n    local bucket\n    local empty\n    local count\n    local line\n    local\
    \ i\n    local j\n    local bucket\n    local empty\n    local count\n    local\
    \ line\n    local i\n    local j\n    local bucket\n    local empty\n    local\
    \ count\n    local line\n    local i\n    local j\n    local bucket\n    local\
    \ empty\n    local count\n    local line\n    local i\n    local j\n    local\
    \ bucket\n    local empty\n    local count\n    local line\n    local i\n    local\
    \ j\n    local bucket\n    local empty\n    local count\n    local line\n    local\
    \ i\n    local j\n    local bucket\n    local empty\n    local count\n    local\
    \ line\n    local i\n    local j\n    local bucket\n    local empty\n    local\
    \ count\n    local line\n    local i\n    local j\n    local bucket\n    local\
    \ empty\n    local count\n    local line\n    local i\n    local j\n    local\
    \ bucket\n    local empty\n    local count\n    local line\n    local i\n    local\
    \ j\n    local bucket\n    local empty\n\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp77wsc_lh.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ / 2)\n    local empty=0\n    local count=0\n    local i=0\n    local j=0\n \
    \   local max=0\n    local min=0\n    local maxlen=0\n    local minlen=0\n   \
    \ local maxlen2=0\n    local minlen2=0\n    local maxlen3=0\n    local minlen3=0\n\
    \    local maxlen4=0\n    local minlen4=0\n    local maxlen5=0\n    local minlen5=0\n\
    \    local maxlen6=0\n    local minlen6=0\n    local maxlen7=0\n    local minlen7=0\n\
    \    local maxlen8=0\n    local minlen8=0\n    local maxlen9=0\n    local minlen9=0\n\
    \    local maxlen10=0\n    local minlen10=0\n    local maxlen11=0\n    local minlen11=0\n\
    \    local maxlen12=0\n    local minlen12=0\n    local maxlen13=0\n    local minlen13=0\n\
    \    local maxlen14=0\n    local minlen14=0\n    local maxlen15=0\n    local minlen15=0\n\
    \    local maxlen16=0\n    local minlen16=0\n    local maxlen17=0\n    local minlen17=0\n\
    \    local maxlen18=0\n    local minlen18=0\n    local maxlen19=0\n    local minlen19=0\n\
    \    local maxlen20=0\n    local minlen20=0\n    local maxlen21=0\n    local minlen21=0\n\
    \    local maxlen22=0\n    local minlen22=0\n    local maxlen23=0\n    local minlen23=0\n\
    \    local maxlen24=0\n    local minlen24=0\n    local maxlen25=0\n    local minlen25=0\n\
    \    local maxlen26=0\n    local minlen26=0\n    local maxlen27=0\n    local minlen27=0\n\
    \    local maxlen28=0\n    local minlen28=0\n    local maxlen29=0\n    local minlen29=0\n\
    \    local maxlen30=0\n    local minlen30=0\n    local maxlen31=0\n    local minlen31=0\n\
    \    local maxlen32=0\n    local minlen32=0\n    local maxlen33=0\n    local minlen33=0\n\
    \    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpln_ri8nq.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local bucket\n    local line\n    local length\n    local\
    \ lengths\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local i=0\n    local j=0\n    local max=0\n    local min=0\n    local max1=0\n\
    \    local min1=0\n    local max2=0\n    local min2=0\n    local max3=0\n    local\
    \ min3=0\n    local max4=0\n    local min4=0\n    local max5=0\n    local min5=0\n\
    \    local max6=0\n    local min6=0\n    local max7=0\n    local min7=0\n    local\
    \ max8=0\n    local min8=0\n    local max9=0\n    local min9=0\n    local max10=0\n\
    \    local min10=0\n    local max11=0\n    local min11=0\n    local max12=0\n\
    \    local min12=0\n    local max13=0\n    local min13=0\n    local max14=0\n\
    \    local min14=0\n    local max15=0\n    local min15=0\n    local max16=0\n\
    \    local min16=0\n    local max17=0\n    local min17=0\n    local max18=0\n\
    \    local min18=0\n    local max19=0\n    local min19=0\n    local max20=0\n\
    \    local min20=0\n    local max21=0\n    local min21=0\n    local max22=0\n\
    \    local min22=0\n    local max23=0\n    local min23=0\n    local max24=0\n\
    \    local min24=0\n    local max25=0\n    local min25=0\n    local max26=0\n\
    \    local min26=0\n    local max27=0\n    local min27=0\n    local max28=0\n\
    \    local min28=0\n    local max29=0\n    local min29=0\n    local max30=0\n\
    \    local min30=0\n    local max31=0\n    local min31=0\n    local max32=0\n\
    \    local min32=0\n    local max33=0\n    local min33=0\n    local max34=0\n\
    \    local min34=0\n    local max35=0\n    local min35=0\n    local max36=0\n\
    \    local min36=0\n    local max37=0\n    local min37=0\n    local max38=0\n\
    \    local min38=0\n    local max39=0\n    local min39=0\n    local max40=0\n\
    \    local \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline\n    local line\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local bucketcap\n    local\
    \ bucketmax\n    local bucketmaxcap\n    local bucketmaxcap2\n    local bucketmaxcap3\n\
    \    local bucketmaxcap4\n    local bucketmaxcap5\n    local bucketmaxcap6\n \
    \   local bucketmaxcap7\n    local bucketmaxcap8\n    local bucketmaxcap9\n  \
    \  local bucketmaxcap10\n    local bucketmaxcap11\n    local bucketmaxcap12\n\
    \    local bucketmaxcap13\n    local bucketmaxcap14\n    local bucketmaxcap15\n\
    \    local bucketmaxcap16\n    local bucketmaxcap17\n    local bucketmaxcap18\n\
    \    local bucketmaxcap19\n    local bucketmaxcap20\n    local bucketmaxcap21\n\
    \    local bucketmaxcap22\n    local bucketmaxcap23\n    local bucketmaxcap24\n\
    \    local bucketmaxcap25\n    local bucketmaxcap26\n    local bucketmaxcap27\n\
    \    local bucketmaxcap28\n    local bucketmaxcap29\n    local bucketmaxcap30\n\
    \    local bucketmaxcap31\n    local bucketmaxcap32\n    local bucketmaxcap33\n\
    \    local bucketmaxcap34\n    local bucketmaxcap35\n    local bucketmaxcap36\n\
    \    local bucketmaxcap37\n    local bucketmaxcap38\n    local bucketmaxcap39\n\
    \    local bucketmaxcap40\n    local bucketmaxcap41\n    local bucketmaxcap42\n\
    \    local bucketmaxcap43\n    local bucketmaxcap44\n    local bucketmaxcap45\n\
    \    local bucketmaxcap46\n    local bucketmaxcap47\n    local bucketmaxcap48\n\
    \    local bucketmaxcap49\n    local bucketmaxcap50\n    local bucketmaxcap51\n\
    \    local bucketmaxcap52\n    local bucketmaxcap53\n    local bucketmaxcap54\n\
    \    local bucketmaxcap55\n    local bucketmaxcap56\n    local bucketmaxcap57\n\
    \    local bucketmaxcap58\n    local bucketmaxcap59\n    local bucketmaxcap60\n\
    \    local bucketmaxcap61\n    local bucketmaxcap62\n    local bucketmaxcap63\n\
    \    local bucketmaxcap64\n    local bucket\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local row\n    local col\n    local bucket\n\
    \    local empty\n    local empty_capacity\n    local empty_capacity_line\n  \
    \  local empty_capacity_col\n    local empty_capacity_bucket\n    local empty_capacity_bucket_line\n\
    \    local empty_capacity_bucket_col\n    local empty_capacity_bucket_row\n  \
    \  local empty_capacity_bucket_row_col\n    local empty_capacity_bucket_row_col_line\n\
    \    local empty_capacity_bucket_row_col_line_bucket\n    local empty_capacity_bucket_row_col_line_bucket_line\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col\n    local empty_capacity_bucket_row_col_line_bucket_col_line\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket\n    local\
    \ empty_capacity_bucket_row_col_line_bucket_col_line_bucket_line\n    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_line\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_line\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_col\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_col_line\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_line\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_col\n\
    \    local empty_capacity_bucket_row_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket_col_line_bucket\n\
    \    local \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local row\n    local col\n    local well\n    local bucket\n    local empty\n\
    \    local empty_capacity\n    local empty_capacity_row\n    local empty_capacity_col\n\
    \    local empty_capacity_well\n    local empty_capacity_bucket\n    local empty_capacity_buckets\n\
    \    local empty_capacity_buckets_row\n    local empty_capacity_buckets_col\n\
    \    local empty_capacity_buckets_well\n    local empty_capacity_buckets_wells\n\
    \    local empty_capacity_buckets_wells_row\n    local empty_capacity_buckets_wells_col\n\
    \    local empty_capacity_buckets_wells_well\n    local empty_capacity_buckets_wells_wells\n\
    \    local empty_capacity_buckets_wells_wells_row\n    local empty_capacity_buckets_wells_wells_col\n\
    \    local empty_capacity_buckets_wells_wells_well\n    local empty_capacity_buckets_wells_wells_wells\n\
    \    local empty_capacity_buckets_wells_wells_wells_row\n    local empty_capacity_buckets_wells_wells_wells_col\n\
    \    local empty_capacity_buckets_wells_wells_wells_well\n    local empty_capacity_buckets_wells_wells_wells_wells\n\
    \    local empty_capacity_buckets_wells_wells_wells_wells_row\n    local empty_capacity_buckets_wells_wells_wells_wells_col\n\
    \    local empty_capacity_buckets_wells_wells_wells_wells_well\n    local empty_capacity_buckets_wells_wells_wells_wells_wells\n\
    \    local empty_capacity_buckets_wells_wells_wells_wells_wells_row\n    local\
    \ empty_capacity_buckets_wells_wells_wells_wells_wells_col\n    local empty_capacity_buckets_wells_wells_wells_wells_wells_well\n\
    \    local empty_capacity_buckets_wells_wells_wells_wells_wells_wells\n    local\
    \ empty_capacity_buckets_wells_wells_wells_wells_wells_wells_row\n    local empty_capacity_buckets_wells_wells_wells_wells_wells_wells_wells_col\n\
    \    local empty_capacity_buckets_wells_wells_wells_wells_\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline\n    local maxcapacity\n    local maxcount\n\
    \    local line\n    local linecount\n    local linecapacity\n    local linemax\n\
    \    local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n    local linemaxcapacity\n    local linemaxcount\n \
    \   local linemaxcapacity\n    local linemaxcount\n    local linemaxcapacity\n\
    \    local linemaxcount\n\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local buckets=()\n    local wells=()\n    local row\n    local col\n    local\
    \ well\n    local bucket\n    local empty\n    \n    while read -r line; do\n\
    \        row=$(echo \"$line\" | awk '{print $1}')\n        col=$(echo \"$line\"\
    \ | awk '{print $2}')\n        well=$(echo \"$line\" | awk '{print $3}')\n   \
    \     bucket=$(echo \"$line\" | awk '{print $4}')\n        empty=$(echo \"$line\"\
    \ | awk '{print $5}')\n        \n        if [ \"$empty\" == \"1\" ]; then\n  \
    \          (( buckets[$row][$col] ))\n        else\n            (( buckets[$row][$col]\
    \ ))\n            (( buckets[$row+1][$col] ))\n            (( buckets[$row][$col+1]\
    \ ))\n            (( buckets[$row+1][$col+1] ))\n        fi\n    done <<< \"$lines\"\
    \n    \n    for (( row=0; row<${#buckets[@]}; row++ )); do\n        for (( col=0;\
    \ col<${#buckets[$row]}; col++ )); do\n            (( buckets[$row][$col] ))\n\
    \        done\n    done\n    \n    for (( row=0; row<${#buckets[@]}; row++ ));\
    \ do\n        for (( col=0; col<${#buckets[$row]}; col++ )); do\n            ((\
    \ buckets[$row][$col] ))\n        done\n    done\n    \n    for (( row=0; row<${#buckets[@]};\
    \ row++ )); do\n        for (( col=0; col<${#buckets[$row]}; col++ )); do\n  \
    \          (( buckets[$row][$col] ))\n        done\n    done\n    \n    for ((\
    \ row=0; row<${#buckets[@]}; row++ )); do\n        for (( col=0; col<${#buckets[$row]};\
    \ col++ )); do\n            (( buckets[$row][$col] ))\n        done\n    done\n\
    \    \n    for (( row=0; row<${#buckets[@]}; row++ )); do\n        for (( col=0;\
    \ col<${#buckets[$row]}; \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp03anj70q.sh: line 80: unexpected EOF while looking for matching
    `)''

    /tmp/tmp03anj70q.sh: line 97: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local row\n    local col\n    local bucket\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    \n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxrow=0\n    local maxcol=0\n    local maxval=0\n\
    \    local maxrowval=0\n    local maxcolval=0\n    local maxval2=0\n    local\
    \ maxrowval2=0\n    local maxcolval2=0\n    local maxval3=0\n    local maxrowval3=0\n\
    \    local maxcolval3=0\n    local maxval4=0\n    local maxrowval4=0\n    local\
    \ maxcolval4=0\n    local maxval5=0\n    local maxrowval5=0\n    local maxcolval5=0\n\
    \    local maxval6=0\n    local maxrowval6=0\n    local maxcolval6=0\n    local\
    \ maxval7=0\n    local maxrowval7=0\n    local maxcolval7=0\n    local maxval8=0\n\
    \    local maxrowval8=0\n    local maxcolval8=0\n    local maxval9=0\n    local\
    \ maxrowval9=0\n    local maxcolval9=0\n    local maxval10=0\n    local maxrowval10=0\n\
    \    local maxcolval10=0\n    local maxval11=0\n    local maxrowval11=0\n    local\
    \ maxcolval11=0\n    local maxval12=0\n    local maxrowval12=0\n    local maxcolval12=0\n\
    \    local maxval13=0\n    local maxrowval13=0\n    local maxcolval13=0\n    local\
    \ maxval14=0\n    local maxrowval14=0\n    local maxcolval14=0\n    local maxval15=0\n\
    \    local maxrowval15=0\n    local maxcolval15=0\n    local maxval16=0\n    local\
    \ maxrowval16=0\n    local maxcolval16=0\n    local maxval17=0\n    local maxrowval17=0\n\
    \    local maxcolval17=0\n    local maxval18=0\n    local maxrowval18=0\n    local\
    \ maxcolval18=0\n    local maxval19=0\n    local maxrowval19=0\n    local maxcolval19=0\n\
    \    local maxval20=0\n    local maxrowval20=0\n    local maxcolval20=0\n    local\
    \ maxval21=0\n    local maxrowval21=0\n    local maxcolval21\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ / 2)\n    local count=0\n    local max=0\n    local min=0\n    local maxes=()\n\
    \    local mins=()\n    local min_index=0\n    local max_index=0\n    local min_bucket=0\n\
    \    local max_bucket=0\n    local min_row=0\n    local max_row=0\n    local min_col=0\n\
    \    local max_col=0\n    local min_row_index=0\n    local max_row_index=0\n \
    \   local min_col_index=0\n    local max_col_index=0\n    local min_bucket_index=0\n\
    \    local max_bucket_index=0\n    local min_bucket_indexes=()\n    local max_bucket_indexes=()\n\
    \    local min_bucket_indexes_sorted=()\n    local max_bucket_indexes_sorted=()\n\
    \    local min_bucket_indexes_sorted_reversed=()\n    local max_bucket_indexes_sorted_reversed=()\n\
    \    local min_bucket_indexes_sorted_reversed_reversed=()\n    local max_bucket_indexes_sorted_reversed_reversed=()\n\
    \    local min_bucket_indexes_sorted_reversed_reversed_reversed=()\n    local\
    \ max_bucket_indexes_sorted_reversed_reversed_reversed=()\n    local min_bucket_indexes_sorted_reversed_reversed_reversed_reversed=()\n\
    \    local max_bucket_indexes_sorted_reversed_reversed_reversed_reversed=()\n\
    \    local min_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local max_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local min_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local max_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local min_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local max_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local min_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local max_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local min_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local max_bucket_indexes_sorted_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp66hs4fa1.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local bucket\n    local well\n \
    \   \n    for ((i=0; i<${#lines[@]}; i++)); do\n        line=${lines[$i]}\n  \
    \      bucket=${line//0/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n\
    \        bucket=${bucket//1/}\n        bucket=${bucket//1/}\n        bucket=${bucket//1/\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzjuamk0l.sh: line 111: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local buckets=()\n    local bucket\n    local i\n    local j\n    local well\n\
    \    local bucket\n    local bucket_count\n    local bucket_capacity\n    local\
    \ bucket_capacity_sum\n    local bucket_capacity_diff\n    local bucket_capacity_diff_squared\n\
    \    local bucket_capacity_diff_squared_squared\n    local bucket_capacity_diff_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared\n    local bucket_capacity_diff_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    \    local bucket_capacity_diff_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i\n    local j\n    local bucket\n    local buckets\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local buckets\n    \n}\n\ncandidate() {\n    max_fill \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local rows=$1\n    local capacity=$2\n    local result=0\n \
    \   local row\n    local col\n    local bucket\n    local empty\n    local empty_capacity\n\
    \    local empty_capacity_row\n    local empty_capacity_col\n    local empty_capacity_bucket\n\
    \    local empty_capacity_empty\n    local empty_capacity_empty_capacity\n   \
    \ local empty_capacity_empty_capacity_row\n    local empty_capacity_empty_capacity_col\n\
    \    local empty_capacity_empty_capacity_bucket\n    local empty_capacity_empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity_empty_capacity\n    local empty_capacity_empty_capacity_empty_capacity_row\n\
    \    local empty_capacity_empty_capacity_empty_capacity_col\n    local empty_capacity_empty_capacity_empty_capacity_bucket\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty\n    local empty_capacity_empty_capacity_empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_row\n \
    \   local empty_capacity_empty_capacity_empty_capacity_empty_capacity_col\n  \
    \  local empty_capacity_empty_capacity_empty_capacity_empty_capacity_bucket\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_row\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_col\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_bucket\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_row\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_col\n\
    \    local empty\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxrow=0\n    local maxcol=0\n    local maxval=0\n\
    \    local maxrowval=0\n    local maxcolval=0\n    local maxval2=0\n    local\
    \ maxrowval2=0\n    local maxcolval2=0\n    local maxval3=0\n    local maxrowval3=0\n\
    \    local maxcolval3=0\n    local maxval4=0\n    local maxrowval4=0\n    local\
    \ maxcolval4=0\n    local maxval5=0\n    local maxrowval5=0\n    local maxcolval5=0\n\
    \    local maxval6=0\n    local maxrowval6=0\n    local maxcolval6=0\n    local\
    \ maxval7=0\n    local maxrowval7=0\n    local maxcolval7=0\n    local maxval8=0\n\
    \    local maxrowval8=0\n    local maxcolval8=0\n    local maxval9=0\n    local\
    \ maxrowval9=0\n    local maxcolval9=0\n    local maxval10=0\n    local maxrowval10=0\n\
    \    local maxcolval10=0\n    local maxval11=0\n    local maxrowval11=0\n    local\
    \ maxcolval11=0\n    local maxval12=0\n    local maxrowval12=0\n    local maxcolval12=0\n\
    \    local maxval13=0\n    local maxrowval13=0\n    local maxcolval13=0\n    local\
    \ maxval14=0\n    local maxrowval14=0\n    local maxcolval14=0\n    local maxval15=0\n\
    \    local maxrowval15=0\n    local maxcolval15=0\n    local maxval16=0\n    local\
    \ maxrowval16=0\n    local maxcolval16=0\n    local maxval17=0\n    local maxrowval17=0\n\
    \    local maxcolval17=0\n    local maxval18=0\n    local maxrowval18=0\n    local\
    \ maxcolval18=0\n    local maxval19=0\n    local maxrowval19=0\n    local maxcolval19=0\n\
    \    local maxval20=0\n    local maxrowval20=0\n    local maxcolval20=0\n    local\
    \ maxval21=0\n    local maxrowval21=0\n    local maxcolval21\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ / 2)\n    local empty=0\n    local empty2=0\n    local empty3=0\n    local empty4=0\n\
    \    local empty5=0\n    local empty6=0\n    local empty7=0\n    local empty8=0\n\
    \    local empty9=0\n    local empty10=0\n    local empty11=0\n    local empty12=0\n\
    \    local empty13=0\n    local empty14=0\n    local empty15=0\n    local empty16=0\n\
    \    local empty17=0\n    local empty18=0\n    local empty19=0\n    local empty20=0\n\
    \    local empty21=0\n    local empty22=0\n    local empty23=0\n    local empty24=0\n\
    \    local empty25=0\n    local empty26=0\n    local empty27=0\n    local empty28=0\n\
    \    local empty29=0\n    local empty30=0\n    local empty31=0\n    local empty32=0\n\
    \    local empty33=0\n    local empty34=0\n    local empty35=0\n    local empty36=0\n\
    \    local empty37=0\n    local empty38=0\n    local empty39=0\n    local empty40=0\n\
    \    local empty41=0\n    local empty42=0\n    local empty43=0\n    local empty44=0\n\
    \    local empty45=0\n    local empty46=0\n    local empty47=0\n    local empty48=0\n\
    \    local empty49=0\n    local empty50=0\n    local empty51=0\n    local empty52=0\n\
    \    local empty53=0\n    local empty54=0\n    local empty55=0\n    local empty56=0\n\
    \    local empty57=0\n    local empty58=0\n    local empty59=0\n    local empty60=0\n\
    \    local empty61=0\n    local empty62=0\n    local empty63=0\n    local empty64=0\n\
    \    local empty65=0\n    local empty66=0\n    local empty67=0\n    local empty68=0\n\
    \    local empty69=0\n    local empty70=0\n    local empty71=0\n    local empty72=0\n\
    \    local empty73=0\n    local empty74=0\n    local empty75=0\n    local empty76=0\n\
    \    local empty77=0\n    local empty78=0\n    local empty79=0\n    local empty80=0\n\
    \    local empty81=0\n    local empty82=0\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl854hnst.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxCount=0\n    local maxLine=0\n    local maxLineCount=0\n\
    \    local maxLineLength=0\n    local maxLineLengthCount=0\n    local maxLineLengthCount2=0\n\
    \    local maxLineLengthCount3=0\n    local maxLineLengthCount4=0\n    local maxLineLengthCount5=0\n\
    \    local maxLineLengthCount6=0\n    local maxLineLengthCount7=0\n    local maxLineLengthCount8=0\n\
    \    local maxLineLengthCount9=0\n    local maxLineLengthCount10=0\n    local\
    \ maxLineLengthCount11=0\n    local maxLineLengthCount12=0\n    local maxLineLengthCount13=0\n\
    \    local maxLineLengthCount14=0\n    local maxLineLengthCount15=0\n    local\
    \ maxLineLengthCount16=0\n    local maxLineLengthCount17=0\n    local maxLineLengthCount18=0\n\
    \    local maxLineLengthCount19=0\n    local maxLineLengthCount20=0\n    local\
    \ maxLineLengthCount21=0\n    local maxLineLengthCount22=0\n    local maxLineLengthCount23=0\n\
    \    local maxLineLengthCount24=0\n    local maxLineLengthCount25=0\n    local\
    \ maxLineLengthCount26=0\n    local maxLineLengthCount27=0\n    local maxLineLengthCount28=0\n\
    \    local maxLineLengthCount29=0\n    local maxLineLengthCount30=0\n    local\
    \ maxLineLengthCount31=0\n    local maxLineLengthCount32=0\n    local maxLineLengthCount33=0\n\
    \    local maxLineLengthCount34=0\n    local maxLineLengthCount35=0\n    local\
    \ maxLineLengthCount36=0\n    local maxLineLengthCount37=0\n    local maxLineLengthCount38=0\n\
    \    local maxLineLengthCount39=0\n    local maxLineLengthCount40=0\n    local\
    \ maxLineLengthCount41=0\n    local maxLineLengthCount42=0\n    local maxLineLengthCount43=0\n\
    \    local maxLineLengthCount44=0\n    local maxLineLengthCount45=0\n    local\
    \ maxLineLengthCount46=0\n    local maxLineLengthCount47=0\n    local maxLineLengthCount48=0\n\
    \    local maxLineLengthCount49=0\n    local maxLineLengthCount50=0\n    local\
    \ maxLineLengthCount51=0\n    local maxLineLengthCount\n}\n\ncandidate() {\n \
    \   max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local max=0\n    local maxCount=0\n    local maxCountLine=0\n\
    \    local maxCountLineIndex=0\n    local maxCountLineIndex2=0\n    local maxCountLineIndex3=0\n\
    \    local maxCountLineIndex4=0\n    local maxCountLineIndex5=0\n    local maxCountLineIndex6=0\n\
    \    local maxCountLineIndex7=0\n    local maxCountLineIndex8=0\n    local maxCountLineIndex9=0\n\
    \    local maxCountLineIndex10=0\n    local maxCountLineIndex11=0\n    local maxCountLineIndex12=0\n\
    \    local maxCountLineIndex13=0\n    local maxCountLineIndex14=0\n    local maxCountLineIndex15=0\n\
    \    local maxCountLineIndex16=0\n    local maxCountLineIndex17=0\n    local maxCountLineIndex18=0\n\
    \    local maxCountLineIndex19=0\n    local maxCountLineIndex20=0\n    local maxCountLineIndex21=0\n\
    \    local maxCountLineIndex22=0\n    local maxCountLineIndex23=0\n    local maxCountLineIndex24=0\n\
    \    local maxCountLineIndex25=0\n    local maxCountLineIndex26=0\n    local maxCountLineIndex27=0\n\
    \    local maxCountLineIndex28=0\n    local maxCountLineIndex29=0\n    local maxCountLineIndex30=0\n\
    \    local maxCountLineIndex31=0\n    local maxCountLineIndex32=0\n    local maxCountLineIndex33=0\n\
    \    local maxCountLineIndex34=0\n    local maxCountLineIndex35=0\n    local maxCountLineIndex36=0\n\
    \    local maxCountLineIndex37=0\n    local maxCountLineIndex38=0\n    local maxCountLineIndex39=0\n\
    \    local maxCountLineIndex40=0\n    local maxCountLineIndex41=0\n    local maxCountLineIndex42=0\n\
    \    local maxCountLineIndex43=0\n    local maxCountLineIndex44=0\n    local maxCountLineIndex45=0\n\
    \    local maxCountLineIndex46=0\n    local maxCountLineIndex47=0\n    local maxCountLineIndex48=0\n\
    \    local maxCountLineIndex49=0\n    local maxCountLineIndex50=0\n    local maxCountLineIndex51=0\n\
    \    local maxCountLineIndex52=0\n    local maxCount\n}\n\ncandidate() {\n   \
    \ max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0\
    \ 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local tmp\n    \n    while read -r line; do\n        (( count++ ))\n    \
    \    bucket=()\n        for (( i=0; i<${#line}; i++ )); do\n            (( j=${line[i]}-1\
    \ ))\n            bucket[$j]=$bucket[$j]+1\n        done\n        for (( i=0;\
    \ i<${#bucket[@]}; i++ )); do\n            (( tmp=${bucket[i]} ))\n          \
    \  if (( tmp > capacity )); then\n                bucket[i]=$capacity\n      \
    \      else\n                bucket[i]=$tmp\n            fi\n        done\n  \
    \      buckets=(\"${buckets[@]}\")\n    done <<< \"$lines\"\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk8jlkt1i.sh: line 41: ((: j=0 0 1 0\n0 1 0 0\n1 1 1 1-1 : syntax
    error in expression (error token is "0 1 0\n0 1 0 0\n1 1 1 1-1 ")

    /tmp/tmpk8jlkt1i.sh: line 45: ((: tmp=[0]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1
    : syntax error: operand expected (error token is "[0]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1[-1]+1
    ")

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local bucket\n    local i\n    local j\n    local len\n\
    \    local max\n    local maxlen\n    local maxlen2\n    local maxlen3\n    local\
    \ maxlen4\n    local maxlen5\n    local maxlen6\n    local maxlen7\n    local\
    \ maxlen8\n    local maxlen9\n    local maxlen10\n    local maxlen11\n    local\
    \ maxlen12\n    local maxlen13\n    local maxlen14\n    local maxlen15\n    local\
    \ maxlen16\n    local maxlen17\n    local maxlen18\n    local maxlen19\n    local\
    \ maxlen20\n    local maxlen21\n    local maxlen22\n    local maxlen23\n    local\
    \ maxlen24\n    local maxlen25\n    local maxlen26\n    local maxlen27\n    local\
    \ maxlen28\n    local maxlen29\n    local maxlen30\n    local maxlen31\n    local\
    \ maxlen32\n    local maxlen33\n    local maxlen34\n    local maxlen35\n    local\
    \ maxlen36\n    local maxlen37\n    local maxlen38\n    local maxlen39\n    local\
    \ maxlen40\n    local maxlen41\n    local maxlen42\n    local maxlen43\n    local\
    \ maxlen44\n    local maxlen45\n    local maxlen46\n    local maxlen47\n    local\
    \ maxlen48\n    local maxlen49\n    local maxlen50\n    local maxlen51\n    local\
    \ maxlen52\n    local maxlen53\n    local maxlen54\n    local maxlen55\n    local\
    \ maxlen56\n    local maxlen57\n    local maxlen58\n    local maxlen59\n    local\
    \ maxlen60\n    local maxlen61\n    local maxlen62\n    local maxlen63\n    local\
    \ maxlen64\n    local maxlen65\n    local maxlen66\n    local maxlen67\n    local\
    \ maxlen68\n    local maxlen69\n    local maxlen70\n    local maxlen71\n    local\
    \ maxlen72\n    local maxlen73\n    local maxlen74\n    local maxlen75\n    local\
    \ maxlen76\n    local maxlen77\n    local maxlen78\n    \n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ - 1)\n    local bucket\n    local i\n    local j\n    local count\n    local\
    \ max\n    local min\n    local maxCount\n    local minCount\n    local maxBucket\n\
    \    local minBucket\n    local maxBucketCount\n    local minBucketCount\n   \
    \ local maxBucketVal\n    local minBucketVal\n    local maxBucketValCount\n  \
    \  local minBucketValCount\n    local maxVal\n    local minVal\n    local maxValCount\n\
    \    local minValCount\n    local maxValVal\n    local minValVal\n    local maxValValCount\n\
    \    local minValValCount\n    local maxValValVal\n    local minValValVal\n  \
    \  local maxValValValCount\n    local minValValValCount\n    local maxValValValVal\n\
    \    local minValValValVal\n    local maxValValValValCount\n    local minValValValValCount\n\
    \    local maxValValValValVal\n    local minValValValValCount\n    local maxValValValValVal\n\
    \    local minValValValValCount\n    local maxValValValValVal\n    local minValValValValCount\n\
    \    local maxValValValValVal\n    local minValValValValCount\n    local maxValValValValVal\n\
    \    local minValValValValCount\n    local maxValValValValVal\n    local minValValValValCount\n\
    \    local maxValValValValVal\n    local minValValValValCount\n    local maxValValValValVal\n\
    \    local minValValValValCount\n    local maxValValValValVal\n    local minValValValValCount\n\
    \    local maxValValValValVal\n    local minValValValValCount\n    local maxValValValValVal\n\
    \    local minValValValValCount\n    local maxValValValValVal\n    local minValValValValCount\n\
    \    local maxValValValValVal\n    local minValValValValCount\n    local maxValValValValVal\n\
    \    local minValValValValCount\n    local maxValValValValVal\n    local minValValValValCount\n\
    \    local maxValValValValVal\n    local minValValValValCount\n    local maxValValValValVal\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbgoqi8s5.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ - 1)\n    local bucket\n    local line\n    local count\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local \n}\n\ncandidate() {\n \
    \   max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9zaalr2u.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline\n    local maxcapacity\n    local maxcapacity_line\n\
    \    local maxcapacity_line_count\n    local maxcapacity_line_length\n    local\
    \ maxcapacity_line_length_count\n    local maxcapacity_line_length_length\n  \
    \  local maxcapacity_line_length_length_length\n    local maxcapacity_line_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length\n    local maxcapacity_line_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_count\n    local\
    \ maxcapacity_line_length_length_length_length_length_length\n    local maxcapacity_line_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_length_length_length_count\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\n\
    \    local maxcapacity_line_length_length_length_length_length_length_length_length_length_\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline\n    local line\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    \n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local row\n    local col\n    local bucket\n    local x\n    local y\n   \
    \ local z\n    local w\n    local l\n    local h\n    local i\n    local j\n \
    \   local k\n    local l\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local h\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local max=0\n    local maxCount=0\n    local maxCountLine=0\n\
    \    local maxCountLines=0\n    local maxCountLinesLength=0\n    local maxCountLinesLengths=()\n\
    \    local maxCountLinesLengthsLength=0\n    local maxCountLinesLengthsLengths=()\n\
    \    local maxCountLinesLengthsLengths=()\n    local maxCountLinesLengthsLengthsLength=0\n\
    \    local maxCountLinesLengthsLengthsLengths=()\n    local maxCountLinesLengthsLengthsLengthsLength=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengths=()\n    local maxCountLinesLengthsLengthsLengthsLengthsLength=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengths=()\n    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLength=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengths=()\n    local\
    \ maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthsLengths=()\n    local\
    \ maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengths=()\n \
    \   local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengths=()\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengths=()\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengths=()\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengths=()\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengths=()\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengths=()\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ - 1)\n    local count=0\n    local bucket\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    \n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmper2u3sm2.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local well\n    local bucket\n    local\
    \ count\n    local i\n    local j\n    local bucket\n    local well\n    local\
    \ buckets\n    local wells\n    local well\n    local bucket\n    local count\n\
    \    local i\n    local j\n    local bucket\n    local well\n    local buckets\n\
    \    local wells\n    local well\n    local bucket\n    local count\n    local\
    \ i\n    local j\n    local bucket\n    local well\n    local buckets\n    local\
    \ wells\n    local well\n    local bucket\n    local count\n    local i\n    local\
    \ j\n    local bucket\n    local well\n    local buckets\n    local wells\n  \
    \  local well\n    local bucket\n    local count\n    local i\n    local j\n \
    \   local bucket\n    local well\n    local buckets\n    local wells\n    local\
    \ well\n    local bucket\n    local count\n    local i\n    local j\n    local\
    \ bucket\n    local well\n    local buckets\n    local wells\n    local well\n\
    \    local bucket\n    local count\n    local i\n    local j\n    local bucket\n\
    \    local well\n    local buckets\n    local wells\n    local well\n    local\
    \ bucket\n    local count\n    local i\n    local j\n    local bucket\n    local\
    \ well\n    local buckets\n    local wells\n    local well\n    local bucket\n\
    \    local count\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local well\n    local bucket\n    local\
    \ count\n    local i\n    local j\n    local bucket\n    local well\n    local\
    \ buckets\n    local wells\n    local well\n    local bucket\n    local count\n\
    \    local i\n    local j\n    local bucket\n    local well\n    local buckets\n\
    \    local wells\n    local well\n    local bucket\n    local count\n    local\
    \ i\n    local j\n    local bucket\n    local well\n    local buckets\n    local\
    \ wells\n    local well\n    local bucket\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ / 2)\n    local empty=0\n    local empty_capacity=0\n    local empty_buckets=0\n\
    \    local empty_lines=0\n    local empty_wells=0\n    local empty_wells_capacity=0\n\
    \    local empty_wells_buckets=0\n    local empty_wells_lines=0\n    local empty_wells_wells=0\n\
    \    local empty_wells_wells_capacity=0\n    local empty_wells_wells_buckets=0\n\
    \    local empty_wells_wells_lines=0\n    local empty_wells_wells_wells=0\n  \
    \  local empty_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_bucket\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppqs9phte.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local line\n    local\
    \ buckets\n    local i\n    local j\n    local count\n    local max\n    local\
    \ min\n    local maxBucket\n    local minBucket\n    local maxBucketVal\n    local\
    \ minBucketVal\n    local maxBucketValCount\n    local minBucketValCount\n   \
    \ local maxBucketValCount2\n    local minBucketValCount2\n    local maxBucketValCount3\n\
    \    local minBucketValCount3\n    local maxBucketValCount4\n    local minBucketValCount4\n\
    \    local maxBucketValCount5\n    local minBucketValCount5\n    local maxBucketValCount6\n\
    \    local minBucketValCount6\n    local maxBucketValCount7\n    local minBucketValCount7\n\
    \    local maxBucketValCount8\n    local minBucketValCount8\n    local maxBucketValCount9\n\
    \    local minBucketValCount9\n    local maxBucketValCount10\n    local minBucketValCount10\n\
    \    local maxBucketValCount11\n    local minBucketValCount11\n    local maxBucketValCount12\n\
    \    local minBucketValCount12\n    local maxBucketValCount13\n    local minBucketValCount13\n\
    \    local maxBucketValCount14\n    local minBucketValCount14\n    local maxBucketValCount15\n\
    \    local minBucketValCount15\n    local maxBucketValCount16\n    local minBucketValCount16\n\
    \    local maxBucketValCount17\n    local minBucketValCount17\n    local maxBucketValCount18\n\
    \    local minBucketValCount18\n    local maxBucketValCount19\n    local minBucketValCount19\n\
    \    local maxBucketValCount20\n    local minBucketValCount20\n    local maxBucketValCount21\n\
    \    local minBucketValCount21\n    local maxBucketValCount22\n    local minBucketValCount22\n\
    \    local maxBucketValCount23\n    local minBucketValCount23\n    local maxBucketValCount24\n\
    \    local minBucketValCount24\n    local maxBucketValCount25\n    local minBucketValCount25\n\
    \    local maxBucketValCount26\n    local minBucketValCount26\n    local maxBucketValCount27\n\
    \    local minBucketValCount27\n    local maxBucketValCount28\n    local minBucketValCount28\n\
    \    local max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local i j\n    local bucket\n    \n  \
    \  while read -r line; do\n        (( i++ ))\n        (( j++ ))\n        bucket=((\
    \ lines[i] * capacity + lines[j] ))\n        buckets[${#buckets[*]}]=$bucket\n\
    \    done < <(echo \"$lines\" | tr \" \" \"\\n\")\n    \n    while (( ${#buckets[*]}\
    \ > 0 )); do\n        (( count++ ))\n        (( buckets[${#buckets[*]} - 1] =\
    \ 0 ))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    max_fill \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzjpls10o.sh: line 38: syntax error near unexpected token `(''

    /tmp/tmpzjpls10o.sh: line 38: `        bucket=(( lines[i] * capacity + lines[j]
    ))''

    /tmp/tmpzjpls10o.sh: line 40: syntax error near unexpected token `done''

    /tmp/tmpzjpls10o.sh: line 40: `    done < <(echo "$lines" | tr " " "\n")''

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ / 2)\n    local empty=0\n    local count=0\n    local bucket\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy567k47a.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local k\n  \
    \  local bucket\n    local buckets\n    local line\n    local length\n    local\
    \ lengths\n    local max\n    local maxs\n    local min\n    local mins\n    local\
    \ n\n    local nmax\n    local nmin\n    local nmins\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    \n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local max=0\n    local min=0\n    local maxlen=0\n   \
    \ local minlen=0\n    local maxlen2=0\n    local minlen2=0\n    local maxlen3=0\n\
    \    local minlen3=0\n    local maxlen4=0\n    local minlen4=0\n    local maxlen5=0\n\
    \    local minlen5=0\n    local maxlen6=0\n    local minlen6=0\n    local maxlen7=0\n\
    \    local minlen7=0\n    local maxlen8=0\n    local minlen8=0\n    local maxlen9=0\n\
    \    local minlen9=0\n    local maxlen10=0\n    local minlen10=0\n    local maxlen11=0\n\
    \    local minlen11=0\n    local maxlen12=0\n    local minlen12=0\n    local maxlen13=0\n\
    \    local minlen13=0\n    local maxlen14=0\n    local minlen14=0\n    local maxlen15=0\n\
    \    local minlen15=0\n    local maxlen16=0\n    local minlen16=0\n    local maxlen17=0\n\
    \    local minlen17=0\n    local maxlen18=0\n    local minlen18=0\n    local maxlen19=0\n\
    \    local minlen19=0\n    local maxlen20=0\n    local minlen20=0\n    local maxlen21=0\n\
    \    local minlen21=0\n    local maxlen22=0\n    local minlen22=0\n    local maxlen23=0\n\
    \    local minlen23=0\n    local maxlen24=0\n    local minlen24=0\n    local maxlen25=0\n\
    \    local minlen25=0\n    local maxlen26=0\n    local minlen26=0\n    local maxlen27=0\n\
    \    local minlen27=0\n    local maxlen28=0\n    local minlen28=0\n    local maxlen29=0\n\
    \    local minlen29=0\n    local maxlen30=0\n    local minlen30=0\n    local maxlen31=0\n\
    \    local minlen31=0\n    local maxlen32=0\n    local minlen32=0\n    local maxlen33=0\n\
    \    local minlen33=0\n    local maxlen34=0\n    local minlen34=0\n    local maxlen35\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local buckets=()\n    local bucket_count=0\n    local bucket_capacity=0\n\
    \    local bucket_min=0\n    local bucket_max=0\n    local bucket_sum=0\n    local\
    \ bucket_sum_capacity=0\n    local bucket_sum_min=0\n    local bucket_sum_max=0\n\
    \    local bucket_sum_min_index=0\n    local bucket_sum_max_index=0\n    local\
    \ bucket_min_index=0\n    local bucket_max_index=0\n    local bucket_min_capacity=0\n\
    \    local bucket_max_capacity=0\n    local bucket_min_capacity_index=0\n    local\
    \ bucket_max_capacity_index=0\n    local bucket_min_capacity_min=0\n    local\
    \ bucket_max_capacity_max=0\n    local bucket_min_capacity_min_index=0\n    local\
    \ bucket_max_capacity_max_index=0\n    local bucket_min_capacity_min_index=0\n\
    \    local bucket_max_capacity_max_index=0\n    local bucket_min_capacity_min_max=0\n\
    \    local bucket_max_capacity_min_max=0\n    local bucket_min_capacity_min_max_index=0\n\
    \    local bucket_max_capacity_min_max_index=0\n    local bucket_min_capacity_min_max_index=0\n\
    \    local bucket_max_capacity_min_max_index=0\n    local bucket_min_capacity_min_max_min=0\n\
    \    local bucket_max_capacity_min_max_min=0\n    local bucket_min_capacity_min_max_min_index=0\n\
    \    local bucket_max_capacity_min_max_min_index=0\n    local bucket_min_capacity_min_max_min_max=0\n\
    \    local bucket_max_capacity_min_max_min_max=0\n    local bucket_min_capacity_min_max_min_max_index=0\n\
    \    local bucket_max_capacity_min_max_min_max_index=0\n    local bucket_min_capacity_min_max_min_max_min=0\n\
    \    local bucket_max_capacity_min_max_min_max_min=0\n    local bucket_min_capacity_min_max_min_max_min_index=0\n\
    \    local bucket_max_capacity_min_max_min_max_min_index=0\n    local bucket_min_capacity_min_max_min_max_min_max=0\n\
    \    local bucket_max_capacity_min_max_min_max_min_max=0\n    local bucket_min_capacity_min_max_min_max_min_max_index=0\n\
    \    local bucket_max_capacity_min_max_min_max_min_max_index=0\n    local bucket_min_capacity_min_max_min_max_min_max_min=0\n\
    \    local bucket_max_capacity_min_max_min_max_min_max_min=0\n    local bucket_min_capacity_min_max_min_max_min_max_min_index=0\n\
    \    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local min=0\n    local buckets=()\n    local i=0\n    local\
    \ j=0\n    local bucket\n    local tmp\n    local tmp2\n    local tmp3\n    local\
    \ tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local\
    \ tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n \
    \   local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n    local\
    \ tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n\
    \    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n    local\
    \ tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n\
    \    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n    local\
    \ tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n\
    \    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n    local\
    \ tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n\
    \    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n    local\
    \ tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n\
    \    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n    local\
    \ tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n\
    \    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n    local\
    \ tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n\
    \    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n    local\
    \ tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n\
    \    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n    local\
    \ tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local \n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local x\n    local y\n    local bucket\n    local buckets\n\
    \    local buckets_len\n    local bucket_len\n    local bucket_cap\n    local\
    \ bucket_x\n    local bucket_y\n    local bucket_count\n    local bucket_x\n \
    \   local bucket_y\n    local bucket_count\n    local bucket_x\n    local bucket_y\n\
    \    local bucket_count\n    local bucket_x\n    local bucket_y\n    local bucket_count\n\
    \    local bucket_x\n    local bucket_y\n    local bucket_count\n    local bucket_x\n\
    \    local bucket_y\n    local bucket_count\n    local bucket_x\n    local bucket_y\n\
    \    local bucket_count\n    local bucket_x\n    local bucket_y\n    local bucket_count\n\
    \    local bucket_x\n    local bucket_y\n    local bucket_count\n    local bucket_x\n\
    \    local bucket_y\n    local bucket_count\n    local bucket_x\n    local bucket_y\n\
    \    local bucket_count\n    local bucket_x\n    local bucket_y\n    local bucket_count\n\
    \    local bucket_x\n    local bucket_y\n    local bucket_count\n    local bucket_x\n\
    \    local bucket_y\n    local bucket_count\n    local bucket_x\n    local bucket_y\n\
    \    local bucket_count\n    local bucket_x\n    local bucket_y\n    local bucket_count\n\
    \    local bucket_x\n    local bucket_y\n    local bucket_count\n    local bucket_x\n\
    \    local bucket_y\n    local bucket_count\n    local bucket_x\n    local bucket_y\n\
    \    local bucket_count\n    local bucket_x\n    local bucket_y\n    local bucket_count\n\
    \    local bucket_x\n    local bucket_y\n    local bucket_count\n    local bucket_x\n\
    \    local bucket_y\n    local bucket_count\n    local bucket_x\n    local bucket_y\n\
    \    local bucket_count\n    local bucket_x\n    local bucket_y\n    local bucket_count\n\
    \    local bucket_x\n    local bucket_y\n    local bucket_count\n    local bucket_x\n\
    \    local bucket_y\n    local bucket_count\n    local bucket_x\n    local bucket_y\n\
    \    local bucket_count\n    local bucket_x\n    local bucket_y\n    local bucket_count\n\
    \    local bucket_x\n    local bucket_y\n    local bucket_count\n    local bucket_x\n\
    \    local bucket_y\n    local bucket_count\n    local bucket_x\n    local bucket_\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local empty=()\n    local count=0\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ - 1)\n    local count=0\n    local i\n    local j\n    local bucket\n    local\
    \ well\n    local buckets\n    local wells\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local well\n    local\
    \ buckets\n    local wells\n    local bucket\n    local well\n    local buckets\n\
    \    local wells\n    local bucket\n    local well\n    local buckets\n    local\
    \ wells\n    local bucket\n    local well\n    local buckets\n    local wells\n\
    \    local bucket\n    local well\n    local buckets\n    local wells\n    local\
    \ bucket\n    local well\n    local buckets\n    local wells\n    local bucket\n\
    \    local well\n    local buckets\n    local wells\n    local bucket\n    local\
    \ well\n    local buckets\n    local wells\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local well\n    local\
    \ buckets\n    local wells\n    local bucket\n    local well\n    local buckets\n\
    \    local wells\n    local bucket\n    local well\n    local buckets\n    local\
    \ wells\n    local bucket\n    local well\n    local buckets\n    local wells\n\
    \    local bucket\n    local well\n    local buckets\n    local wells\n    local\
    \ bucket\n    local well\n    local buckets\n    local wells\n    local bucket\n\
    \    local well\n    local buckets\n    local wells\n    local bucket\n    local\
    \ well\n    local buckets\n    local wells\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local well\n    local\
    \ buckets\n    local wells\n    local bucket\n    local well\n    local buckets\n\
    \    local wells\n    local bucket\n    local well\n    local buckets\n    local\
    \ wells\n    local bucket\n    local well\n    local buckets\n    local wells\n\
    \    local bucket\n    local well\n    local buckets\n    local wells\n    local\
    \ bucket\n    local well\n    local buckets\n    local wells\n    local bucket\n\
    \    local well\n    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8bbh3a81.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local row=0\n    local col=0\n    local max=0\n    local maxrow=0\n    local\
    \ maxcol=0\n    local maxval=0\n    local maxvalrow=0\n    local maxvalcol=0\n\
    \    local maxvalval=0\n    local maxvalvalrow=0\n    local maxvalvalcol=0\n \
    \   local maxvalvalval=0\n    local maxvalvalvalrow=0\n    local maxvalvalvalcol=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalvalrow=0\n    local maxvalvalvalvalcol=0\n\
    \    local maxvalvalvalvalval=0\n    local maxvalvalvalvalrow=0\n    local maxvalvalvalvalcol=0\n\
    \    local maxvalvalvalvalval=0\n    local maxvalvalvalvalvalrow=0\n    local\
    \ maxvalvalvalvalvalcol=0\n    local maxvalvalvalvalvalval=0\n    local maxvalvalvalvalvalrow=0\n\
    \    local maxvalvalvalvalvalcol=0\n    local maxvalvalvalvalvalval=0\n    local\
    \ maxvalvalvalvalvalrow=0\n    local maxvalvalvalvalvalcol=0\n    local maxvalvalvalvalvalval=0\n\
    \    local maxvalvalvalvalvalrow=0\n    local maxvalvalvalvalvalcol=0\n    local\
    \ maxvalvalvalvalvalval=0\n    local maxvalvalvalvalvalrow=0\n    local maxvalvalvalvalvalcol=0\n\
    \    local maxvalvalvalvalvalval=0\n    local maxvalvalvalvalvalrow=0\n    local\
    \ maxvalvalvalvalvalcol=0\n    local maxvalvalvalvalvalval=0\n    local maxvalvalvalvalvalrow=0\n\
    \    local maxvalvalvalvalvalcol=0\n    local maxvalvalvalvalvalval=0\n    local\
    \ maxvalvalvalvalvalrow=0\n    local maxvalvalvalvalvalcol=0\n    local maxvalvalvalvalvalval=0\n\
    \    local maxvalvalvalvalvalvalrow=0\n    local maxvalvalvalvalvalvalcol=0\n\
    \    local maxvalvalvalvalvalvalval=0\n    local maxvalvalvalvalvalvalrow=0\n\
    \    local maxvalvalvalvalvalvalcol=0\n    local maxvalvalval\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline=\"\"\n    local maxcapacity=0\n    local maxcapacityline=\"\
    \"\n    local maxcapacitycapacity=0\n    local maxcapacitycapacityline=\"\"\n\
    \    local maxcapacitycapacitycapacity=0\n    local maxcapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacity=0\n    local maxcapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacity=0\n    local maxcapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacity=0\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacityline=\"\"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacityline=\"\"\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\"\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\"\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local max=0\n    local min=0\n    local maxlen=0\n   \
    \ local minlen=0\n    local maxlen2=0\n    local minlen2=0\n    local maxlen3=0\n\
    \    local minlen3=0\n    local maxlen4=0\n    local minlen4=0\n    local maxlen5=0\n\
    \    local minlen5=0\n    local maxlen6=0\n    local minlen6=0\n    local maxlen7=0\n\
    \    local minlen7=0\n    local maxlen8=0\n    local minlen8=0\n    local maxlen9=0\n\
    \    local minlen9=0\n    local maxlen10=0\n    local minlen10=0\n    local maxlen11=0\n\
    \    local minlen11=0\n    local maxlen12=0\n    local minlen12=0\n    local maxlen13=0\n\
    \    local minlen13=0\n    local maxlen14=0\n    local minlen14=0\n    local maxlen15=0\n\
    \    local minlen15=0\n    local maxlen16=0\n    local minlen16=0\n    local maxlen17=0\n\
    \    local minlen17=0\n    local maxlen18=0\n    local minlen18=0\n    local maxlen19=0\n\
    \    local minlen19=0\n    local maxlen20=0\n    local minlen20=0\n    local maxlen21=0\n\
    \    local minlen21=0\n    local maxlen22=0\n    local minlen22=0\n    local maxlen23=0\n\
    \    local minlen23=0\n    local maxlen24=0\n    local minlen24=0\n    local maxlen25=0\n\
    \    local minlen25=0\n    local maxlen26=0\n    local minlen26=0\n    local maxlen27=0\n\
    \    local minlen27=0\n    local maxlen28=0\n    local minlen28=0\n    local maxlen29=0\n\
    \    local minlen29=0\n    local maxlen30=0\n    local minlen30=0\n    local maxlen31=0\n\
    \    local minlen31=0\n    local maxlen32=0\n    local minlen32=0\n    local maxlen33=0\n\
    \    local minlen33=0\n    local maxlen34=0\n    local minlen34=0\n    local maxlen35\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local x\n    local y\n    local bucket\n\
    \    local empty\n    local empty_capacity\n    local empty_bucket\n    local\
    \ empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    local empty_y\n    local empty_buckets\n    local empty_count\n\
    \    local empty_line\n    local empty_x\n    local empty_y\n    local empty_bucket\n\
    \    local empty_x\n    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$(echo \"$1\" | tr '\\n' ' ')\n    local capacity=$2\n\
    \    local count=0\n    local max=0\n    local maxline=\"\"\n    local line\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local rows=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ / 10)\n    local buckets_used=0\n    local bucket_count=0\n    local bucket_capacity=0\n\
    \    local bucket_used=0\n    local bucket_used2=0\n    local bucket_used3=0\n\
    \    local bucket_used4=0\n    local bucket_used5=0\n    local bucket_used6=0\n\
    \    local bucket_used7=0\n    local bucket_used8=0\n    local bucket_used9=0\n\
    \    local bucket_used10=0\n    local bucket_used11=0\n    local bucket_used12=0\n\
    \    local bucket_used13=0\n    local bucket_used14=0\n    local bucket_used15=0\n\
    \    local bucket_used16=0\n    local bucket_used17=0\n    local bucket_used18=0\n\
    \    local bucket_used19=0\n    local bucket_used20=0\n    local bucket_used21=0\n\
    \    local bucket_used22=0\n    local bucket_used23=0\n    local bucket_used24=0\n\
    \    local bucket_used25=0\n    local bucket_used26=0\n    local bucket_used27=0\n\
    \    local bucket_used28=0\n    local bucket_used29=0\n    local bucket_used30=0\n\
    \    local bucket_used31=0\n    local bucket_used32=0\n    local bucket_used33=0\n\
    \    local bucket_used34=0\n    local bucket_used35=0\n    local bucket_used36=0\n\
    \    local bucket_used37=0\n    local bucket_used38=0\n    local bucket_used39=0\n\
    \    local bucket_used40=0\n    local bucket_used41=0\n    local bucket_used42=0\n\
    \    local bucket_used43=0\n    local bucket_used44=0\n    local bucket_used45=0\n\
    \    local bucket_used46=0\n    local bucket_used47=0\n    local bucket_used48=0\n\
    \    local bucket_used49=0\n    local bucket_used50=0\n    local bucket_used51=0\n\
    \    local bucket_used52=0\n    local bucket_used53=0\n    local bucket_used54=0\n\
    \    local bucket_used55=0\n    local bucket_used56=0\n    local bucket_used57=0\n\
    \    local bucket_used58=0\n    local bucket_used59=0\n    local bucket_used60=0\n\
    \    local bucket_used61=0\n    local bucket_used62=0\n    local bucket_used63=0\n\
    \    local bucket_used64=0\n    local bucket_used65=0\n    local bucket_used66=0\n\
    \    local bucket_used67=0\n    local bucket_\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp05y0snrn.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local empty=0\n    local empty_capacity=0\n    local empty_buckets=0\n\
    \    local empty_lines=0\n    local empty_wells=0\n    local empty_wells_capacity=0\n\
    \    local empty_wells_buckets=0\n    local empty_wells_lines=0\n    local empty_wells_wells=0\n\
    \    local empty_wells_wells_capacity=0\n    local empty_wells_wells_buckets=0\n\
    \    local empty_wells_wells_lines=0\n    local empty_wells_wells_wells=0\n  \
    \  local empty_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells_wells_wells=0\n\
    \    local empty_wells_wells_wells_wells_wells_capacity=0\n    local empty_wells_wells_wells_wells_wells_buckets=0\n\
    \    local empty_wells_wells_wells_wells_wells_lines=0\n    local empty_wells_wells_wells_wells_wells_wells=0\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local empty=0\n    local count=0\n    local i\n    local j\n    local\
    \ bucket\n    local empty\n    local buckets\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplg6fc35i.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline=\"\"\n    local maxcapacity=0\n    local maxcount=0\n\
    \    local maxcapacityline=\"\"\n    local maxcountline=\"\"\n    local maxcapacitylines=0\n\
    \    local maxcountlines=0\n    local maxcapacityline=0\n    local maxcountline=0\n\
    \    local maxcapacitylines=0\n    local maxcountlines=0\n    local maxcapacityline=0\n\
    \    local maxcountline=0\n    local maxcapacitylines=0\n    local maxcountlines=0\n\
    \    local maxcapacityline=0\n    local maxcountline=0\n    local maxcapacitylines=0\n\
    \    local maxcountlines=0\n    local maxcapacityline=0\n    local maxcountline=0\n\
    \    local maxcapacitylines=0\n    local maxcountlines=0\n    local maxcapacityline=0\n\
    \    local maxcountline=0\n    local maxcapacitylines=0\n    local maxcountlines=0\n\
    \    local maxcapacityline=0\n    local maxcountline=0\n    local maxcapacitylines=0\n\
    \    local maxcountlines=0\n    local maxcapacityline=0\n    local maxcountline=0\n\
    \    local maxcapacitylines=0\n    local maxcountlines=0\n    local maxcapacityline=0\n\
    \    local maxcountline=0\n    local maxcapacitylines=0\n    local maxcountlines=0\n\
    \    local maxcapacityline=0\n    local maxcountline=0\n    local maxcapacitylines=0\n\
    \    local maxcountlines=0\n    local maxcapacityline=0\n    local maxcountline=0\n\
    \    local maxcapacitylines=0\n    local maxcountlines=0\n    local maxcapacityline=0\n\
    \    local maxcountline=0\n    local maxcapacitylines=0\n    local maxcountlines=0\n\
    \    local maxcapacityline=0\n    local maxcountline=0\n    local maxcapacitylines=0\n\
    \    local maxcountlines=0\n    local maxcapacityline=0\n    local maxcountline=0\n\
    \    local maxcapacitylines=0\n    local maxcountlines=0\n    local maxcapacityline=0\n\
    \    local maxcountline=0\n    local maxcapacitylines=0\n    local maxcountlines=0\n\
    \    local maxcapacityline=0\n    local maxcountline=0\n    local maxcapacitylines=0\n\
    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$(echo \"$1\" | tr '\\n' ' ')\n    local capacity=$2\n\
    \    local count=0\n    local max=0\n    local maxrow=0\n    local maxcol=0\n\
    \    local maxval=0\n    local maxrowval=0\n    local maxcolval=0\n    local maxval2=0\n\
    \    local maxrowval2=0\n    local maxcolval2=0\n    local maxval3=0\n    local\
    \ maxrowval3=0\n    local maxcolval3=0\n    local maxval4=0\n    local maxrowval4=0\n\
    \    local maxcolval4=0\n    local maxval5=0\n    local maxrowval5=0\n    local\
    \ maxcolval5=0\n    local maxval6=0\n    local maxrowval6=0\n    local maxcolval6=0\n\
    \    local maxval7=0\n    local maxrowval7=0\n    local maxcolval7=0\n    local\
    \ maxval8=0\n    local maxrowval8=0\n    local maxcolval8=0\n    local maxval9=0\n\
    \    local maxrowval9=0\n    local maxcolval9=0\n    local maxval10=0\n    local\
    \ maxrowval10=0\n    local maxcolval10=0\n    local maxval11=0\n    local maxrowval11=0\n\
    \    local maxcolval11=0\n    local maxval12=0\n    local maxrowval12=0\n    local\
    \ maxcolval12=0\n    local maxval13=0\n    local maxrowval13=0\n    local maxcolval13=0\n\
    \    local maxval14=0\n    local maxrowval14=0\n    local maxcolval14=0\n    local\
    \ maxval15=0\n    local maxrowval15=0\n    local maxcolval15=0\n    local maxval16=0\n\
    \    local maxrowval16=0\n    local maxcolval16=0\n    local maxval17=0\n    local\
    \ maxrowval17=0\n    local maxcolval17=0\n    local maxval18=0\n    local maxrowval18=0\n\
    \    local maxcolval18=0\n    local maxval19=0\n    local maxrowval19=0\n    local\
    \ maxcolval19=0\n    local maxval20=0\n    local maxrowval20=0\n    local maxcolval20=0\n\
    \    local maxval21=0\n    local maxrowval\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local count=0\n    local bucket\n    local line\n    local i\n   \
    \ local j\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n        line=${lines[$i]}\n\
    \        for ((j=0; j<${#line[@]}; j++)); do\n            if [ ${line[$j]} -eq\
    \ 1 ]; then\n                bucket=$((buckets - 1))\n                while [\
    \ $bucket -gt 0 ]; do\n                    ((bucket--))\n                    ((count++))\n\
    \                done\n            fi\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd7raawel.sh: line 29: capacity: command not found

    /tmp/tmpd7raawel.sh: line 39: [: too many arguments

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ - 1)\n    local empty=0\n    local count=0\n    local max=0\n    local maxCount=0\n\
    \    local maxLine=0\n    local maxLineCount=0\n    local maxLineLength=0\n  \
    \  local maxLineLengthCount=0\n    local maxLineLengthCountMax=0\n    local maxLineLengthCountMaxCount=0\n\
    \    local maxLineLengthCountMaxCountMax=0\n    local maxLineLengthCountMaxCountMaxCount=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMax=0\n    local maxLineLengthCountMaxCountMaxCountMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMax=0\n    local maxLineLengthCountMaxCountMaxCountMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxCountMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n    local\
    \ maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n    local\
    \ maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n \
    \   local max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpythihiz7.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local row\n    local col\n    local bucket\n    local well\n    local empty\n\
    \    local empty_capacity\n    local empty_well\n    local empty_capacity_row\n\
    \    local empty_capacity_col\n    local empty_capacity_bucket\n    local empty_capacity_well\n\
    \    local empty_capacity_row_max\n    local empty_capacity_col_max\n    local\
    \ empty_capacity_bucket_max\n    local empty_capacity_well_max\n    local empty_capacity_row_min\n\
    \    local empty_capacity_col_min\n    local empty_capacity_bucket_min\n    local\
    \ empty_capacity_well_min\n    local empty_capacity_row_min\n    local empty_capacity_col_min\n\
    \    local empty_capacity_bucket_min\n    local empty_capacity_well_min\n    local\
    \ empty_capacity_row_min\n    local empty_capacity_col_min\n    local empty_capacity_bucket_min\n\
    \    local empty_capacity_well_min\n    local empty_capacity_row_min\n    local\
    \ empty_capacity_col_min\n    local empty_capacity_bucket_min\n    local empty_capacity_well_min\n\
    \    local empty_capacity_row_min\n    local empty_capacity_col_min\n    local\
    \ empty_capacity_bucket_min\n    local empty_capacity_well_min\n    local empty_capacity_row_min\n\
    \    local empty_capacity_col_min\n    local empty_capacity_bucket_min\n    local\
    \ empty_capacity_well_min\n    local empty_capacity_row_min\n    local empty_capacity_col_min\n\
    \    local empty_capacity_bucket_min\n    local empty_capacity_well_min\n    local\
    \ empty_capacity_row_min\n    local empty_capacity_col_min\n    local empty_capacity_bucket_min\n\
    \    local empty_capacity_well_min\n    local empty_capacity_row_min\n    local\
    \ empty_capacity_col_min\n    local empty_capacity_bucket_min\n    local empty_capacity_well_min\n\
    \    local empty_capacity_row_min\n    local empty_capacity_col_min\n    local\
    \ empty_capacity_bucket_min\n    local empty_capacity_well_min\n    local empty_capacity_row_min\n\
    \    local empty_capacity_col_min\n    local empty_capacity_\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local bucket\n    local empty\n\
    \    local max\n    local min\n    local maxBucket\n    local minBucket\n    local\
    \ maxBucketCount\n    local minBucketCount\n    local maxBucketSize\n    local\
    \ minBucketSize\n    local maxBucketCapacity\n    local minBucketCapacity\n  \
    \  local maxBucketSizeCount\n    local minBucketSizeCount\n    local maxBucketSizeCapacity\n\
    \    local minBucketSizeCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    local\
    \ minBucketSizeCountCapacity\n    local maxBucketSizeCountCapacity\n    \n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local max=0\n    local maxCount=0\n    local maxBucket=0\n\
    \    local maxBucketCount=0\n    local maxBucketVal=0\n    local maxBucketValCount=0\n\
    \    local maxBucketValVal=0\n    local maxBucketValValCount=0\n    local maxBucketValValVal=0\n\
    \    local maxBucketValValValCount=0\n    local maxBucketValValValVal=0\n    local\
    \ maxBucketValValValValCount=0\n    local maxBucketValValValValVal=0\n    local\
    \ maxBucketValValValValValCount=0\n    local maxBucketValValValValValVal=0\n \
    \   local maxBucketValValValValValCount=0\n    local maxBucketValValValValValVal=0\n\
    \    local maxBucketValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n    local maxBucketValValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n    local maxBucketValValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n    local maxBucketValValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n    local maxBucketValValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local bucket\n    local x\n    local y\n\
    \    local z\n    local w\n    local l\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local w\n\
    \    local l\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local w\n    local l\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local w\n    local l\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local w\n\
    \    local l\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local buckets\n    local bucket\n\
    \    local buckets_capacity\n    local bucket_capacity\n    local bucket_capacity_lower\n\
    \    local bucket_capacity_higher\n    local bucket_capacity_lower_index\n   \
    \ local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower_index\n\
    \    local bucket_capacity_higher_index\n    local bucket_capacity_lower\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local row\n    local col\n    local bucket\n    local empty\n\
    \    local emptyCount\n    local emptyBucket\n    local emptyBucketCount\n   \
    \ local emptyBucketCapacity\n    local emptyBucketCapacityCount\n    local emptyBucketCapacityCount2\n\
    \    local emptyBucketCapacityCount3\n    local emptyBucketCapacityCount4\n  \
    \  local emptyBucketCapacityCount5\n    local emptyBucketCapacityCount6\n    local\
    \ emptyBucketCapacityCount7\n    local emptyBucketCapacityCount8\n    local emptyBucketCapacityCount9\n\
    \    local emptyBucketCapacityCount10\n    local emptyBucketCapacityCount11\n\
    \    local emptyBucketCapacityCount12\n    local emptyBucketCapacityCount13\n\
    \    local emptyBucketCapacityCount14\n    local emptyBucketCapacityCount15\n\
    \    local emptyBucketCapacityCount16\n    local emptyBucketCapacityCount17\n\
    \    local emptyBucketCapacityCount18\n    local emptyBucketCapacityCount19\n\
    \    local emptyBucketCapacityCount20\n    local emptyBucketCapacityCount21\n\
    \    local emptyBucketCapacityCount22\n    local emptyBucketCapacityCount23\n\
    \    local emptyBucketCapacityCount24\n    local emptyBucketCapacityCount25\n\
    \    local emptyBucketCapacityCount26\n    local emptyBucketCapacityCount27\n\
    \    local emptyBucketCapacityCount28\n    local emptyBucketCapacityCount29\n\
    \    local emptyBucketCapacityCount30\n    local emptyBucketCapacityCount31\n\
    \    local emptyBucketCapacityCount32\n    local emptyBucketCapacityCount33\n\
    \    local emptyBucketCapacityCount34\n    local emptyBucketCapacityCount35\n\
    \    local emptyBucketCapacityCount36\n    local emptyBucketCapacityCount37\n\
    \    local emptyBucketCapacityCount38\n    local emptyBucketCapacityCount39\n\
    \    local emptyBucketCapacityCount40\n    local emptyBucketCapacityCount41\n\
    \    local emptyBucketCapacityCount42\n    local emptyBucketCapacityCount43\n\
    \    local emptyBucketCapacityCount44\n    local emptyBucketCapacityCount45\n\
    \    local emptyBucketCapacityCount46\n    local emptyBucketCapacityCount47\n\
    \    local emptyBucketCapacityCount48\n    local emptyBucketCapacityCount49\n\
    \    local emptyBucketCapacityCount50\n    local emptyBucketCapacityCount51\n\
    \    local emptyBucketCapacityCount52\n    local emptyBucketCapacityCount53\n\
    \    local emptyBucketCapacityCount54\n    local emptyBucketCapacityCount55\n\
    \    local emptyBucketCapacityCount56\n    local emptyBucketCapacityCount\n}\n\
    \ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local i j\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n        for ((j=0;\
    \ j<${#lines[$i]}; j++)); do\n            if [ ${lines[$i][$j]} == 1 ]; then\n\
    \                if [ $capacity -gt 0 ]; then\n                    result=$((result+1))\n\
    \                    capacity=$((capacity-1))\n                else\n        \
    \            result=$((result+1))\n                fi\n            fi\n      \
    \  done\n    done\n    echo $result\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp76b1nem3.sh: line 34: ${lines[$i][$j]}: bad substitution

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i\n    local j\n    local bucket\n    local line\n\
    \    local tmp\n    \n    for ((i = 0; i < ${#lines[@]}; i++)); do\n        line=${lines[$i]}\n\
    \        bucket=${line//0/0}\n        buckets+=(\"${bucket}\")\n    done\n   \
    \ \n    for ((i = 0; i < ${#buckets[@]}; i++)); do\n        bucket=${buckets[$i]}\n\
    \        for ((j = 0; j < ${#lines[@]}; j++)); do\n            line=${lines[$j]}\n\
    \            tmp=${line//0/0}\n            if [[ ${tmp} == $bucket ]]; then\n\
    \                count=$((count+1))\n            fi\n        done\n    done\n\
    \    \n    echo \"$count\"\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\
    \ = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$(echo \"$1\" | tr '\\n' ' ')\n    local capacity=\"\
    $2\"\n    local buckets=$(echo \"$lines\" | sed 's/ /\\n/g' | sort -u | wc -l)\n\
    \    local count=0\n    local max=0\n    local min=$capacity\n    local maxBucket=0\n\
    \    local minBucket=0\n    local maxBucketCount=0\n    local minBucketCount=0\n\
    \    local maxBucketSize=0\n    local minBucketSize=0\n    local maxBucketSizeCount=0\n\
    \    local minBucketSizeCount=0\n    local maxBucketSizeSize=0\n    local minBucketSizeSize=0\n\
    \    local maxBucketSizeSizeCount=0\n    local minBucketSizeSizeCount=0\n    local\
    \ maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n\
    \    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local\
    \ minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n\
    \    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local\
    \ maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n\
    \    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local\
    \ minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n\
    \    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local\
    \ maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n\
    \    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local\
    \ minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n\
    \    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local\
    \ maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n\
    \    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local\
    \ minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n\
    \    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local k\n    local bucket\n    local\
    \ buckets\n    local bucket_count\n    local bucket_capacity\n    local bucket_capacity_sum\n\
    \    local bucket_capacity_diff\n    local bucket_capacity_diffs\n    local bucket_capacity_diffs_sum\n\
    \    local bucket_capacity_diffs_sums\n    local bucket_capacity_diffs_sums_max\n\
    \    local bucket_capacity_diffs_sums_max_index\n    local bucket_capacity_diffs_sums_max_indexs\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max\n    local bucket_capacity_diffs_sums_max_indexs_max_index\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs\n    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_index\n    local\
    \ bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs\n    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_index\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_indexs\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_indexs_max\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_indexs_max_index\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_index\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max\n\
    \    local bucket_capacity_diffs_sums_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_index\n\
    \    local bucket_capacity_diffs_sums_\n}\n\ncandidate() {\n    max_fill \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local buckets\n    local bucket\n\
    \    local bucketCapacity\n    local bucketCount\n    local bucketIndex\n    local\
    \ maxBucketCapacity\n    local maxBucketIndex\n    local maxBucket\n    local\
    \ maxBucketCount\n    local maxBucketCapacityIndex\n    local maxBucketIndexIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCapacityIndexIndex\n    local\
    \ maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n\
    \    local maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local\
    \ maxBucketCapacityIndexIndexIndex\n    local maxBucketIndexIndexIndex\n    local\
    \ maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n    local\
    \ maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n\
    \    local maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local\
    \ maxBucketCapacityIndexIndexIndex\n    local maxBucketIndexIndexIndex\n    local\
    \ maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n    local\
    \ maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n\
    \    local maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local\
    \ maxBucketCapacityIndexIndexIndex\n    local maxBucketIndexIndexIndex\n    local\
    \ maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n    local\
    \ maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n\
    \    local maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local\
    \ maxBucketCapacityIndexIndexIndex\n    local maxBucketIndexIndexIndex\n    local\
    \ maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n    local\
    \ maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n\
    \    local maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local\
    \ maxBucketCapacityIndexIndexIndex\n    local maxBucketIndexIndexIndex\n    local\
    \ maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n    local\
    \ maxBucketIndexIndexIndex\n    local maxBucketCountIndexIndex\n    local maxBucketCapacityIndexIndexIndex\n\
    \    local maxBucketIndexIndexIndex\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local row\n    local col\n    local bucket\n\
    \    local empty\n    local empty_capacity\n    local empty_bucket\n    local\
    \ empty_row\n    local empty_col\n    local empty_buckets\n    local empty_count\n\
    \    local empty_capacity_row\n    local empty_capacity_col\n    local empty_capacity_bucket\n\
    \    local empty_capacity_buckets\n    local empty_capacity_rows\n    local empty_capacity_cols\n\
    \    local empty_capacity_buckets_row\n    local empty_capacity_buckets_col\n\
    \    local empty_capacity_buckets_rows\n    local empty_capacity_buckets_cols\n\
    \    local empty_capacity_buckets_rows_col\n    local empty_capacity_buckets_rows_cols\n\
    \    local empty_capacity_buckets_rows_cols_row\n    local empty_capacity_buckets_rows_cols_cols\n\
    \    local empty_capacity_buckets_rows_cols_cols_row\n    local empty_capacity_buckets_rows_cols_cols_cols\n\
    \    local empty_capacity_buckets_rows_cols_cols_cols_row\n    local empty_capacity_buckets_rows_cols_cols_cols_cols\n\
    \    local empty_capacity_buckets_rows_cols_cols_cols_cols_row\n    local empty_capacity_buckets_rows_cols_cols_cols_cols_cols\n\
    \    local empty_capacity_buckets_rows_cols_cols_cols_cols_cols_row\n    local\
    \ empty_capacity_buckets_rows_cols_cols_cols_cols_cols_cols\n    local empty_capacity_buckets_rows_cols_cols_cols_cols_cols_cols_row\n\
    \    local empty_capacity_buckets_rows_cols_cols_cols_cols_cols_cols_cols\n  \
    \  local empty_capacity_buckets_rows_cols_cols_cols_cols_cols_cols_cols_row\n\
    \    local empty_capacity_buckets_rows_cols_cols_cols_cols_cols_cols_cols_cols\n\
    \    local empty_capacity_buckets_rows_cols_cols_cols_cols_cols_cols_cols_cols_row\n\
    \    local empty_capacity_buckets_rows_cols_cols_cols_cols_cols_cols_cols_cols_cols_cols\n\
    \    local empty\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local bucket\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local empty=0\n    local empty_count=0\n    local empty_buckets=0\n    local\
    \ empty_buckets_count=0\n    local empty_buckets_capacity=0\n    local empty_buckets_capacity_count=0\n\
    \    local empty_buckets_capacity_min=0\n    local empty_buckets_capacity_max=0\n\
    \    local empty_buckets_capacity_sum=0\n    local empty_buckets_capacity_product=0\n\
    \    local empty_buckets_capacity_product2=0\n    local empty_buckets_capacity_product3=0\n\
    \    local empty_buckets_capacity_product4=0\n    local empty_buckets_capacity_product5=0\n\
    \    local empty_buckets_capacity_product6=0\n    local empty_buckets_capacity_product7=0\n\
    \    local empty_buckets_capacity_product8=0\n    local empty_buckets_capacity_product9=0\n\
    \    local empty_buckets_capacity_product10=0\n    local empty_buckets_capacity_product11=0\n\
    \    local empty_buckets_capacity_product12=0\n    local empty_buckets_capacity_product13=0\n\
    \    local empty_buckets_capacity_product14=0\n    local empty_buckets_capacity_product15=0\n\
    \    local empty_buckets_capacity_product16=0\n    local empty_buckets_capacity_product17=0\n\
    \    local empty_buckets_capacity_product18=0\n    local empty_buckets_capacity_product19=0\n\
    \    local empty_buckets_capacity_product20=0\n    local empty_buckets_capacity_product21=0\n\
    \    local empty_buckets_capacity_product22=0\n    local empty_buckets_capacity_product23=0\n\
    \    local empty_buckets_capacity_product24=0\n    local empty_buckets_capacity_product25=0\n\
    \    local empty_buckets_capacity_product26=0\n    local empty_buckets_capacity_product27=0\n\
    \    local empty_buckets_capacity_product28=0\n    local empty_buckets_capacity_product29=0\n\
    \    local empty_buckets_capacity_product30=0\n    local empty_buckets_capacity_product31=0\n\
    \    local empty_buckets_capacity_product32=0\n    local empty_buckets_capacity_product33=0\n\
    \    local empty_buckets_capacity_product34=0\n    local empty_buckets_capacity_product35=0\n\
    \    local empty_buckets_capacity_product36=0\n    local empty_buckets_capacity_product37=0\n\
    \    local empty_buckets_capacity_product38=0\n    local empty_\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local i j\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n        for ((j=0;\
    \ j<${#lines[$i]}; j++)); do\n            if [ ${lines[$i][$j]} -eq 1 ]; then\n\
    \                let result=$((result+1))\n            fi\n        done\n    done\n\
    \    \n    echo $result\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuhe44owp.sh: line 34: ${lines[$i][$j]}: bad substitution

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local row=0\n    local col=0\n    local empty=0\n    local\
    \ empty_capacity=0\n    local empty_capacity_row=0\n    local empty_capacity_col=0\n\
    \    local empty_row=0\n    local empty_col=0\n    local empty_rows=0\n    local\
    \ empty_cols=0\n    local empty_row_index=0\n    local empty_col_index=0\n   \
    \ local empty_row_start=0\n    local empty_col_start=0\n    local empty_row_end=0\n\
    \    local empty_col_end=0\n    local empty_row_start=0\n    local empty_col_start=0\n\
    \    local empty_row_end=0\n    local empty_col_end=0\n    local empty_row_start=0\n\
    \    local empty_col_start=0\n    local empty_row_end=0\n    local empty_col_end=0\n\
    \    local empty_row_start=0\n    local empty_col_start=0\n    local empty_row_end=0\n\
    \    local empty_col_end=0\n    local empty_row_start=0\n    local empty_col_start=0\n\
    \    local empty_row_end=0\n    local empty_col_end=0\n    local empty_row_start=0\n\
    \    local empty_col_start=0\n    local empty_row_end=0\n    local empty_col_end=0\n\
    \    local empty_row_start=0\n    local empty_col_start=0\n    local empty_row_end=0\n\
    \    local empty_col_end=0\n    local empty_row_start=0\n    local empty_col_start=0\n\
    \    local empty_row_end=0\n    local empty_col_end=0\n    local empty_row_start=0\n\
    \    local empty_col_start=0\n    local empty_row_end=0\n    local empty_col_end=0\n\
    \    local empty_row_start=0\n    local empty_col_start=0\n    local empty_row_end=0\n\
    \    local empty_col_end=0\n    local empty_row_start=0\n    local empty_col_start=0\n\
    \    local empty_row_end=0\n    local empty_col_end=0\n    local empty_row_start=0\n\
    \    local empty_col_start=0\n    local empty_row_end=0\n    local empty_col_end=0\n\
    \    local empty_row_start=0\n    local empty_col_start=0\n    local empty_row_end=0\n\
    \    local empty_col_end=0\n    local empty_row_start=0\n    local empty_col_start=0\n\
    \    local empty_row_end=0\n    local empty_col_end=0\n    local empty_row_start=0\n\
    \    local empty_col_start=0\n    local empty_row_\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local row\n    local col\n    local bucket\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local bucket\n    local well\n \
    \   \n    for ((i=0; i<${#lines[@]}; i++)); do\n        line=${lines[$i]}\n  \
    \      bucket=${line[1]}\n        well=${line[2]}\n        \n        for ((j=1;\
    \ j<${#line[@]}; j++)); do\n            if [[ ${line[$j]} -eq 1 ]]; then\n   \
    \             ((count++))\n            fi\n        done\n    done\n    \n    echo\
    \ $((capacity - count))\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local min=0\n    local max2=0\n    local min2=0\n    local\
    \ max3=0\n    local min3=0\n    local max4=0\n    local min4=0\n    local max5=0\n\
    \    local min5=0\n    local max6=0\n    local min6=0\n    local max7=0\n    local\
    \ min7=0\n    local max8=0\n    local min8=0\n    local max9=0\n    local min9=0\n\
    \    local max10=0\n    local min10=0\n    local max11=0\n    local min11=0\n\
    \    local max12=0\n    local min12=0\n    local max13=0\n    local min13=0\n\
    \    local max14=0\n    local min14=0\n    local max15=0\n    local min15=0\n\
    \    local max16=0\n    local min16=0\n    local max17=0\n    local min17=0\n\
    \    local max18=0\n    local min18=0\n    local max19=0\n    local min19=0\n\
    \    local max20=0\n    local min20=0\n    local max21=0\n    local min21=0\n\
    \    local max22=0\n    local min22=0\n    local max23=0\n    local min23=0\n\
    \    local max24=0\n    local min24=0\n    local max25=0\n    local min25=0\n\
    \    local max26=0\n    local min26=0\n    local max27=0\n    local min27=0\n\
    \    local max28=0\n    local min28=0\n    local max29=0\n    local min29=0\n\
    \    local max30=0\n    local min30=0\n    local max31=0\n    local min31=0\n\
    \    local max32=0\n    local min32=0\n    local max33=0\n    local min33=0\n\
    \    local max34=0\n    local min34=0\n    local max35=0\n    local min35=0\n\
    \    local max36=0\n    local min36=0\n    local max37=0\n    local min37=0\n\
    \    local max38=0\n    local min38=0\n    local max39=0\n    local min39=0\n\
    \    local max40=0\n    local min40=0\n    local max41=0\n    local min41=0\n\
    \    local max42=0\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local i=0\n    local j=0\n    local max=0\n    local maxrow=0\n    local maxcol=0\n\
    \    local maxval=0\n    local maxrowval=0\n    local maxcolval=0\n    local maxval2=0\n\
    \    local maxrowval2=0\n    local maxcolval2=0\n    local maxval3=0\n    local\
    \ maxrowval3=0\n    local maxcolval3=0\n    local maxval4=0\n    local maxrowval4=0\n\
    \    local maxcolval4=0\n    local maxval5=0\n    local maxrowval5=0\n    local\
    \ maxcolval5=0\n    local maxval6=0\n    local maxrowval6=0\n    local maxcolval6=0\n\
    \    local maxval7=0\n    local maxrowval7=0\n    local maxcolval7=0\n    local\
    \ maxval8=0\n    local maxrowval8=0\n    local maxcolval8=0\n    local maxval9=0\n\
    \    local maxrowval9=0\n    local maxcolval9=0\n    local maxval10=0\n    local\
    \ maxrowval10=0\n    local maxcolval10=0\n    local maxval11=0\n    local maxrowval11=0\n\
    \    local maxcolval11=0\n    local maxval12=0\n    local maxrowval12=0\n    local\
    \ maxcolval12=0\n    local maxval13=0\n    local maxrowval13=0\n    local maxcolval13=0\n\
    \    local maxval14=0\n    local maxrowval14=0\n    local maxcolval14=0\n    local\
    \ maxval15=0\n    local maxrowval15=0\n    local maxcolval15=0\n    local maxval16=0\n\
    \    local maxrowval16=0\n    local maxcolval16=0\n    local maxval17=0\n    local\
    \ maxrowval17=0\n    local maxcolval17=0\n    local maxval18=0\n    local maxrowval18=0\n\
    \    local maxcolval18=0\n    local maxval19=0\n    local maxrowval19=0\n    local\
    \ maxcolval19=0\n    local maxval20=0\n    local maxrowval20=0\n    local maxcolval20=0\n\
    \    local maxval21=0\n    local maxrowval\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local empty\n    local buckets\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n    local empty\n    local empty\n    local empty\n    local\
    \ empty\n    local empty\n    local empty\n    local empty\n    local empty\n\
    \    local empty\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local result=0\n    local bucket\n    local i j\n    local count\n\
    \    \n    for ((i = 0; i < ${#lines[@]}; i++)); do\n        bucket=${lines[$i]}\n\
    \        for ((j = 0; j < ${#lines[$i]}; j++)); do\n            if [[ ${lines[$i][$j]}\
    \ == 1 ]]; then\n                (( buckets[bucket]--))\n            fi\n    \
    \    done\n    done\n    \n    for ((i = 0; i < ${#lines[@]}; i++)); do\n    \
    \    bucket=${lines[$i]}\n        for ((j = 0; j < ${#lines[$i]}; j++)); do\n\
    \            if [[ ${lines[$i][$j]} == 1 ]]; then\n                if (( buckets[bucket]\
    \ == 0 )); then\n                    (( result++ ))\n                fi\n    \
    \        fi\n        done\n    done\n    \n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmps5j3hfme.sh: line 29: capacity: command not found

    /tmp/tmps5j3hfme.sh: line 38: ${lines[$i][$j]}: bad substitution

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local well\n    local buckets\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n    local bucket\n    local wells\n    local well\n    local\
    \ bucket\n    local wells\n    local well\n    local bucket\n    local wells\n\
    \    local well\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local row\n    local col\n    local bucket\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local line\n    local\
    \ buckets\n    local bucket\n    local count\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local line\n    local\
    \ buckets\n    local i\n    local j\n    local count\n    local max\n    local\
    \ min\n    local maxBucket\n    local minBucket\n    local bucket\n    local bucketsCount\n\
    \    local bucketsMax\n    local bucketsMin\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMax\n}\n\ncandidate() {\n    max_fill \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local bucket\n    local i\n    local j\n    local count\n    local\
    \ max\n    local min\n    local wells\n    local well\n    local wells\n    local\
    \ well\n    local bucket\n    local buckets\n    local bucket\n    local buckets\n\
    \    local bucket\n    local count\n    local max\n    local min\n    local wells\n\
    \    local well\n    local wells\n    local well\n    local bucket\n    local\
    \ buckets\n    local bucket\n    local buckets\n    local bucket\n    local count\n\
    \    local max\n    local min\n    local wells\n    local well\n    local wells\n\
    \    local well\n    local bucket\n    local buckets\n    local bucket\n    local\
    \ buckets\n    local bucket\n    local count\n    local max\n    local min\n \
    \   local wells\n    local well\n    local wells\n    local well\n    local bucket\n\
    \    local buckets\n    local bucket\n    local buckets\n    local bucket\n  \
    \  local count\n    local max\n    local min\n    local wells\n    local well\n\
    \    local wells\n    local well\n    local bucket\n    local buckets\n    local\
    \ bucket\n    local buckets\n    local bucket\n    local count\n    local max\n\
    \    local min\n    local wells\n    local well\n    local wells\n    local well\n\
    \    local bucket\n    local buckets\n    local bucket\n    local buckets\n  \
    \  local bucket\n    local count\n    local max\n    local min\n    local wells\n\
    \    local well\n    local wells\n    local well\n    local bucket\n    local\
    \ buckets\n    local bucket\n    local buckets\n    local bucket\n    local count\n\
    \    local max\n    local min\n    local wells\n    local well\n    local wells\n\
    \    local well\n    local bucket\n    local buckets\n    local bucket\n    local\
    \ buckets\n    local bucket\n    local count\n    local max\n    local min\n \
    \   local wells\n    local well\n    local wells\n    local well\n    local bucket\n\
    \    local buckets\n    local bucket\n    local buckets\n    local bucket\n  \
    \  local count\n    local max\n    local min\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe9cq6och.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local buckets=()\n    local bucket\n    local row\n    local col\n    local\
    \ val\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    \n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$(echo \"$1\" | tr '\\n' ' ')\n    local capacity=\"\
    $2\"\n    local buckets=$(echo \"$lines\" | awk '{print $1}')\n    local count=0\n\
    \    for bucket in $buckets; do\n        if [[ $bucket == 1 ]]; then\n       \
    \     ((count++))\n        fi\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local i j\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n        for ((j=0;\
    \ j<${#lines[$i]}; j++)); do\n            if [[ ${lines[$i][$j]} -eq 1 ]]; then\n\
    \                let result=$((result+1))\n            fi\n        done\n    done\n\
    \    \n    echo \"$result\"\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\
    \ = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7ke9hiui.sh: line 34: ${lines[$i][$j]}: bad substitution

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local bucket\n    local count\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbtolz50r.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local min=0\n    local row\n    local col\n    local bucket\n\
    \    local well\n    local wells\n    local wells_len\n    local wells_cap\n \
    \   local wells_len_cap\n    local wells_len_cap_max\n    local wells_len_cap_min\n\
    \    local wells_len_cap_min_index\n    local wells_len_cap_max_index\n    local\
    \ wells_len_cap_max_index\n    local wells_len_cap_min_index\n    local wells_len_cap_max_index\n\
    \    local wells_len_cap_min_index\n    local wells_len_cap_max_index\n    local\
    \ wells_len_cap_min_index\n    local wells_len_cap_max_index\n    local wells_len_cap_min_index\n\
    \    local wells_len_cap_max_index\n    local wells_len_cap_min_index\n    local\
    \ wells_len_cap_max_index\n    local wells_len_cap_min_index\n    local wells_len_cap_max_index\n\
    \    local wells_len_cap_min_index\n    local wells_len_cap_max_index\n    local\
    \ wells_len_cap_min_index\n    local wells_len_cap_max_index\n    local wells_len_cap_min_index\n\
    \    local wells_len_cap_max_index\n    local wells_len_cap_min_index\n    local\
    \ wells_len_cap_max_index\n    local wells_len_cap_min_index\n    local wells_len_cap_max_index\n\
    \    local wells_len_cap_min_index\n    local wells_len_cap_max_index\n    local\
    \ wells_len_cap_min_index\n    local wells_len_cap_max_index\n    local wells_len_cap_min_index\n\
    \    local wells_len_cap_max_index\n    local wells_len_cap_min_index\n    local\
    \ wells_len_cap_max_index\n    local wells_len_cap_min_index\n    local wells_len_cap_max_index\n\
    \    local wells_len_cap_min_index\n    local wells_len_cap_max_index\n    local\
    \ wells_len_cap_min_index\n    local wells_len_cap_max_index\n    local wells_len_cap_min_index\n\
    \    local wells_len_cap_max_index\n    local wells_len_cap_min_index\n    local\
    \ wells_len_cap_\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxCount=0\n    local maxLine=0\n    local maxLineCount=0\n\
    \    local maxLineLength=0\n    local maxLineLengthCount=0\n    local maxLineLengthCountMax=0\n\
    \    local maxLineLengthCountMaxCount=0\n    local maxLineLengthCountMaxCountMax=0\n\
    \    local maxLineLengthCountMaxCountMax=0\n    local maxLineLengthCountMaxCountMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMax=0\n    local maxLineLengthCountMaxCountMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n    local\
    \ maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n    local maxLine\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local buckets\n    local line\n    local \n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local count=0\n    local i\n    local j\n    local bucket\n    local\
    \ well\n    local buckets\n    local wells\n    local bucket\n    local well\n\
    \    local bucket\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local i\n    local\
    \ j\n    local bucket\n    local well\n    local buckets\n    local wells\n  \
    \  local bucket\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local i\n    local\
    \ j\n    local bucket\n    local well\n    local buckets\n    local wells\n  \
    \  local bucket\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local i\n    local\
    \ j\n    local bucket\n    local well\n    local buckets\n    local wells\n  \
    \  local bucket\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local i\n    local\
    \ j\n    local bucket\n    local well\n    local buckets\n    local wells\n  \
    \  local bucket\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local i\n    local\
    \ j\n    local bucket\n    local well\n    local buckets\n    local wells\n  \
    \  local bucket\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local i\n    local\
    \ j\n    local bucket\n    local well\n    local buckets\n    local wells\n  \
    \  local bucket\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local bucket\n    local i\n    local\
    \ j\n    local bucket\n    local well\n    local buckets\n    local wells\n  \
    \  local bucket\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local wells\n    local \n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_btypevh.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxCount=0\n    local maxLine=\"\"\n    local line\n\
    \    local i\n    local j\n    local line\n    local bucket\n    local buckets\n\
    \    local bucketsCount\n    local bucketsMax\n    local bucketsMaxCount\n   \
    \ local bucketsMaxLine\n    local bucketsMaxLines\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n    local bucketsMaxLinesCount\n\
    \    local bucketsMax\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local row\n    local col\n    local well\n    local bucket\n    local empty\n\
    \    local empty_capacity\n    local empty_count\n    local empty_index\n    local\
    \ empty_index2\n    local empty_index3\n    local empty_index4\n    local empty_index5\n\
    \    local empty_index6\n    local empty_index7\n    local empty_index8\n    local\
    \ empty_index9\n    local empty_index10\n    local empty_index11\n    local empty_index12\n\
    \    local empty_index13\n    local empty_index14\n    local empty_index15\n \
    \   local empty_index16\n    local empty_index17\n    local empty_index18\n  \
    \  local empty_index19\n    local empty_index20\n    local empty_index21\n   \
    \ local empty_index22\n    local empty_index23\n    local empty_index24\n    local\
    \ empty_index25\n    local empty_index26\n    local empty_index27\n    local empty_index28\n\
    \    local empty_index29\n    local empty_index30\n    local empty_index31\n \
    \   local empty_index32\n    local empty_index33\n    local empty_index34\n  \
    \  local empty_index35\n    local empty_index36\n    local empty_index37\n   \
    \ local empty_index38\n    local empty_index39\n    local empty_index40\n    local\
    \ empty_index41\n    local empty_index42\n    local empty_index43\n    local empty_index44\n\
    \    local empty_index45\n    local empty_index46\n    local empty_index47\n \
    \   local empty_index48\n    local empty_index49\n    local empty_index50\n  \
    \  local empty_index51\n    local empty_index52\n    local empty_index53\n   \
    \ local empty_index54\n    local empty_index55\n    local empty_index56\n    local\
    \ empty_index57\n    local empty_index58\n    local empty_index59\n    local empty_index60\n\
    \    local empty_index61\n    local empty_index62\n    local empty_index63\n \
    \   local empty_index64\n    local empty_index65\n    local empty_index66\n  \
    \  local empty_index67\n    local empty_index68\n    local empty_index69\n   \
    \ local empty_index70\n    local empty_index71\n    local empty_index72\n    local\
    \ empty_index73\n    local empty_index74\n    local empty_index75\n    local empty_index76\n\
    \    local empty_index77\n    local empty\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local bucket\n    local i\n    local j\n    local well\n\
    \    local buckets\n    local line\n    local wells\n    local bucket\n    local\
    \ well\n    local buckets\n    local line\n    local wells\n    local bucket\n\
    \    local well\n    local buckets\n    local line\n    local wells\n    local\
    \ bucket\n    local well\n    local buckets\n    local line\n    local wells\n\
    \    local bucket\n    local well\n    local buckets\n    local line\n    local\
    \ wells\n    local bucket\n    local well\n    local buckets\n    local line\n\
    \    local wells\n    local bucket\n    local well\n    local buckets\n    local\
    \ line\n    local wells\n    local bucket\n    local well\n    local buckets\n\
    \    local line\n    local wells\n    local bucket\n    local well\n    local\
    \ buckets\n    local line\n    local wells\n    local bucket\n    local well\n\
    \    local buckets\n    local line\n    local wells\n    local bucket\n    local\
    \ well\n    local buckets\n    local line\n    local wells\n    local bucket\n\
    \    local well\n    local buckets\n    local line\n    local wells\n    local\
    \ bucket\n    local well\n    local buckets\n    local line\n    local wells\n\
    \    local bucket\n    local well\n    local buckets\n    local line\n    local\
    \ wells\n    local bucket\n    local well\n    local buckets\n    local line\n\
    \    local wells\n    local bucket\n    local well\n    local buckets\n    local\
    \ line\n    local wells\n    local bucket\n    local well\n    local buckets\n\
    \    local line\n    local wells\n    local bucket\n    local well\n    local\
    \ buckets\n    local line\n    local wells\n    local bucket\n    local well\n\
    \    local buckets\n    local line\n    local wells\n    local bucket\n    local\
    \ well\n    local buckets\n    local line\n    local wells\n    local bucket\n\
    \    local well\n    local buckets\n    local line\n    local wells\n    local\
    \ bucket\n    local well\n    local buckets\n    local line\n    \n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ / 2)\n    local empty=0\n    local count=0\n    local i\n    local j\n    local\
    \ bucket\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n    local line\n    local empty\n    local buckets\n    local line\n\
    \    local empty\n    local buckets\n    local line\n    local empty\n    local\
    \ buckets\n\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy5lg6elr.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local i j\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n        ((j=0;\
    \ j<${#lines[$i]}; j++))\n        if [[ ${lines[$i][$j]} == 1 ]]; then\n     \
    \       ((result+=$capacity))\n        fi\n    done\n    echo \"$result\"\n}\n\
    \ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4a1t8e7p.sh: line 33: ((: j=0; j<25; j++: syntax error: invalid
    arithmetic operator (error token is "; j<25; j++")

    /tmp/tmp4a1t8e7p.sh: line 34: ${lines[$i][$j]}: bad substitution

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local bucket\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i\n    local j\n    local bucket\n    local well\n\
    \    local buckets\n    local bucket_count\n    local bucket_capacity\n    local\
    \ bucket_capacity_sum\n    local bucket_capacity_max\n    local bucket_capacity_min\n\
    \    local bucket_capacity_diff\n    local bucket_capacity_diff_capacity\n   \
    \ local bucket_capacity_diff_min\n    local bucket_capacity_diff_max\n    local\
    \ bucket_capacity_diff_diff\n    local bucket_capacity_diff_diff_min\n    local\
    \ bucket_capacity_diff_diff_max\n    local bucket_capacity_diff_diff_diff\n  \
    \  local bucket_capacity_diff_diff_diff_capacity\n    local bucket_capacity_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_capacity\n    local bucket_capacity_diff_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_capacity\n    local bucket_capacity_diff_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_capacity\n    local bucket_capacity_diff_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_capacity\n    local bucket_capacity_diff_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_capacity\n    local bucket_capacity_diff_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_capacity\n    local bucket_capacity_diff_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_capacity\n    local bucket_capacity_diff_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_capacity\n    local bucket_capacity_diff_diff_diff_diff_\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local max=0\n    local min=0\n    local maxcol=0\n   \
    \ local mincol=0\n    local maxrow=0\n    local minrow=0\n    local maxcol2=0\n\
    \    local mincol2=0\n    local maxrow2=0\n    local minrow2=0\n    local maxcol3=0\n\
    \    local mincol3=0\n    local maxrow3=0\n    local minrow3=0\n    local maxcol4=0\n\
    \    local mincol4=0\n    local maxrow4=0\n    local minrow4=0\n    local maxcol5=0\n\
    \    local mincol5=0\n    local maxrow5=0\n    local minrow5=0\n    local maxcol6=0\n\
    \    local mincol6=0\n    local maxrow6=0\n    local minrow6=0\n    local maxcol7=0\n\
    \    local mincol7=0\n    local maxrow7=0\n    local minrow7=0\n    local maxcol8=0\n\
    \    local mincol8=0\n    local maxrow8=0\n    local minrow8=0\n    local maxcol9=0\n\
    \    local mincol9=0\n    local maxrow9=0\n    local minrow9=0\n    local maxcol10=0\n\
    \    local mincol10=0\n    local maxrow10=0\n    local minrow10=0\n    local maxcol11=0\n\
    \    local mincol11=0\n    local maxrow11=0\n    local minrow11=0\n    local maxcol12=0\n\
    \    local mincol12=0\n    local maxrow12=0\n    local minrow12=0\n    local maxcol13=0\n\
    \    local mincol13=0\n    local maxrow13=0\n    local minrow13=0\n    local maxcol14=0\n\
    \    local mincol14=0\n    local maxrow14=0\n    local minrow14=0\n    local maxcol15=0\n\
    \    local mincol15=0\n    local maxrow15=0\n    local minrow15=0\n    local maxcol16=0\n\
    \    local mincol16=0\n    local maxrow16=0\n    local minrow16=0\n    local maxcol17=0\n\
    \    local mincol17=0\n    local maxrow17=0\n    local minrow17=0\n    local maxcol18=0\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local i=0\n    local j=0\n    local max=0\n    local maxj=0\n    local maxi=0\n\
    \    local maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local\
    \ maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n\
    \    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n    local\
    \ maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n\
    \    local maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local\
    \ maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n\
    \    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n    local\
    \ maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n\
    \    local maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local\
    \ maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n\
    \    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n    local\
    \ maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n\
    \    local maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local\
    \ maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n\
    \    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n    local\
    \ maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n\
    \    local maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local\
    \ maxj=0\n    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n\
    \    local maxi=0\n    local maxj=0\n    local maxi=0\n    local maxj=0\n    local\
    \ \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local bucket\n    local buckets\n\
    \    local buckets_len\n    local bucket_len\n    local bucket_cap\n    local\
    \ bucket_count\n    local bucket_capacity\n    local bucket_capacity_min\n   \
    \ local bucket_capacity_max\n    local bucket_capacity_diff\n    local bucket_capacity_diff_cap\n\
    \    local bucket_capacity_diff_min\n    local bucket_capacity_diff_max\n    local\
    \ bucket_capacity_diff_diff\n    local bucket_capacity_diff_diff_min\n    local\
    \ bucket_capacity_diff_diff_max\n    local bucket_capacity_diff_diff_diff\n  \
    \  local bucket_capacity_diff_diff_diff_min\n    local bucket_capacity_diff_diff_diff_max\n\
    \    local bucket_capacity_diff_diff_diff_diff\n    local bucket_capacity_diff_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_diff_min\n    local bucket_capacity_diff_diff_diff_diff_diff_max\n\
    \    local bucket_capacity_diff_diff_diff_diff_diff_diff\n    local bucket_capacity_diff_diff_diff_diff_diff_diff_min\n\
    \    local bucket_capacity_diff_diff_diff_diff_diff_diff_max\n    local bucket_capacity_diff_diff_diff_diff_diff_diff_diff\n\
    \    local bucket_capacity_diff_diff_diff_diff_diff_diff_diff_min\n    local bucket_capacity_diff_diff_diff_diff_diff_diff_diff_max\n\
    \    local bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff\n    local\
    \ bucket_capacity_diff_diff_diff_diff_diff_diff_diff_min\n    local bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_max\n\
    \    local bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_diff\n    local\
    \ bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_diff_min\n    local\
    \ bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_diff_max\n    local\
    \ bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff\n    local\
    \ bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_diff_min\n    local\
    \ bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_diff_max\n    local\
    \ bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff\n    local\
    \ bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_min\n    local\
    \ bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_max\n\
    \    local bucket_capacity_diff_diff_diff_diff_diff_diff_diff_diff_\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local i=0 j=0\n    while read -r line; do\n        ((i++))\n        ((j++))\n\
    \        buckets[$i]=$((capacity))\n    done <<< \"$lines\"\n    local count=0\n\
    \    for ((i=0; i<${#buckets[@]}; i++)); do\n        for ((j=0; j<${#buckets[@]};\
    \ j++)); do\n            if ((buckets[$i]-buckets[$j]>0)); then\n            \
    \    ((buckets[$i]-=buckets[$j]))\n                ((count++))\n             \
    \   break\n            fi\n        done\n    done\n    echo \"$count\"\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local buckets\n    local bucket\n\
    \    local bucketCapacity\n    local maxBucketCapacity\n    local maxBucket\n\
    \    local maxBucketIndex\n    local maxBucketVal\n    local maxBucketValIndex\n\
    \    local maxBucketValIndex2\n    local maxBucketValIndex3\n    local maxBucketValIndex4\n\
    \    local maxBucketValIndex5\n    local maxBucketValIndex6\n    local maxBucketValIndex7\n\
    \    local maxBucketValIndex8\n    local maxBucketValIndex9\n    local maxBucketValIndex10\n\
    \    local maxBucketValIndex11\n    local maxBucketValIndex12\n    local maxBucketValIndex13\n\
    \    local maxBucketValIndex14\n    local maxBucketValIndex15\n    local maxBucketValIndex16\n\
    \    local maxBucketValIndex17\n    local maxBucketValIndex18\n    local maxBucketValIndex19\n\
    \    local maxBucketValIndex20\n    local maxBucketValIndex21\n    local maxBucketValIndex22\n\
    \    local maxBucketValIndex23\n    local maxBucketValIndex24\n    local maxBucketValIndex25\n\
    \    local maxBucketValIndex26\n    local maxBucketValIndex27\n    local maxBucketValIndex28\n\
    \    local maxBucketValIndex29\n    local maxBucketValIndex30\n    local maxBucketValIndex31\n\
    \    local maxBucketValIndex32\n    local maxBucketValIndex33\n    local maxBucketValIndex34\n\
    \    local maxBucketValIndex35\n    local maxBucketValIndex36\n    local maxBucketValIndex37\n\
    \    local maxBucketValIndex38\n    local maxBucketValIndex39\n    local maxBucketValIndex40\n\
    \    local maxBucketValIndex41\n    local maxBucketValIndex42\n    local maxBucketValIndex43\n\
    \    local maxBucketValIndex44\n    local maxBucketValIndex45\n    local maxBucketValIndex46\n\
    \    local maxBucketValIndex47\n    local maxBucketValIndex48\n    local maxBucketValIndex49\n\
    \    local maxBucketValIndex50\n    local maxBucketValIndex51\n    local maxBucketValIndex52\n\
    \    local maxBucketValIndex53\n    local maxBucketValIndex54\n    local maxBucketValIndex55\n\
    \    local maxBucketValIndex56\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\"\
    ) = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxCount=0\n    local maxCountLine=0\n    local maxCountLines=0\n\
    \    local maxCountLinesLength=0\n    local maxCountLinesLengths=0\n    local\
    \ maxCountLinesLengthsLength=0\n    local maxCountLinesLengthsLengths=0\n    local\
    \ maxCountLinesLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengths=0\n    local\
    \ maxCountLinesLengthsLengthsLengthsLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n    local\
    \ maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n    local\
    \ maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n    local\
    \ maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n    local\
    \ maxCountLinesLengthsLengthsLengthsLengthsLengthsLengthss=0\n    local maxCountLinesLengths\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local max=0\n    local maxline=0\n    local maxcol=0\n\
    \    local maxrow=0\n    local maxcol2=0\n    local maxrow2=0\n    local maxcol3=0\n\
    \    local maxrow3=0\n    local maxcol4=0\n    local maxrow4=0\n    local maxcol5=0\n\
    \    local maxrow5=0\n    local maxcol6=0\n    local maxrow6=0\n    local maxcol7=0\n\
    \    local maxrow7=0\n    local maxcol8=0\n    local maxrow8=0\n    local maxcol9=0\n\
    \    local maxrow9=0\n    local maxcol10=0\n    local maxrow10=0\n    local maxcol11=0\n\
    \    local maxrow11=0\n    local maxcol12=0\n    local maxrow12=0\n    local maxcol13=0\n\
    \    local maxrow13=0\n    local maxcol14=0\n    local maxrow14=0\n    local maxcol15=0\n\
    \    local maxrow15=0\n    local maxcol16=0\n    local maxrow16=0\n    local maxcol17=0\n\
    \    local maxrow17=0\n    local maxcol18=0\n    local maxrow18=0\n    local maxcol19=0\n\
    \    local maxrow19=0\n    local maxcol20=0\n    local maxrow20=0\n    local maxcol21=0\n\
    \    local maxrow21=0\n    local maxcol22=0\n    local maxrow22=0\n    local maxcol23=0\n\
    \    local maxrow23=0\n    local maxcol24=0\n    local maxrow24=0\n    local maxcol25=0\n\
    \    local maxrow25=0\n    local maxcol26=0\n    local maxrow26=0\n    local maxcol27=0\n\
    \    local maxrow27=0\n    local maxcol28=0\n    local maxrow28=0\n    local maxcol29=0\n\
    \    local maxrow29=0\n    local maxcol30=0\n    local maxrow30=0\n    local maxcol31=0\n\
    \    local maxrow31=0\n    local maxcol32=0\n    local maxrow32=0\n    local maxcol33=0\n\
    \    local maxrow33=0\n    local maxcol34=0\n    local maxrow34=0\n    local max\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local max=0\n    local min=0\n    local maxx=0\n    local\
    \ minx=0\n    local maxy=0\n    local miny=0\n    local x=0\n    local y=0\n \
    \   local bucket\n    local well\n    local empty\n    \n    while read line;\
    \ do\n        well=$line\n        empty=$((${#well}-1))\n        bucket=${well:$empty:1}\n\
    \        if [[ $bucket == 0 ]]; then\n            ((buckets--))\n        else\n\
    \            ((buckets++))\n        fi\n        if [[ $buckets == 0 ]]; then\n\
    \            ((count++))\n        else\n            ((count--))\n        fi\n\
    \    done <<< \"$lines\"\n    echo \"$count\"\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline=\"\"\n    local maxcapacity=0\n    local maxcapacityline=\"\
    \"\n    local maxcapacitycapacity=0\n    local maxcapacitycapacityline=\"\"\n\
    \    local maxcapacitycapacitycapacity=0\n    local maxcapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacity=0\n    local maxcapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacity=0\n    local maxcapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacity=0\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacityline=\"\"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacityline=\"\"\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\"\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\"\n    local\
    \ maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacityline=\"\
    \"\n    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacitycapacity\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local x\n    local y\n    local buckets\n    local bucket\n\
    \    local bucket_count\n    local bucket_capacity\n    local bucket_capacity_used\n\
    \    local bucket_capacity_used_count\n    local bucket_capacity_used_capacity\n\
    \    local bucket_capacity_used_capacity_used\n    local bucket_capacity_used_capacity_used_count\n\
    \    local bucket_capacity_used_capacity_used_capacity\n    local bucket_capacity_used_capacity_used_capacity_used\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_count\n    local bucket_capacity_used_capacity_used_capacity_used_capacity\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used\n  \
    \  local bucket_capacity_used_capacity_used_capacity_used_capacity_used_count\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_count\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_count\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_count\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_count\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_count\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_count\n\
    \    local bucket_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_capacity_used_count\n\
    \    local bucket_capacity_used_capacity_used_capacity_\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local max=0\n    local maxCount=0\n    local maxBucket=0\n\
    \    local maxBucketCount=0\n    local maxBucketVal=0\n    local maxBucketValCount=0\n\
    \    local maxBucketValVal=0\n    local maxBucketValValCount=0\n    local maxBucketValValVal=0\n\
    \    local maxBucketValValValCount=0\n    local maxBucketValValValVal=0\n    local\
    \ maxBucketValValValValCount=0\n    local maxBucketValValValValVal=0\n    local\
    \ maxBucketValValValValValCount=0\n    local maxBucketValValValValValVal=0\n \
    \   local maxBucketValValValValValCount=0\n    local maxBucketValValValValValVal=0\n\
    \    local maxBucketValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValCount=0\n    local maxBucketValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n    local maxBucketValValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n    local maxBucketValValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n    local maxBucketValValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n    local maxBucketValValValValValValValVal=0\n\
    \    local maxBucketValValValValValValValCount=0\n\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local rows=$((${#lines} / 2))\n    local cols=$((${#lines[@]}\
    \ - rows))\n    local row\n    local col\n    local bucket\n    local empty\n\
    \    local empty_capacity\n    local empty_capacity_row\n    local empty_capacity_col\n\
    \    local empty_capacity_bucket\n    local empty_capacity_bucket_row\n    local\
    \ empty_capacity_bucket_col\n    local empty_capacity_bucket_row_index\n    local\
    \ empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_col_index\n    local empty_capacity_bucket_row_index\n\
    \    local empty_capacity_bucket_\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local count=0\n    local max=0\n    local maxCount=0\n    local maxBucket=0\n\
    \    local maxBucketCount=0\n    local maxBucketMax=0\n    local maxBucketMaxCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n\
    \    local maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local\
    \ maxBucketMaxCountCount=0\n    local maxBucketMaxCountCount=0\n    local maxBucketMaxCount\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptg96k06f.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local max=0\n    local min=0\n    local max2=0\n    local\
    \ min2=0\n    local max3=0\n    local min3=0\n    local max4=0\n    local min4=0\n\
    \    local max5=0\n    local min5=0\n    local max6=0\n    local min6=0\n    local\
    \ max7=0\n    local min7=0\n    local max8=0\n    local min8=0\n    local max9=0\n\
    \    local min9=0\n    local max10=0\n    local min10=0\n    local max11=0\n \
    \   local min11=0\n    local max12=0\n    local min12=0\n    local max13=0\n \
    \   local min13=0\n    local max14=0\n    local min14=0\n    local max15=0\n \
    \   local min15=0\n    local max16=0\n    local min16=0\n    local max17=0\n \
    \   local min17=0\n    local max18=0\n    local min18=0\n    local max19=0\n \
    \   local min19=0\n    local max20=0\n    local min20=0\n    local max21=0\n \
    \   local min21=0\n    local max22=0\n    local min22=0\n    local max23=0\n \
    \   local min23=0\n    local max24=0\n    local min24=0\n    local max25=0\n \
    \   local min25=0\n    local max26=0\n    local min26=0\n    local max27=0\n \
    \   local min27=0\n    local max28=0\n    local min28=0\n    local max29=0\n \
    \   local min29=0\n    local max30=0\n    local min30=0\n    local max31=0\n \
    \   local min31=0\n    local max32=0\n    local min32=0\n    local max33=0\n \
    \   local min33=0\n    local max34=0\n    local min34=0\n    local max35=0\n \
    \   local min35=0\n    local max36=0\n    local min36=0\n    local max37=0\n \
    \   local min37=0\n    local max38=0\n    local min38=0\n    local max39=0\n \
    \   local min39=0\n    local max40=0\n    local min40=0\n    local max41=0\n \
    \   local min41\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ - 1)\n    local bucket\n    local empty\n    local count\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local \n}\n\ncandidate() {\n \
    \   max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmponm84z6a.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$(echo \"$1\" | tr '\\n' ' ')\n    local capacity=$2\n\
    \    local count=0\n    local max=0\n    local min=0\n    local maxcol=0\n   \
    \ local mincol=0\n    local maxrow=0\n    local minrow=0\n    local maxcol2=0\n\
    \    local mincol2=0\n    local maxrow2=0\n    local minrow2=0\n    local maxcol3=0\n\
    \    local mincol3=0\n    local maxrow3=0\n    local minrow3=0\n    local maxcol4=0\n\
    \    local mincol4=0\n    local maxrow4=0\n    local minrow4=0\n    local maxcol5=0\n\
    \    local mincol5=0\n    local maxrow5=0\n    local minrow5=0\n    local maxcol6=0\n\
    \    local mincol6=0\n    local maxrow6=0\n    local minrow6=0\n    local maxcol7=0\n\
    \    local mincol7=0\n    local maxrow7=0\n    local minrow7=0\n    local maxcol8=0\n\
    \    local mincol8=0\n    local maxrow8=0\n    local minrow8=0\n    local maxcol9=0\n\
    \    local mincol9=0\n    local maxrow9=0\n    local minrow9=0\n    local maxcol10=0\n\
    \    local mincol10=0\n    local maxrow10=0\n    local minrow10=0\n    local maxcol11=0\n\
    \    local mincol11=0\n    local maxrow11=0\n    local minrow11=0\n    local maxcol12=0\n\
    \    local mincol12=0\n    local maxrow12=0\n    local minrow12=0\n    local maxcol13=0\n\
    \    local mincol13=0\n    local maxrow13=0\n    local minrow13=0\n    local maxcol14=0\n\
    \    local mincol14=0\n    local maxrow14=0\n    local minrow14=0\n    local maxcol15=0\n\
    \    local mincol15=0\n    local maxrow15=0\n    local minrow15=0\n    local maxcol16=0\n\
    \    local mincol16=0\n    local maxrow16=0\n    local minrow16=0\n    local maxcol17=0\n\
    \    local mincol17=0\n    local maxrow17=0\n    local minrow17=0\n    local maxcol\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local bucket\n    local buckets\n\
    \    local buckets_len\n    local bucket_len\n    local bucket_cap\n    local\
    \ bucket_count\n    local bucket_capacity\n    local bucket_capacity_max\n   \
    \ local bucket_capacity_min\n    local bucket_capacity_sum\n    local bucket_capacity_diff\n\
    \    local bucket_capacity_diff2\n    local bucket_capacity_diff3\n    local bucket_capacity_diff4\n\
    \    local bucket_capacity_diff5\n    local bucket_capacity_diff6\n    local bucket_capacity_diff7\n\
    \    local bucket_capacity_diff8\n    local bucket_capacity_diff9\n    local bucket_capacity_diff10\n\
    \    local bucket_capacity_diff11\n    local bucket_capacity_diff12\n    local\
    \ bucket_capacity_diff13\n    local bucket_capacity_diff14\n    local bucket_capacity_diff15\n\
    \    local bucket_capacity_diff16\n    local bucket_capacity_diff17\n    local\
    \ bucket_capacity_diff18\n    local bucket_capacity_diff19\n    local bucket_capacity_diff20\n\
    \    local bucket_capacity_diff21\n    local bucket_capacity_diff22\n    local\
    \ bucket_capacity_diff23\n    local bucket_capacity_diff24\n    local bucket_capacity_diff25\n\
    \    local bucket_capacity_diff26\n    local bucket_capacity_diff27\n    local\
    \ bucket_capacity_diff28\n    local bucket_capacity_diff29\n    local bucket_capacity_diff30\n\
    \    local bucket_capacity_diff31\n    local bucket_capacity_diff32\n    local\
    \ bucket_capacity_diff33\n    local bucket_capacity_diff34\n    local bucket_capacity_diff35\n\
    \    local bucket_capacity_diff36\n    local bucket_capacity_diff37\n    local\
    \ bucket_capacity_diff38\n    local bucket_capacity_diff39\n    local bucket_capacity_diff40\n\
    \    local bucket_capacity_diff41\n    local bucket_capacity_diff42\n    local\
    \ bucket_capacity_diff43\n    local bucket_capacity_diff44\n    local bucket_capacity_diff45\n\
    \    local bucket_capacity_diff46\n    local bucket_capacity_diff47\n    local\
    \ bucket_capacity_diff48\n    local bucket_capacity_diff49\n    local bucket_capacity_diff50\n\
    \    local bucket_capacity_diff51\n    local bucket_capacity_diff52\n    local\
    \ bucket_capacity_diff53\n    local bucket_capacity\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local row\n    local col\n    local bucket\n\
    \    local empty\n    local empty2\n    local empty3\n    local empty4\n    local\
    \ empty5\n    local empty6\n    local empty7\n    local empty8\n    local empty9\n\
    \    local empty10\n    local empty11\n    local empty12\n    local empty13\n\
    \    local empty14\n    local empty15\n    local empty16\n    local empty17\n\
    \    local empty18\n    local empty19\n    local empty20\n    local empty21\n\
    \    local empty22\n    local empty23\n    local empty24\n    local empty25\n\
    \    local empty26\n    local empty27\n    local empty28\n    local empty29\n\
    \    local empty30\n    local empty31\n    local empty32\n    local empty33\n\
    \    local empty34\n    local empty35\n    local empty36\n    local empty37\n\
    \    local empty38\n    local empty39\n    local empty40\n    local empty41\n\
    \    local empty42\n    local empty43\n    local empty44\n    local empty45\n\
    \    local empty46\n    local empty47\n    local empty48\n    local empty49\n\
    \    local empty50\n    local empty51\n    local empty52\n    local empty53\n\
    \    local empty54\n    local empty55\n    local empty56\n    local empty57\n\
    \    local empty58\n    local empty59\n    local empty60\n    local empty61\n\
    \    local empty62\n    local empty63\n    local empty64\n    local empty65\n\
    \    local empty66\n    local empty67\n    local empty68\n    local empty69\n\
    \    local empty70\n    local empty71\n    local empty72\n    local empty73\n\
    \    local empty74\n    local empty75\n    local empty76\n    local empty77\n\
    \    local empty78\n    local empty79\n    local empty80\n    local empty81\n\
    \    local empty82\n    local empty83\n    local empty84\n    local empty85\n\
    \    local empty86\n    local empty87\n    local empty88\n    local empty89\n\
    \    local empty90\n    local empty91\n    local empty92\n    local empty93\n\
    \    local empty94\n    local empty\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ / 2)\n    local buckets_used=0\n    local buckets_needed=0\n    local bucket_used=0\n\
    \    local bucket_needed=0\n    local bucket_used2=0\n    local bucket_needed2=0\n\
    \    local bucket_used3=0\n    local bucket_needed3=0\n    local bucket_used4=0\n\
    \    local bucket_needed4=0\n    local bucket_used5=0\n    local bucket_needed5=0\n\
    \    local bucket_used6=0\n    local bucket_needed6=0\n    local bucket_used7=0\n\
    \    local bucket_needed7=0\n    local bucket_used8=0\n    local bucket_needed8=0\n\
    \    local bucket_used9=0\n    local bucket_needed9=0\n    local bucket_used10=0\n\
    \    local bucket_needed10=0\n    local bucket_used11=0\n    local bucket_needed11=0\n\
    \    local bucket_used12=0\n    local bucket_needed12=0\n    local bucket_used13=0\n\
    \    local bucket_needed13=0\n    local bucket_used14=0\n    local bucket_needed14=0\n\
    \    local bucket_used15=0\n    local bucket_needed15=0\n    local bucket_used16=0\n\
    \    local bucket_needed16=0\n    local bucket_used17=0\n    local bucket_needed17=0\n\
    \    local bucket_used18=0\n    local bucket_needed18=0\n    local bucket_used19=0\n\
    \    local bucket_needed19=0\n    local bucket_used20=0\n    local bucket_needed20=0\n\
    \    local bucket_used21=0\n    local bucket_needed21=0\n    local bucket_used22=0\n\
    \    local bucket_needed22=0\n    local bucket_used23=0\n    local bucket_needed23=0\n\
    \    local bucket_used24=0\n    local bucket_needed24=0\n    local bucket_used25=0\n\
    \    local bucket_needed25=0\n    local bucket_used26=0\n    local bucket_needed26=0\n\
    \    local bucket_used27=0\n    local bucket_needed27=0\n    local bucket_used28=0\n\
    \    local bucket_needed28=0\n    local bucket_used29=0\n    local bucket_needed29=0\n\
    \    local bucket_used30=0\n    local bucket_needed30=0\n    local bucket_used31=0\n\
    \    local bucket_needed31=0\n    local bucket_used32=0\n    local bucket_needed32=0\n\
    \    local bucket_used33=0\n    local bucket_needed33=0\n    local bucket_used34=0\n\
    \    local bucket_needed34=0\n    local \n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5twb7h9s.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local count=0\n    local max=0\n    local min=$((buckets - 1))\n \
    \   local i\n    local j\n    local bucket\n    local well\n    local buckets\n\
    \    local wells\n    local well\n    local bucket\n    local buckets\n    local\
    \ wells\n    local well\n    local bucket\n    local buckets\n    local wells\n\
    \    local well\n    local bucket\n    local buckets\n    local wells\n    local\
    \ well\n    local bucket\n    local buckets\n    local wells\n    local well\n\
    \    local bucket\n    local buckets\n    local wells\n    local well\n    local\
    \ bucket\n    local buckets\n    local wells\n    local well\n    local bucket\n\
    \    local buckets\n    local wells\n    local well\n    local bucket\n    local\
    \ buckets\n    local wells\n    local well\n    local bucket\n    local buckets\n\
    \    local wells\n    local well\n    local bucket\n    local buckets\n    local\
    \ wells\n    local well\n    local bucket\n    local buckets\n    local wells\n\
    \    local well\n    local bucket\n    local buckets\n    local wells\n    local\
    \ well\n    local bucket\n    local buckets\n    local wells\n    local well\n\
    \    local bucket\n    local buckets\n    local wells\n    local well\n    local\
    \ bucket\n    local buckets\n    local wells\n    local well\n    local bucket\n\
    \    local buckets\n    local wells\n    local well\n    local bucket\n    local\
    \ buckets\n    local wells\n    local well\n    local bucket\n    local buckets\n\
    \    local wells\n    local well\n    local bucket\n    local buckets\n    local\
    \ wells\n    local well\n    local bucket\n    local buckets\n    local wells\n\
    \    local well\n    local bucket\n    local buckets\n    local wells\n    local\
    \ well\n    local bucket\n    local buckets\n    local wells\n    local well\n\
    \    local bucket\n    local buckets\n    local wells\n    local well\n    local\
    \ bucket\n    local buckets\n    local wells\n    local well\n    local bucket\n\
    \    local buckets\n    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6a3k9aj_.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i\n    local j\n    local bucket\n    local line\n\
    \    local buckets\n    local line\n    local bucket\n    local line\n    local\
    \ buckets\n    local line\n    local bucket\n    local line\n    local buckets\n\
    \    local line\n    local bucket\n    local line\n    local buckets\n    local\
    \ line\n    local bucket\n    local line\n    local buckets\n    local line\n\
    \    local bucket\n    local line\n    local buckets\n    local line\n    local\
    \ bucket\n    local line\n    local buckets\n    local line\n    local bucket\n\
    \    local line\n    local buckets\n    local line\n    local bucket\n    local\
    \ line\n    local buckets\n    local line\n    local bucket\n    local line\n\
    \    local buckets\n    local line\n    local bucket\n    local line\n    local\
    \ buckets\n    local line\n    local bucket\n    local line\n    local buckets\n\
    \    local line\n    local bucket\n    local line\n    local buckets\n    local\
    \ line\n    local bucket\n    local line\n    local buckets\n    local line\n\
    \    local bucket\n    local line\n    local buckets\n    local line\n    local\
    \ bucket\n    local line\n    local buckets\n    local line\n    local bucket\n\
    \    local line\n    local buckets\n    local line\n    local bucket\n    local\
    \ line\n    local buckets\n    local line\n    local bucket\n    local line\n\
    \    local buckets\n    local line\n    local bucket\n    local line\n    local\
    \ buckets\n    local line\n    local bucket\n    local line\n    local buckets\n\
    \    local line\n    local bucket\n    local line\n    local buckets\n    local\
    \ line\n    local bucket\n    local line\n    local buckets\n    local line\n\
    \    local bucket\n    local line\n    local buckets\n    local line\n    local\
    \ bucket\n    local line\n    local buckets\n    local line\n    local bucket\n\
    \    local line\n    local buckets\n    local line\n    local bucket\n    local\
    \ line\n    local buckets\n    local line\n    local bucket\n    local line\n\
    \    local buckets\n    local line\n    local bucket\n    \n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local buckets=()\n    local bucket_capacity=0\n    local bucket_count=0\n\
    \    local bucket_index=0\n    local bucket_used=0\n    local bucket_used2=0\n\
    \    local bucket_used3=0\n    local bucket_used4=0\n    local bucket_used5=0\n\
    \    local bucket_used6=0\n    local bucket_used7=0\n    local bucket_used8=0\n\
    \    local bucket_used9=0\n    local bucket_used10=0\n    local bucket_used11=0\n\
    \    local bucket_used12=0\n    local bucket_used13=0\n    local bucket_used14=0\n\
    \    local bucket_used15=0\n    local bucket_used16=0\n    local bucket_used17=0\n\
    \    local bucket_used18=0\n    local bucket_used19=0\n    local bucket_used20=0\n\
    \    local bucket_used21=0\n    local bucket_used22=0\n    local bucket_used23=0\n\
    \    local bucket_used24=0\n    local bucket_used25=0\n    local bucket_used26=0\n\
    \    local bucket_used27=0\n    local bucket_used28=0\n    local bucket_used29=0\n\
    \    local bucket_used30=0\n    local bucket_used31=0\n    local bucket_used32=0\n\
    \    local bucket_used33=0\n    local bucket_used34=0\n    local bucket_used35=0\n\
    \    local bucket_used36=0\n    local bucket_used37=0\n    local bucket_used38=0\n\
    \    local bucket_used39=0\n    local bucket_used40=0\n    local bucket_used41=0\n\
    \    local bucket_used42=0\n    local bucket_used43=0\n    local bucket_used44=0\n\
    \    local bucket_used45=0\n    local bucket_used46=0\n    local bucket_used47=0\n\
    \    local bucket_used48=0\n    local bucket_used49=0\n    local bucket_used50=0\n\
    \    local bucket_used51=0\n    local bucket_used52=0\n    local bucket_used53=0\n\
    \    local bucket_used54=0\n    local bucket_used55=0\n    local bucket_used56=0\n\
    \    local bucket_used57=0\n    local bucket_used58=0\n    local bucket_used59=0\n\
    \    local bucket_used60=0\n    local bucket_used61=0\n    local bucket_used62=0\n\
    \    local bucket_used63=0\n    local bucket_used64=0\n    local bucket_used65=0\n\
    \    local bucket_used66=0\n    local bucket_used67=0\n    local bucket_\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ / 2)\n    local empty=0\n    local count=0\n    local i\n    local j\n    local\
    \ bucket\n    local line\n    local empty\n    local buckets\n    local count\n\
    \    local i\n    local j\n    local bucket\n    local line\n    local empty\n\
    \    local buckets\n    local count\n    local i\n    local j\n    local bucket\n\
    \    local line\n    local empty\n    local buckets\n    local count\n    local\
    \ i\n    local j\n    local bucket\n    local line\n    local empty\n    local\
    \ buckets\n    local count\n    local i\n    local j\n    local bucket\n    local\
    \ line\n    local empty\n    local buckets\n    local count\n    local i\n   \
    \ local j\n    local bucket\n    local line\n    local empty\n    local buckets\n\
    \    local count\n    local i\n    local j\n    local bucket\n    local line\n\
    \    local empty\n    local buckets\n    local count\n    local i\n    local j\n\
    \    local bucket\n    local line\n    local empty\n    local buckets\n    local\
    \ count\n    local i\n    local j\n    local bucket\n    local line\n    local\
    \ empty\n    local buckets\n    local count\n    local i\n    local j\n    local\
    \ bucket\n    local line\n    local empty\n    local buckets\n    local count\n\
    \    local i\n    local j\n    local bucket\n    local line\n    local empty\n\
    \    local buckets\n    local count\n    local i\n    local j\n    local bucket\n\
    \    local line\n    local empty\n    local buckets\n    local count\n    local\
    \ i\n    local j\n    local bucket\n    local line\n    local empty\n    local\
    \ buckets\n    local count\n    local i\n    local j\n    local bucket\n    local\
    \ line\n    local empty\n    local buckets\n    local count\n    local i\n   \
    \ local j\n    local bucket\n    local line\n    local empty\n    local buckets\n\
    \    local count\n    local i\n    local j\n    local bucket\n    local line\n\
    \    local empty\n    local buckets\n    local count\n    local i\n    local j\n\
    \    local bucket\n    local line\n\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpstth8849.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i j\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n\
    \        line=${lines[$i]}\n        for ((j=0; j<${#line[@]}; j++)); do\n    \
    \        if [ ${line[$j]} -eq 1 ]; then\n                ((count++))\n       \
    \     fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvn4h_idd.sh: line 36: [: too many arguments

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local x\n    local y\n    local bucket\n    local empty\n\
    \    \n    while read -r line; do\n        (( count++ ))\n        x=${line%% *}\n\
    \        y=${line#* }\n        bucket=${lines[$(( y-1+x ))]}\n        empty=${lines[$((\
    \ y-1+x ))+1]}\n        if [ \"$empty\" == \"0\" ]; then\n            (( bucket--))\n\
    \        fi\n    done <<< \"$lines\"\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnpg8zl0_.sh: line 40: 0 1 0\n0 1 0 0\n1 1 1 1: syntax error in
    expression (error token is "1 0\n0 1 0 0\n1 1 1 1")

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local min=0\n    local maxrow=0\n    local maxcol=0\n   \
    \ local maxval=0\n    local minval=0\n    local row=0\n    local col=0\n    local\
    \ val=0\n    local rows=${#lines[@]}\n    local cols=${#lines[*]}\n    local maxvals=${#lines[*]}\n\
    \    local minvals=${#lines[*]}\n    local maxrows=${#lines[*]}\n    local maxcols=${#lines[*]}\n\
    \    local maxval=${lines[$maxrows,$maxcols]}\n    local minval=${lines[$maxrows,$maxcols]}\n\
    \    local maxrow=${lines[$maxrows,$maxcols]}\n    local maxcol=${lines[$maxrows,$maxcols]}\n\
    \    local max=${lines[$maxrows,$maxcols]}\n    local min=${lines[$maxrows,$maxcols]}\n\
    \    local row=0\n    local col=0\n    local val=0\n    local rows=${#lines[@]}\n\
    \    local cols=${#lines[*]}\n    local maxvals=${#lines[*]}\n    local minvals=${#lines[*]}\n\
    \    local maxrows=${#lines[*]}\n    local maxcols=${#lines[*]}\n    local maxval=${lines[$maxrows,$maxcols]}\n\
    \    local minval=${lines[$maxrows,$maxcols]}\n    local maxrow=${lines[$maxrows,$maxcols]}\n\
    \    local maxcol=${lines[$maxrows,$maxcols]}\n    local max=${lines[$maxrows,$maxcols]}\n\
    \    local min=${lines[$maxrows,$maxcols]}\n    local row=0\n    local col=0\n\
    \    local val=0\n    local rows=${#lines[@]}\n    local cols=${#lines[*]}\n \
    \   local maxvals=${#lines[*]}\n    local minvals=${#lines[*]}\n    local maxrows=${#lines[*]}\n\
    \    local maxcols=${#lines[*]}\n    local maxval=${lines[$maxrows,$maxcols]}\n\
    \    local minval=${lines[$maxrows,$maxcols]}\n    local maxrow=${lines[$maxrows,\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg9pwgza1.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline=\"\"\n    local maxcapacity=0\n    local maxcount=0\n\
    \    local maxcapacityline=\"\"\n    local maxcapacitylines=0\n    local maxcapacitycapacity=0\n\
    \    local maxcapacitycapacitylines=0\n    local maxcapacitycapacitycapacity=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local maxcapacitycapacitycapacitylines=0\n\
    \    local maxcapacitycapacitycapacitylines=0\n    local max\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local row\n    local col\n    local bucket\n    local empty\n\
    \    local emptyCount\n    local emptyBucket\n    local emptyBucketCount\n   \
    \ local emptyBucketCapacity\n    local emptyBucketCapacityCount\n    local emptyBucketCapacityCountMax\n\
    \    local emptyBucketCapacityCountMin\n    local emptyBucketCapacityCountSum\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n    local emptyBucketCapacityCountSumMin\n\
    \    local emptyBucketCapacityCountSumMax\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local rows=$(echo \"$lines\" | wc -l)\n    local cols=$(echo \"$lines\" |\
    \ cut -d ' ' -f 1 | wc -l)\n    local buckets=$(capacity*$rows)\n    local buckets_used=0\n\
    \    local bucket_count=0\n    local bucket_capacity=0\n    local bucket_used=0\n\
    \    local bucket_used2=0\n    local bucket_used3=0\n    local bucket_used4=0\n\
    \    local bucket_used5=0\n    local bucket_used6=0\n    local bucket_used7=0\n\
    \    local bucket_used8=0\n    local bucket_used9=0\n    local bucket_used10=0\n\
    \    local bucket_used11=0\n    local bucket_used12=0\n    local bucket_used13=0\n\
    \    local bucket_used14=0\n    local bucket_used15=0\n    local bucket_used16=0\n\
    \    local bucket_used17=0\n    local bucket_used18=0\n    local bucket_used19=0\n\
    \    local bucket_used20=0\n    local bucket_used21=0\n    local bucket_used22=0\n\
    \    local bucket_used23=0\n    local bucket_used24=0\n    local bucket_used25=0\n\
    \    local bucket_used26=0\n    local bucket_used27=0\n    local bucket_used28=0\n\
    \    local bucket_used29=0\n    local bucket_used30=0\n    local bucket_used31=0\n\
    \    local bucket_used32=0\n    local bucket_used33=0\n    local bucket_used34=0\n\
    \    local bucket_used35=0\n    local bucket_used36=0\n    local bucket_used37=0\n\
    \    local bucket_used38=0\n    local bucket_used39=0\n    local bucket_used40=0\n\
    \    local bucket_used41=0\n    local bucket_used42=0\n    local bucket_used43=0\n\
    \    local bucket_used44=0\n    local bucket_used45=0\n    local bucket_used46=0\n\
    \    local bucket_used47=0\n    local bucket_used48=0\n    local bucket_used49=0\n\
    \    local bucket_used50=0\n    local bucket_used51=0\n    local bucket_used52=0\n\
    \    local bucket_used53=0\n    local bucket_used54=0\n    local bucket_used55=0\n\
    \    local bucket_used56=0\n    local bucket_used57=0\n    local bucket_used58=0\n\
    \    local bucket_used59=0\n    local bucket_used60=0\n    local bucket_used61=0\n\
    \    local bucket_used\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppfig_45h.sh: line 32: capacity*1: command not found

    '
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local max=0\n    local min=0\n    local maxes=()\n   \
    \ local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n  \
    \  local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n \
    \   local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n    local mine=()\n    local maxes=()\n\
    \    local mins=()\n    local maxe=()\n\n}\n\ncandidate() {\n    max_fill \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local row=0\n    local col=0\n    local max=0\n    local maxrow=0\n    local\
    \ maxcol=0\n    local maxval=0\n    local maxvalrow=0\n    local maxvalcol=0\n\
    \    local maxvalval=0\n    local maxvalvalrow=0\n    local maxvalvalcol=0\n \
    \   local maxvalvalval=0\n    local maxvalvalvalrow=0\n    local maxvalvalvalcol=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n\
    \    local maxvalvalvalval=0\n    local maxvalvalvalval=0\n    local max\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local well\n    local buckets\n    local wells\n    local wells_capacity\n\
    \    local wells_length\n    local wells_width\n    local wells_height\n    local\
    \ wells_width\n    local wells_height\n    local wells_width\n    local wells_height\n\
    \    local wells_width\n    local wells_height\n    local wells_width\n    local\
    \ wells_height\n    local wells_width\n    local wells_height\n    local wells_width\n\
    \    local wells_height\n    local wells_width\n    local wells_height\n    local\
    \ wells_width\n    local wells_height\n    local wells_width\n    local wells_height\n\
    \    local wells_width\n    local wells_height\n    local wells_width\n    local\
    \ wells_height\n    local wells_width\n    local wells_height\n    local wells_width\n\
    \    local wells_height\n    local wells_width\n    local wells_height\n    local\
    \ wells_width\n    local wells_height\n    local wells_width\n    local wells_height\n\
    \    local wells_width\n    local wells_height\n    local wells_width\n    local\
    \ wells_height\n    local wells_width\n    local wells_height\n    local wells_width\n\
    \    local wells_height\n    local wells_width\n    local wells_height\n    local\
    \ wells_width\n    local wells_height\n    local wells_width\n    local wells_height\n\
    \    local wells_width\n    local wells_height\n    local wells_width\n    local\
    \ wells_height\n    local wells_width\n    local wells_height\n    local wells_width\n\
    \    local wells_height\n    local wells_width\n    local wells_height\n    local\
    \ wells_width\n    local wells_height\n    local wells_width\n    local wells_height\n\
    \    local wells_width\n    local wells_height\n    local wells_width\n    local\
    \ wells_height\n    local wells_width\n    local wells_height\n    local wells_width\n\
    \    local wells_height\n    local wells_width\n    local wells_height\n    local\
    \ wells_width\n    local wells_height\n    local \n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local buckets=()\n    local bucket\n    local x\n    local y\n    local z\n\
    \    local xmin\n    local xmax\n    local ymin\n    local ymax\n    local x\n\
    \    local y\n    local z\n    local xmin\n    local xmax\n    local ymin\n  \
    \  local ymax\n    local x\n    local y\n    local z\n    local xmin\n    local\
    \ xmax\n    local ymin\n    local ymax\n    local x\n    local y\n    local z\n\
    \    local xmin\n    local xmax\n    local ymin\n    local ymax\n    local x\n\
    \    local y\n    local z\n    local xmin\n    local xmax\n    local ymin\n  \
    \  local ymax\n    local x\n    local y\n    local z\n    local xmin\n    local\
    \ xmax\n    local ymin\n    local ymax\n    local x\n    local y\n    local z\n\
    \    local xmin\n    local xmax\n    local ymin\n    local ymax\n    local x\n\
    \    local y\n    local z\n    local xmin\n    local xmax\n    local ymin\n  \
    \  local ymax\n    local x\n    local y\n    local z\n    local xmin\n    local\
    \ xmax\n    local ymin\n    local ymax\n    local x\n    local y\n    local z\n\
    \    local xmin\n    local xmax\n    local ymin\n    local ymax\n    local x\n\
    \    local y\n    local z\n    local xmin\n    local xmax\n    local ymin\n  \
    \  local ymax\n    local x\n    local y\n    local z\n    local xmin\n    local\
    \ xmax\n    local ymin\n    local ymax\n    local x\n    local y\n    local z\n\
    \    local xmin\n    local xmax\n    local ymin\n    local ymax\n    local x\n\
    \    local y\n    local z\n    local xmin\n    local xmax\n    local ymin\n  \
    \  local ymax\n    local x\n    local y\n    local z\n    local xmin\n    local\
    \ xmax\n    local ymin\n    local ymax\n    local x\n    local y\n    local z\n\
    \    local xmin\n    local xmax\n    local ymin\n    local ymax\n    local x\n\
    \    local y\n    local z\n    local xmin\n    local xmax\n\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local max=0\n    local min=0\n    local maxw=0\n    local\
    \ minw=0\n    local maxb=0\n    local minb=0\n    local maxwl=0\n    local minwl=0\n\
    \    local maxbl=0\n    local minbl=0\n    local maxwll=0\n    local minwll=0\n\
    \    local maxbll=0\n    local minbll=0\n    local maxwlll=0\n    local minwlll=0\n\
    \    local maxblll=0\n    local minblll=0\n    local maxwllll=0\n    local minwllll=0\n\
    \    local maxbllll=0\n    local minbllll=0\n    local maxwlllll=0\n    local\
    \ minwlllll=0\n    local maxblllll=0\n    local minblllll=0\n    local maxwllllll=0\n\
    \    local minwllllll=0\n    local maxbllllll=0\n    local minbllllll=0\n    local\
    \ maxwlllllll=0\n    local minwlllllll=0\n    local maxblllllll=0\n    local minblllllll=0\n\
    \    local maxwllllllll=0\n    local minwllllllll=0\n    local maxbllllllll=0\n\
    \    local minbllllllll=0\n    local maxwlllllllll=0\n    local minwlllllllll=0\n\
    \    local maxblllllllll=0\n    local minblllllllll=0\n    local maxwllllllllll=0\n\
    \    local minwllllllllll=0\n    local maxbllllllllll=0\n    local minbllllllllll=0\n\
    \    local maxwlllllllllll=0\n    local minwlllllllllll=0\n    local maxblllllllllll=0\n\
    \    local minblllllllllll=0\n    local maxwllllllllllll=0\n    local minwllllllllllll=0\n\
    \    local maxbllllllllllll=0\n    local minbllllllllllllll=0\n    local maxwllllllllll\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local empty=0\n    local max=0\n    local min=0\n    local\
    \ maxrow=0\n    local minrow=0\n    local maxcol=0\n    local mincol=0\n    local\
    \ maxrowcol=0\n    local minrowcol=0\n    local maxcolrow=0\n    local mincolrow=0\n\
    \    local maxrowrow=0\n    local minrowrow=0\n    local maxcolcol=0\n    local\
    \ mincolcol=0\n    local maxrowcol=0\n    local minrowcol=0\n    local maxcolrow=0\n\
    \    local minrowrow=0\n    local maxcolcol=0\n    local mincolcol=0\n    local\
    \ maxrowcol=0\n    local minrowrow=0\n    local maxcolcol=0\n    local mincolcol=0\n\
    \    local maxrowcol=0\n    local minrowrow=0\n    local maxcolcol=0\n    local\
    \ mincolcol=0\n    local maxrowcol=0\n    local minrowrow=0\n    local maxcolcol=0\n\
    \    local mincolcol=0\n    local maxrowcol=0\n    local minrowrow=0\n    local\
    \ maxcolcol=0\n    local mincolcol=0\n    local maxrowcol=0\n    local minrowrow=0\n\
    \    local maxcolcol=0\n    local mincolcol=0\n    local maxrowcol=0\n    local\
    \ minrowrow=0\n    local maxcolcol=0\n    local mincolcol=0\n    local maxrowcol=0\n\
    \    local minrowrow=0\n    local maxcolcol=0\n    local mincolcol=0\n    local\
    \ maxrowcol=0\n    local minrowrow=0\n    local maxcolcol=0\n    local mincolcol=0\n\
    \    local maxrowcol=0\n    local minrowrow=0\n    local maxcolcol=0\n    local\
    \ mincolcol=0\n    local maxrowcol=0\n    local minrowrow=0\n    local maxcolcol=0\n\
    \    local mincolcol=0\n    local maxrowcol=0\n    local minrowrow=0\n    local\
    \ maxcolcol=0\n    local mincolcol=0\n    local maxrowcol=0\n    local minrowrow=0\n\
    \    local maxcolcol=0\n    local mincolcol=0\n    local maxrowcol=0\n    local\
    \ minrowrow=0\n    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local line\n    local\
    \ buckets\n    local bucket\n    local count\n    local i\n    local j\n    local\
    \ n\n    local max\n    local min\n    local nbuckets\n    local nwells\n    local\
    \ nwell\n    local nwells\n    local nbuckets\n    local nwells\n    local nwell\n\
    \    local nwells\n    local nbuckets\n    local nwells\n    local nwell\n   \
    \ local nwells\n    local nbuckets\n    local nwells\n    local nwell\n    local\
    \ nwells\n    local nbuckets\n    local nwells\n    local nwell\n    local nwells\n\
    \    local nbuckets\n    local nwells\n    local nwell\n    local nwells\n   \
    \ local nbuckets\n    local nwells\n    local nwell\n    local nwells\n    local\
    \ nbuckets\n    local nwells\n    local nwell\n    local nwells\n    local nbuckets\n\
    \    local nwells\n    local nwell\n    local nwells\n    local nbuckets\n   \
    \ local nwells\n    local nwell\n    local nwells\n    local nbuckets\n    local\
    \ nwells\n    local nwell\n    local nwells\n    local nbuckets\n    local nwells\n\
    \    local nwell\n    local nwells\n    local nbuckets\n    local nwells\n   \
    \ local nwell\n    local nwells\n    local nbuckets\n    local nwells\n    local\
    \ nwell\n    local nwells\n    local nbuckets\n    local nwells\n    local nwell\n\
    \    local nwells\n    local nbuckets\n    local nwells\n    local nwell\n   \
    \ local nwells\n    local nbuckets\n    local nwells\n    local nwell\n    local\
    \ nwells\n    local nbuckets\n    local nwells\n    local nwell\n    local nwells\n\
    \    local nbuckets\n    local nwells\n    local nwell\n    local nwells\n   \
    \ local nbuckets\n    local nwells\n    local nwell\n    local nwells\n    local\
    \ n\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$(echo \"$1\" | tr '\\n' ' ')\n    local capacity=$2\n\
    \    local buckets=$(echo \"$lines\" | awk '{print $1}')\n    local count=0\n\
    \    local max=0\n    local min=$capacity\n    local maxBucket=0\n    local minBucket=0\n\
    \    local maxBucketCount=0\n    local minBucketCount=0\n    local maxBucketSize=0\n\
    \    local minBucketSize=0\n    local maxBucketSizeCount=0\n    local minBucketSizeCount=0\n\
    \    local maxBucketSizeSize=0\n    local minBucketSizeSize=0\n    local maxBucketSizeSizeCount=0\n\
    \    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local\
    \ minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n\
    \    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local\
    \ maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n\
    \    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local\
    \ minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n\
    \    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local\
    \ maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n\
    \    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local\
    \ minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n\
    \    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local\
    \ maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n\
    \    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local\
    \ minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n\
    \    local maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local\
    \ maxBucketSizeSizeSize=0\n    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n\
    \    local minBucketSizeSizeCount=0\n    local maxBucketSizeSizeSize=0\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local empty=0\n    local count=0\n    local i\n    local j\n    local bucket\n\
    \    local empty\n    local buckets\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local line\n    local line\n    local\
    \ line\n    local line\n    local line\n    local \n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local line\n    local\
    \ buckets\n    local bucket\n    local count\n    local i\n    local j\n    local\
    \ max\n    local min\n    local n\n    local x\n    local y\n    local z\n   \
    \ local buckets\n    local bucket\n    local count\n    local i\n    local j\n\
    \    local max\n    local min\n    local n\n    local x\n    local y\n    local\
    \ z\n    local buckets\n    local bucket\n    local count\n    local i\n    local\
    \ j\n    local max\n    local min\n    local n\n    local x\n    local y\n   \
    \ local z\n    local buckets\n    local bucket\n    local count\n    local i\n\
    \    local j\n    local max\n    local min\n    local n\n    local x\n    local\
    \ y\n    local z\n    local buckets\n    local bucket\n    local count\n    local\
    \ i\n    local j\n    local max\n    local min\n    local n\n    local x\n   \
    \ local y\n    local z\n    local buckets\n    local bucket\n    local count\n\
    \    local i\n    local j\n    local max\n    local min\n    local n\n    local\
    \ x\n    local y\n    local z\n    local buckets\n    local bucket\n    local\
    \ count\n    local i\n    local j\n    local max\n    local min\n    local n\n\
    \    local x\n    local y\n    local z\n    local buckets\n    local bucket\n\
    \    local count\n    local i\n    local j\n    local max\n    local min\n   \
    \ local n\n    local x\n    local y\n    local z\n    local buckets\n    local\
    \ bucket\n    local count\n    local i\n    local j\n    local max\n    local\
    \ min\n    local n\n    local x\n    local y\n    local z\n    local buckets\n\
    \    local bucket\n    local count\n    local i\n    local j\n    local max\n\
    \    local min\n    local n\n    local x\n    local y\n    local z\n    local\
    \ buckets\n    local bucket\n    local count\n    local i\n    local j\n    local\
    \ max\n    local min\n    local n\n    local x\n    local y\n    local z\n   \
    \ \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local line\n    local\
    \ buckets\n    local bucket\n    local count\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local i=0 j=0\n    local max=0\n    local count=0\n    while read line; do\n\
    \        ((i++))\n        ((j++))\n        if [[ $line =~ ^[0-9]+$ ]]; then\n\
    \            ((buckets[$i]=$j))\n        fi\n    done <<< \"$lines\"\n    for\
    \ ((i=0; i<$capacity; i++)); do\n        ((max=$max>buckets[i]?$max:buckets[i]))\n\
    \    done\n    while ((i<$capacity)); do\n        ((count++))\n        ((buckets[i]=$max))\n\
    \    done\n    echo \"$count\"\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\"\
    ) = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local i=0\n    local j=0\n    local buckets=()\n    local bucket\n    local\
    \ well\n    local bucket\n    local well\n    local line\n    local cell\n   \
    \ local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    local cell\n    local cells\n    local cell\n    local cells\n\
    \    local cell\n    local cells\n    local cell\n    local cells\n    local cell\n\
    \    local cells\n    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local row\n    local col\n    local bucket\n    local well\n\
    \    local empty\n    local empty2\n    local empty3\n    local empty4\n    local\
    \ empty5\n    local empty6\n    local empty7\n    local empty8\n    local empty9\n\
    \    local empty10\n    local empty11\n    local empty12\n    local empty13\n\
    \    local empty14\n    local empty15\n    local empty16\n    local empty17\n\
    \    local empty18\n    local empty19\n    local empty20\n    local empty21\n\
    \    local empty22\n    local empty23\n    local empty24\n    local empty25\n\
    \    local empty26\n    local empty27\n    local empty28\n    local empty29\n\
    \    local empty30\n    local empty31\n    local empty32\n    local empty33\n\
    \    local empty34\n    local empty35\n    local empty36\n    local empty37\n\
    \    local empty38\n    local empty39\n    local empty40\n    local empty41\n\
    \    local empty42\n    local empty43\n    local empty44\n    local empty45\n\
    \    local empty46\n    local empty47\n    local empty48\n    local empty49\n\
    \    local empty50\n    local empty51\n    local empty52\n    local empty53\n\
    \    local empty54\n    local empty55\n    local empty56\n    local empty57\n\
    \    local empty58\n    local empty59\n    local empty60\n    local empty61\n\
    \    local empty62\n    local empty63\n    local empty64\n    local empty65\n\
    \    local empty66\n    local empty67\n    local empty68\n    local empty69\n\
    \    local empty70\n    local empty71\n    local empty72\n    local empty73\n\
    \    local empty74\n    local empty75\n    local empty76\n    local empty77\n\
    \    local empty78\n    local empty79\n    local empty80\n    local empty81\n\
    \    local empty82\n    local empty83\n    local empty84\n    local empty85\n\
    \    local empty86\n    local empty87\n    local empty88\n    local empty89\n\
    \    local empty90\n    local empty91\n    local empty92\n    local empty93\n\
    \    local empty94\n    local empty95\n    \n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local buckets\n    local i\n    local j\n    local k\n   \
    \ local bucket\n    local buckets\n    local capacity\n    local line\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local i\n    local j\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxCount=0\n    local maxCountLine=0\n    local maxLine=0\n\
    \    local maxLineCount=0\n    local maxLineCountLine=0\n    local maxLineCountLine2=0\n\
    \    local maxLineCountLine3=0\n    local maxLineCountLine4=0\n    local maxLineCountLine5=0\n\
    \    local maxLineCountLine6=0\n    local maxLineCountLine7=0\n    local maxLineCountLine8=0\n\
    \    local maxLineCountLine9=0\n    local maxLineCountLine10=0\n    local maxLineCountLine11=0\n\
    \    local maxLineCountLine12=0\n    local maxLineCountLine13=0\n    local maxLineCountLine14=0\n\
    \    local maxLineCountLine15=0\n    local maxLineCountLine16=0\n    local maxLineCountLine17=0\n\
    \    local maxLineCountLine18=0\n    local maxLineCountLine19=0\n    local maxLineCountLine20=0\n\
    \    local maxLineCountLine21=0\n    local maxLineCountLine22=0\n    local maxLineCountLine23=0\n\
    \    local maxLineCountLine24=0\n    local maxLineCountLine25=0\n    local maxLineCountLine26=0\n\
    \    local maxLineCountLine27=0\n    local maxLineCountLine28=0\n    local maxLineCountLine29=0\n\
    \    local maxLineCountLine30=0\n    local maxLineCountLine31=0\n    local maxLineCountLine32=0\n\
    \    local maxLineCountLine33=0\n    local maxLineCountLine34=0\n    local maxLineCountLine35=0\n\
    \    local maxLineCountLine36=0\n    local maxLineCountLine37=0\n    local maxLineCountLine38=0\n\
    \    local maxLineCountLine39=0\n    local maxLineCountLine40=0\n    local maxLineCountLine41=0\n\
    \    local maxLineCountLine42=0\n    local maxLineCountLine43=0\n    local maxLineCountLine44=0\n\
    \    local maxLineCountLine45=0\n    local maxLineCountLine46=0\n    local maxLineCountLine47=0\n\
    \    local maxLineCountLine48=0\n    local maxLineCountLine49=0\n    local maxLineCountLine50=0\n\
    \    local maxLineCountLine51=0\n    local maxLineCountLine\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local count=0\n    local empty=0\n    local max=0\n    local min=$capacity\n\
    \    local i\n    local j\n    local bucket\n    local well\n    local wells\n\
    \    local wells_len\n    local bucket_len\n    local bucket_cap\n    local bucket_min\n\
    \    local bucket_max\n    local bucket_i\n    local bucket_j\n    local bucket_i1\n\
    \    local bucket_j1\n    local bucket_i2\n    local bucket_j2\n    local bucket_i3\n\
    \    local bucket_j3\n    local bucket_i4\n    local bucket_j4\n    local bucket_i5\n\
    \    local bucket_j5\n    local bucket_i6\n    local bucket_j6\n    local bucket_i7\n\
    \    local bucket_j7\n    local bucket_i8\n    local bucket_j8\n    local bucket_i9\n\
    \    local bucket_j9\n    local bucket_i10\n    local bucket_j10\n    local bucket_i11\n\
    \    local bucket_j11\n    local bucket_i12\n    local bucket_j12\n    local bucket_i13\n\
    \    local bucket_j13\n    local bucket_i14\n    local bucket_j14\n    local bucket_i15\n\
    \    local bucket_j15\n    local bucket_i16\n    local bucket_j16\n    local bucket_i17\n\
    \    local bucket_j17\n    local bucket_i18\n    local bucket_i19\n    local bucket_j19\n\
    \    local bucket_i20\n    local bucket_j20\n    local bucket_i21\n    local bucket_j21\n\
    \    local bucket_i22\n    local bucket_j22\n    local bucket_i23\n    local bucket_j23\n\
    \    local bucket_i24\n    local bucket_j24\n    local bucket_i25\n    local bucket_j25\n\
    \    local bucket_i26\n    local bucket_j26\n    local bucket_i27\n    local bucket_j27\n\
    \    local bucket_i28\n    local bucket_j28\n    local bucket_i29\n    local bucket_j29\n\
    \    local bucket_i30\n    local bucket_j30\n    local bucket_i31\n    local bucket_j31\n\
    \    local bucket_i32\n    local bucket_i33\n    local bucket_j33\n    local bucket_i34\n\
    \    local bucket_j34\n    local bucket_i35\n    local bucket_j35\n    local bucket_i36\n\
    \    local bucket_\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcg5w1mts.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local empty\n    local empty_capacity\n    local empty_capacity_line\n  \
    \  local empty_capacity_line_count\n    local empty_capacity_line_j\n    local\
    \ empty_capacity_line_i\n    local empty_capacity_line_k\n    local empty_capacity_line_l\n\
    \    local empty_capacity_line_m\n    local empty_capacity_line_n\n    local empty_capacity_line_o\n\
    \    local empty_capacity_line_p\n    local empty_capacity_line_q\n    local empty_capacity_line_r\n\
    \    local empty_capacity_line_u\n    local empty_capacity_line_v\n    local empty_capacity_line_w\n\
    \    local empty_capacity_line_x\n    local empty_capacity_line_y\n    local empty_capacity_line_z\n\
    \    local empty_capacity_line_a\n    local empty_capacity_line_b\n    local empty_capacity_line_c\n\
    \    local empty_capacity_line_d\n    local empty_capacity_line_e\n    local empty_capacity_line_f\n\
    \    local empty_capacity_line_g\n    local empty_capacity_line_h\n    local empty_capacity_line_i\n\
    \    local empty_capacity_line_j\n    local empty_capacity_line_k\n    local empty_capacity_line_l\n\
    \    local empty_capacity_line_m\n    local empty_capacity_line_n\n    local empty_capacity_line_o\n\
    \    local empty_capacity_line_p\n    local empty_capacity_line_q\n    local empty_capacity_line_r\n\
    \    local empty_capacity_line_u\n    local empty_capacity_line_v\n    local empty_capacity_line_w\n\
    \    local empty_capacity_line_x\n    local empty_capacity_line_y\n    local empty_capacity_line_z\n\
    \    local empty_capacity_line_a\n    local empty_capacity_line_b\n    local empty_capacity_line_c\n\
    \    local empty_capacity_line_d\n    local empty_capacity_line_e\n    local empty_capacity_line_f\n\
    \    local empty_capacity_line_g\n    local empty_capacity_line_h\n    local empty_capacity_line_i\n\
    \    local empty_cap\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local min=0\n    local buckets=()\n    local wells=()\n \
    \   local row\n    local col\n    local well\n    local bucket\n    local empty\n\
    \    local empty2\n    local empty3\n    local empty4\n    local empty5\n    local\
    \ empty6\n    local empty7\n    local empty8\n    local empty9\n    local empty10\n\
    \    local empty11\n    local empty12\n    local empty13\n    local empty14\n\
    \    local empty15\n    local empty16\n    local empty17\n    local empty18\n\
    \    local empty19\n    local empty20\n    local empty21\n    local empty22\n\
    \    local empty23\n    local empty24\n    local empty25\n    local empty26\n\
    \    local empty27\n    local empty28\n    local empty29\n    local empty30\n\
    \    local empty31\n    local empty32\n    local empty33\n    local empty34\n\
    \    local empty35\n    local empty36\n    local empty37\n    local empty38\n\
    \    local empty39\n    local empty40\n    local empty41\n    local empty42\n\
    \    local empty43\n    local empty44\n    local empty45\n    local empty46\n\
    \    local empty47\n    local empty48\n    local empty49\n    local empty50\n\
    \    local empty51\n    local empty52\n    local empty53\n    local empty54\n\
    \    local empty55\n    local empty56\n    local empty57\n    local empty58\n\
    \    local empty59\n    local empty60\n    local empty61\n    local empty62\n\
    \    local empty63\n    local empty64\n    local empty65\n    local empty66\n\
    \    local empty67\n    local empty68\n    local empty69\n    local empty70\n\
    \    local empty71\n    local empty72\n    local empty73\n    local empty74\n\
    \    local empty75\n    local empty76\n    local empty77\n    local empty78\n\
    \    local empty79\n    local empty80\n    local empty81\n    local empty82\n\
    \    local empty83\n    local empty84\n    local empty85\n    local empty86\n\
    \    local empty87\n    local empty88\n    local empty89\n    local empty90\n\
    \    local empty91\n    local empty\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local min=0\n    local buckets=()\n    local bucket\n   \
    \ local i\n    local j\n    local line\n    local x\n    local y\n    local z\n\
    \    local bucket\n    local buckets\n    local buckets\n    local buckets\n \
    \   local x\n    local y\n    local z\n    local bucket\n    local buckets\n \
    \   local buckets\n    local x\n    local y\n    local z\n    local bucket\n \
    \   local buckets\n    local buckets\n    local x\n    local y\n    local z\n\
    \    local bucket\n    local buckets\n    local buckets\n    local x\n    local\
    \ y\n    local z\n    local bucket\n    local buckets\n    local buckets\n   \
    \ local x\n    local y\n    local z\n    local bucket\n    local buckets\n   \
    \ local buckets\n    local x\n    local y\n    local z\n    local bucket\n   \
    \ local buckets\n    local buckets\n    local x\n    local y\n    local z\n  \
    \  local bucket\n    local buckets\n    local buckets\n    local x\n    local\
    \ y\n    local z\n    local bucket\n    local buckets\n    local buckets\n   \
    \ local x\n    local y\n    local z\n    local bucket\n    local buckets\n   \
    \ local buckets\n    local x\n    local y\n    local z\n    local bucket\n   \
    \ local buckets\n    local buckets\n    local x\n    local y\n    local z\n  \
    \  local bucket\n    local buckets\n    local buckets\n    local x\n    local\
    \ y\n    local z\n    local bucket\n    local buckets\n    local buckets\n   \
    \ local x\n    local y\n    local z\n    local bucket\n    local buckets\n   \
    \ local buckets\n    local x\n    local y\n    local z\n    local bucket\n   \
    \ local buckets\n    local buckets\n    local x\n    local y\n    local z\n  \
    \  local bucket\n    local buckets\n    local buckets\n    local x\n    local\
    \ y\n    local z\n    local bucket\n    local buckets\n    local buckets\n   \
    \ local x\n    local y\n    local z\n    local bucket\n\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local max=0\n    local maxCount=0\n    local maxBucket=0\n\
    \    local maxBucketCount=0\n    local maxBucketIndex=0\n    local maxBucketValue=0\n\
    \    local maxBucketValueCount=0\n    local maxBucketValueIndex=0\n    local maxBucketValueValue=0\n\
    \    local maxBucketValueValueCount=0\n    local maxBucketValueValueIndex=0\n\
    \    local maxBucketValueValueValue=0\n    local maxBucketValueValueValueCount=0\n\
    \    local maxBucketValueValueValueIndex=0\n    local maxBucketValueValueValue=0\n\
    \    local maxBucketValueValueValueCount=0\n    local maxBucketValueValueValueIndex=0\n\
    \    local maxBucketValueValueValue=0\n    local maxBucketValueValueValueCount=0\n\
    \    local maxBucketValueValueValueIndex=0\n    local maxBucketValueValueValue=0\n\
    \    local maxBucketValueValueValueCount=0\n    local maxBucketValueValueValueIndex=0\n\
    \    local maxBucketValueValueValue=0\n    local maxBucketValueValueValueCount=0\n\
    \    local maxBucketValueValueValueIndex=0\n    local maxBucketValueValueValue=0\n\
    \    local maxBucketValueValueValueCount=0\n    local maxBucketValueValueValueIndex=0\n\
    \    local maxBucketValueValueValue=0\n    local maxBucketValueValueValueCount=0\n\
    \    local maxBucketValueValueValueIndex=0\n    local maxBucketValueValueValue=0\n\
    \    local maxBucketValueValueValueCount=0\n    local maxBucketValueValueValueIndex=0\n\
    \    local maxBucketValueValueValue=0\n    local maxBucketValueValueValueCount=0\n\
    \    local maxBucketValueValueValueIndex=0\n    local maxBucketValueValueValue=0\n\
    \    local maxBucketValueValueValueCount=0\n    local maxBucketValueValueValueIndex=0\n\
    \    local maxBucketValueValueValue=0\n    local maxBucketValueValueValueCount=0\n\
    \    local maxBucketValueValueValueIndex=0\n    local maxBucketValueValueValue=0\n\
    \    local maxBucketValueValueValueCount=0\n    local maxBucketValueValueValueIndex=0\n\
    \    local maxBucketValueValueValue=0\n    local maxBucketValueValueValueCount=0\n\
    \    local maxBucketValueValueValueIndex=0\n    local maxBucketValueValueValue=0\n\
    \    local maxBucketValueValueValueCount=0\n    local maxBucketValueValueValueIndex=0\n\
    \    local max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local line\n    local\
    \ buckets\n    local i\n    local j\n    local count\n    local max\n    local\
    \ min\n    local maxBucket\n    local minBucket\n    local bucket\n    local bucketsCount\n\
    \    local bucketsMax\n    local bucketsMin\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMaxCount\n    local bucketsMinCount\n    local\
    \ bucketsMaxCount\n    local bucketsMinCount\n    local bucketsMaxCount\n    local\
    \ bucketsMinCount\n    local bucketsMax\n}\n\ncandidate() {\n    max_fill \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i\n    local j\n    local bucket\n    local tmp\n\
    \    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n\
    \    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n\
    \    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local\
    \ tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n\
    \    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local\
    \ tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n\
    \    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local\
    \ tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n\
    \    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local\
    \ tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n\
    \    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local\
    \ tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n\
    \    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local\
    \ tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n\
    \    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local\
    \ tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n\
    \    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local\
    \ tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n\
    \    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local\
    \ tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n\
    \    local tmp93\n    local tmp94\n    local tmp95\n    local tmp\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local bucket\n    local i\n    local j\n    local count\n    local max\n\
    \    local maxCount\n    local maxBucket\n    local maxBucketCount\n    local\
    \ maxBucketIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucketCountIndex\n\
    \    local maxBucketCountIndex\n    local maxBucketCountIndex\n    local maxBucket\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local rows=$1\n    local capacity=$2\n    local result=0\n \
    \   local i\n    local j\n    local buckets\n    local bucket\n    local bucket_count\n\
    \    local bucket_capacity\n    local bucket_sum\n    local bucket_max\n    local\
    \ bucket_min\n    local bucket_sum_capacity\n    local bucket_max_capacity\n \
    \   local bucket_min_capacity\n    local bucket_min_capacity_sum\n    local bucket_min_capacity_max\n\
    \    local bucket_min_capacity_min\n    local bucket_min_capacity_sum_capacity\n\
    \    local bucket_min_capacity_max_capacity\n    local bucket_min_capacity_min_capacity\n\
    \    local bucket_min_capacity_min_capacity_sum\n    local bucket_min_capacity_min_capacity_max\n\
    \    local bucket_min_capacity_min_capacity_min\n    local bucket_min_capacity_min_capacity_sum_capacity\n\
    \    local bucket_min_capacity_min_capacity_max_capacity\n    local bucket_min_capacity_min_capacity_min_capacity\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_sum\n    local bucket_min_capacity_min_capacity_min_capacity_max\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_min\n    local bucket_min_capacity_min_capacity_min_capacity_sum_capacity\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_max_capacity\n    local\
    \ bucket_min_capacity_min_capacity_min_capacity_min_capacity\n    local bucket_min_capacity_min_capacity_min_capacity_min_capacity_sum\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_min_capacity_max\n  \
    \  local bucket_min_capacity_min_capacity_min_capacity_min_capacity_min\n    local\
    \ bucket_min_capacity_min_capacity_min_capacity_min_capacity_sum_capacity\n  \
    \  local bucket_min_capacity_min_capacity_min_capacity_min_capacity_max_capacity\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_min_capacity_min_capacity\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_min_capacity_min_capacity_sum\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_min_capacity_min_capacity_max\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_min_capacity_min_capacity_min\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_min_capacity_min_capacity_sum_capacity\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_min_capacity_min_capacity_max_capacity\n\
    \    local bucket_min_capacity_min_capacity_min_capacity_min_capacity_\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline\n    local maxcapacity\n    local maxcount\n\
    \    local maxcapacity_line\n    local maxcapacity_line_index\n    local maxcapacity_line_count\n\
    \    local maxcapacity_line_count_index\n    local maxcapacity_line_count_index\n\
    \    local maxcapacity_line_count_index_count\n    local maxcapacity_line_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count\n    local maxcapacity_line_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count\n    local\
    \ maxcapacity_line_count_index_count_index_count_index_count_index\n    local\
    \ maxcapacity_line_count_index_count_index_count_index_count_index_count\n   \
    \ local maxcapacity_line_count_index_count_index_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local maxcapacity_line_count_index_count_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local row\n    local col\n    local bucket\n    local empty\n\
    \    local empty_capacity\n    local empty_capacity_line\n    local empty_capacity_col\n\
    \    local empty_capacity_bucket\n    local empty_capacity_empty\n    local empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_line\n    local empty_capacity_empty_capacity_col\n\
    \    local empty_capacity_empty_capacity_bucket\n    local empty_capacity_empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity_empty_capacity\n    local empty_capacity_empty_capacity_empty_capacity_line\n\
    \    local empty_capacity_empty_capacity_empty_capacity_col\n    local empty_capacity_empty_capacity_empty_capacity_bucket\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty\n    local empty_capacity_empty_capacity_empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_line\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_col\n \
    \   local empty_capacity_empty_capacity_empty_capacity_empty_capacity_bucket\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_line\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_col\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_bucket\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_line\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_col\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local well\n    \n    while read -r line; do\n        well=$line\n      \
    \  buckets=$((buckets - 1))\n        count=$((count + 1))\n    done <<< \"$lines\"\
    \n    \n    echo \"$count\"\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\
    \ = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i\n    local j\n    local bucket\n    \n    for\
    \ ((i=0; i<${#lines[@]}; i++)); do\n        bucket=${lines[$i]}\n        ((j=0;\
    \ j<${#bucket[@]}; j++))\n        while ((${bucket[$j]} > 0)); do\n          \
    \  ((bucket[$j]--))\n            ((count++))\n        done\n    done\n    \n \
    \   echo \"$count\"\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_81zi2nb.sh: line 37: ((: j=0; j<1; j++: syntax error: invalid
    arithmetic operator (error token is "; j<1; j++")

    /tmp/tmp_81zi2nb.sh: line 38: ((: 0 0 1 0\n0 1 0 0\n1 1 1 1 > 0: syntax error
    in expression (error token is "0 1 0\n0 1 0 0\n1 1 1 1 > 0")

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxCount=0\n    local maxLine=\"\"\n    local maxLineCount=0\n\
    \    local maxLineLength=0\n    local maxLineLengthCount=0\n    local maxLineLengthCountMax=0\n\
    \    local maxLineLengthCountMaxCount=0\n    local maxLineLengthCountMaxCountMax=0\n\
    \    local maxLineLengthCountMaxCountMax=0\n    local maxLineLengthCountMaxCountMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline\n    local maxcol\n    local maxrow\n    local\
    \ maxcol2\n    local maxrow2\n    local maxcol3\n    local maxrow3\n    local\
    \ maxcol4\n    local maxrow4\n    local maxcol5\n    local maxrow5\n    local\
    \ maxcol6\n    local maxrow6\n    local maxcol7\n    local maxrow7\n    local\
    \ maxcol8\n    local maxrow8\n    local maxcol9\n    local maxrow9\n    local\
    \ maxcol10\n    local maxrow10\n    local maxcol11\n    local maxrow11\n    local\
    \ maxcol12\n    local maxrow12\n    local maxcol13\n    local maxrow13\n    local\
    \ maxcol14\n    local maxrow14\n    local maxcol15\n    local maxrow15\n    local\
    \ maxcol16\n    local maxrow16\n    local maxcol17\n    local maxrow17\n    local\
    \ maxcol18\n    local maxrow18\n    local maxcol19\n    local maxrow19\n    local\
    \ maxcol20\n    local maxrow20\n    local maxcol21\n    local maxrow21\n    local\
    \ maxcol22\n    local maxrow22\n    local maxcol23\n    local maxrow23\n    local\
    \ maxcol24\n    local maxrow24\n    local maxcol25\n    local maxrow25\n    local\
    \ maxcol26\n    local maxrow26\n    local maxcol27\n    local maxrow27\n    local\
    \ maxcol28\n    local maxrow28\n    local maxcol29\n    local maxrow29\n    local\
    \ maxcol30\n    local maxrow30\n    local maxcol31\n    local maxrow31\n    local\
    \ maxcol32\n    local maxrow32\n    local maxcol33\n    local maxrow33\n    local\
    \ maxcol34\n    local maxrow34\n    local maxcol35\n    local maxrow35\n    local\
    \ maxcol36\n    local maxrow36\n    local maxcol37\n    local maxrow37\n    local\
    \ maxcol38\n    local maxrow38\n    local maxcol39\n    local maxrow39\n    local\
    \ maxcol40\n    local maxrow40\n    local maxcol41\n    \n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local row\n    local col\n    local bucket\n\
    \    local empty\n    local empty_capacity\n    local empty_capacity_line\n  \
    \  local empty_capacity_col\n    local empty_capacity_bucket\n    local empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity\n    local empty_capacity_empty_capacity_line\n\
    \    local empty_capacity_empty_capacity_col\n    local empty_capacity_empty_capacity_bucket\n\
    \    local empty_capacity_empty_capacity_empty\n    local empty_capacity_empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_empty_capacity_line\n    local empty_capacity_empty_capacity_empty_capacity_col\n\
    \    local empty_capacity_empty_capacity_empty_capacity_bucket\n    local empty_capacity_empty_capacity_empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity\n    local\
    \ empty_capacity_empty_capacity_empty_capacity_empty_capacity_line\n    local\
    \ empty_capacity_empty_capacity_empty_capacity_empty_capacity_col\n    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_bucket\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_line\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_col\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_bucket\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_line\n\
    \    local empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity_empty_capacity\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i j\n    local buckets\n    local bucket\n    local\
    \ empty\n    local empty_capacity\n    local empty_capacity_line\n    local empty_capacity_line_count\n\
    \    local empty_capacity_line_counts\n    local empty_capacity_line_counts_max\n\
    \    local empty_capacity_line_counts_max_line\n    local empty_capacity_line_counts_max_line_count\n\
    \    local empty_capacity_line_counts_max_line_counts\n    local empty_capacity_line_counts_max_line_counts_max\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line\n    local empty_capacity_line_counts_max_line_counts_max_line_count\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts\n    local\
    \ empty_capacity_line_counts_max_line_counts_max_line_counts_max\n    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_count\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts_max\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_count\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_counts\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_counts_max\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_count\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_counts\n\
    \    local empty_capacity_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_counts_max_line_counts_max_\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local bucket\n    local x\n    local y\n    local z\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$capacity\n\
    \    local count=0\n    local bucket\n    local row\n    local col\n    local\
    \ well\n    local empty\n    local empty_capacity\n    local empty_capacity_row\n\
    \    local empty_capacity_col\n    local empty_capacity_well\n    local empty_capacity_wells\n\
    \    local empty_capacity_wells_row\n    local empty_capacity_wells_col\n    local\
    \ empty_capacity_wells_well\n    local empty_capacity_wells_wells\n    local empty_capacity_wells_wells_row\n\
    \    local empty_capacity_wells_wells_col\n    local empty_capacity_wells_wells_well\n\
    \    local empty_capacity_wells_wells_wells\n    local empty_capacity_wells_wells_wells_row\n\
    \    local empty_capacity_wells_wells_wells_col\n    local empty_capacity_wells_wells_wells_well\n\
    \    local empty_capacity_wells_wells_wells_wells\n    local empty_capacity_wells_wells_wells_wells_row\n\
    \    local empty_capacity_wells_wells_wells_wells_col\n    local empty_capacity_wells_wells_wells_wells_well\n\
    \    local empty_capacity_wells_wells_wells_wells_wells\n    local empty_capacity_wells_wells_wells_wells_wells_row\n\
    \    local empty_capacity_wells_wells_wells_wells_wells_col\n    local empty_capacity_wells_wells_wells_wells_wells_well\n\
    \    local empty_capacity_wells_wells_wells_wells_wells_wells\n    local empty_capacity_wells_wells_wells_wells_wells_wells_row\n\
    \    local empty_capacity_wells_wells_wells_wells_wells_wells_col\n    local empty_capacity_wells_wells_wells_wells_wells_wells_well\n\
    \    local empty_capacity_wells_wells_wells_wells_wells_wells_wells\n    local\
    \ empty_capacity_wells_wells_wells_wells_wells_wells_wells_row\n    local empty_capacity_wells_wells_wells_wells_wells_wells_wells_col\n\
    \    local empty_capacity_wells_wells_wells_wells_wells_wells_well\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local buckets=()\n    local bucket\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    \n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local row\n    local col\n    local bucket\n\
    \    local empty\n    \n    while read -r line; do\n        row=(${line//[[:space:]]/})\n\
    \        col=(${line//[[:space:]]/})\n        bucket=${row[0]}\n        empty=${col[0]}\n\
    \        \n        if [[ ${empty} == 0 ]]; then\n            (( buckets[${bucket}]++\
    \ ))\n        fi\n    done <<< \"$lines\"\n    \n    for (( i=0; i<${#buckets[@]};\
    \ i++ )); do\n        if (( ${buckets[$i]} < capacity )); then\n            ((\
    \ count++ ))\n        fi\n    done\n    \n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local rows=$(echo \"$1\" | tr '\\n' ' ')\n    local capacity=$2\n\
    \    local result=0\n    for (( i=0; i<${#rows[@]}; i++ )); do\n        local\
    \ row=${rows[i]}\n        local buckets=${row//0/}\n        local empty=0\n  \
    \      for (( j=0; j<${#buckets[@]}; j++ )); do\n            if [[ ${buckets[j]}\
    \ -eq 0 ]]; then\n                empty=1\n                break\n           \
    \ fi\n        done\n        if [[ ${empty} -eq 1 ]]; then\n            result=$((result+1))\n\
    \        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpep68nmna.sh: line 35: [[: 1 \n 1  \n1 1 1 1 : syntax error: invalid
    arithmetic operator (error token is "\n 1  \n1 1 1 1 ")

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$(echo \"$1\" | tr '\\n' ' ')\n    local capacity=$2\n\
    \    local buckets=$(echo \"$lines\" | tr ' ' '\\n' | sort -u | wc -l)\n    local\
    \ count=0\n    local max=0\n    local maxline=\"\"\n    for ((i=0; i<$buckets;\
    \ i++)) ; do\n        local line=$(echo \"$lines\" | sed -n \"$i p\")\n      \
    \  local linecount=$(echo \"$line\" | tr ' ' '\\n' | sort -u | wc -l)\n      \
    \  if ((linecount>0)); then\n            if ((linecount>max)); then\n        \
    \        max=$linecount\n                maxline=$line\n            fi\n     \
    \   fi\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 3: invalid usage of line address 0

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local max=0\n    local min=0\n    local i\n    local j\n\
    \    local bucket\n    local well\n    local buckets\n    local wells\n    local\
    \ well\n    local bucket\n    local buckets\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n    local line\n    local line\n\
    \    local line\n    local line\n    local line\n\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local buckets=()\n    local wells=()\n    local row\n    local col\n    local\
    \ well\n    local bucket\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local bucket\n\
    \    local empty\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n        line=${lines[$i]}\n\
    \        empty=0\n        for ((j=0; j<${#line[@]}; j++)); do\n            if\
    \ [[ ${line[$j]} -eq 1 ]]; then\n                empty=1\n                break\n\
    \            fi\n        done\n        if [[ $empty -eq 0 ]]; then\n         \
    \   bucket=${line[@]:0:$j}\n            buckets+=(\"$bucket\")\n        fi\n \
    \   done\n    \n    for ((i=0; i<${#buckets[@]}; i++)); do\n        bucket=${buckets[$i]}\n\
    \        capacity-=1\n        if [[ $capacity -eq 0 ]]; then\n            count=$((count+1))\n\
    \        fi\n    done\n    \n    echo \"$count\"\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj_xwv__f.sh: line 41: [[: 0 0 1 0\n0 1 0 0\n1 1 1 1: syntax error
    in expression (error token is "0 1 0\n0 1 0 0\n1 1 1 1")

    /tmp/tmpj_xwv__f.sh: line 54: capacity-=1: command not found

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local buckets_size=0\n    local bucket_capacity=0\n    local bucket_used=0\n\
    \    local bucket_used2=0\n    local bucket_used3=0\n    local bucket_used4=0\n\
    \    local bucket_used5=0\n    local bucket_used6=0\n    local bucket_used7=0\n\
    \    local bucket_used8=0\n    local bucket_used9=0\n    local bucket_used10=0\n\
    \    local bucket_used11=0\n    local bucket_used12=0\n    local bucket_used13=0\n\
    \    local bucket_used14=0\n    local bucket_used15=0\n    local bucket_used16=0\n\
    \    local bucket_used17=0\n    local bucket_used18=0\n    local bucket_used19=0\n\
    \    local bucket_used20=0\n    local bucket_used21=0\n    local bucket_used22=0\n\
    \    local bucket_used23=0\n    local bucket_used24=0\n    local bucket_used25=0\n\
    \    local bucket_used26=0\n    local bucket_used27=0\n    local bucket_used28=0\n\
    \    local bucket_used29=0\n    local bucket_used30=0\n    local bucket_used31=0\n\
    \    local bucket_used32=0\n    local bucket_used33=0\n    local bucket_used34=0\n\
    \    local bucket_used35=0\n    local bucket_used36=0\n    local bucket_used37=0\n\
    \    local bucket_used38=0\n    local bucket_used39=0\n    local bucket_used40=0\n\
    \    local bucket_used41=0\n    local bucket_used42=0\n    local bucket_used43=0\n\
    \    local bucket_used44=0\n    local bucket_used45=0\n    local bucket_used46=0\n\
    \    local bucket_used47=0\n    local bucket_used48=0\n    local bucket_used49=0\n\
    \    local bucket_used50=0\n    local bucket_used51=0\n    local bucket_used52=0\n\
    \    local bucket_used53=0\n    local bucket_used54=0\n    local bucket_used55=0\n\
    \    local bucket_used56=0\n    local bucket_used57=0\n    local bucket_used58=0\n\
    \    local bucket_used59=0\n    local bucket_used60=0\n    local bucket_used61=0\n\
    \    local bucket_used62=0\n    local bucket_used63=0\n    local bucket_used64=0\n\
    \    local bucket_used65=0\n    local bucket_used66=0\n    local bucket_used67=0\n\
    \    local bucket_used68=0\n    local bucket_used69=0\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxCount=0\n    local maxLine=0\n    local maxLineCount=0\n\
    \    local maxLineLength=0\n    local maxLineLengthCount=0\n    local maxLineLengthCountMax=0\n\
    \    local maxLineLengthCountMaxCount=0\n    local maxLineLengthCountMaxCountMax=0\n\
    \    local maxLineLengthCountMaxCountMax=0\n    local maxLineLengthCountMaxCountMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n    local\
    \ maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n    local\
    \ maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMaxMaxMax=0\n\
    \    local maxLineLengthCountMaxCountMaxMaxMaxMaxMaxMaxMax\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local i\n    local j\n    local buckets\n    local bucket\n    local bucketsCount\n\
    \    local bucketsCountMax\n    local bucketsCountMin\n    local bucketsCountMinMax\n\
    \    local bucketsCountMinMaxMax\n    local bucketsCountMinMaxMaxMax\n    local\
    \ bucketsCountMinMaxMaxMaxMax\n    local bucketsCountMinMaxMaxMaxMaxMax\n    local\
    \ bucketsCountMinMaxMaxMaxMaxMaxMax\n    local bucketsCountMinMaxMaxMaxMaxMaxMaxMax\n\
    \    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMax\n    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n \
    \   local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local bucketsCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local bucket\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local buckets_size=0\n    local bucket_size=0\n    local bucket_capacity=0\n\
    \    local bucket_count=0\n    local bucket_used=0\n    local bucket_used2=0\n\
    \    local bucket_used3=0\n    local bucket_used4=0\n    local bucket_used5=0\n\
    \    local bucket_used6=0\n    local bucket_used7=0\n    local bucket_used8=0\n\
    \    local bucket_used9=0\n    local bucket_used10=0\n    local bucket_used11=0\n\
    \    local bucket_used12=0\n    local bucket_used13=0\n    local bucket_used14=0\n\
    \    local bucket_used15=0\n    local bucket_used16=0\n    local bucket_used17=0\n\
    \    local bucket_used18=0\n    local bucket_used19=0\n    local bucket_used20=0\n\
    \    local bucket_used21=0\n    local bucket_used22=0\n    local bucket_used23=0\n\
    \    local bucket_used24=0\n    local bucket_used25=0\n    local bucket_used26=0\n\
    \    local bucket_used27=0\n    local bucket_used28=0\n    local bucket_used29=0\n\
    \    local bucket_used30=0\n    local bucket_used31=0\n    local bucket_used32=0\n\
    \    local bucket_used33=0\n    local bucket_used34=0\n    local bucket_used35=0\n\
    \    local bucket_used36=0\n    local bucket_used37=0\n    local bucket_used38=0\n\
    \    local bucket_used39=0\n    local bucket_used40=0\n    local bucket_used41=0\n\
    \    local bucket_used42=0\n    local bucket_used43=0\n    local bucket_used44=0\n\
    \    local bucket_used45=0\n    local bucket_used46=0\n    local bucket_used47=0\n\
    \    local bucket_used48=0\n    local bucket_used49=0\n    local bucket_used50=0\n\
    \    local bucket_used51=0\n    local bucket_used52=0\n    local bucket_used53=0\n\
    \    local bucket_used54=0\n    local bucket_used55=0\n    local bucket_used56=0\n\
    \    local bucket_used57=0\n    local bucket_used58=0\n    local bucket_used59=0\n\
    \    local bucket_used60=0\n    local bucket_used61=0\n    local bucket_used62=0\n\
    \    local bucket_used63=0\n    local bucket_used64=0\n    local bucket_used65=0\n\
    \    local bucket_used66=0\n    local bucket_used67=0\n    \n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local i\n    local j\n    local buckets\n    local bucket\n\
    \    local bucket_capacity\n    local bucket_count\n    local bucket_index\n \
    \   local bucket_index2\n    local bucket_index3\n    local bucket_index4\n  \
    \  local bucket_index5\n    local bucket_index6\n    local bucket_index7\n   \
    \ local bucket_index8\n    local bucket_index9\n    local bucket_index10\n   \
    \ local bucket_index11\n    local bucket_index12\n    local bucket_index13\n \
    \   local bucket_index14\n    local bucket_index15\n    local bucket_index16\n\
    \    local bucket_index17\n    local bucket_index18\n    local bucket_index19\n\
    \    local bucket_index20\n    local bucket_index21\n    local bucket_index22\n\
    \    local bucket_index23\n    local bucket_index24\n    local bucket_index25\n\
    \    local bucket_index26\n    local bucket_index27\n    local bucket_index28\n\
    \    local bucket_index29\n    local bucket_index30\n    local bucket_index31\n\
    \    local bucket_index32\n    local bucket_index33\n    local bucket_index34\n\
    \    local bucket_index35\n    local bucket_index36\n    local bucket_index37\n\
    \    local bucket_index38\n    local bucket_index39\n    local bucket_index40\n\
    \    local bucket_index41\n    local bucket_index42\n    local bucket_index43\n\
    \    local bucket_index44\n    local bucket_index45\n    local bucket_index46\n\
    \    local bucket_index47\n    local bucket_index48\n    local bucket_index49\n\
    \    local bucket_index50\n    local bucket_index51\n    local bucket_index52\n\
    \    local bucket_index53\n    local bucket_index54\n    local bucket_index55\n\
    \    local bucket_index56\n    local bucket_index57\n    local bucket_index58\n\
    \    local bucket_index59\n    local bucket_index60\n    local bucket_index61\n\
    \    local bucket_index62\n    local bucket_index63\n    local bucket_index64\n\
    \    local bucket_index65\n    local bucket_index66\n    local bucket_index67\n\
    \    local bucket_index68\n    local bucket_index69\n    local bucket_index70\n\
    \    local bucket_index71\n    local bucket_index72\n    local bucket_index73\n\
    \    local bucket_index74\n    local bucket_index75\n    local bucket_index76\n\
    \    local bucket_index77\n    local bucket_\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local i\n    local j\n    local k\n  \
    \  local bucket\n    local buckets\n    local line\n    local i\n    local j\n\
    \    local k\n    local bucket\n    local buckets\n    local line\n    local i\n\
    \    local j\n    local k\n    local bucket\n    local buckets\n    local line\n\
    \    local i\n    local j\n    local k\n    local bucket\n    local buckets\n\
    \    local line\n    local i\n    local j\n    local k\n    local bucket\n   \
    \ local buckets\n    local line\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local line\n    local i\n    local j\n    local\
    \ k\n    local bucket\n    local buckets\n    local line\n    local i\n    local\
    \ j\n    local k\n    local bucket\n    local buckets\n    local line\n    local\
    \ i\n    local j\n    local k\n    local bucket\n    local buckets\n    local\
    \ line\n    local i\n    local j\n    local k\n    local bucket\n    local buckets\n\
    \    local line\n    local i\n    local j\n    local k\n    local bucket\n   \
    \ local buckets\n    local line\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local line\n    local i\n    local j\n    local\
    \ k\n    local bucket\n    local buckets\n    local line\n    local i\n    local\
    \ j\n    local k\n    local bucket\n    local buckets\n    local line\n    local\
    \ i\n    local j\n    local k\n    local bucket\n    local buckets\n    local\
    \ line\n    local i\n    local j\n    local k\n    local bucket\n    local buckets\n\
    \    local line\n    local i\n    local j\n    local k\n    local bucket\n   \
    \ local buckets\n    local line\n    local i\n    local j\n    local k\n    local\
    \ bucket\n    local buckets\n    local line\n    local i\n    local j\n    local\
    \ k\n    local bucket\n    local buckets\n    local line\n    local i\n    local\
    \ j\n    local \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local i j\n    \n    for ((i=0; i<${#lines[@]}; i++)); do\n        for ((j=0;\
    \ j<${#lines[$i]}; j++)); do\n            if [ ${lines[$i][$j]} == 1 ]; then\n\
    \                let result+=1\n            fi\n        done\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[\
    \ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n  \
    \  [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprbyceto_.sh: line 34: ${lines[$i][$j]}: bad substitution

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local bucket\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local result=0\n\
    \    local buckets=()\n    local bucket\n    local well\n    local row\n    local\
    \ col\n    local i\n    local j\n    local k\n    local l\n    local n\n    local\
    \ m\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    \n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxline=\"\"\n    local maxcapacity=0\n    local maxcount=0\n\
    \    local maxcapacityline=\"\"\n    local maxcapacitylines=0\n    local maxcapacitylinecount=0\n\
    \    local maxcapacitylinecounts=0\n    local maxcapacitylinecounts2=0\n    local\
    \ maxcapacitylinecounts3=0\n    local maxcapacitylinecounts4=0\n    local maxcapacitylinecounts5=0\n\
    \    local maxcapacitylinecounts6=0\n    local maxcapacitylinecounts7=0\n    local\
    \ maxcapacitylinecounts8=0\n    local maxcapacitylinecounts9=0\n    local maxcapacitylinecounts10=0\n\
    \    local maxcapacitylinecounts11=0\n    local maxcapacitylinecounts12=0\n  \
    \  local maxcapacitylinecounts13=0\n    local maxcapacitylinecounts14=0\n    local\
    \ maxcapacitylinecounts15=0\n    local maxcapacitylinecounts16=0\n    local maxcapacitylinecounts17=0\n\
    \    local maxcapacitylinecounts18=0\n    local maxcapacitylinecounts19=0\n  \
    \  local maxcapacitylinecounts20=0\n    local maxcapacitylinecounts21=0\n    local\
    \ maxcapacitylinecounts22=0\n    local maxcapacitylinecounts23=0\n    local maxcapacitylinecounts24=0\n\
    \    local maxcapacitylinecounts25=0\n    local maxcapacitylinecounts26=0\n  \
    \  local maxcapacitylinecounts27=0\n    local maxcapacitylinecounts28=0\n    local\
    \ maxcapacitylinecounts29=0\n    local maxcapacitylinecounts30=0\n    local maxcapacitylinecounts31=0\n\
    \    local maxcapacitylinecounts32=0\n    local maxcapacitylinecounts33=0\n  \
    \  local maxcapacitylinecounts34=0\n    local maxcapacitylinecounts35=0\n    local\
    \ maxcapacitylinecounts36=0\n    local maxcapacitylinecounts37=0\n    local maxcapacitylinecounts38=0\n\
    \    local maxcapacitylinecounts39=0\n    local maxcapacitylinecounts40=0\n  \
    \  local maxcapacitylinecounts41=0\n    local maxcapacitylinecounts42=0\n    local\
    \ maxcapacitylinecounts43=0\n    local maxcapacitylinecounts44=0\n    local maxcapacitylinecounts45=0\n\
    \    local \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local count=0\n    local max=0\n    local maxCount=0\n    local maxCountLine=0\n\
    \    local maxCountLines=0\n    local maxCountLinesLength=0\n    local maxCountLinesLengths=0\n\
    \    local maxCountLinesLengthsLength=0\n    local maxCountLinesLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengths=0\n    local maxCountLinesLengthsLengthsLength=0\n\
    \    local maxCountLinesLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLength\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt0lgqz6p.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local maxCount=0\n    local maxLine=\"\"\n    local maxLineCount=0\n\
    \    local maxLineLength=0\n    local maxLineLengthCount=0\n    local maxLineLengthCountMax=0\n\
    \    local maxLineLengthCountMin=0\n    local maxLineLengthCountMaxMin=0\n   \
    \ local maxLineLengthCountMinMax=0\n    local maxLineLengthCountMaxMin=0\n   \
    \ local maxLineLengthCountMinMaxMax=0\n    local maxLineLengthCountMaxMinMax=0\n\
    \    local maxLineLengthCountMinMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local maxLineLengthCountMinMaxMaxMax=0\n    local maxLineLengthCountMaxMinMaxMax=0\n\
    \    local max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local bucket\n    local i j\n    local count\n    local max\n    \n    i=0\n\
    \    while read line; do\n        bucket=()\n        j=0\n        while read bucket;\
    \ do\n            bucket[j]=$bucket\n            j=$((j+1))\n        done < <(echo\
    \ \"$line\" | tr \" \" \"\\n\")\n        buckets[i]=$bucket\n        i=$((i+1))\n\
    \    done < <(echo \"$lines\" | tr \" \" \"\\n\")\n    \n    i=0\n    while read\
    \ line; do\n        count=$(echo \"$line\" | tr \" \" \"\\n\" | wc -l)\n     \
    \   max=$(echo \"$line\" | tr \" \" \"\\n\" | sort -n | tail -n 1)\n        while\
    \ read bucket; do\n            if [ \"$bucket\" -eq \"$max\" ]; then\n       \
    \         count=$((count-1))\n            fi\n        done < <(echo \"$line\"\
    \ | tr \" \" \"\\n\")\n        echo \"$count\"\n    done < <(echo \"$lines\" |\
    \ tr \" \" \"\\n\")\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv7n_2222.sh: line 52: [: 0n0: integer expression expected

    /tmp/tmpv7n_2222.sh: line 52: [: 0n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=$(capacity\
    \ + 1)\n    local count=0\n    local max=0\n    local maxCount=0\n    local maxCountLine=0\n\
    \    local maxCountLines=0\n    local maxCountLinesLength=0\n    local maxCountLinesLengths=0\n\
    \    local maxCountLinesLengthsLength=0\n    local maxCountLinesLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengths=0\n    local maxCountLinesLengthsLengthsLength=0\n\
    \    local maxCountLinesLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengths=0\n    local maxCountLinesLengthsLengthsLengths=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLengthsLengthss=0\n    local maxCountLinesLengthsLengthsLengthss=0\n\
    \    local maxCountLinesLengthsLength\n}\n\ncandidate() {\n    max_fill \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbjerejl3.sh: line 29: capacity: command not found

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local i\n    local j\n    local bucket\n    local buckets\n\
    \    local line\n    local length\n    local max\n    local min\n    local n\n\
    \    local s\n    local t\n    local w\n    local x\n    local y\n    local z\n\
    \    \n    while read line; do\n        length=${#line}\n        if (( length\
    \ != 3 )); then\n            echo \"ERROR: invalid line $line\"\n            exit\
    \ -1\n        fi\n        \n        buckets=()\n        for (( i=0; i<length;\
    \ i++ )); do\n            bucket=${line[i]}\n            buckets+=( \"$bucket\"\
    \ )\n        done\n        \n        for (( i=0; i<length; i++ )); do\n      \
    \      bucket=${buckets[i]}\n            (( buckets[bucket]++ ))\n        done\n\
    \        \n        for (( i=0; i<length; i++ )); do\n            bucket=${buckets[i]}\n\
    \            (( buckets[bucket]++ ))\n        done\n        \n        for (( i=0;\
    \ i<length; i++ )); do\n            bucket=${buckets[i]}\n            (( buckets[bucket]++\
    \ ))\n        done\n        \n        for (( i=0; i<length; i++ )); do\n     \
    \       bucket=${buckets[i]}\n            (( buckets[bucket]++ ))\n        done\n\
    \        \n        for (( i=0; i<length; i++ )); do\n            bucket=${buckets[i]}\n\
    \            (( buckets[bucket]++ ))\n        done\n        \n        for (( i=0;\
    \ i<length; i++ )); do\n            bucket=${buckets[i]}\n            (( buckets[bucket]++\
    \ ))\n        done\n        \n        for (( i=0; i<length; i++ )); do\n     \
    \       bucket=${buckets[i]}\n            (( buckets[bucket]++ ))\n        done\n\
    \        \n        for (( i=0; i<length; i++ )); do\n            bucket=${buckets[i]}\n\
    \            (( buckets[bucket]++ ))\n        done\n        \n        for (( i=0;\
    \ i<length; i++ )); do\n            bucket=${buckets[i]}\n            (( buckets[bucket]++\
    \ ))\n        done\n        \n        for (( i=0; i<length; i++ )); do\n     \
    \       bucket=${buckets[i]}\n            (( buckets[bucket]++ ))\n        done\n\
    \        \n        for (( i=0; i<length; i++ )); do\n            bucket=${buckets[i]}\n\
    \            (( buckets[bucket]++ ))\n        done\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwudqzltc.sh: line 114: syntax error near unexpected token `}''

    /tmp/tmpwudqzltc.sh: line 114: `}''

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local line\n    local i j\n    local bucket\n    local\
    \ empty\n    \n    while read -r line; do\n        i=${line%% *}\n        j=${line##*\
    \ }\n        bucket=${line#$i}\n        empty=${line#$j}\n        ((empty==0))\
    \ && continue\n        ((empty==1)) && continue\n        ((empty==2)) && continue\n\
    \        ((empty==3)) && continue\n        ((empty==4)) && continue\n        ((empty==5))\
    \ && continue\n        ((empty==6)) && continue\n        ((empty==7)) && continue\n\
    \        ((empty==8)) && continue\n        ((empty==9)) && continue\n        ((empty==10))\
    \ && continue\n        ((empty==11)) && continue\n        ((empty==12)) && continue\n\
    \        ((empty==13)) && continue\n        ((empty==14)) && continue\n      \
    \  ((empty==15)) && continue\n        ((empty==16)) && continue\n        ((empty==17))\
    \ && continue\n        ((empty==18)) && continue\n        ((empty==19)) && continue\n\
    \        ((empty==20)) && continue\n        ((empty==21)) && continue\n      \
    \  ((empty==22)) && continue\n        ((empty==23)) && continue\n        ((empty==24))\
    \ && continue\n        ((empty==25)) && continue\n        ((empty==26)) && continue\n\
    \        ((empty==27)) && continue\n        ((empty==28)) && continue\n      \
    \  ((empty==29)) && continue\n        ((empty==30)) && continue\n        ((empty==31))\
    \ && continue\n        ((empty==32)) && continue\n        ((empty==33)) && continue\n\
    \        ((empty==34)) && continue\n        ((empty==35)) && continue\n      \
    \  ((empty==36)) && continue\n        ((empty==37)) && continue\n        ((empty==38))\
    \ && continue\n        ((empty==39)) && continue\n        ((empty==40)) && continue\n\
    \        ((empty==41)) && continue\n        ((empty==42)) && continue\n      \
    \  ((empty==43)) && continue\n        ((empty==44)) && continue\n        ((empty==45))\
    \ && continue\n        ((empty==46)) && continue\n        ((empty==47)) && continue\n\
    \        ((empty==48)) \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpieyih15i.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmpieyih15i.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local max=0\n    local min=0\n    local maxrow=0\n    local minrow=0\n   \
    \ local maxcol=0\n    local mincol=0\n    local row=0\n    local col=0\n    local\
    \ bucket=0\n    local well=0\n    local empty=0\n    local emptyrow=0\n    local\
    \ emptycol=0\n    local emptybucket=0\n    local emptywell=0\n    local emptyrow2=0\n\
    \    local emptycol2=0\n    local emptybucket2=0\n    local emptywell2=0\n   \
    \ local emptyrow3=0\n    local emptycol3=0\n    local emptybucket3=0\n    local\
    \ emptywell3=0\n    local emptyrow4=0\n    local emptycol4=0\n    local emptybucket4=0\n\
    \    local emptywell4=0\n    local emptyrow5=0\n    local emptycol5=0\n    local\
    \ emptybucket5=0\n    local emptywell5=0\n    local emptyrow6=0\n    local emptycol6=0\n\
    \    local emptybucket6=0\n    local emptywell6=0\n    local emptyrow7=0\n   \
    \ local emptycol7=0\n    local emptybucket7=0\n    local emptywell7=0\n    local\
    \ emptyrow8=0\n    local emptycol8=0\n    local emptybucket8=0\n    local emptywell8=0\n\
    \    local emptyrow9=0\n    local emptycol9=0\n    local emptybucket9=0\n    local\
    \ emptywell9=0\n    local emptyrow10=0\n    local emptycol10=0\n    local emptybucket10=0\n\
    \    local emptywell10=0\n    local emptyrow11=0\n    local emptycol11=0\n   \
    \ local emptybucket11=0\n    local emptywell11=0\n    local emptyrow12=0\n   \
    \ local emptycol12=0\n    local emptybucket12=0\n    local emptywell12=0\n   \
    \ local emptyrow13=0\n    local emptycol13=0\n    local emptybucket13=0\n    local\
    \ emptywell13=0\n    local emptyrow14=0\n    local emptycol14=0\n    local emptybucket14=0\n\
    \    local emptywell14=0\n    local emptyrow15=0\n    local emptycol15=0\n   \
    \ local emptybucket15=0\n    local emptywell15=0\n    local emptyrow16=0\n   \
    \ local emptycol16=0\n    local emptybucket16=0\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local count=0\n \
    \   local line\n    local row\n    local col\n    local bucket\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053935
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\
    \n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\
    \n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <=\
    \ 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity\
    \ <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\n\
    max_fill() {\n    local lines=$1\n    local capacity=$2\n    local buckets=()\n\
    \    local count=0\n    local empty=0\n    local max=0\n    local min=0\n    local\
    \ min_index=0\n    local max_index=0\n    local index=0\n    local line\n    local\
    \ row\n    local well\n    local bucket\n    local empty\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local empty_index\n    local\
    \ empty_index\n    local empty_index\n    local empty_index\n    local empty_index\n\
    \    local empty_index\n    local empty_index\n    local \n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660053936
