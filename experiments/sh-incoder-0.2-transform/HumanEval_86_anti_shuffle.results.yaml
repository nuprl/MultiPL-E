language: sh
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    local word_count=0\n    local word_length=0\n    local word_length_count=0\n\
    \    local word_length_count2=0\n    local word_length_count3=0\n    local word_length_count4=0\n\
    \    local word_length_count5=0\n    local word_length_count6=0\n    local word_length_count7=0\n\
    \    local word_length_count8=0\n    local word_length_count9=0\n    local word_length_count10=0\n\
    \    local word_length_count11=0\n    local word_length_count12=0\n    local word_length_count13=0\n\
    \    local word_length_count14=0\n    local word_length_count15=0\n    local word_length_count16=0\n\
    \    local word_length_count17=0\n    local word_length_count18=0\n    local word_length_count19=0\n\
    \    local word_length_count20=0\n    local word_length_count21=0\n    local word_length_count22=0\n\
    \    local word_length_count23=0\n    local word_length_count24=0\n    local word_length_count25=0\n\
    \    local word_length_count26=0\n    local word_length_count27=0\n    local word_length_count28=0\n\
    \    local word_length_count29=0\n    local word_length_count30=0\n    local word_length_count31=0\n\
    \    local word_length_count32=0\n    local word_length_count33=0\n    local word_length_count34=0\n\
    \    local word_length_count35=0\n    local word_length_count36=0\n    local word_length_count37=0\n\
    \    local word_length_count38=0\n    local word_length_count39=0\n    local word_length_count40=0\n\
    \    local word_length_count41=0\n    local word_length_count42=0\n    local word_length_count43=0\n\
    \    local word_length_count44=0\n    local word_length_count45=0\n    local word_length_count46=0\n\
    \    local word_length_count47=0\n    local word_length_count48=0\n    local word_length_count49=0\n\
    \    local word_length_count50=0\n    local word_length_count51=0\n    local word_length_count52=0\n\
    \    local word_length_count53=0\n    local word_length_count54=0\n    local word_length_count55=0\n\
    \    local word_length_count56=0\n    local word_length_count57=0\n    local word_length_count58=0\n\
    \    local word_length_count59=0\n    local word_length_count60=0\n    local \n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_array=()\n    local word_length=0\n    local word_index=0\n  \
    \  local word_character\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local count=0\n  local count2=0\n  local count3=0\n  local count4=0\n  local\
    \ count5=0\n  local count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n\
    \  local count10=0\n  local count11=0\n  local count12=0\n  local count13=0\n\
    \  local count14=0\n  local count15=0\n  local count16=0\n  local count17=0\n\
    \  local count18=0\n  local count19=0\n  local count20=0\n  local count21=0\n\
    \  local count22=0\n  local count23=0\n  local count24=0\n  local count25=0\n\
    \  local count26=0\n  local count27=0\n  local count28=0\n  local count29=0\n\
    \  local count30=0\n  local count31=0\n  local count32=0\n  local count33=0\n\
    \  local count34=0\n  local count35=0\n  local count36=0\n  local count37=0\n\
    \  local count38=0\n  local count39=0\n  local count40=0\n  local count41=0\n\
    \  local count42=0\n  local count43=0\n  local count44=0\n  local count45=0\n\
    \  local count46=0\n  local count47=0\n  local count48=0\n  local count49=0\n\
    \  local count50=0\n  local count51=0\n  local count52=0\n  local count53=0\n\
    \  local count54=0\n  local count55=0\n  local count56=0\n  local count57=0\n\
    \  local count58=0\n  local count59=0\n  local count60=0\n  local count61=0\n\
    \  local count62=0\n  local count63=0\n  local count64=0\n  local count65=0\n\
    \  local count66=0\n  local count67=0\n  local count68=0\n  local count69=0\n\
    \  local count70=0\n  local count71=0\n  local count72=0\n  local count73=0\n\
    \  local count74=0\n  local count75=0\n  local count76=0\n  local count77=0\n\
    \  local count78=0\n  local count79=0\n  local count80=0\n  local count81=0\n\
    \  local count82=0\n  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local words=$string\n\
    \  local count=0\n  local count2=0\n  local count3=0\n  local count4=0\n  local\
    \ count5=0\n  local count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n\
    \  local count10=0\n  local count11=0\n  local count12=0\n  local count13=0\n\
    \  local count14=0\n  local count15=0\n  local count16=0\n  local count17=0\n\
    \  local count18=0\n  local count19=0\n  local count20=0\n  local count21=0\n\
    \  local count22=0\n  local count23=0\n  local count24=0\n  local count25=0\n\
    \  local count26=0\n  local count27=0\n  local count28=0\n  local count29=0\n\
    \  local count30=0\n  local count31=0\n  local count32=0\n  local count33=0\n\
    \  local count34=0\n  local count35=0\n  local count36=0\n  local count37=0\n\
    \  local count38=0\n  local count39=0\n  local count40=0\n  local count41=0\n\
    \  local count42=0\n  local count43=0\n  local count44=0\n  local count45=0\n\
    \  local count46=0\n  local count47=0\n  local count48=0\n  local count49=0\n\
    \  local count50=0\n  local count51=0\n  local count52=0\n  local count53=0\n\
    \  local count54=0\n  local count55=0\n  local count56=0\n  local count57=0\n\
    \  local count58=0\n  local count59=0\n  local count60=0\n  local count61=0\n\
    \  local count62=0\n  local count63=0\n  local count64=0\n  local count65=0\n\
    \  local count66=0\n  local count67=0\n  local count68=0\n  local count69=0\n\
    \  local count70=0\n  local count71=0\n  local count72=0\n  local count73=0\n\
    \  local count74=0\n  local count75=0\n  local count76=0\n  local count77=0\n\
    \  local count78=0\n  local count79=0\n  local count80=0\n  local count81=0\n\
    \  local count82=0\n  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char_length=0\n  local word_char_char_length=0\n\
    \  local word_char_char_char_length=0\n  local word_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local index=0\n    local words=($string)\n    local word\n    local\
    \ char\n    local new_char\n    local ascii_char\n    local ascii_char_val\n \
    \   local ascii_char_val_2\n    local ascii_char_val_3\n    local ascii_char_val_4\n\
    \    local ascii_char_val_5\n    local ascii_char_val_6\n    local ascii_char_val_7\n\
    \    local ascii_char_val_8\n    local ascii_char_val_9\n    local ascii_char_val_10\n\
    \    local ascii_char_val_11\n    local ascii_char_val_12\n    local ascii_char_val_13\n\
    \    local ascii_char_val_14\n    local ascii_char_val_15\n    local ascii_char_val_16\n\
    \    local ascii_char_val_17\n    local ascii_char_val_18\n    local ascii_char_val_19\n\
    \    local ascii_char_val_20\n    local ascii_char_val_21\n    local ascii_char_val_22\n\
    \    local ascii_char_val_23\n    local ascii_char_val_24\n    local ascii_char_val_25\n\
    \    local ascii_char_val_26\n    local ascii_char_val_27\n    local ascii_char_val_28\n\
    \    local ascii_char_val_29\n    local ascii_char_val_30\n    local ascii_char_val_31\n\
    \    local ascii_char_val_32\n    local ascii_char_val_33\n    local ascii_char_val_34\n\
    \    local ascii_char_val_35\n    local ascii_char_val_36\n    local ascii_char_val_37\n\
    \    local ascii_char_val_38\n    local ascii_char_val_39\n    local ascii_char_val_40\n\
    \    local ascii_char_val_41\n    local ascii_char_val_42\n    local ascii_char_val_43\n\
    \    local ascii_char_val_44\n    local ascii_char_val_45\n    local ascii_char_val_46\n\
    \    local ascii_char_val_47\n    local ascii_char_val_48\n    local ascii_char_val_49\n\
    \    local ascii_char_val_50\n    local ascii_char_val_51\n    local ascii_char_val_52\n\
    \    local ascii_char_val_53\n    local ascii_char_val_54\n    local ascii_char_val_55\n\
    \    local ascii_char_val_56\n    local ascii_char_val_57\n    local ascii_char_val_58\n\
    \    local ascii_char_val_59\n    local ascii_char_val_60\n    local ascii_char_val_61\n\
    \    local ascii_char_val_62\n    local ascii_char_val_63\n    local ascii_char_val_64\n\
    \    local ascii_char_val_65\n    local ascii_char_val_66\n    local ascii_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=${#string}\n\
    \    local j=0\n    local k=0\n    while [ $i -gt 0 ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value_ascii=${char_value:0:1}\n\
    \        if [ $char_value_ascii -ne $char ]; then\n            char_value_ascii=${char_value:1}\n\
    \        fi\n        local new_char_value=$(( $char_value_ascii + $j ))\n    \
    \    if [ $new_char_value -ne $char ]; then\n            new_char_value=$(( $char_value_ascii\
    \ - $j ))\n        fi\n        new_string+=$new_char_value\n        j=$(( $j +\
    \ 1 ))\n        i=$(( $i - 1 ))\n    done\n    echo $new_string\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq_sby8sx.sh: line 30: [: 0: unary operator expected

    /tmp/tmpq_sby8sx.sh: line 26: [: i: integer expression expected

    /tmp/tmpq_sby8sx.sh: line 30: [: i: integer expression expected

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local\
    \ B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local\
    \ H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local\
    \ N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local\
    \ T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local\
    \ Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n  local\
    \ D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n  local\
    \ J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n  local\
    \ P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n  local\
    \ V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=\"0\"\n    local j=\"0\"\n    local k=\"0\"\n    local l=\"0\"\n    local\
    \ m=\"0\"\n    local n=\"0\"\n    local o=\"0\"\n    local p=\"0\"\n    local\
    \ q=\"0\"\n    local r=\"0\"\n    local s=\"0\"\n    local t=\"0\"\n    local\
    \ u=\"0\"\n    local v=\"0\"\n    local w=\"0\"\n    local x=\"0\"\n    local\
    \ y=\"0\"\n    local z=\"0\"\n    local a=\"0\"\n    local b=\"0\"\n    local\
    \ c=\"0\"\n    local d=\"0\"\n    local e=\"0\"\n    local f=\"0\"\n    local\
    \ g=\"0\"\n    local h=\"0\"\n    local i=\"0\"\n    local j=\"0\"\n    local\
    \ k=\"0\"\n    local l=\"0\"\n    local m=\"0\"\n    local n=\"0\"\n    local\
    \ o=\"0\"\n    local p=\"0\"\n    local q=\"0\"\n    local r=\"0\"\n    local\
    \ s=\"0\"\n    local t=\"0\"\n    local u=\"0\"\n    local v=\"0\"\n    local\
    \ w=\"0\"\n    local x=\"0\"\n    local y=\"0\"\n    local z=\"0\"\n    local\
    \ a=\"0\"\n    local b=\"0\"\n    local c=\"0\"\n    local d=\"0\"\n    local\
    \ e=\"0\"\n    local f=\"0\"\n    local g=\"0\"\n    local h=\"0\"\n    local\
    \ i=\"0\"\n    local j=\"0\"\n    local k=\"0\"\n    local l=\"0\"\n    local\
    \ m=\"0\"\n    local n=\"0\"\n    local o=\"0\"\n    local p=\"0\"\n    local\
    \ q=\"0\"\n    local r=\"0\"\n    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    local word_count=0\n    local word_length=0\n    local word_index=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_length=0\n\
    \    local word_char_char_length=0\n    local word_char_char_char_length=0\n \
    \   local word_char_char_char_char_length=0\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_length=0\n \
    \   local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=$((${#string}\
    \ - 1))\n    while [ $i -ge 0 ]; do\n        local j=$((${#string} - 1))\n   \
    \     while [ $j -ge 0 ] && [ $string[$j] -eq ${string[$((j-1))]} ]; do\n    \
    \        ((j--))\n        done\n        new_string+=\"${string[$i]} ${string[$j]}\"\
    \n        ((i--))\n    done\n    echo \"$new_string\"\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu2v59s2o.sh: line 22: [: Hi[1]: integer expression expected

    /tmp/tmpu2v59s2o.sh: line 22: [: Hi[1]: integer expression expected

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local words=$(echo \"$string\" | sed\
    \ 's/ /\\n/g')\n  local sorted_words=$(echo \"$words\" | sort -u)\n  echo \"$sorted_words\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char\n\
    \  local word_char_length\n  local word_char_length_index\n  local word_char_length_count\n\
    \  local word_char_length_index_count\n  local word_char_length_index_count_index\n\
    \  local word_char_length_index_count_index_count\n  local word_char_length_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count\n  local word_char_length_index_count_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count_index_count\n  local\
    \ word_char_length_index_count_index_count_index_count_index_count_index\n  local\
    \ word_char_length_index_count_index_count_index_count_index_count_index_count\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char_count=0\n    local char_array=()\n    local char_array_length=${#string}\n\
    \    local char_array_count=0\n    local char_array_element=\"\"\n    local char_array_element_count=0\n\
    \    local char_array_element_length=0\n    local char_array_element_char=\"\"\
    \n    local char_array_element_char_count=0\n    local char_array_element_char_length=0\n\
    \    local char_array_element_char_value=0\n    local char_array_element_char_value_count=0\n\
    \    local char_array_element_char_value_count=0\n    local char_array_element_char_value=\"\
    \"\n    local char_array_element_char_value_length=0\n    local char_array_element_char_value_length=0\n\
    \    local char_array_element_char_value_char=\"\"\n    local char_array_element_char_value_char_count=0\n\
    \    local char_array_element_char_value_char_count=0\n    local char_array_element_char_value_char_value=\"\
    \"\n    local char_array_element_char_value_char_value_count=0\n    local char_array_element_char_value_char_value_count=0\n\
    \    local char_array_element_char_value_char_value=\"\"\n    local char_array_element_char_value_char_value_count=0\n\
    \    local char_array_element_char_value_char_value_count=0\n    local char_array_element_char_value_char_value=\"\
    \"\n    local char_array_element_char_value_char_value_count=0\n    local char_array_element_char_value_char_value_count=0\n\
    \    local char_array_element_char_value_char_value=\"\"\n    local char_array_element_char_value_char_value_count=0\n\
    \    local char_array_element_char_value_char_value_count=0\n    local char_array_element_char_value_char_value=\"\
    \"\n    local char_array_element_char_value_char_value_count=0\n    local char_array_element_char_value_char_value_count=0\n\
    \    local char_array_element_char_value_char_value=\"\"\n    local char_array_element_char_value_char_value_count=0\n\
    \    local char_array_element_char_value_char_value_count=0\n    local char_array_element_char_value_char_value=\"\
    \"\n    local char_array_element_char_value_char_value_count=0\n    local char_array_element_char_value_char_value_count=0\n\
    \    local char_array_element_char_value_char_value=\"\"\n    local char_array_element_char_value_char_value_count=0\n\
    \    local char_array_element_char_value_char_value_count=0\n    local char_array_element_char_value_char_value=\"\
    \"\n    local char_array_element_char\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local words=$2\n    local new_string=\"\
    \"\n    local word\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local new_char\n    local ascii_val\n    local\
    \ ascii_val_new\n    local ascii_val_new_count\n    local ascii_val_new_char\n\
    \    local ascii_val_new_char_new\n    local ascii_val_new_char_new_count\n  \
    \  local ascii_val_new_char_new_count_new\n    local ascii_val_new_char_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new\n    local ascii_val_new_char_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new\n    local ascii_val_new_char_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new\n  \
    \  local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_new_char_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count_new_count\n\
    \    local ascii_val_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_list=\"\"\n  local word_list_sorted=\"\
    \"\n\n  while [[ $i -lt ${#string} ]]; do\n    word_count=$((word_count+1))\n\
    \    word_list=\"${string:$i:1}\"\n    word_list_sorted=\"${word_list_sorted}\
    \ ${word_list}\"\n    i=$((i+1))\n  done\n\n  while [[ $j -lt ${#word_list_sorted}\
    \ ]]; do\n    char=\"${word_list_sorted:$j:1}\"\n    char=\"${char//[!A-Za-z0-9]}\"\
    \n    char=\"${char//[!A-Za-z0-9]/}\"\n    char=\"${char//[^A-Za-z0-9]}\"\n  \
    \  char=\"${char//[^A-Za-z0-9]/}\"\n    char=\"${char//[!A-Za-z0-9]/}\"\n    char=\"\
    ${char//[A-Za-z0-9]}\"\n    char=\"${char//[A-Za-z0-9]/}\"\n    char=\"${char//[^A-Za-z0-9]/}\"\
    \n    char=\"${char//[^A-Za-z0-9]}\"\n    char=\"${char//[!A-Za-z0-9]/}\"\n  \
    \  char=\"${char//[A-Za-z0-9]/}\"\n    char=\"${char//[A-Za-z0-9]/}\"\n    char=\"\
    ${char//[^A-Za-z0-9]/}\"\n    char=\"${char//[^A-Za-z0-9]}\"\n    char=\"${char//[!A-Za-z0-9]/}\"\
    \n    char=\"${char//[A-Za-z0-9]/}\"\n    char=\"${char//[A-Za-z0-9]/}\"\n   \
    \ char=\"${char//[^A-Za-z0-9]/}\"\n    char=\"${char//[^A-Za-z0-9]}\"\n    char=\"\
    ${char//[!A-Za-z0-9]/}\"\n    char=\"${char//[A-Za-z0-9]/}\"\n    char=\"${char//[A-Za-z0-9]/}\"\
    \n    char=\"${char//[^A-Za-z0-9]/}\"\n    char=\"${char//[^A-Za-z0-9]}\"\n  \
    \  char=\"${char//[!A-Za-z0-9]/}\"\n    char=\"${char//[A-Za-z0-9]/}\"\n    char=\"\
    ${char//[A-Za-z0-9]/}\"\n    char=\"${char//[^A-Za-z0-9]/}\"\n    char=\"${char//[^A-Za-z0-9]}\"\
    \n    char=\"${char//[!A-Za-z0-9]/}\"\n    char=\"${char//[A-Za-z0-9]/}\"\n  \
    \  char=\"${char//[A-Za-z0-9]/}\"\n    char=\"${char//[^A-Za-z0-9]/}\"\n    char=\"\
    ${char//[^A-Za-z0-9]}\"\n    char=\"${char//[!A-Za-z0-9]/}\"\n    char=\"${char//\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjpuweqsy.sh: line 83: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjpuweqsy.sh: line 87: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local words=\"\
    \"\n    local blanks=\"\"\n    local word=\"\"\n    local blank=\"\"\n    local\
    \ i=0 j=0\n    local length=0\n    local char=\"\"\n    local char1=\"\"\n   \
    \ local char2=\"\"\n    local char3=\"\"\n    local char4=\"\"\n    local char5=\"\
    \"\n    local char6=\"\"\n    local char7=\"\"\n    local char8=\"\"\n    local\
    \ char9=\"\"\n    local char10=\"\"\n    local char11=\"\"\n    local char12=\"\
    \"\n    local char13=\"\"\n    local char14=\"\"\n    local char15=\"\"\n    local\
    \ char16=\"\"\n    local char17=\"\"\n    local char18=\"\"\n    local char19=\"\
    \"\n    local char20=\"\"\n    local char21=\"\"\n    local char22=\"\"\n    local\
    \ char23=\"\"\n    local char24=\"\"\n    local char25=\"\"\n    local char26=\"\
    \"\n    local char27=\"\"\n    local char28=\"\"\n    local char29=\"\"\n    local\
    \ char30=\"\"\n    local char31=\"\"\n    local char32=\"\"\n    local char33=\"\
    \"\n    local char34=\"\"\n    local char35=\"\"\n    local char36=\"\"\n    local\
    \ char37=\"\"\n    local char38=\"\"\n    local char39=\"\"\n    local char40=\"\
    \"\n    local char41=\"\"\n    local char42=\"\"\n    local char43=\"\"\n    local\
    \ char44=\"\"\n    local char45=\"\"\n    local char46=\"\"\n    local char47=\"\
    \"\n    local char48=\"\"\n    local char49=\"\"\n    local char50=\"\"\n    local\
    \ char51=\"\"\n    local char52=\"\"\n    local char53=\"\"\n    local char54=\"\
    \"\n    local char55=\"\"\n    local char56=\"\"\n    local char57=\"\"\n    local\
    \ char58=\"\"\n    local char59=\"\"\n    local char60=\"\"\n    local char61=\"\
    \"\n    local char62=\"\"\n    local char63=\"\"\n    local char64=\"\"\n    local\
    \ char65=\"\"\n    local char66=\"\"\n    local char67=\"\"\n    local char68=\"\
    \"\n    local char69=\"\"\n    local char70=\"\"\n    local char71=\"\"\n    local\
    \ char72=\"\"\n    local char73=\"\"\n    local char74=\"\"\n    local char75=\"\
    \"\n    local char76=\"\"\n    local char77=\"\"\n\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    local length=\"${#string}\"\n    local temp=\"\"\n    local words=\"\
    \"\n\n    for (( i=0; i<length; i++ )); do\n        words=\"${string:$i:1}\"\n\
    \        if [[ $words != \"\" ]]; then\n            for (( j=0; j<length; j++\
    \ )); do\n                if [[ $j -gt $i ]]; then\n                    temp=\"\
    ${string:$j:1}\"\n                    if [[ $temp != \"\" ]]; then\n         \
    \               if [[ $temp != $words ]]; then\n                            new_string=\"\
    $new_string $temp\"\n                        fi\n                    fi\n    \
    \            fi\n            done\n        fi\n    done\n    echo \"$new_string\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_length_index=0\n    local word_char_length_value=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local word_char_length_value_index=0\n    local word_char_length_value_index=0\n\
    \    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char_length=0\n  local word_char_index2=0\n\
    \  local word_char_count2=0\n  local word_char_length2=0\n  local word_char_index3=0\n\
    \  local word_char_count3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_count4=0\n  local word_char_length4=0\n  local word_char_index5=0\n\
    \  local word_char_count5=0\n  local word_char_length5=0\n  local word_char_index6=0\n\
    \  local word_char_count6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_count7=0\n  local word_char_length7=0\n  local word_char_index8=0\n\
    \  local word_char_count8=0\n  local word_char_length8=0\n  local word_char_index9=0\n\
    \  local word_char_count9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_count10=0\n  local word_char_length10=0\n  local word_char_index11=0\n\
    \  local word_char_count11=0\n  local word_char_length11=0\n  local word_char_index12=0\n\
    \  local word_char_count12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_count13=0\n  local word_char_length13=0\n  local word_char_index14=0\n\
    \  local word_char_count14=0\n  local word_char_length14=0\n  local word_char_index15=0\n\
    \  local word_char_count15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_count16=0\n  local word_char_length16=0\n  local word_char_index17=0\n\
    \  local word_char_count17=0\n  local word_char_length17=0\n  local word_char_index18=0\n\
    \  local word_char_count18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_count19=0\n  local word_char_length19=0\n  local word_char_index20=0\n\
    \  local word_char_count20=0\n  local word_char_length20=0\n  local word_char_index\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwxsdmcp8.sh: line 70: syntax error near unexpected token `}''

    /tmp/tmpwxsdmcp8.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local new_count=0\n    local char\n    local new_char\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local next_char=${string:$(($i+1)):1}\n        if [ $char -gt $next_char\
    \ ]; then\n            local temp=${string:$i:1}\n            local temp2=${string:$(($i+1)):1}\n\
    \            local temp3=${string:$(($i+2)):1}\n            local temp4=${string:$(($i+3)):1}\n\
    \            local temp5=${string:$(($i+4)):1}\n            local temp6=${string:$(($i+5)):1}\n\
    \            local temp7=${string:$(($i+6)):1}\n            local temp8=${string:$(($i+7)):1}\n\
    \            local temp9=${string:$(($i+8)):1}\n            local temp10=${string:$(($i+9)):1}\n\
    \            local temp11=${string:$(($i+10)):1}\n            local temp12=${string:$(($i+11)):1}\n\
    \            local temp13=${string:$(($i+12)):1}\n            local temp14=${string:$(($i+13)):1}\n\
    \            local temp15=${string:$(($i+14)):1}\n            local temp16=${string:$(($i+15)):1}\n\
    \            local temp17=${string:$(($i+16)):1}\n            local temp18=${string:$(($i+17)):1}\n\
    \            local temp19=${string:$(($i+18)):1}\n            local temp20=${string:$(($i+19)):1}\n\
    \            local temp21=${string:$(($i+20)):1}\n            local temp22=${string:$(($i+21)):1}\n\
    \            local temp23=${string:$(($i+22)):1}\n            local temp24=${string:$(($i+23)):1}\n\
    \            local temp25=${string:$(($i+24)):1}\n            local temp26=${string:$(($i+25)):1}\n\
    \            local temp27=${string:$(($i+26)):1}\n            local temp28=${string:$(($i+27)):1}\n\
    \            local temp29=${string:$(($i+28)):1}\n            local temp30=${string:$(($i+29)):1}\n\
    \            local temp31=${string:$(($i+30)):1}\n            local temp32=${string:$(($i+31)):1}\n\
    \            local temp33=${string:$(($i+32)):1}\n            local temp34=${string:$(($i+33)):1}\n\
    \            local temp35=${string:$(($i+34\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp775tge_a.sh: line 58: unexpected EOF while looking for matching
    `)''

    /tmp/tmp775tge_a.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_value=0\n  local word_char_prev=0\n  local\
    \ word_char_next=0\n  local word_char_prev_length=0\n  local word_char_next_length=0\n\
    \  local word_char_prev_value=0\n  local word_char_next_value=0\n  local word_char_prev_char=0\n\
    \  local word_char_next_char=0\n  local word_char_prev_prev_char=0\n  local word_char_next_prev_char=0\n\
    \  local word_char_prev_next_char=0\n  local word_char_prev_prev_next_char=0\n\
    \  local word_char_next_next_prev_char=0\n  local word_char_prev_prev_prev_char=0\n\
    \  local word_char_next_prev_prev_char=0\n  local word_char_prev_next_next_prev_char=0\n\
    \  local word_char_prev_prev_prev_next_char=0\n  local word_char_next_prev_prev_prev_char=0\n\
    \  local word_char_prev_next_next_prev_prev_char=0\n  local word_char_prev_prev_prev_next_next_prev_char=0\n\
    \  local word_char_next_prev_prev_prev_next_prev_char=0\n  local word_char_prev_next_next_prev_prev_next_prev_char=0\n\
    \  local word_char_prev_prev_prev_next_next_prev_prev_char=0\n  local word_char_next_prev_prev_prev_next_next_prev_prev_char=0\n\
    \  local word_char_prev_next_next_prev_prev_next_next_prev_prev_char=0\n  local\
    \ word_char_prev_prev_prev_next_next_next_prev_prev_prev_char=0\n  local word_char_next_prev_prev_prev_next_next_prev_prev_prev_char=0\n\
    \  local word_char_prev_next_next_prev_prev_next_next_prev_prev_char=0\n  local\
    \ word_char_prev_prev_prev_next_next_next_prev_prev_prev_char=0\n  local word_char_next_prev_prev_prev_next_next_prev_prev_prev_char=0\n\
    \  local word_char_prev_next_next_prev_prev_next_next_prev_prev_char=0\n  local\
    \ word_char_prev_prev_prev_next_next_next_prev_prev_prev_char=0\n  local word_char_next_prev_prev_prev_next_next_prev_prev_prev_char=0\n\
    \  local word_char_prev_next_next_prev_prev_next_next_prev_prev_char=0\n  local\
    \ word_char_prev_prev_prev_next_next_next_prev_prev_prev_char=0\n  local word_char_next_prev_prev_prev_next_next_prev_prev_prev_char=0\n\
    \  local word_char_prev_next_next_prev_prev_next_next_prev_prev_char=0\n  local\
    \ word_char_prev_prev_prev_next_next_next_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_array=()\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_char=0\n    local word_char_length=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index2=0\n    local word_char_length_index3=0\n  \
    \  local word_char_length_index4=0\n    local word_char_length_index5=0\n    local\
    \ word_char_length_index6=0\n    local word_char_length_index7=0\n    local word_char_length_index8=0\n\
    \    local word_char_length_index9=0\n    local word_char_length_index10=0\n \
    \   local word_char_length_index11=0\n    local word_char_length_index12=0\n \
    \   local word_char_length_index13=0\n    local word_char_length_index14=0\n \
    \   local word_char_length_index15=0\n    local word_char_length_index16=0\n \
    \   local word_char_length_index17=0\n    local word_char_length_index18=0\n \
    \   local word_char_length_index19=0\n    local word_char_length_index20=0\n \
    \   local word_char_length_index21=0\n    local word_char_length_index22=0\n \
    \   local word_char_length_index23=0\n    local word_char_length_index24=0\n \
    \   local word_char_length_index25=0\n    local word_char_length_index26=0\n \
    \   local word_char_length_index27=0\n    local word_char_length_index28=0\n \
    \   local word_char_length_index29=0\n    local word_char_length_index30=0\n \
    \   local word_char_length_index31=0\n    local word_char_length_index32=0\n \
    \   local word_char_length_index33=0\n    local word_char_length_index34=0\n \
    \   local word_char_length_index35=0\n    local word_char_length_index36=0\n \
    \   local word_char_length_index37=0\n    local word_char_length_index38=0\n \
    \   local word_char_length_index39=0\n    local word_char_length_index40=0\n \
    \   local word_char_length_index41=0\n    local word_char_length_index42=0\n \
    \   local word_char_length_index43=0\n    local word_char_length_index44=0\n \
    \   local word_char_length_index45=0\n    local word_char_length_index46=0\n \
    \   local word_char_length_index47=0\n    local word_char_length_index48=0\n \
    \   local word_char_length_index49=0\n    local word_char_length_index50=0\n \
    \   local word_char_length_index51=0\n    local word_char_\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local i\n\
    \    local j\n    local word\n    local char\n    local char_ascii\n    local\
    \ char_ascii2\n    local char_ascii3\n    local char_ascii4\n    local char_ascii5\n\
    \    local char_ascii6\n    local char_ascii7\n    local char_ascii8\n    local\
    \ char_ascii9\n    local char_ascii10\n    local char_ascii11\n    local char_ascii12\n\
    \    local char_ascii13\n    local char_ascii14\n    local char_ascii15\n    local\
    \ char_ascii16\n    local char_ascii17\n    local char_ascii18\n    local char_ascii19\n\
    \    local char_ascii20\n    local char_ascii21\n    local char_ascii22\n    local\
    \ char_ascii23\n    local char_ascii24\n    local char_ascii25\n    local char_ascii26\n\
    \    local char_ascii27\n    local char_ascii28\n    local char_ascii29\n    local\
    \ char_ascii30\n    local char_ascii31\n    local char_ascii32\n    local char_ascii33\n\
    \    local char_ascii34\n    local char_ascii35\n    local char_ascii36\n    local\
    \ char_ascii37\n    local char_ascii38\n    local char_ascii39\n    local char_ascii40\n\
    \    local char_ascii41\n    local char_ascii42\n    local char_ascii43\n    local\
    \ char_ascii44\n    local char_ascii45\n    local char_ascii46\n    local char_ascii47\n\
    \    local char_ascii48\n    local char_ascii49\n    local char_ascii50\n    local\
    \ char_ascii51\n    local char_ascii52\n    local char_ascii53\n    local char_ascii54\n\
    \    local char_ascii55\n    local char_ascii56\n    local char_ascii57\n    local\
    \ char_ascii58\n    local char_ascii59\n    local char_ascii60\n    local char_ascii61\n\
    \    local char_ascii62\n    local char_ascii63\n    local char_ascii64\n    local\
    \ char_ascii65\n    local char_ascii66\n    local char_ascii67\n    local char_ascii68\n\
    \    local char_ascii69\n    local char_ascii70\n    local char_ascii71\n    local\
    \ char_ascii72\n    local char_ascii73\n    local char_ascii74\n    local char_ascii75\n\
    \    local char_ascii76\n    local char_ascii77\n    local char_ascii78\n    local\
    \ char_ascii79\n    local char_ascii80\n    local char_ascii81\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_character\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_character\n  local\
    \ word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local words=$(echo $string | tr \" \" \"\\n\")\n    for word in $words;\
    \ do\n        i=$((i+1))\n        j=$((j+1))\n        char=$(echo $word | cut\
    \ -c $i)\n        char=$(echo $char | cut -c $j)\n        new_string=$new_string$char\n\
    \    done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_character\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local words=$(echo \"$string\" | sed\
    \ 's/ /\\n/g' | sort -u)\n  local result=\"\"\n  for i in $(seq 0 $((${#words}-1)))\n\
    \  do\n    local j=$((i+1))\n    local temp=${words[i]}\n    words[i]=${words[j]}\n\
    \    words[j]=${temp}\n    result+=\"${words[i]} \"\n  done\n  result+=\"${words[${#words[@]}]}\"\
    \n  echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=($string)\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=$((${#string}\
    \ - 1))\n  local word_char\n  local word_char_ascii\n  local word_char_ascii_value\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index2\n \
    \ local word_char_ascii_value_index3\n  local word_char_ascii_value_index4\n \
    \ local word_char_ascii_value_index5\n  local word_char_ascii_value_index6\n \
    \ local word_char_ascii_value_index7\n  local word_char_ascii_value_index8\n \
    \ local word_char_ascii_value_index9\n  local word_char_ascii_value_index10\n\
    \  local word_char_ascii_value_index11\n  local word_char_ascii_value_index12\n\
    \  local word_char_ascii_value_index13\n  local word_char_ascii_value_index14\n\
    \  local word_char_ascii_value_index15\n  local word_char_ascii_value_index16\n\
    \  local word_char_ascii_value_index17\n  local word_char_ascii_value_index18\n\
    \  local word_char_ascii_value_index19\n  local word_char_ascii_value_index20\n\
    \  local word_char_ascii_value_index21\n  local word_char_ascii_value_index22\n\
    \  local word_char_ascii_value_index23\n  local word_char_ascii_value_index24\n\
    \  local word_char_ascii_value_index25\n  local word_char_ascii_value_index26\n\
    \  local word_char_ascii_value_index27\n  local word_char_ascii_value_index28\n\
    \  local word_char_ascii_value_index29\n  local word_char_ascii_value_index30\n\
    \  local word_char_ascii_value_index31\n  local word_char_ascii_value_index32\n\
    \  local word_char_ascii_value_index33\n  local word_char_ascii_value_index34\n\
    \  local word_char_ascii_value_index35\n  local word_char_ascii_value_index36\n\
    \  local word_char_ascii_value_index37\n  local word_char_ascii_value_index38\n\
    \  local word_char_ascii_value_index39\n  local word_char_ascii_value_index40\n\
    \  local word_char_ascii_value_index41\n  local word_char_ascii_value_index42\n\
    \  local word_char_ascii_value_index43\n  local word_char_ascii_value_index44\n\
    \  local word_char_ascii_value_index45\n  local word_char_ascii_value_index46\n\
    \  local word_char_ascii_value_index47\n  local word_char_ascii_value_index48\n\
    \  local word_char_ascii_value_index49\n  local word_char_ascii_value_index50\n\
    \  \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    local word_count=0\n    local word_length=0\n    local word_start=0\n\
    \    local word_end=0\n    local word_char=0\n    local word_char_count=0\n  \
    \  local word_char_length=0\n    local word_char_start=0\n    local word_char_end=0\n\
    \    local word_char_char=0\n    local word_char_char_count=0\n    local word_char_char_length=0\n\
    \    local word_char_char_start=0\n    local word_char_char_end=0\n    local word_char_char_char=0\n\
    \    local word_char_char_char_count=0\n    local word_char_char_char_length=0\n\
    \    local word_char_char_char_start=0\n    local word_char_char_char_end=0\n\
    \    local word_char_char_char_char=0\n    local word_char_char_char_char_count=0\n\
    \    local word_char_char_char_char_length=0\n    local word_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_end=0\n    local word_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_count=0\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_start=0\n    local word_char_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_count=0\n\
    \    local word_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_char_char_end=0\n    local word_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_count=0\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_start=0\n    local word_char_char_char_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_char_char_char_count=0\n\
    \    local word_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_char_char_char_char_end=0\n    local word_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_count=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_start\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local new_count=0\n    local word\n    local new_word\n    local char\n \
    \   local new_char\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local words=$(echo $string | sed 's/ /\\\
    n/g')\n  local sorted_words=$(echo $words | sort -u)\n  local sorted_string=$(echo\
    \ $sorted_words | sed 's/\\n/ /g')\n  echo $sorted_string\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local new_string2=\"\
    \"\n    local new_string3=\"\"\n    local new_string4=\"\"\n    local new_string5=\"\
    \"\n    local new_string6=\"\"\n    local new_string7=\"\"\n    local new_string8=\"\
    \"\n    local new_string9=\"\"\n    local new_string10=\"\"\n    local new_string11=\"\
    \"\n    local new_string12=\"\"\n    local new_string13=\"\"\n    local new_string14=\"\
    \"\n    local new_string15=\"\"\n    local new_string16=\"\"\n    local new_string17=\"\
    \"\n    local new_string18=\"\"\n    local new_string19=\"\"\n    local new_string20=\"\
    \"\n    local new_string21=\"\"\n    local new_string22=\"\"\n    local new_string23=\"\
    \"\n    local new_string24=\"\"\n    local new_string25=\"\"\n    local new_string26=\"\
    \"\n    local new_string27=\"\"\n    local new_string28=\"\"\n    local new_string29=\"\
    \"\n    local new_string30=\"\"\n    local new_string31=\"\"\n    local new_string32=\"\
    \"\n    local new_string33=\"\"\n    local new_string34=\"\"\n    local new_string35=\"\
    \"\n    local new_string36=\"\"\n    local new_string37=\"\"\n    local new_string38=\"\
    \"\n    local new_string39=\"\"\n    local new_string40=\"\"\n    local new_string41=\"\
    \"\n    local new_string42=\"\"\n    local new_string43=\"\"\n    local new_string44=\"\
    \"\n    local new_string45=\"\"\n    local new_string46=\"\"\n    local new_string47=\"\
    \"\n    local new_string48=\"\"\n    local new_string49=\"\"\n    local new_string50=\"\
    \"\n    local new_string51=\"\"\n    local new_string52=\"\"\n    local new_string53=\"\
    \"\n    local new_string54=\"\"\n    local new_string55=\"\"\n    local new_string56=\"\
    \"\n    local new_string57=\"\"\n    local new_string58=\"\"\n    local new_string59=\"\
    \"\n    local new_string60=\"\"\n    local new_string61=\"\"\n    local new_string62=\"\
    \"\n    local new_string63=\"\"\n    local new_string64=\"\"\n    local new_string65=\"\
    \"\n    local new_string66=\"\"\n    local new_string67=\"\"\n    local new_string68=\"\
    \"\n    local new_string69=\"\"\n    local new_string70=\"\"\n    local new_string71=\"\
    \"\n    local new_string72=\"\"\n    local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word\n\
    \  local i\n  local j\n  local length\n  local word_count\n  local character\n\
    \  local character_index\n  local character_count\n  local character_count2\n\
    \  local character_count3\n  local character_count4\n  local character_count5\n\
    \  local character_count6\n  local character_count7\n  local character_count8\n\
    \  local character_count9\n  local character_count10\n  local character_count11\n\
    \  local character_count12\n  local character_count13\n  local character_count14\n\
    \  local character_count15\n  local character_count16\n  local character_count17\n\
    \  local character_count18\n  local character_count19\n  local character_count20\n\
    \  local character_count21\n  local character_count22\n  local character_count23\n\
    \  local character_count24\n  local character_count25\n  local character_count26\n\
    \  local character_count27\n  local character_count28\n  local character_count29\n\
    \  local character_count30\n  local character_count31\n  local character_count32\n\
    \  local character_count33\n  local character_count34\n  local character_count35\n\
    \  local character_count36\n  local character_count37\n  local character_count38\n\
    \  local character_count39\n  local character_count40\n  local character_count41\n\
    \  local character_count42\n  local character_count43\n  local character_count44\n\
    \  local character_count45\n  local character_count46\n  local character_count47\n\
    \  local character_count48\n  local character_count49\n  local character_count50\n\
    \  local character_count51\n  local character_count52\n  local character_count53\n\
    \  local character_count54\n  local character_count55\n  local character_count56\n\
    \  local character_count57\n  local character_count58\n  local character_count59\n\
    \  local character_count60\n  local character_count61\n  local character_count62\n\
    \  local character_count63\n  local character_count64\n  local character_count65\n\
    \  local character_count66\n  local character_count67\n  local character_count68\n\
    \  local character_count69\n  local character_count70\n  local character_count71\n\
    \  local character_count72\n  local character_count73\n  local character_count74\n\
    \  local character_count75\n  local character_count76\n  local character_count77\n\
    \  local character_count78\n  local character_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_char_length=0\n\
    \    local word_char_char_char_length=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_length=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local last_char=\"\"\n    local last_char_count=0\n    local last_char_ascii=0\n\
    \    local last_char_ascii_value=0\n    local last_char_ascii_value_count=0\n\
    \    local last_char_ascii_value_count2=0\n    local last_char_ascii_value_count3=0\n\
    \    local last_char_ascii_value_count4=0\n    local last_char_ascii_value_count5=0\n\
    \    local last_char_ascii_value_count6=0\n    local last_char_ascii_value_count7=0\n\
    \    local last_char_ascii_value_count8=0\n    local last_char_ascii_value_count9=0\n\
    \    local last_char_ascii_value_count10=0\n    local last_char_ascii_value_count11=0\n\
    \    local last_char_ascii_value_count12=0\n    local last_char_ascii_value_count13=0\n\
    \    local last_char_ascii_value_count14=0\n    local last_char_ascii_value_count15=0\n\
    \    local last_char_ascii_value_count16=0\n    local last_char_ascii_value_count17=0\n\
    \    local last_char_ascii_value_count18=0\n    local last_char_ascii_value_count19=0\n\
    \    local last_char_ascii_value_count20=0\n    local last_char_ascii_value_count21=0\n\
    \    local last_char_ascii_value_count22=0\n    local last_char_ascii_value_count23=0\n\
    \    local last_char_ascii_value_count24=0\n    local last_char_ascii_value_count25=0\n\
    \    local last_char_ascii_value_count26=0\n    local last_char_ascii_value_count27=0\n\
    \    local last_char_ascii_value_count28=0\n    local last_char_ascii_value_count29=0\n\
    \    local last_char_ascii_value_count30=0\n    local last_char_ascii_value_count31=0\n\
    \    local last_char_ascii_value_count32=0\n    local last_char_ascii_value_count33=0\n\
    \    local last_char_ascii_value_count34=0\n    local last_char_ascii_value_count35=0\n\
    \    local last_char_ascii_value_count36=0\n    local last_char_ascii_value_count37=0\n\
    \    local last_char_ascii_value_count38=0\n    local last_char_ascii_value_count39=0\n\
    \    local last_char_ascii_value_count40=0\n    local last_char_ascii_value_count41=0\n\
    \    local last_char_ascii_value_count42=0\n    local last_char_ascii_value_count43=0\n\
    \    local last_char_ascii_value_count44=0\n    local last_char_ascii_value_count45=0\n\
    \    local last_char_ascii_value_count46=0\n    local last_char_ascii_value_count47\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_array=()\n  local word_array_length=${#string[@]}\n\
    \  local word_array_elements=()\n  local word_array_elements_length=${#word_array_elements[@]}\n\
    \  local word_array_elements_index=0\n  local word_array_elements_index_length=${#word_array_elements_index[@]}\n\
    \  local word_array_elements_index_value=0\n  local word_array_elements_index_value_length=${#word_array_elements_index_value[@]}\n\
    \  local word_array_elements_index_value_elements=()\n  local word_array_elements_index_value_elements_length=${#word_array_elements_index_value_elements[@]}\n\
    \  local word_array_elements_index_value_elements_index=0\n  local word_array_elements_index_value_elements_index_length=${#word_array_elements_index_value_elements_index[@]}\n\
    \  local word_array_elements_index_value_elements_index_value=0\n  local word_array_elements_index_value_elements_index_value_length=${#word_array_elements_index_value_elements_index_value[@]}\n\
    \  local word_array_elements_index_value_elements_index_value_elements=()\n  local\
    \ word_array_elements_index_value_elements_index_value_elements_length=${#word_array_elements_index_value_elements_index_value_elements[@]}\n\
    \  local word_array_elements_index_value_elements_index_value_elements_index=0\n\
    \  local word_array_elements_index_value_elements_index_value_elements_index_length=${#word_array_elements_index_value_elements_index_value_elements_index[@]}\n\
    \  local word_array_elements_index_value_elements_index_value_elements_index_value=0\n\
    \  local word_array_elements_index_value_elements_index_value_elements_index_value_length=${#word_array_elements_index_value_elements_index_value_elements_index_value[@]}\n\
    \  local word_array_elements_index_value_elements_index_value_elements_index_value_elements=()\n\
    \  local word_array_elements_index_value_elements_index_value_elements_index_value_elements_length=${#word_array_elements_index_value_elements_index_value_elements_index_value_elements[@]}\n\
    \  local word_array_elements_index_value_elements_index_value_elements_index_value_elements_index=0\n\
    \  local word_array_elements_index_value_elements_index_value_elements_index_value_elements_index_length=${#word_array_elements_index_value_elements_index_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo2wlssnx.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    local word_count=0\n    local word_length=0\n    local word_length_count=0\n\
    \    local word_length_count2=0\n    local word_length_count3=0\n    local word_length_count4=0\n\
    \    local word_length_count5=0\n    local word_length_count6=0\n    local word_length_count7=0\n\
    \    local word_length_count8=0\n    local word_length_count9=0\n    local word_length_count10=0\n\
    \    local word_length_count11=0\n    local word_length_count12=0\n    local word_length_count13=0\n\
    \    local word_length_count14=0\n    local word_length_count15=0\n    local word_length_count16=0\n\
    \    local word_length_count17=0\n    local word_length_count18=0\n    local word_length_count19=0\n\
    \    local word_length_count20=0\n    local word_length_count21=0\n    local word_length_count22=0\n\
    \    local word_length_count23=0\n    local word_length_count24=0\n    local word_length_count25=0\n\
    \    local word_length_count26=0\n    local word_length_count27=0\n    local word_length_count28=0\n\
    \    local word_length_count29=0\n    local word_length_count30=0\n    local word_length_count31=0\n\
    \    local word_length_count32=0\n    local word_length_count33=0\n    local word_length_count34=0\n\
    \    local word_length_count35=0\n    local word_length_count36=0\n    local word_length_count37=0\n\
    \    local word_length_count38=0\n    local word_length_count39=0\n    local word_length_count40=0\n\
    \    local word_length_count41=0\n    local word_length_count42=0\n    local word_length_count43=0\n\
    \    local word_length_count44=0\n    local word_length_count45=0\n    local word_length_count46=0\n\
    \    local word_length_count47=0\n    local word_length_count48=0\n    local word_length_count49=0\n\
    \    local word_length_count50=0\n    local word_length_count51=0\n    local word_length_count52=0\n\
    \    local word_length_count53=0\n    local word_length_count54=0\n    local word_length_count55=0\n\
    \    local word_length_count56=0\n    local word_length_count57=0\n    local word_length_count58=0\n\
    \    local word_length_count59=0\n    local word_length_count60=0\n    local \n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_index=0\n    local word_length=0\n    local word_character_index=0\n\
    \    local word_character_index2=0\n    local word_character_index3=0\n    local\
    \ word_character_index4=0\n    local word_character_index5=0\n    local word_character_index6=0\n\
    \    local word_character_index7=0\n    local word_character_index8=0\n    local\
    \ word_character_index9=0\n    local word_character_index10=0\n    local word_character_index11=0\n\
    \    local word_character_index12=0\n    local word_character_index13=0\n    local\
    \ word_character_index14=0\n    local word_character_index15=0\n    local word_character_index16=0\n\
    \    local word_character_index17=0\n    local word_character_index18=0\n    local\
    \ word_character_index19=0\n    local word_character_index20=0\n    local word_character_index21=0\n\
    \    local word_character_index22=0\n    local word_character_index23=0\n    local\
    \ word_character_index24=0\n    local word_character_index25=0\n    local word_character_index26=0\n\
    \    local word_character_index27=0\n    local word_character_index28=0\n    local\
    \ word_character_index29=0\n    local word_character_index30=0\n    local word_character_index31=0\n\
    \    local word_character_index32=0\n    local word_character_index33=0\n    local\
    \ word_character_index34=0\n    local word_character_index35=0\n    local word_character_index36=0\n\
    \    local word_character_index37=0\n    local word_character_index38=0\n    local\
    \ word_character_index39=0\n    local word_character_index40=0\n    local word_character_index41=0\n\
    \    local word_character_index42=0\n    local word_character_index43=0\n    local\
    \ word_character_index44=0\n    local word_character_index45=0\n    local word_character_index46=0\n\
    \    local word_character_index47=0\n    local word_character_index48=0\n    local\
    \ word_character_index49=0\n    local word_character_index50=0\n    local word_character_index51=0\n\
    \    local word_character_index52=0\n    local word_character_index53=0\n    local\
    \ word_character_index54=0\n    local word_character_index55=0\n    local word_character_index56=0\n\
    \    local word_character_index57=0\n    local word_character_index58=0\n    local\
    \ word_character_index59=0\n    local word_character_index60=0\n    local word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char\n  local word_char_length=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_array=()\n\
    \    local word_array_length=${#string[@]}\n    local word_array_elements=0\n\
    \    local word_array_elements_length=0\n    local word_array_elements_index=0\n\
    \    local word_array_elements_index_length=0\n    local word_array_elements_index_elements=0\n\
    \    local word_array_elements_index_elements_length=0\n    local word_array_elements_index_elements_elements=0\n\
    \    local word_array_elements_index_elements_elements_length=0\n    local word_array_elements_index_elements_elements_elements=0\n\
    \    local word_array_elements_index_elements_elements_elements_length=0\n   \
    \ local word_array_elements_index_elements_elements_elements_elements=0\n    local\
    \ word_array_elements_index_elements_elements_elements_elements_length=0\n   \
    \ local word_array_elements_index_elements_elements_elements_elements_elements=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_length=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements_length=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements_elements=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements_elements_length=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements_elements_elements=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements_elements_elements_length=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements_elements_elements_elements_length=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements_elements_elements_elements_length=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_length=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_length=0\n\
    \    local word_array_elements_index_elements_elements_elements_elements_\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_array=()\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_char_count=0\n    local word_char_length=0\n    local word_char_array=()\n\
    \    local word_char_array_index=0\n    local word_char_array_length=0\n    local\
    \ word_char_array_index2=0\n    local word_char_array_length2=0\n    local word_char_array_index3=0\n\
    \    local word_char_array_length3=0\n    local word_char_array_index4=0\n   \
    \ local word_char_array_length4=0\n    local word_char_array_index5=0\n    local\
    \ word_char_array_length5=0\n    local word_char_array_index6=0\n    local word_char_array_length6=0\n\
    \    local word_char_array_index7=0\n    local word_char_array_length7=0\n   \
    \ local word_char_array_index8=0\n    local word_char_array_length8=0\n    local\
    \ word_char_array_index9=0\n    local word_char_array_length9=0\n    local word_char_array_index10=0\n\
    \    local word_char_array_length10=0\n    local word_char_array_index11=0\n \
    \   local word_char_array_length11=0\n    local word_char_array_index12=0\n  \
    \  local word_char_array_length12=0\n    local word_char_array_index13=0\n   \
    \ local word_char_array_length13=0\n    local word_char_array_index14=0\n    local\
    \ word_char_array_length14=0\n    local word_char_array_index15=0\n    local word_char_array_length15=0\n\
    \    local word_char_array_index16=0\n    local word_char_array_length16=0\n \
    \   local word_char_array_index17=0\n    local word_char_array_length17=0\n  \
    \  local word_char_array_index18=0\n    local word_char_array_length18=0\n   \
    \ local word_char_array_index19=0\n    local word_char_array_length19=0\n    local\
    \ word_char_array_index20=0\n    local word_char_array_length20=0\n    local word_char_array_index21=0\n\
    \    local word_char_array_length21=0\n    local word_char_array_index22=0\n \
    \   local word_char_array_length22=0\n    local word_char_array_index23=0\n  \
    \  local word_char_array_length23=0\n    local word_char_array_index24=0\n   \
    \ local word_char_array_length24=0\n    local word_char_array_index25=0\n    local\
    \ word_char_array_length25=0\n    local word_char_array_\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local count=0\n\
    \  local char\n  local new_char\n  local new_count=0\n  local new_char2\n  local\
    \ new_count2\n  local new_char3\n  local new_count3\n  local new_char4\n  local\
    \ new_count4\n  local new_char5\n  local new_count5\n  local new_char6\n  local\
    \ new_count6\n  local new_char7\n  local new_count7\n  local new_char8\n  local\
    \ new_count8\n  local new_char9\n  local new_count9\n  local new_char10\n  local\
    \ new_count10\n  local new_char11\n  local new_count11\n  local new_char12\n \
    \ local new_count12\n  local new_char13\n  local new_count13\n  local new_char14\n\
    \  local new_count14\n  local new_char15\n  local new_count15\n  local new_char16\n\
    \  local new_count16\n  local new_char17\n  local new_count17\n  local new_char18\n\
    \  local new_count18\n  local new_char19\n  local new_count19\n  local new_char20\n\
    \  local new_count20\n  local new_char21\n  local new_count21\n  local new_char22\n\
    \  local new_count22\n  local new_char23\n  local new_count23\n  local new_char24\n\
    \  local new_count24\n  local new_char25\n  local new_count25\n  local new_char26\n\
    \  local new_count26\n  local new_char27\n  local new_count27\n  local new_char28\n\
    \  local new_count28\n  local new_char29\n  local new_count29\n  local new_char30\n\
    \  local new_count30\n  local new_char31\n  local new_count31\n  local new_char32\n\
    \  local new_count32\n  local new_char33\n  local new_count33\n  local new_char34\n\
    \  local new_count34\n  local new_char35\n  local new_count35\n  local new_char36\n\
    \  local new_count36\n  local new_char37\n  local new_count37\n  local new_char38\n\
    \  local new_count38\n  local new_char39\n  local new_count39\n  local new_char40\n\
    \  local new_count40\n  local new_char41\n  local new_count41\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ words=\"\"\n    local word_count=0\n    local word_length=0\n    local word_index=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local words=($string)\n    local\
    \ new_string=\"\"\n    local count=0\n    local new_word=\"\"\n    local new_count=0\n\
    \    local new_words=()\n    local new_counts=()\n    local new_word=\"\"\n  \
    \  local new_count=0\n    local new_words=()\n    local new_counts=()\n    local\
    \ new_word=\"\"\n    local new_count=0\n    local new_words=()\n    local new_counts=()\n\
    \    local new_word=\"\"\n    local new_count=0\n    local new_words=()\n    local\
    \ new_counts=()\n    local new_word=\"\"\n    local new_count=0\n    local new_words=()\n\
    \    local new_counts=()\n    local new_word=\"\"\n    local new_count=0\n   \
    \ local new_words=()\n    local new_counts=()\n    local new_word=\"\"\n    local\
    \ new_count=0\n    local new_words=()\n    local new_counts=()\n    local new_word=\"\
    \"\n    local new_count=0\n    local new_words=()\n    local new_counts=()\n \
    \   local new_word=\"\"\n    local new_count=0\n    local new_words=()\n    local\
    \ new_counts=()\n    local new_word=\"\"\n    local new_count=0\n    local new_words=()\n\
    \    local new_counts=()\n    local new_word=\"\"\n    local new_count=0\n   \
    \ local new_words=()\n    local new_counts=()\n    local new_word=\"\"\n    local\
    \ new_count=0\n    local new_words=()\n    local new_counts=()\n    local new_word=\"\
    \"\n    local new_count=0\n    local new_words=()\n    local new_counts=()\n \
    \   local new_word=\"\"\n    local new_count=0\n    local new_words=()\n    local\
    \ new_counts=()\n    local new_word=\"\"\n    local new_count=0\n    local new_words=()\n\
    \    local new_counts=()\n    local new_word=\"\"\n    local new_count=0\n   \
    \ local new_words=()\n    local new_counts=()\n    local new_word=\"\"\n    local\
    \ new_count=0\n    local new_words=()\n    local new_counts=()\n    local new_word=\"\
    \"\n    local new_count=0\n    local new_words=()\n    local new_counts=()\n \
    \   local new_word=\"\"\n    local new_count=0\n    local new_words=()\n    \n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_index2=0\n    local word_length_index3=0\n\
    \    local word_length_index4=0\n    local word_length_index5=0\n    local word_length_index6=0\n\
    \    local word_length_index7=0\n    local word_length_index8=0\n    local word_length_index9=0\n\
    \    local word_length_index10=0\n    local word_length_index11=0\n    local word_length_index12=0\n\
    \    local word_length_index13=0\n    local word_length_index14=0\n    local word_length_index15=0\n\
    \    local word_length_index16=0\n    local word_length_index17=0\n    local word_length_index18=0\n\
    \    local word_length_index19=0\n    local word_length_index20=0\n    local word_length_index21=0\n\
    \    local word_length_index22=0\n    local word_length_index23=0\n    local word_length_index24=0\n\
    \    local word_length_index25=0\n    local word_length_index26=0\n    local word_length_index27=0\n\
    \    local word_length_index28=0\n    local word_length_index29=0\n    local word_length_index30=0\n\
    \    local word_length_index31=0\n    local word_length_index32=0\n    local word_length_index33=0\n\
    \    local word_length_index34=0\n    local word_length_index35=0\n    local word_length_index36=0\n\
    \    local word_length_index37=0\n    local word_length_index38=0\n    local word_length_index39=0\n\
    \    local word_length_index40=0\n    local word_length_index41=0\n    local word_length_index42=0\n\
    \    local word_length_index43=0\n    local word_length_index44=0\n    local word_length_index45=0\n\
    \    local word_length_index46=0\n    local word_length_index47=0\n    local word_length_index48=0\n\
    \    local word_length_index49=0\n    local word_length_index50=0\n    local word_length_index51=0\n\
    \    local word_length_index52=0\n    local word_length_index53=0\n    local word_length_index54=0\n\
    \    local word_length_index55=0\n    local word_length_index56=0\n    local word_length_index57=0\n\
    \    local word_length_index58=0\n    local word_length_index59=0\n    local word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_list=\"\"\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_length=0\n  local word_list_sorted_index=0\n  local\
    \ word_list_sorted_index_length=0\n  local word_list_sorted_index_length_2=0\n\
    \  local word_list_sorted_index_length_3=0\n  local word_list_sorted_index_length_4=0\n\
    \  local word_list_sorted_index_length_5=0\n  local word_list_sorted_index_length_6=0\n\
    \  local word_list_sorted_index_length_7=0\n  local word_list_sorted_index_length_8=0\n\
    \  local word_list_sorted_index_length_9=0\n  local word_list_sorted_index_length_10=0\n\
    \  local word_list_sorted_index_length_11=0\n  local word_list_sorted_index_length_12=0\n\
    \  local word_list_sorted_index_length_13=0\n  local word_list_sorted_index_length_14=0\n\
    \  local word_list_sorted_index_length_15=0\n  local word_list_sorted_index_length_16=0\n\
    \  local word_list_sorted_index_length_17=0\n  local word_list_sorted_index_length_18=0\n\
    \  local word_list_sorted_index_length_19=0\n  local word_list_sorted_index_length_20=0\n\
    \  local word_list_sorted_index_length_21=0\n  local word_list_sorted_index_length_22=0\n\
    \  local word_list_sorted_index_length_23=0\n  local word_list_sorted_index_length_24=0\n\
    \  local word_list_sorted_index_length_25=0\n  local word_list_sorted_index_length_26=0\n\
    \  local word_list_sorted_index_length_27=0\n  local word_list_sorted_index_length_28=0\n\
    \  local word_list_sorted_index_length_29=0\n  local word_list_sorted_index_length_30=0\n\
    \  local word_list_sorted_index_length_31=0\n  local word_list_sorted_index_length_32=0\n\
    \  local word_list_sorted_index_length_33=0\n  local word_list_sorted_index_length_34=0\n\
    \  local word_list_sorted_index_length_35=0\n  local word_list_sorted_index_length_36=0\n\
    \  local word_list_sorted_index_length_37=0\n  local word_list_sorted_index_length_38=0\n\
    \  local word_list_sorted_index_length_39=0\n  local word_list_sorted_index_length_40=0\n\
    \  local word_list_sorted_index_length_41=0\n  local word_list_sorted_index_length_42=0\n\
    \  local word_list_sorted_index_length_43=0\n  local word_list_sorted_index_length_44=0\n\
    \  local word_list_sorted_index_length_45=0\n  local word_list_sorted_index_length_46=0\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_index=0\n    local word_length=$#\n    local word_char\n    local\
    \ word_char_length\n    local word_char_length\n    local word_char_length\n \
    \   local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local new_char=${char:0:1}\n        local new_char2=${char:1:1}\n   \
    \     local new_char3=${char:2:1}\n        local new_char4=${char:3:1}\n     \
    \   local new_char5=${char:4:1}\n        local new_char6=${char:5:1}\n       \
    \ local new_char7=${char:6:1}\n        local new_char8=${char:7:1}\n        local\
    \ new_char9=${char:8:1}\n        local new_char10=${char:9:1}\n        local new_char11=${char:10:1}\n\
    \        local new_char12=${char:11:1}\n        local new_char13=${char:12:1}\n\
    \        local new_char14=${char:13:1}\n        local new_char15=${char:14:1}\n\
    \        local new_char16=${char:15:1}\n        local new_char17=${char:16:1}\n\
    \        local new_char18=${char:17:1}\n        local new_char19=${char:18:1}\n\
    \        local new_char20=${char:19:1}\n        local new_char21=${char:20:1}\n\
    \        local new_char22=${char:21:1}\n        local new_char23=${char:22:1}\n\
    \        local new_char24=${char:23:1}\n        local new_char25=${char:24:1}\n\
    \        local new_char26=${char:25:1}\n        local new_char27=${char:26:1}\n\
    \        local new_char28=${char:27:1}\n        local new_char29=${char:28:1}\n\
    \        local new_char30=${char:29:1}\n        local new_char31=${char:30:1}\n\
    \        local new_char32=${char:31:1}\n        local new_char33=${char:32:1}\n\
    \        local new_char34=${char:33:1}\n        local new_char35=${char:34:1}\n\
    \        local new_char36=${char:35:1}\n        local new_char37=${char:36:1}\n\
    \        local new_char38=${char:37:1}\n        local new_char39=${char:38:1}\n\
    \        local new_char40=${char:39:1}\n        local new_char41=${char:40:1}\n\
    \        local new_char42=${char\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa4m_gyql.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local words=$2\n    local new_string=\"\
    \"\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_character\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char_count=0\n    local char_index=0\n    local new_char_index=0\n\
    \    local char\n    local new_char\n    local word\n    local new_word\n    local\
    \ blank_space\n    local new_blank_space\n    local word\n    local new_word\n\
    \    local char\n    local new_char\n    local count=0\n    local char_count=0\n\
    \    local char_index=0\n    local new_char_index=0\n    local char\n    local\
    \ new_char\n    local word\n    local new_word\n    local blank_space\n    local\
    \ new_blank_space\n    local word\n    local new_word\n    local char\n    local\
    \ new_char\n    local count=0\n    local char_count=0\n    local char_index=0\n\
    \    local new_char_index=0\n    local char\n    local new_char\n    local word\n\
    \    local new_word\n    local blank_space\n    local new_blank_space\n    local\
    \ word\n    local new_word\n    local char\n    local new_char\n    local count=0\n\
    \    local char_count=0\n    local char_index=0\n    local new_char_index=0\n\
    \    local char\n    local new_char\n    local word\n    local new_word\n    local\
    \ blank_space\n    local new_blank_space\n    local word\n    local new_word\n\
    \    local char\n    local new_char\n    local count=0\n    local char_count=0\n\
    \    local char_index=0\n    local new_char_index=0\n    local char\n    local\
    \ new_char\n    local word\n    local new_word\n    local blank_space\n    local\
    \ new_blank_space\n    local word\n    local new_word\n    local char\n    local\
    \ new_char\n    local count=0\n    local char_count=0\n    local char_index=0\n\
    \    local new_char_index=0\n    local char\n    local new_char\n    local word\n\
    \    local new_word\n    local blank_space\n    local new_blank_space\n    local\
    \ word\n    local new_word\n    local char\n    local new_char\n    local count=0\n\
    \    local char_count=0\n    local char_index=0\n    local new_char_index=0\n\
    \    local char\n    local new_char\n    local word\n    local new_word\n    local\
    \ blank_space\n    local new_blank_space\n    local word\n    local new_\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char\n\
    \  local word_char_ascii\n  local word_char_ascii_value\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local\
    \ word_char_ascii_value_index\n  local word_char_ascii_value_index\n  local word_char_ascii_value_index\n\
    \  local word_char_ascii_value_index\n  \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local char_ascii=${char:0:1}\n        local char_ascii_value=${char_ascii}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpogerkoo0.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_list=($string)\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_char=0\n    local word_char_length=0\n    local word_char_length2=0\n\
    \    local word_char_length3=0\n    local word_char_length4=0\n    local word_char_length5=0\n\
    \    local word_char_length6=0\n    local word_char_length7=0\n    local word_char_length8=0\n\
    \    local word_char_length9=0\n    local word_char_length10=0\n    local word_char_length11=0\n\
    \    local word_char_length12=0\n    local word_char_length13=0\n    local word_char_length14=0\n\
    \    local word_char_length15=0\n    local word_char_length16=0\n    local word_char_length17=0\n\
    \    local word_char_length18=0\n    local word_char_length19=0\n    local word_char_length20=0\n\
    \    local word_char_length21=0\n    local word_char_length22=0\n    local word_char_length23=0\n\
    \    local word_char_length24=0\n    local word_char_length25=0\n    local word_char_length26=0\n\
    \    local word_char_length27=0\n    local word_char_length28=0\n    local word_char_length29=0\n\
    \    local word_char_length30=0\n    local word_char_length31=0\n    local word_char_length32=0\n\
    \    local word_char_length33=0\n    local word_char_length34=0\n    local word_char_length35=0\n\
    \    local word_char_length36=0\n    local word_char_length37=0\n    local word_char_length38=0\n\
    \    local word_char_length39=0\n    local word_char_length40=0\n    local word_char_length41=0\n\
    \    local word_char_length42=0\n    local word_char_length43=0\n    local word_char_length44=0\n\
    \    local word_char_length45=0\n    local word_char_length46=0\n    local word_char_length47=0\n\
    \    local word_char_length48=0\n    local word_char_length49=0\n    local word_char_length50=0\n\
    \    local word_char_length51=0\n    local word_char_length52=0\n    local word_char_length53=0\n\
    \    local word_char_length54=0\n    local word_char_length55=0\n    local word_char_length56=0\n\
    \    local word_char_length57=0\n    local word_char_length58=0\n    local word_char_length\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local words=$(echo\
    \ $string | tr \" \" \"\\n\")\n  local word_count=0\n  local word_index=0\n  local\
    \ word_length=0\n  local word_char=0\n  local word_char_length=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  \n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_array=()\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_char_count=0\n    local word_char_length=0\n    local word_char_array=()\n\
    \    local word_char_length_count=0\n    local word_char_length_array=()\n   \
    \ local word_char_length_array_count=0\n    local word_char_length_array_index=0\n\
    \    local word_char_length_array_length=0\n    local word_char_length_array_index2=0\n\
    \    local word_char_length_array_length2=0\n    local word_char_length_array_index3=0\n\
    \    local word_char_length_array_length3=0\n    local word_char_length_array_index4=0\n\
    \    local word_char_length_array_length4=0\n    local word_char_length_array_index5=0\n\
    \    local word_char_length_array_length5=0\n    local word_char_length_array_index6=0\n\
    \    local word_char_length_array_length6=0\n    local word_char_length_array_index7=0\n\
    \    local word_char_length_array_length7=0\n    local word_char_length_array_index8=0\n\
    \    local word_char_length_array_length8=0\n    local word_char_length_array_index9=0\n\
    \    local word_char_length_array_length9=0\n    local word_char_length_array_index10=0\n\
    \    local word_char_length_array_length10=0\n    local word_char_length_array_index11=0\n\
    \    local word_char_length_array_length11=0\n    local word_char_length_array_index12=0\n\
    \    local word_char_length_array_length12=0\n    local word_char_length_array_index13=0\n\
    \    local word_char_length_array_length13=0\n    local word_char_length_array_index14=0\n\
    \    local word_char_length_array_length14=0\n    local word_char_length_array_index15=0\n\
    \    local word_char_length_array_length15=0\n    local word_char_length_array_index16=0\n\
    \    local word_char_length_array_length16=0\n    local word_char_length_array_index17=0\n\
    \    local word_char_length_array_length17=0\n    local word_char_length_array_index18=0\n\
    \    local word_char_length_array_length18=0\n    local word_char_length_array_index19=0\n\
    \    local word_char_length_array_length19=0\n    local word_char_length_array_index20=0\n\
    \    local word_char_length_array_length20=0\n    local word_char_length_array_index21=0\n\
    \    local word_char_length_array_length21=0\n    local word_char_length_array_index22=0\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=${#string}\n\
    \  local j=0\n  while [ $i -gt 0 ]; do\n    local c=${string:$i:1}\n    local\
    \ k=$(echo $c | tr -dc '[:alpha:]')\n    local l=$(echo $c | tr -dc '[:lower:]')\n\
    \    local m=$(echo $c | tr -dc '[:upper:]')\n    local n=$(echo $c | tr -dc '[:punct:]')\n\
    \    local o=$(echo $c | tr -dc '[:space:]')\n    local p=$(( $i + 1 ))\n    local\
    \ q=$(( $j + 1 ))\n    local r=$(( $j + 2 ))\n    local s=$(( $i + 2 ))\n    local\
    \ t=$(( $i + 3 ))\n    local u=$(( $i + 4 ))\n    local v=$(( $i + 5 ))\n    local\
    \ w=$(( $i + 6 ))\n    local x=$(( $i + 7 ))\n    local y=$(( $i + 8 ))\n    local\
    \ z=$(( $i + 9 ))\n    local A=$(( $i + 10 ))\n    local B=$(( $i + 11 ))\n  \
    \  local C=$(( $i + 12 ))\n    local D=$(( $i + 13 ))\n    local E=$(( $i + 14\
    \ ))\n    local F=$(( $i + 15 ))\n    local G=$(( $i + 16 ))\n    local H=$((\
    \ $i + 17 ))\n    local I=$(( $i + 18 ))\n    local J=$(( $i + 19 ))\n    local\
    \ K=$(( $i + 20 ))\n    local L=$(( $i + 21 ))\n    local M=$(( $i + 22 ))\n \
    \   local N=$(( $i + 23 ))\n    local O=$(( $i + 24 ))\n    local P=$(( $i + 25\
    \ ))\n    local Q=$(( $i + 26 ))\n    local R=$(( $i + 27 ))\n    local S=$((\
    \ $i + 28 ))\n    local T=$(( $i + 29 ))\n    local U=$(( $i + 30 ))\n    local\
    \ V=$(( $i + 31 ))\n    local W=$(( $i + 32 ))\n    local X=$(( $i + 33 ))\n \
    \   local Y=$(( $i + 34 ))\n    local Z=$(( $i + 35 ))\n    local a=$(( $i + 36\
    \ ))\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzu_xfba5.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpzu_xfba5.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local char_count=0\n  local char_prev=0\n  local char_next=0\n  local char_prev2=0\n\
    \  local char_next2=0\n  local char_prev3=0\n  local char_next3=0\n  local char_prev4=0\n\
    \  local char_next4=0\n  local char_prev5=0\n  local char_next5=0\n  local char_prev6=0\n\
    \  local char_next6=0\n  local char_prev7=0\n  local char_next7=0\n  local char_prev8=0\n\
    \  local char_next8=0\n  local char_prev9=0\n  local char_next9=0\n  local char_prev10=0\n\
    \  local char_next10=0\n  local char_prev11=0\n  local char_next11=0\n  local\
    \ char_prev12=0\n  local char_next12=0\n  local char_prev13=0\n  local char_next13=0\n\
    \  local char_prev14=0\n  local char_next14=0\n  local char_prev15=0\n  local\
    \ char_next15=0\n  local char_prev16=0\n  local char_next16=0\n  local char_prev17=0\n\
    \  local char_next17=0\n  local char_prev18=0\n  local char_next18=0\n  local\
    \ char_prev19=0\n  local char_next19=0\n  local char_prev20=0\n  local char_next20=0\n\
    \  local char_prev21=0\n  local char_next21=0\n  local char_prev22=0\n  local\
    \ char_next22=0\n  local char_prev23=0\n  local char_next23=0\n  local char_prev24=0\n\
    \  local char_next24=0\n  local char_prev25=0\n  local char_next25=0\n  local\
    \ char_prev26=0\n  local char_next26=0\n  local char_prev27=0\n  local char_next27=0\n\
    \  local char_prev28=0\n  local char_next28=0\n  local char_prev29=0\n  local\
    \ char_next29=0\n  local char_prev30=0\n  local char_next30=0\n  local char_prev31=0\n\
    \  local char_next31=0\n  local char_prev32=0\n  local char_next32=0\n  local\
    \ char_prev33=0\n  local char_next33=0\n  local char_prev34=0\n  local char_next34=0\n\
    \  local char_prev35=0\n  local char_next35=0\n  \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local output=\"\"\n  local words=$string\n\
    \  local space=\" \"\n  local characters=\"abcdefghijklmnopqrstuvwxyz\"\n  local\
    \ characters_count=${#characters}\n  local characters_array=( ${characters//\\\
    //} )\n  local characters_array_count=${#characters_array[@]}\n  local characters_array_index=${#characters_array[@]}\n\
    \  local characters_array_values=( ${characters_array[@]} )\n  local characters_array_values_count=${#characters_array_values[@]}\n\
    \  local characters_array_values_index=${#characters_array_values[@]}\n  local\
    \ characters_array_values_values_count=${#characters_array_values_values[@]}\n\
    \  local characters_array_values_values_index=${#characters_array_values_values[@]}\n\
    \  local characters_array_values_values_values_count=${#characters_array_values_values_values[@]}\n\
    \  local characters_array_values_values_values_index=${#characters_array_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_count=${#characters_array_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_index=${#characters_array_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_values_count=${#characters_array_values_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_values_index=${#characters_array_values_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_values_values_count=${#characters_array_values_values_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_values_values_index=${#characters_array_values_values_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_values_values_values_count=${#characters_array_values_values_values_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_values_values_values_values_index=${#characters_array_values_values_values_values_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_values_values_values_values_values_count=${#characters_array_values_values_values_values_values_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_values_values_values_values_values_index=${#characters_array_values_values_values_values_values_values_values_values_values_values[@]}\n\
    \  local characters_array_values_values_values_values_values_values_values_values_values_values_values_count=${#characters_array_values_values_values_values_values_values_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgllebm02.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local new_count=0\n    local char\n    local new_char\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_character_index=0\n\
    \    local word_character=\"\"\n    local word_character_index=0\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_char_length=0\n    local word_char_char_char_length=0\n\
    \    local word_char_char_char_char_length=0\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_length=0\n \
    \   local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_lengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlength\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local char\n  local new_char\n  local i\n  local j\n  local length\n  local\
    \ word\n  local words=()\n  local word\n  local space\n  local spaces=()\n  local\
    \ space\n  local i\n  local j\n  local length\n  local word\n  local words=()\n\
    \  local word\n  local space\n  local spaces=()\n  local space\n  local i\n  local\
    \ j\n  local length\n  local word\n  local words=()\n  local word\n  local space\n\
    \  local spaces=()\n  local space\n  local i\n  local j\n  local length\n  local\
    \ word\n  local words=()\n  local word\n  local space\n  local spaces=()\n  local\
    \ space\n  local i\n  local j\n  local length\n  local word\n  local words=()\n\
    \  local word\n  local space\n  local spaces=()\n  local space\n  local i\n  local\
    \ j\n  local length\n  local word\n  local words=()\n  local word\n  local space\n\
    \  local spaces=()\n  local space\n  local i\n  local j\n  local length\n  local\
    \ word\n  local words=()\n  local word\n  local space\n  local spaces=()\n  local\
    \ space\n  local i\n  local j\n  local length\n  local word\n  local words=()\n\
    \  local word\n  local space\n  local spaces=()\n  local space\n  local i\n  local\
    \ j\n  local length\n  local word\n  local words=()\n  local word\n  local space\n\
    \  local spaces=()\n  local space\n  local i\n  local j\n  local length\n  local\
    \ word\n  local words=()\n  local word\n  local space\n  local spaces=()\n  local\
    \ space\n  local i\n  local j\n  local length\n  local word\n  local words=()\n\
    \  local word\n  local space\n  local spaces=()\n  local space\n  local i\n  local\
    \ j\n  local length\n  local word\n  local words=()\n  local word\n  local space\n\
    \  local spaces=()\n  local space\n  local i\n  local \n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  while [ $i -lt ${#string} ]; do\n    local char=\"${string:$i:1}\"\n\
    \    local next_char=\"${string:$((i+1)):1}\"\n    if [ \"$char\" != \"$next_char\"\
    \ ]; then\n      new_string+=\"${char}\"\n      i=$((i+1))\n    else\n      new_string+=\"\
    ${next_char}\"\n      i=$((i+1))\n      j=$((j+1))\n    fi\n  done\n  new_string+=\"\
    ${string:$((i+1)):1}\"\n  echo \"$new_string\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ words=\"\"\n    local count=0\n    local char=\"\"\n    local new_char=\"\"\n\
    \    local i=0 j=0\n    local temp=\"\"\n    local new_temp=\"\"\n    local count2=0\n\
    \    local count3=0\n    local count4=0\n    local count5=0\n    local count6=0\n\
    \    local count7=0\n    local count8=0\n    local count9=0\n    local count10=0\n\
    \    local count11=0\n    local count12=0\n    local count13=0\n    local count14=0\n\
    \    local count15=0\n    local count16=0\n    local count17=0\n    local count18=0\n\
    \    local count19=0\n    local count20=0\n    local count21=0\n    local count22=0\n\
    \    local count23=0\n    local count24=0\n    local count25=0\n    local count26=0\n\
    \    local count27=0\n    local count28=0\n    local count29=0\n    local count30=0\n\
    \    local count31=0\n    local count32=0\n    local count33=0\n    local count34=0\n\
    \    local count35=0\n    local count36=0\n    local count37=0\n    local count38=0\n\
    \    local count39=0\n    local count40=0\n    local count41=0\n    local count42=0\n\
    \    local count43=0\n    local count44=0\n    local count45=0\n    local count46=0\n\
    \    local count47=0\n    local count48=0\n    local count49=0\n    local count50=0\n\
    \    local count51=0\n    local count52=0\n    local count53=0\n    local count54=0\n\
    \    local count55=0\n    local count56=0\n    local count57=0\n    local count58=0\n\
    \    local count59=0\n    local count60=0\n    local count61=0\n    local count62=0\n\
    \    local count63=0\n    local count64=0\n    local count65=0\n    local count66=0\n\
    \    local count67=0\n    local count68=0\n    local count69=0\n    local count70=0\n\
    \    local count71=0\n    local count72=0\n    local count73=0\n    local count74=0\n\
    \    local count75=0\n    local count76=0\n    local count77=0\n    local count78\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_index2=0\n    local word_char_index3=0\n    local word_char_index4=0\n\
    \    local word_char_index5=0\n    local word_char_index6=0\n    local word_char_index7=0\n\
    \    local word_char_index8=0\n    local word_char_index9=0\n    local word_char_index10=0\n\
    \    local word_char_index11=0\n    local word_char_index12=0\n    local word_char_index13=0\n\
    \    local word_char_index14=0\n    local word_char_index15=0\n    local word_char_index16=0\n\
    \    local word_char_index17=0\n    local word_char_index18=0\n    local word_char_index19=0\n\
    \    local word_char_index20=0\n    local word_char_index21=0\n    local word_char_index22=0\n\
    \    local word_char_index23=0\n    local word_char_index24=0\n    local word_char_index25=0\n\
    \    local word_char_index26=0\n    local word_char_index27=0\n    local word_char_index28=0\n\
    \    local word_char_index29=0\n    local word_char_index30=0\n    local word_char_index31=0\n\
    \    local word_char_index32=0\n    local word_char_index33=0\n    local word_char_index34=0\n\
    \    local word_char_index35=0\n    local word_char_index36=0\n    local word_char_index37=0\n\
    \    local word_char_index38=0\n    local word_char_index39=0\n    local word_char_index40=0\n\
    \    local word_char_index41=0\n    local word_char_index42=0\n    local word_char_index43=0\n\
    \    local word_char_index44=0\n    local word_char_index45=0\n    local word_char_index46=0\n\
    \    local word_char_index47=0\n    local word_char_index48=0\n    local word_char_index49=0\n\
    \    local word_char_index50=0\n    local word_char_index51=0\n    local word_char_index52=0\n\
    \    local word_char_index53=0\n    local word_char_index54=0\n    local word_char_index55=0\n\
    \    local word_char_index56=0\n    local word_char_index57=0\n    local word_char_index58=0\n\
    \    local word_char_index59=0\n    local word_char_index60=0\n    local word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local words=$(echo \"$string\"\
    \ | sed 's/ /\\n/g' | sort -u)\n    local new_string=\"\"\n    for word in $words;\
    \ do\n        new_string+=\"$(echo \"$word\" | sed 's/./& /g' | sort -n | sed\
    \ 's/ /\\n/g' | tr '[A-Z]' '[a-z]' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' |\
    \ sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed\
    \ 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' |\
    \ sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed\
    \ 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' |\
    \ sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed\
    \ 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8j2eqjer.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmp8j2eqjer.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_index=0\n    local word_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_length_count=0\n\
    \    local word_length_count2=0\n    local word_length_count3=0\n    local word_length_count4=0\n\
    \    local word_length_count5=0\n    local word_length_count6=0\n    local word_length_count7=0\n\
    \    local word_length_count8=0\n    local word_length_count9=0\n    local word_length_count10=0\n\
    \    local word_length_count11=0\n    local word_length_count12=0\n    local word_length_count13=0\n\
    \    local word_length_count14=0\n    local word_length_count15=0\n    local word_length_count16=0\n\
    \    local word_length_count17=0\n    local word_length_count18=0\n    local word_length_count19=0\n\
    \    local word_length_count20=0\n    local word_length_count21=0\n    local word_length_count22=0\n\
    \    local word_length_count23=0\n    local word_length_count24=0\n    local word_length_count25=0\n\
    \    local word_length_count26=0\n    local word_length_count27=0\n    local word_length_count28=0\n\
    \    local word_length_count29=0\n    local word_length_count30=0\n    local word_length_count31=0\n\
    \    local word_length_count32=0\n    local word_length_count33=0\n    local word_length_count34=0\n\
    \    local word_length_count35=0\n    local word_length_count36=0\n    local word_length_count37=0\n\
    \    local word_length_count38=0\n    local word_length_count39=0\n    local word_length_count40=0\n\
    \    local word_length_count41=0\n    local word_length_count42=0\n    local word_length_count43=0\n\
    \    local word_length_count44=0\n    local word_length_count45=0\n    local word_length_count46=0\n\
    \    local word_length_count47=0\n    local word_length_count48=0\n    local word_length_count49=0\n\
    \    local word_length_count50=0\n    local word_length_count51=0\n    local word_length_count52=0\n\
    \    local word_length_count53=0\n    local word_length_count54=0\n    local word_length_count55=0\n\
    \    local word_length_count56=0\n    local word_length_count57=0\n    local word_length_count58=0\n\
    \    local word_length_count59=0\n    local word_length_count60=0\n    local \n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local new_count=0\n  local char\n  local new_char\n  local i\n  local j\n \
    \ local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char_length=0\n  local word_char_char_length=0\n\
    \  local word_char_char_char_length=0\n  local word_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local char\n    local new_char\n    local i\n    local j\n    local k\n \
    \   local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local i\n    local j\n    local k\n    local l\n    local m\n \
    \   local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char=0\n\
    \    local word_char_length=0\n    local word_char_char=0\n    local word_char_char_length=0\n\
    \    local word_char_char_char=0\n    local word_char_char_char_length=0\n   \
    \ local word_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_length=0\n \
    \   local word_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word\n\
    \  local i\n  local j\n  local length\n  local new_word\n  local character\n \
    \ local character2\n  local character3\n  local character4\n  local character5\n\
    \  local character6\n  local character7\n  local character8\n  local character9\n\
    \  local character10\n  local character11\n  local character12\n  local character13\n\
    \  local character14\n  local character15\n  local character16\n  local character17\n\
    \  local character18\n  local character19\n  local character20\n  local character21\n\
    \  local character22\n  local character23\n  local character24\n  local character25\n\
    \  local character26\n  local character27\n  local character28\n  local character29\n\
    \  local character30\n  local character31\n  local character32\n  local character33\n\
    \  local character34\n  local character35\n  local character36\n  local character37\n\
    \  local character38\n  local character39\n  local character40\n  local character41\n\
    \  local character42\n  local character43\n  local character44\n  local character45\n\
    \  local character46\n  local character47\n  local character48\n  local character49\n\
    \  local character50\n  local character51\n  local character52\n  local character53\n\
    \  local character54\n  local character55\n  local character56\n  local character57\n\
    \  local character58\n  local character59\n  local character60\n  local character61\n\
    \  local character62\n  local character63\n  local character64\n  local character65\n\
    \  local character66\n  local character67\n  local character68\n  local character69\n\
    \  local character70\n  local character71\n  local character72\n  local character73\n\
    \  local character74\n  local character75\n  local character76\n  local character77\n\
    \  local character78\n  local character79\n  local character80\n  local character81\n\
    \  local character82\n  local character83\n  local character84\n  local character85\n\
    \  local character86\n  local character87\n  local character88\n  local character89\n\
    \  local character90\n  local character91\n  local character92\n  local character93\n\
    \  local character94\n  local character95\n  local character96\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index=0\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n    local word_char=\"\"\n    local word_char=\"\
    \"\n    local word_char=\"\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local next_char=${string:$((i+1)):1}\n        if [ $char -gt $next_char\
    \ ]; then\n            ((j++))\n            new_string+=\"${string:$i:1}\"\n \
    \       else\n            ((i++))\n            new_string+=\"${string:$j:1}\"\n\
    \        fi\n    done\n    echo \"$new_string\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpru5hkzoq.sh: line 23: [: H: integer expression expected

    /tmp/tmpru5hkzoq.sh: line 23: [: i: unary operator expected

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=$((${#string}\
    \ - 1))\n    while [ $i -gt 0 ]; do\n        local j=$((${#string} - 1))\n   \
    \     while [ $j -gt 0 ] && [ $string[$j] -eq \" \" ]; do\n            ((j--))\n\
    \        done\n        local new_string=$new_string$string[$i]$string[$j]\n  \
    \      ((i--))\n        ((j++))\n    done\n    echo $new_string\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbzqfjy0r.sh: line 22: [: Hi[1]: integer expression expected

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=${#string}\n\
    \    local j=0\n    while [ $i -gt 0 ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf5xa8n21.sh: line 70: syntax error near unexpected token `}''

    /tmp/tmpf5xa8n21.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local words=\"\
    \"\n    local space=\"\"\n    local i=0 j=0\n    while [[ $i -lt ${#string} ]];\
    \ do\n        words=\"${string[$i]}\"\n        space=\"${string[$i+1]}\"\n   \
    \     if [[ $words != \"\" ]]; then\n            if [[ $space != \"\" ]]; then\n\
    \                output=\"${output} ${words} ${space}\"\n            else\n  \
    \              output=\"${output} ${words}\"\n            fi\n        fi\n   \
    \     i=$((i+2))\n    done\n    echo \"$output\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  while [ $i -lt ${#string} ]; do\n    local char=${string:$i:1}\n    local next_char=${string:$((i+1)):1}\n\
    \    if [ $char -gt $next_char ]; then\n      new_string=$new_string$next_char\n\
    \      i=$((i+1))\n    else\n      new_string=$new_string$char\n      i=$((i+1))\n\
    \      j=$((j+1))\n    fi\n  done\n  new_string=$new_string$((j+1))\n  echo $new_string\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg28mx43n.sh: line 23: [: H: integer expression expected

    /tmp/tmpg28mx43n.sh: line 23: [: i: unary operator expected

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=${#string}\n\
    \  local j=0\n  while [ $i -gt 0 ]; do\n    local char=${string:$i:1}\n    local\
    \ next_char=${string:$((i+1)):1}\n    local char_ascii=${char:0:1}\n    local\
    \ next_char_ascii=${next_char:0:1}\n    if [ $char_ascii > $next_char_ascii ];\
    \ then\n      new_string=$new_string$next_char\n      i=$((i+1))\n    else\n \
    \     new_string=$new_string$char\n      i=$((i-1))\n    fi\n  done\n  echo $new_string\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpww_7w46j.sh: line 26: $next_char_ascii: ambiguous redirect

    /tmp/tmpww_7w46j.sh: line 26: $next_char_ascii: ambiguous redirect

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local new_count=0\n    local word\n    local new_word\n    local\
    \ char\n    local new_char\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_array=()\n\
    \    local word_char_length=0\n    local word_char_char_array=()\n    local word_char_char_length=0\n\
    \    local word_char_char_char_array=()\n    local word_char_char_char_length=0\n\
    \    local word_char_char_char_char_array=()\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_array=()\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_array=()\n    local word_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_array=()\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_array=()\n    local word_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_array=()\n    local\
    \ word_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_array=()\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_length=0\n \
    \   local word_char_char_char_char_char_char_char_char_char_char_char_array=()\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_array=()\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_array=()\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local new_char\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=$((${#string}\
    \ - 1))\n    while [ $i -gt 0 ]; do\n        local j=$((${#string} - 1))\n   \
    \     while [ $j -gt 0 ] && [ ${string:$j:1} = \" \" ]; do\n            ((j--))\n\
    \        done\n        local new_string=$new_string${string:$i:1}${string:$j:1}\n\
    \        ((i--))\n        ((j++))\n    done\n    echo $new_string\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_character\n  local\
    \ word_character_index\n  local word_character_length\n  local word_character_count\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_count=0\n  local word_char_char_length=0\n\
    \  local word_char_char_index=0\n  local word_char_char_char_index=0\n  local\
    \ word_char_char_char_length=0\n  local word_char_char_char_char_index=0\n  local\
    \ word_char_char_char_char_length=0\n  local word_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_length=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=${#string}\n\
    \    local j=0\n    while [ $i -gt 0 ]; do\n        local c=${string:$i:1}\n \
    \       local k=$(echo $c | sed 's/\\(.\\)/\\1 /g')\n        local l=$(echo $c\
    \ | sed 's/\\(.\\)/\\1 /g' | sort -n)\n        local m=$(echo $c | sed 's/\\(.\\\
    )/\\1 /g' | sort -n | tail -1)\n        local n=$(echo $c | sed 's/\\(.\\)/\\\
    1 /g' | sort -n | head -1)\n        local o=$(echo $c | sed 's/\\(.\\)/\\1 /g'\
    \ | sort -n | head -2)\n        local p=$(echo $c | sed 's/\\(.\\)/\\1 /g' | sort\
    \ -n | head -3)\n        local q=$(echo $c | sed 's/\\(.\\)/\\1 /g' | sort -n\
    \ | head -4)\n        local r=$(echo $c | sed 's/\\(.\\)/\\1 /g' | sort -n | head\
    \ -5)\n        local s=$(echo $c | sed 's/\\(.\\)/\\1 /g' | sort -n | head -6)\n\
    \        local t=$(echo $c | sed 's/\\(.\\)/\\1 /g' | sort -n | head -7)\n   \
    \     local u=$(echo $c | sed 's/\\(.\\)/\\1 /g' | sort -n | head -8)\n      \
    \  local v=$(echo $c | sed 's/\\(.\\)/\\1 /g' | sort -n | head -9)\n        local\
    \ w=$(echo $c | sed 's/\\(.\\)/\\1 /g' | sort -n | head -10)\n        local x=$(echo\
    \ $c | sed 's/\\(.\\)/\\1 /g' | sort -n | head -11)\n        local y=$(echo $c\
    \ | sed 's/\\(.\\)/\\1 /g' | sort -n | head -12)\n        local z=$(echo $c |\
    \ sed 's/\\(.\\)/\\1 /g' | sort -n | head -13)\n        local A=$(echo $c | sed\
    \ 's/\\(.\\)/\\1 /g' | sort -n | head -14)\n        local B=$(echo $c | sed 's/\\\
    (.\\)/\\1 /g' | sort -n | head -15)\n        local C=$(echo $c | sed 's/\\(.\\\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjitqpffj.sh: line 41: unexpected EOF while looking for matching
    `''''

    /tmp/tmpjitqpffj.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_length_count=0\n\
    \    local word_length_count2=0\n    local word_length_count3=0\n    local word_length_count4=0\n\
    \    local word_length_count5=0\n    local word_length_count6=0\n    local word_length_count7=0\n\
    \    local word_length_count8=0\n    local word_length_count9=0\n    local word_length_count10=0\n\
    \    local word_length_count11=0\n    local word_length_count12=0\n    local word_length_count13=0\n\
    \    local word_length_count14=0\n    local word_length_count15=0\n    local word_length_count16=0\n\
    \    local word_length_count17=0\n    local word_length_count18=0\n    local word_length_count19=0\n\
    \    local word_length_count20=0\n    local word_length_count21=0\n    local word_length_count22=0\n\
    \    local word_length_count23=0\n    local word_length_count24=0\n    local word_length_count25=0\n\
    \    local word_length_count26=0\n    local word_length_count27=0\n    local word_length_count28=0\n\
    \    local word_length_count29=0\n    local word_length_count30=0\n    local word_length_count31=0\n\
    \    local word_length_count32=0\n    local word_length_count33=0\n    local word_length_count34=0\n\
    \    local word_length_count35=0\n    local word_length_count36=0\n    local word_length_count37=0\n\
    \    local word_length_count38=0\n    local word_length_count39=0\n    local word_length_count40=0\n\
    \    local word_length_count41=0\n    local word_length_count42=0\n    local word_length_count43=0\n\
    \    local word_length_count44=0\n    local word_length_count45=0\n    local word_length_count46=0\n\
    \    local word_length_count47=0\n    local word_length_count48=0\n    local word_length_count49=0\n\
    \    local word_length_count50=0\n    local word_length_count51=0\n    local word_length_count52=0\n\
    \    local word_length_count53=0\n    local word_length_count54=0\n    local word_length_count55=0\n\
    \    local word_length_count56=0\n    local word_length_count57=0\n    local word_length_count58=0\n\
    \    local word_length_count59=0\n    local word_length_count60=0\n    local \n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char\n    local word_char_value\n\
    \    local word_char_prev\n    local word_char_next\n    local word_char_prev_value\n\
    \    local word_char_next_value\n    local word_char_prev_char\n    local word_char_next_char\n\
    \    local word_char_prev_char_next\n    local word_char_next_char_prev\n    local\
    \ word_char_prev_char_next\n    local word_char_next_char_prev\n    local word_char_prev_char_next_next\n\
    \    local word_char_next_char_prev_prev\n    local word_char_prev_char_next_next_prev\n\
    \    local word_char_next_char_prev_prev_prev\n    local word_char_prev_char_next_next_prev_prev\n\
    \    local word_char_next_char_prev_prev_prev_prev\n    local word_char_prev_char_next_next_prev_prev_prev\n\
    \    local word_char_next_char_prev_prev_prev_prev_prev\n    local word_char_prev_char_next_next_prev_prev_prev_prev\n\
    \    local word_char_next_char_prev_prev_prev_prev_prev_prev\n    local word_char_prev_char_next_next_prev_prev_prev_prev_prev\n\
    \    local word_char_next_char_prev_prev_prev_prev_prev_prev_prev\n    local word_char_prev_char_next_next_prev_prev_prev_prev_prev_prev\n\
    \    local word_char_next_char_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ word_char_prev_char_next_next_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ word_char_next_char_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ word_char_prev_char_next_next_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ word_char_next_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ word_char_prev_char_next_next_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local word_char_next_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local word_char_prev_char_next_next_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local word_char_next_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local word_char_prev_char_next_next_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local word_char_next_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local word_char_prev_char_next_next_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local word_char_next_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char_count=0\n\
    \    local word_char_length=0\n    local word_char_index=0\n    local word_char_length_index=0\n\
    \    local word_char_index=0\n    local word_char_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_index=0\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local new_char\n    local new_count=0\n    local\
    \ new_char2\n    local new_count2=0\n    local new_char3\n    local new_count3=0\n\
    \    local new_char4\n    local new_count4=0\n    local new_char5\n    local new_count5=0\n\
    \    local new_char6\n    local new_count6=0\n    local new_char7\n    local new_count7=0\n\
    \    local new_char8\n    local new_count8=0\n    local new_char9\n    local new_count9=0\n\
    \    local new_char10\n    local new_count10=0\n    local new_char11\n    local\
    \ new_count11=0\n    local new_char12\n    local new_count12=0\n    local new_char13\n\
    \    local new_count13=0\n    local new_char14\n    local new_count14=0\n    local\
    \ new_char15\n    local new_count15=0\n    local new_char16\n    local new_count16=0\n\
    \    local new_char17\n    local new_count17=0\n    local new_char18\n    local\
    \ new_count18=0\n    local new_char19\n    local new_count19=0\n    local new_char20\n\
    \    local new_count20=0\n    local new_char21\n    local new_count21=0\n    local\
    \ new_char22\n    local new_count22=0\n    local new_char23\n    local new_count23=0\n\
    \    local new_char24\n    local new_count24=0\n    local new_char25\n    local\
    \ new_count25=0\n    local new_char26\n    local new_count26=0\n    local new_char27\n\
    \    local new_count27=0\n    local new_char28\n    local new_count28=0\n    local\
    \ new_char29\n    local new_count29=0\n    local new_char30\n    local new_count30=0\n\
    \    local new_char31\n    local new_count31=0\n    local new_char32\n    local\
    \ new_count32=0\n    local new_char33\n    local new_count33=0\n    local new_char34\n\
    \    local new_count34=0\n    local new_char35\n    local new_count35=0\n    local\
    \ new_char36\n    local new_count36=0\n    local new_char37\n    local new_count37=0\n\
    \    local new_char38\n    local new_count38=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=${#string}\n\
    \    local j=0\n    local k=0\n    while [ $i -gt 0 ]; do\n        local c=${string:$i:1}\n\
    \        local new_c\n        if [ $c != \" \" ]; then\n            new_c=$c\n\
    \        else\n            new_c=${string:$i:1}\n        fi\n        local new_string=$new_string$new_c\n\
    \        i=$(($i-1))\n        k=$(($k+1))\n        if [ $k -eq $i ]; then\n  \
    \          local new_string=$new_string$new_c\n            i=$(($i-1))\n     \
    \       k=0\n        fi\n    done\n    echo $new_string\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_2df3p_4.sh: line 25: [: !=: unary operator expected

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_index=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_length_index=0\n\
    \    local word_char_index=0\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char_index=0\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_length=\"\"\n    local word_char=\"\"\n    local word_char_length=\"\
    \"\n    local word_char=\"\"\n    local word_char_length=\"\"\n    local word_char=\"\
    \"\n    local word_char_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_array=()\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_char=0\n    local word_char_length=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count2=0\n   \
    \ local word_char_length_index2=0\n    local word_char_length_count3=0\n    local\
    \ word_char_length_index3=0\n    local word_char_length_count4=0\n    local word_char_length_index4=0\n\
    \    local word_char_length_count5=0\n    local word_char_length_index5=0\n  \
    \  local word_char_length_count6=0\n    local word_char_length_index6=0\n    local\
    \ word_char_length_count7=0\n    local word_char_length_index7=0\n    local word_char_length_count8=0\n\
    \    local word_char_length_index8=0\n    local word_char_length_count9=0\n  \
    \  local word_char_length_index9=0\n    local word_char_length_count10=0\n   \
    \ local word_char_length_index10=0\n    local word_char_length_count11=0\n   \
    \ local word_char_length_index11=0\n    local word_char_length_count12=0\n   \
    \ local word_char_length_index12=0\n    local word_char_length_count13=0\n   \
    \ local word_char_length_index13=0\n    local word_char_length_count14=0\n   \
    \ local word_char_length_index14=0\n    local word_char_length_count15=0\n   \
    \ local word_char_length_index15=0\n    local word_char_length_count16=0\n   \
    \ local word_char_length_index16=0\n    local word_char_length_count17=0\n   \
    \ local word_char_length_index17=0\n    local word_char_length_count18=0\n   \
    \ local word_char_length_index18=0\n    local word_char_length_count19=0\n   \
    \ local word_char_length_index19=0\n    local word_char_length_count20=0\n   \
    \ local word_char_length_index20=0\n    local word_char_length_count21=0\n   \
    \ local word_char_length_index21=0\n    local word_char_length_count22=0\n   \
    \ local word_char_length_index22=0\n    local word_char_length_count23=0\n   \
    \ local word_char_length_index23=0\n    local word_char_length_count24=0\n   \
    \ local word_char_length_index24=0\n    local word_char_length_count25=0\n   \
    \ local word_char_length_index25=0\n    local word_char_length_count26=0\n   \
    \ local word_char_length\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char\n    local word_char_index\n\
    \    local word_char_count\n    local word_char\n    local word_char_index\n \
    \   local word_char_count\n    local word_char\n    local word_char_index\n  \
    \  local word_char_count\n    local word_char\n    local word_char_index\n   \
    \ local word_char_count\n    local word_char\n    local word_char_index\n    local\
    \ word_char_count\n    local word_char\n    local word_char_index\n    local word_char_count\n\
    \    local word_char\n    local word_char_index\n    local word_char_count\n \
    \   local word_char\n    local word_char_index\n    local word_char_count\n  \
    \  local word_char\n    local word_char_index\n    local word_char_count\n   \
    \ local word_char\n    local word_char_index\n    local word_char_count\n    local\
    \ word_char\n    local word_char_index\n    local word_char_count\n    local word_char\n\
    \    local word_char_index\n    local word_char_count\n    local word_char\n \
    \   local word_char_index\n    local word_char_count\n    local word_char\n  \
    \  local word_char_index\n    local word_char_count\n    local word_char\n   \
    \ local word_char_index\n    local word_char_count\n    local word_char\n    local\
    \ word_char_index\n    local word_char_count\n    local word_char\n    local word_char_index\n\
    \    local word_char_count\n    local word_char\n    local word_char_index\n \
    \   local word_char_count\n    local word_char\n    local word_char_index\n  \
    \  local word_char_count\n    local word_char\n    local word_char_index\n   \
    \ local word_char_count\n    local word_char\n    local word_char_index\n    local\
    \ word_char_count\n    local word_char\n    local word_char_index\n    local word_char_count\n\
    \    local word_char\n    local word_char_index\n    local word_char_count\n \
    \   local word_char\n    local word_char_index\n    local word_char_count\n  \
    \  local word_char\n    local word_char_index\n    local word_char_count\n   \
    \ local word_char\n    local word_char_index\n    local word_char_count\n    local\
    \ word_char\n    local word_char_index\n    local word_char_count\n    local word_char\n\
    \    local word_char\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_index2=0\n    local word_char_index3=0\n    local word_char_index4=0\n\
    \    local word_char_index5=0\n    local word_char_index6=0\n    local word_char_index7=0\n\
    \    local word_char_index8=0\n    local word_char_index9=0\n    local word_char_index10=0\n\
    \    local word_char_index11=0\n    local word_char_index12=0\n    local word_char_index13=0\n\
    \    local word_char_index14=0\n    local word_char_index15=0\n    local word_char_index16=0\n\
    \    local word_char_index17=0\n    local word_char_index18=0\n    local word_char_index19=0\n\
    \    local word_char_index20=0\n    local word_char_index21=0\n    local word_char_index22=0\n\
    \    local word_char_index23=0\n    local word_char_index24=0\n    local word_char_index25=0\n\
    \    local word_char_index26=0\n    local word_char_index27=0\n    local word_char_index28=0\n\
    \    local word_char_index29=0\n    local word_char_index30=0\n    local word_char_index31=0\n\
    \    local word_char_index32=0\n    local word_char_index33=0\n    local word_char_index34=0\n\
    \    local word_char_index35=0\n    local word_char_index36=0\n    local word_char_index37=0\n\
    \    local word_char_index38=0\n    local word_char_index39=0\n    local word_char_index40=0\n\
    \    local word_char_index41=0\n    local word_char_index42=0\n    local word_char_index43=0\n\
    \    local word_char_index44=0\n    local word_char_index45=0\n    local word_char_index46=0\n\
    \    local word_char_index47=0\n    local word_char_index48=0\n    local word_char_index49=0\n\
    \    local word_char_index50=0\n    local word_char_index51=0\n    local word_char_index52=0\n\
    \    local word_char_index53=0\n    local word_char_index54=0\n    local word_char_index55=0\n\
    \    local word_char_index56=0\n    local word_char_index57=0\n    local word_char_index58=0\n\
    \    local word_char_index59=0\n    local word_char_index60=0\n    local word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_value=0\n    local word_char=\"\
    \"\n    local word_char_index=0\n    local word_char_length=0\n    local word_char_value=0\n\
    \    local word_char=\"\"\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_value=0\n    local word_char=\"\"\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_value=0\n    local word_char=\"\
    \"\n    local word_char_index=0\n    local word_char_length=0\n    local word_char_value=0\n\
    \    local word_char=\"\"\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_value=0\n    local word_char=\"\"\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_value=0\n    local word_char=\"\
    \"\n    local word_char_index=0\n    local word_char_length=0\n    local word_char_value=0\n\
    \    local word_char=\"\"\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_value=0\n    local word_char=\"\"\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_value=0\n    local word_char=\"\
    \"\n    local word_char_index=0\n    local word_char_length=0\n    local word_char_value=0\n\
    \    local word_char=\"\"\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_value=0\n    local word_char=\"\"\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_value=0\n    local word_char=\"\
    \"\n    local word_char_index=0\n    local word_char_length=0\n    local word_char_value=0\n\
    \    local word_char=\"\"\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_value=0\n    local word_char=\"\"\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_value=0\n    local word_char=\"\
    \"\n    local word_char_index=0\n    local word_char_length=0\n    local word_char_value=0\n\
    \    local word_char=\"\"\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_value=0\n    local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_character\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local last_char=\"\"\n    local last_char_index=0\n    local last_char_index2=0\n\
    \    local last_char_index3=0\n    local last_char_index4=0\n    local last_char_index5=0\n\
    \    local last_char_index6=0\n    local last_char_index7=0\n    local last_char_index8=0\n\
    \    local last_char_index9=0\n    local last_char_index10=0\n    local last_char_index11=0\n\
    \    local last_char_index12=0\n    local last_char_index13=0\n    local last_char_index14=0\n\
    \    local last_char_index15=0\n    local last_char_index16=0\n    local last_char_index17=0\n\
    \    local last_char_index18=0\n    local last_char_index19=0\n    local last_char_index20=0\n\
    \    local last_char_index21=0\n    local last_char_index22=0\n    local last_char_index23=0\n\
    \    local last_char_index24=0\n    local last_char_index25=0\n    local last_char_index26=0\n\
    \    local last_char_index27=0\n    local last_char_index28=0\n    local last_char_index29=0\n\
    \    local last_char_index30=0\n    local last_char_index31=0\n    local last_char_index32=0\n\
    \    local last_char_index33=0\n    local last_char_index34=0\n    local last_char_index35=0\n\
    \    local last_char_index36=0\n    local last_char_index37=0\n    local last_char_index38=0\n\
    \    local last_char_index39=0\n    local last_char_index40=0\n    local last_char_index41=0\n\
    \    local last_char_index42=0\n    local last_char_index43=0\n    local last_char_index44=0\n\
    \    local last_char_index45=0\n    local last_char_index46=0\n    local last_char_index47=0\n\
    \    local last_char_index48=0\n    local last_char_index49=0\n    local last_char_index50=0\n\
    \    local last_char_index51=0\n    local last_char_index52=0\n    local last_char_index53=0\n\
    \    local last_char_index54=0\n    local last_char_index55=0\n    local last_char_index56=0\n\
    \    local last_char_index57=0\n    local last_char_index58=0\n    local last_char_index59=0\n\
    \    local last_char_index60=0\n    local last_char_index61=0\n    local \n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_start=0\n   \
    \ local word_end=0\n    local word_char=0\n    local word_char_length=0\n    local\
    \ word_char_start=0\n    local word_char_end=0\n    local word_char_char=0\n \
    \   local word_char_char_length=0\n    local word_char_char_start=0\n    local\
    \ word_char_char_end=0\n    local word_char_char_char=0\n    local word_char_char_char_length=0\n\
    \    local word_char_char_char_start=0\n    local word_char_char_char_end=0\n\
    \    local word_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_start=0\n    local word_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_start=0\n    local word_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_start=0\n    local word_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_start=0\n    local word_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_start=0\n    local word_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_start=0\n    local word_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_start=0\n    local word_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_start=0\n    local word_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_start=0\n    local word_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char=0\n    local word_char_char_char_char_length\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        if [ $char != \" \" ]; then\n            local char_ascii=$(echo $char\
    \ | sed 's/\\(.\\)/\\1/g')\n            local char_ascii_value=$(echo $char_ascii\
    \ | sed 's/^.//g')\n            local char_ascii_value_next=$(echo $char_ascii\
    \ | sed 's/^..//g')\n            local char_ascii_value_prev=$(echo $char_ascii\
    \ | sed 's/^...//g')\n            local char_ascii_value_next2=$(echo $char_ascii\
    \ | sed 's/^....//g')\n            local char_ascii_value_prev2=$(echo $char_ascii\
    \ | sed 's/^.....//g')\n            local char_ascii_value_next3=$(echo $char_ascii\
    \ | sed 's/^......//g')\n            local char_ascii_value_prev3=$(echo $char_ascii\
    \ | sed 's/^.......//g')\n            local char_ascii_value_next4=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_prev4=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_next5=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_prev5=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_next6=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_prev6=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_next7=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_prev7=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_next8=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_prev8=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_next9=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_prev9=$(echo $char_ascii\
    \ | sed 's/^.........//g')\n            local char_ascii_value_next10=$(echo $char_ascii\
    \ | sed 's/\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf3k77eu6.sh: line 43: unexpected EOF while looking for matching
    `''''

    /tmp/tmpf3k77eu6.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local word_count\n    local word_length\n    local word_index\n\
    \    local word_char\n    local word_char_ascii\n    local word_char_ascii_index\n\
    \    local word_char_ascii_value\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=$((${#string}\
    \ - 1))\n    while [ $i -gt 0 ]; do\n        local j=$((${#string} - 1))\n   \
    \     while [ $j -gt 0 ] && [ $string[$j] -eq \" \" ]; do\n            ((j--))\n\
    \        done\n        local k=$((${#string} - 1))\n        while [ $k -gt 0 ]\
    \ && [ $string[$k] -eq \" \" ]; do\n            ((k--))\n        done\n      \
    \  local c=$((${#string} - 1))\n        while [ $c -gt 0 ] && [ $string[$c] -eq\
    \ \" \" ]; do\n            ((c--))\n        done\n        local new_string=$new_string$string[$i]\n\
    \        ((i--))\n        ((j--))\n        ((k--))\n        ((c--))\n    done\n\
    \    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqt432wjs.sh: line 22: [: Hi[1]: integer expression expected

    /tmp/tmpqt432wjs.sh: line 26: [: Hi[1]: integer expression expected

    /tmp/tmpqt432wjs.sh: line 30: [: Hi[1]: integer expression expected

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local words=$(echo $string | tr \"\
    \ \" \"\\n\")\n    local sorted_words=$(echo $words | tr \" \" \"\\n\" | sort\
    \ -u)\n    echo $sorted_words\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [ $i -lt ${#string} ]; do\n        local letter=\"${string:$i:1}\"\
    \n        local letter_value=\"${letter:0:1}\"\n        local letter_value_ascii=\"\
    ${letter_value:0:1}\"\n        if [ $letter_value_ascii -eq ${letter_value:1:1}\
    \ ]; then\n            local letter_value_ascii=\"${letter_value:1:1}\"\n    \
    \        ((j++))\n        else\n            local letter_value_ascii=\"${letter_value:0:1}\"\
    \n            ((i++))\n        fi\n        local letter_value_ascii=\"${letter_value_ascii:0:1}\"\
    \n        if [ $letter_value_ascii -eq ${letter_value:2:1} ]; then\n         \
    \   local letter_value_ascii=\"${letter_value:2:1}\"\n            ((j++))\n  \
    \      else\n            local letter_value_ascii=\"${letter_value:0:1}\"\n  \
    \          ((i++))\n        fi\n        local letter_value_ascii=\"${letter_value_ascii:0:1}\"\
    \n        if [ $letter_value_ascii -eq ${letter_value:3:1} ]; then\n         \
    \   local letter_value_ascii=\"${letter_value:3:1}\"\n            ((j++))\n  \
    \      else\n            local letter_value_ascii=\"${letter_value:0:1}\"\n  \
    \          ((i++))\n        fi\n        local letter_value_ascii=\"${letter_value_ascii:0:1}\"\
    \n        if [ $letter_value_ascii -eq ${letter_value:4:1} ]; then\n         \
    \   local letter_value_ascii=\"${letter_value:4:1}\"\n            ((j++))\n  \
    \      else\n            local letter_value_ascii=\"${letter_value:0:1}\"\n  \
    \          ((i++))\n        fi\n        local letter_value_ascii=\"${letter_value_ascii:0:1}\"\
    \n        if [ $letter_value_ascii -eq ${letter_value:5:1} ]; then\n         \
    \   local letter_value_ascii=\"${letter_value:5:1}\"\n            ((j++))\n  \
    \      else\n            local letter_value_ascii=\"${letter_value:0:1}\"\n  \
    \          ((i++))\n        fi\n        local letter_value_ascii=\"${letter_value_ascii:0:1}\"\
    \n        if [ $letter_value_ascii -eq ${letter_value:6:1} ]; then\n         \
    \   local letter_value_ascii=\"${letter_value:6:1}\"\n            ((j++))\n  \
    \      else\n            local letter_value_ascii=\"${letter_value:0:1}\"\n  \
    \          ((i++))\n        fi\n        local letter_value_ascii=\"${letter_value_ascii:0:1}\"\
    \n        if [ $letter_value_ascii -eq \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgudxcktf.sh: line 73: syntax error near unexpected token `}''

    /tmp/tmpgudxcktf.sh: line 73: `}''

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local words=$string\n  local new_string=\"\
    \"\n  local i=0 j=0\n  while [ $i -lt ${#words} ]; do\n    local word=${words[i]}\n\
    \    local char=${word:0:1}\n    local next_char=${word:1:1}\n    local new_word=\"\
    \"\n    if [ $char -eq $next_char ]; then\n      new_word=$word\n    else\n  \
    \    new_word=\" $char\"\n      new_string=\"$new_string $new_word\"\n      i=$((i+1))\n\
    \    fi\n    j=$((j+1))\n  done\n  new_string=\"$new_string $word\"\n  echo $new_string\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=35 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=33 encoding='utf-8'>
  timestamp: 1660052294
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_start=0\n   \
    \ local word_end=0\n    local word_char=\"\"\n    local word_char_index=0\n  \
    \  local word_char_length=0\n    local word_char_start=0\n    local word_char_end=0\n\
    \    local word_char_char=\"\"\n    local word_char_char_index=0\n    local word_char_char_length=0\n\
    \    local word_char_char_start=0\n    local word_char_char_end=0\n    local word_char_char_char=\"\
    \"\n    local word_char_char_char_index=0\n    local word_char_char_char_length=0\n\
    \    local word_char_char_char_start=0\n    local word_char_char_char_end=0\n\
    \    local word_char_char_char_char=\"\"\n    local word_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_length=0\n    local word_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_end=0\n    local word_char_char_char_char_char=\"\
    \"\n    local word_char_char_char_char_char_index=0\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_start=0\n    local word_char_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char_char=\"\"\n    local word_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_char_char_end=0\n    local word_char_char_char_char_char_char_char=\"\
    \"\n    local word_char_char_char_char_char_char_char_index=0\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_start=0\n    local word_char_char_char_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char_char_char_char=\"\"\n    local word_char_char_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_char_char_char_char_end=0\n    local word_char_char_char_char_char_char_char_char=\"\
    \"\n    local word_char_char_char_char_char_char_char_char_index=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_start=0\n\
    \    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local next_char=${string:$(($i+1)):1}\n        if [ $char -gt $next_char\
    \ ]; then\n            local temp=$char\n            char=$next_char\n       \
    \     next_char=$temp\n        fi\n        local new_char=${char:0:1}\n      \
    \  local new_next_char=${next_char:0:1}\n        if [ $new_char -lt $new_next_char\
    \ ]; then\n            new_string=$new_string$new_char\n            i=$(($i+1))\n\
    \        else\n            new_string=$new_string$new_next_char\n            j=$(($j+1))\n\
    \        fi\n    done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=26 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=56 encoding='utf-8'>
  timestamp: 1660052294
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char_length=0\n  local word_char_char_length=0\n\
    \  local word_char_char_char_length=0\n  local word_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_character\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output\n    output=$(echo\
    \ \"$string\" | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/ /-/g' | sed -e 's/-/ /g'\
    \ | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\\
    (.\\)/\\1 /g' | sed -e 's/ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g'\
    \ | sed -e 's/ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/\
    \ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/ /-/g' | sed\
    \ -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/ /-/g' | sed -e 's/-/ /g'\
    \ | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\\
    (.\\)/\\1 /g' | sed -e 's/ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g'\
    \ | sed -e 's/ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/\
    \ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/ /-/g' | sed\
    \ -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/ /-/g' | sed -e 's/-/ /g'\
    \ | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\\
    (.\\)/\\1 /g' | sed -e 's/ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g'\
    \ | sed -e 's/ /-/g' | sed -e 's/-/ /g' | sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/\
    \ /-/g' | sed -e 's/-/ /g' | sed -e '\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6uvs_v3_.sh: line 19: unexpected EOF while looking for matching
    `''''

    /tmp/tmp6uvs_v3_.sh: line 38: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=$((${#string}\
    \ - 1))\n    while [ $i -gt 0 ]; do\n        local char=${string:$i:1}\n     \
    \   local next_char=${string:$i:1}\n        if [[ $char == \" \" ]]; then\n  \
    \          char=\" \"\n            next_char=\" \"\n        fi\n        if [[\
    \ $char == \"!\" ]]; then\n            char=\"a\"\n            next_char=\"b\"\
    \n        fi\n        if [[ $char == \"?\" ]]; then\n            char=\"a\"\n\
    \            next_char=\"q\"\n        fi\n        if [[ $char == \"'\" ]]; then\n\
    \            char=\"a\"\n            next_char=\"q\"\n        fi\n        if [[\
    \ $char == \",\" ]]; then\n            char=\"a\"\n            next_char=\"p\"\
    \n        fi\n        if [[ $char == \".\" ]]; then\n            char=\"a\"\n\
    \            next_char=\"p\"\n        fi\n        if [[ $char == \";\" ]]; then\n\
    \            char=\"a\"\n            next_char=\"p\"\n        fi\n        if [[\
    \ $char == \":\" ]]; then\n            char=\"a\"\n            next_char=\"p\"\
    \n        fi\n        if [[ $char == \"-\" ]]; then\n            char=\"a\"\n\
    \            next_char=\"p\"\n        fi\n        if [[ $char == \"_\" ]]; then\n\
    \            char=\"a\"\n            next_char=\"p\"\n        fi\n        if [[\
    \ $char == \"&\" ]]; then\n            char=\"a\"\n            next_char=\"p\"\
    \n        fi\n        if [[ $char == \"%\" ]]; then\n            char=\"a\"\n\
    \            next_char=\"p\"\n        fi\n        if [[ $char == \"@\" ]]; then\n\
    \            char=\"a\"\n            next_char=\"p\"\n        fi\n        if [[\
    \ $char == \"~\" ]]; then\n            char=\"a\"\n            next_char=\"p\"\
    \n        fi\n        if [[ $char == \"^\" ]]; then\n            char=\"a\"\n\
    \            next_char=\"p\"\n        fi\n        if [[ $char == \"$\" ]]; then\n\
    \            char=\"a\"\n            next_char=\"p\"\n        fi\n        if [[\
    \ $char == \"*\" ]]; then\n            char=\"a\"\n            next_char=\"p\"\
    \n        fi\n        if [[ $char == \"(\" ]]; then\n            char=\"a\"\n\
    \            next_char=\"p\"\n        fi\n        if [[ $char == \")\" ]]; then\n\
    \            char=\"a\"\n            next_char=\"p\"\n        fi\n        if [[\
    \ $char == \"[\" ]]; then\n            char=\"a\"\n            next_char=\"p\"\
    \n        fi\n        if [\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi1depdkp.sh: line 104: syntax error near unexpected token `}''

    /tmp/tmpi1depdkp.sh: line 104: `}''

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local count80=0\n  local count81=0\n  local count82=0\n\
    \  local count83=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_index2=0\n\
    \    local word_char_length2=0\n    local word_char_length3=0\n    local word_char_length4=0\n\
    \    local word_char_length5=0\n    local word_char_length6=0\n    local word_char_length7=0\n\
    \    local word_char_length8=0\n    local word_char_length9=0\n    local word_char_length10=0\n\
    \    local word_char_length11=0\n    local word_char_length12=0\n    local word_char_length13=0\n\
    \    local word_char_length14=0\n    local word_char_length15=0\n    local word_char_length16=0\n\
    \    local word_char_length17=0\n    local word_char_length18=0\n    local word_char_length19=0\n\
    \    local word_char_length20=0\n    local word_char_length21=0\n    local word_char_length22=0\n\
    \    local word_char_length23=0\n    local word_char_length24=0\n    local word_char_length25=0\n\
    \    local word_char_length26=0\n    local word_char_length27=0\n    local word_char_length28=0\n\
    \    local word_char_length29=0\n    local word_char_length30=0\n    local word_char_length31=0\n\
    \    local word_char_length32=0\n    local word_char_length33=0\n    local word_char_length34=0\n\
    \    local word_char_length35=0\n    local word_char_length36=0\n    local word_char_length37=0\n\
    \    local word_char_length38=0\n    local word_char_length39=0\n    local word_char_length40=0\n\
    \    local word_char_length41=0\n    local word_char_length42=0\n    local word_char_length43=0\n\
    \    local word_char_length44=0\n    local word_char_length45=0\n    local word_char_length46=0\n\
    \    local word_char_length47=0\n    local word_char_length48=0\n    local word_char_length49=0\n\
    \    local word_char_length50=0\n    local word_char_length51=0\n    local word_char_length52=0\n\
    \    local word_char_length53=0\n    local word_char_length54=0\n    local word_char_length55=0\n\
    \    local word_char_length56=0\n    local word_char_length57=0\n    local word_char_length\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local i\n    local j\n    local temp\n    local temp2\n    local temp3\n\
    \    local temp4\n    local temp5\n    local temp6\n    local temp7\n    local\
    \ temp8\n    local temp9\n    local temp10\n    local temp11\n    local temp12\n\
    \    local temp13\n    local temp14\n    local temp15\n    local temp16\n    local\
    \ temp17\n    local temp18\n    local temp19\n    local temp20\n    local temp21\n\
    \    local temp22\n    local temp23\n    local temp24\n    local temp25\n    local\
    \ temp26\n    local temp27\n    local temp28\n    local temp29\n    local temp30\n\
    \    local temp31\n    local temp32\n    local temp33\n    local temp34\n    local\
    \ temp35\n    local temp36\n    local temp37\n    local temp38\n    local temp39\n\
    \    local temp40\n    local temp41\n    local temp42\n    local temp43\n    local\
    \ temp44\n    local temp45\n    local temp46\n    local temp47\n    local temp48\n\
    \    local temp49\n    local temp50\n    local temp51\n    local temp52\n    local\
    \ temp53\n    local temp54\n    local temp55\n    local temp56\n    local temp57\n\
    \    local temp58\n    local temp59\n    local temp60\n    local temp61\n    local\
    \ temp62\n    local temp63\n    local temp64\n    local temp65\n    local temp66\n\
    \    local temp67\n    local temp68\n    local temp69\n    local temp70\n    local\
    \ temp71\n    local temp72\n    local temp73\n    local temp74\n    local temp75\n\
    \    local temp76\n    local temp77\n    local temp78\n    local temp79\n    local\
    \ temp80\n    local temp81\n    local temp82\n    local temp83\n    local temp84\n\
    \    local temp85\n    local temp86\n    local temp87\n    local temp88\n    local\
    \ temp89\n    local temp90\n    local temp91\n    local temp92\n    local temp93\n\
    \    local temp94\n    local temp95\n    local temp96\n    local temp97\n    local\
    \ temp\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local new_count=0\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=${#string}\n\
    \    local j=0\n    while [ $i -gt 0 ]; do\n        local char=${string:$i:1}\n\
    \        local char_ascii=${char:0:1}\n        local char_ascii_value=${char_ascii}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value=${char_ascii_value:1}\n\
    \        local char_ascii_value=${char_ascii_value:1}\n        local char_ascii_value\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpek6ama19.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmpek6ama19.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_char=0\n    local word_char_length=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count2=0\n   \
    \ local word_char_length_index2=0\n    local word_char_length_count3=0\n    local\
    \ word_char_length_index3=0\n    local word_char_length_count4=0\n    local word_char_length_index4=0\n\
    \    local word_char_length_count5=0\n    local word_char_length_index5=0\n  \
    \  local word_char_length_count6=0\n    local word_char_length_index6=0\n    local\
    \ word_char_length_count7=0\n    local word_char_length_index7=0\n    local word_char_length_count8=0\n\
    \    local word_char_length_index8=0\n    local word_char_length_count9=0\n  \
    \  local word_char_length_index9=0\n    local word_char_length_count10=0\n   \
    \ local word_char_length_index10=0\n    local word_char_length_count11=0\n   \
    \ local word_char_length_index11=0\n    local word_char_length_count12=0\n   \
    \ local word_char_length_index12=0\n    local word_char_length_count13=0\n   \
    \ local word_char_length_index13=0\n    local word_char_length_count14=0\n   \
    \ local word_char_length_index14=0\n    local word_char_length_count15=0\n   \
    \ local word_char_length_index15=0\n    local word_char_length_count16=0\n   \
    \ local word_char_length_index16=0\n    local word_char_length_count17=0\n   \
    \ local word_char_length_index17=0\n    local word_char_length_count18=0\n   \
    \ local word_char_length_index18=0\n    local word_char_length_count19=0\n   \
    \ local word_char_length_index19=0\n    local word_char_length_count20=0\n   \
    \ local word_char_length_index20=0\n    local word_char_length_count21=0\n   \
    \ local word_char_length_index21=0\n    local word_char_length_count22=0\n   \
    \ local word_char_length_index22=0\n    local word_char_length_count23=0\n   \
    \ local word_char_length_index23=0\n    local word_char_length_count24=0\n   \
    \ local word_char_length_index24=0\n    local word_char_length_count25=0\n   \
    \ local word_char_length_index25=0\n    local word_char_length_count26=0\n   \
    \ local word_char_length\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ words=$(echo $string | tr \" \" \"\\n\")\n    for word in $words; do\n     \
    \   local letters=$(echo $word | tr \" \" \"\\n\")\n        for letter in $letters;\
    \ do\n            local ascii=$(echo $letter | tr \"A-Z\" \"a-z\")\n         \
    \   new_string+=\"$(echo $letter | tr \"a-z\" \"A-Z\")\"\n        done\n     \
    \   new_string+=\" \"\n    done\n    echo $new_string\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        if [ $i -eq 0 ]; then\n  \
    \          new_string=\"${string}\"\n        else\n            new_string=\"${new_string}\
    \ ${string}\"\n        fi\n        i=$((i+1))\n    done\n    i=$((i-1))\n    while\
    \ [ $i -gt 0 ]; do\n        if [ $i -eq 0 ]; then\n            new_string=\"${new_string}\"\
    \n        else\n            new_string=\"${new_string} ${string}\"\n        fi\n\
    \        i=$((i-1))\n    done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local char_ascii\n    local char_ascii2\n    local\
    \ char_ascii3\n    local char_ascii4\n    local char_ascii5\n    local char_ascii6\n\
    \    local char_ascii7\n    local char_ascii8\n    local char_ascii9\n    local\
    \ char_ascii10\n    local char_ascii11\n    local char_ascii12\n    local char_ascii13\n\
    \    local char_ascii14\n    local char_ascii15\n    local char_ascii16\n    local\
    \ char_ascii17\n    local char_ascii18\n    local char_ascii19\n    local char_ascii20\n\
    \    local char_ascii21\n    local char_ascii22\n    local char_ascii23\n    local\
    \ char_ascii24\n    local char_ascii25\n    local char_ascii26\n    local char_ascii27\n\
    \    local char_ascii28\n    local char_ascii29\n    local char_ascii30\n    local\
    \ char_ascii31\n    local char_ascii32\n    local char_ascii33\n    local char_ascii34\n\
    \    local char_ascii35\n    local char_ascii36\n    local char_ascii37\n    local\
    \ char_ascii38\n    local char_ascii39\n    local char_ascii40\n    local char_ascii41\n\
    \    local char_ascii42\n    local char_ascii43\n    local char_ascii44\n    local\
    \ char_ascii45\n    local char_ascii46\n    local char_ascii47\n    local char_ascii48\n\
    \    local char_ascii49\n    local char_ascii50\n    local char_ascii51\n    local\
    \ char_ascii52\n    local char_ascii53\n    local char_ascii54\n    local char_ascii55\n\
    \    local char_ascii56\n    local char_ascii57\n    local char_ascii58\n    local\
    \ char_ascii59\n    local char_ascii60\n    local char_ascii61\n    local char_ascii62\n\
    \    local char_ascii63\n    local char_ascii64\n    local char_ascii65\n    local\
    \ char_ascii66\n    local char_ascii67\n    local char_ascii68\n    local char_ascii69\n\
    \    local char_ascii70\n    local char_ascii71\n    local char_ascii72\n    local\
    \ char_ascii73\n    local char_ascii74\n    local char_ascii75\n    local char_ascii76\n\
    \    local char_ascii77\n    local char_ascii78\n    local char_ascii79\n    local\
    \ char_ascii80\n    local char_ascii81\n    local char_ascii82\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_list=\"\"\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted_count2=0\n  local word_list_sorted_count3=0\n  local\
    \ word_list_sorted_count4=0\n  local word_list_sorted_count5=0\n  local word_list_sorted_count6=0\n\
    \  local word_list_sorted_count7=0\n  local word_list_sorted_count8=0\n  local\
    \ word_list_sorted_count9=0\n  local word_list_sorted_count10=0\n  local word_list_sorted_count11=0\n\
    \  local word_list_sorted_count12=0\n  local word_list_sorted_count13=0\n  local\
    \ word_list_sorted_count14=0\n  local word_list_sorted_count15=0\n  local word_list_sorted_count16=0\n\
    \  local word_list_sorted_count17=0\n  local word_list_sorted_count18=0\n  local\
    \ word_list_sorted_count19=0\n  local word_list_sorted_count20=0\n  local word_list_sorted_count21=0\n\
    \  local word_list_sorted_count22=0\n  local word_list_sorted_count23=0\n  local\
    \ word_list_sorted_count24=0\n  local word_list_sorted_count25=0\n  local word_list_sorted_count26=0\n\
    \  local word_list_sorted_count27=0\n  local word_list_sorted_count28=0\n  local\
    \ word_list_sorted_count29=0\n  local word_list_sorted_count30=0\n  local word_list_sorted_count31=0\n\
    \  local word_list_sorted_count32=0\n  local word_list_sorted_count33=0\n  local\
    \ word_list_sorted_count34=0\n  local word_list_sorted_count35=0\n  local word_list_sorted_count36=0\n\
    \  local word_list_sorted_count37=0\n  local word_list_sorted_count38=0\n  local\
    \ word_list_sorted_count39=0\n  local word_list_sorted_count40=0\n  local word_list_sorted_count41=0\n\
    \  local word_list_sorted_count42=0\n  local word_list_sorted_count43=0\n  local\
    \ word_list_sorted_count44=0\n  local word_list_sorted_count45=0\n  local word_list_sorted_count46=0\n\
    \  local word_list_sorted_count47=0\n  local word_list_sorted_count48=0\n  local\
    \ word_list_sorted_count49=0\n  local word_list_sorted_count50=0\n  local word_list_sorted_count51=0\n\
    \  local word_list_sorted_count52=0\n  local word_list_sorted_count53=0\n  local\
    \ word_list_sorted_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_char=0\n    local word_char_length=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_count=0\n    local word_char_length_index\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local count2=0\n    local count3=0\n    local count4=0\n    local count5=0\n\
    \    local count6=0\n    local count7=0\n    local count8=0\n    local count9=0\n\
    \    local count10=0\n    local count11=0\n    local count12=0\n    local count13=0\n\
    \    local count14=0\n    local count15=0\n    local count16=0\n    local count17=0\n\
    \    local count18=0\n    local count19=0\n    local count20=0\n    local count21=0\n\
    \    local count22=0\n    local count23=0\n    local count24=0\n    local count25=0\n\
    \    local count26=0\n    local count27=0\n    local count28=0\n    local count29=0\n\
    \    local count30=0\n    local count31=0\n    local count32=0\n    local count33=0\n\
    \    local count34=0\n    local count35=0\n    local count36=0\n    local count37=0\n\
    \    local count38=0\n    local count39=0\n    local count40=0\n    local count41=0\n\
    \    local count42=0\n    local count43=0\n    local count44=0\n    local count45=0\n\
    \    local count46=0\n    local count47=0\n    local count48=0\n    local count49=0\n\
    \    local count50=0\n    local count51=0\n    local count52=0\n    local count53=0\n\
    \    local count54=0\n    local count55=0\n    local count56=0\n    local count57=0\n\
    \    local count58=0\n    local count59=0\n    local count60=0\n    local count61=0\n\
    \    local count62=0\n    local count63=0\n    local count64=0\n    local count65=0\n\
    \    local count66=0\n    local count67=0\n    local count68=0\n    local count69=0\n\
    \    local count70=0\n    local count71=0\n    local count72=0\n    local count73=0\n\
    \    local count74=0\n    local count75=0\n    local count76=0\n    local count77=0\n\
    \    local count78=0\n    local count79=0\n    local count80=0\n    local count81=0\n\
    \    local count82=0\n    local count83=0\n    local count\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_array=($string)\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char=0\n\
    \  local word_char_length=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count=0\n  local word_char_length_index=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  while [[ $i -lt ${#string} ]]; do\n    local char=\"${string:$i:1}\"\n\
    \    local next_char=\"${string:$(($i+1)):1}\"\n    local next_char_ascii=\"${ord:$(($i+1)):1}\"\
    \n    local next_char_ascii2=\"${ord:$(($i+2)):1}\"\n    local next_char_ascii3=\"\
    ${ord:$(($i+3)):1}\"\n    local next_char_ascii4=\"${ord:$(($i+4)):1}\"\n    local\
    \ next_char_ascii5=\"${ord:$(($i+5)):1}\"\n    local next_char_ascii6=\"${ord:$(($i+6)):1}\"\
    \n    local next_char_ascii7=\"${ord:$(($i+7)):1}\"\n    local next_char_ascii8=\"\
    ${ord:$(($i+8)):1}\"\n    local next_char_ascii9=\"${ord:$(($i+9)):1}\"\n    local\
    \ next_char_ascii10=\"${ord:$(($i+10)):1}\"\n    local next_char_ascii11=\"${ord:$(($i+11)):1}\"\
    \n    local next_char_ascii12=\"${ord:$(($i+12)):1}\"\n    local next_char_ascii13=\"\
    ${ord:$(($i+13)):1}\"\n    local next_char_ascii14=\"${ord:$(($i+14)):1}\"\n \
    \   local next_char_ascii15=\"${ord:$(($i+15)):1}\"\n    local next_char_ascii16=\"\
    ${ord:$(($i+16)):1}\"\n    local next_char_ascii17=\"${ord:$(($i+17)):1}\"\n \
    \   local next_char_ascii18=\"${ord:$(($i+18)):1}\"\n    local next_char_ascii19=\"\
    ${ord:$(($i+19)):1}\"\n    local next_char_ascii20=\"${ord:$(($i+20)):1}\"\n \
    \   local next_char_ascii21=\"${ord:$(($i+21)):1}\"\n    local next_char_ascii22=\"\
    ${ord:$(($i+22)):1}\"\n    local next_char_ascii23=\"${ord:$(($i+23)):1}\"\n \
    \   local next_char_ascii24=\"${ord:$(($i+24)):1}\"\n    local next_char_ascii25=\"\
    ${ord:$(($i+25)):1}\"\n    local next_char_ascii26=\"${ord:$(($i+26)):1}\"\n \
    \   local next_char_ascii27=\"${ord:$(($i+27)):\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1hkk8os_.sh: line 64: unexpected EOF while looking for matching
    `"''

    /tmp/tmp1hkk8os_.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local output=\"\"\n    local words=$string\n\
    \    local space=\"\"\n    local count=0\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_array=()\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_length_count=0\n    local word_length_max=0\n    local word_length_min=0\n\
    \    local word_length_sum=0\n    local word_length_average=0\n    local word_length_median=0\n\
    \    local word_length_min_index=0\n    local word_length_max_index=0\n    local\
    \ word_length_sum_index=0\n    local word_length_average_index=0\n    local word_length_median_index=0\n\
    \    local word_length_min_count=0\n    local word_length_max_count=0\n    local\
    \ word_length_sum_count=0\n    local word_length_average_count=0\n    local word_length_median_count=0\n\
    \    local word_length_min_max=0\n    local word_length_min_max_index=0\n    local\
    \ word_length_min_max_count=0\n    local word_length_min_max_sum=0\n    local\
    \ word_length_min_max_average=0\n    local word_length_min_max_median=0\n    local\
    \ word_length_min_max_min=0\n    local word_length_min_max_max=0\n    local word_length_min_max_average=0\n\
    \    local word_length_min_max_median=0\n    local word_length_min_max_min=0\n\
    \    local word_length_min_max_max=0\n    local word_length_min_max_average=0\n\
    \    local word_length_min_max_median=0\n    local word_length_min_max_min=0\n\
    \    local word_length_min_max_max=0\n    local word_length_min_max_average=0\n\
    \    local word_length_min_max_median=0\n    local word_length_min_max_min=0\n\
    \    local word_length_min_max_max=0\n    local word_length_min_max_average=0\n\
    \    local word_length_min_max_median=0\n    local word_length_min_max_min=0\n\
    \    local word_length_min_max_max=0\n    local word_length_min_max_average=0\n\
    \    local word_length_min_max_median=0\n    local word_length_min_max_min=0\n\
    \    local word_length_min_max_max=0\n    local word_length_min_max_average=0\n\
    \    local word_length_min_max_median=0\n    local word_length_min_max_min=0\n\
    \    local word_length_min_max_max=0\n    local word_length_min_max_average=0\n\
    \    local word_length_min_max_median=0\n    local word_length_min_max_min=0\n\
    \    local word_length_min_max_max=0\n    local word_length_min_max_average=0\n\
    \    local word_length_min_max_median=0\n    local word_length_min_max_min=0\n\
    \    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    local word_count=0\n    local word_length=0\n    local word_array=()\n\
    \    local word_array2=()\n    local word_array3=()\n    local word_array4=()\n\
    \    local word_array5=()\n    local word_array6=()\n    local word_array7=()\n\
    \    local word_array8=()\n    local word_array9=()\n    local word_array10=()\n\
    \    local word_array11=()\n    local word_array12=()\n    local word_array13=()\n\
    \    local word_array14=()\n    local word_array15=()\n    local word_array16=()\n\
    \    local word_array17=()\n    local word_array18=()\n    local word_array19=()\n\
    \    local word_array20=()\n    local word_array21=()\n    local word_array22=()\n\
    \    local word_array23=()\n    local word_array24=()\n    local word_array25=()\n\
    \    local word_array26=()\n    local word_array27=()\n    local word_array28=()\n\
    \    local word_array29=()\n    local word_array30=()\n    local word_array31=()\n\
    \    local word_array32=()\n    local word_array33=()\n    local word_array34=()\n\
    \    local word_array35=()\n    local word_array36=()\n    local word_array37=()\n\
    \    local word_array38=()\n    local word_array39=()\n    local word_array40=()\n\
    \    local word_array41=()\n    local word_array42=()\n    local word_array43=()\n\
    \    local word_array44=()\n    local word_array45=()\n    local word_array46=()\n\
    \    local word_array47=()\n    local word_array48=()\n    local word_array49=()\n\
    \    local word_array50=()\n    local word_array51=()\n    local word_array52=()\n\
    \    local word_array53=()\n    local word_array54=()\n    local word_array55=()\n\
    \    local word_array56=()\n    local word_array57=()\n    local word_array58=()\n\
    \    local word_array59=()\n    local word_array60=()\n    local word_array\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output\n  output=\"$(echo \"\
    $string\" | sed -e 's/ /\\n/g' | sort -n | tr '\\n' ' ')\"\n  echo \"$output\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output=\"\"\n  local words=\"\
    \"\n  local space=\"\"\n  local count=0\n  local count2=0\n  local count3=0\n\
    \  local count4=0\n  local count5=0\n  local count6=0\n  local count7=0\n  local\
    \ count8=0\n  local count9=0\n  local count10=0\n  local count11=0\n  local count12=0\n\
    \  local count13=0\n  local count14=0\n  local count15=0\n  local count16=0\n\
    \  local count17=0\n  local count18=0\n  local count19=0\n  local count20=0\n\
    \  local count21=0\n  local count22=0\n  local count23=0\n  local count24=0\n\
    \  local count25=0\n  local count26=0\n  local count27=0\n  local count28=0\n\
    \  local count29=0\n  local count30=0\n  local count31=0\n  local count32=0\n\
    \  local count33=0\n  local count34=0\n  local count35=0\n  local count36=0\n\
    \  local count37=0\n  local count38=0\n  local count39=0\n  local count40=0\n\
    \  local count41=0\n  local count42=0\n  local count43=0\n  local count44=0\n\
    \  local count45=0\n  local count46=0\n  local count47=0\n  local count48=0\n\
    \  local count49=0\n  local count50=0\n  local count51=0\n  local count52=0\n\
    \  local count53=0\n  local count54=0\n  local count55=0\n  local count56=0\n\
    \  local count57=0\n  local count58=0\n  local count59=0\n  local count60=0\n\
    \  local count61=0\n  local count62=0\n  local count63=0\n  local count64=0\n\
    \  local count65=0\n  local count66=0\n  local count67=0\n  local count68=0\n\
    \  local count69=0\n  local count70=0\n  local count71=0\n  local count72=0\n\
    \  local count73=0\n  local count74=0\n  local count75=0\n  local count76=0\n\
    \  local count77=0\n  local count78=0\n  local count79=0\n  local count80=0\n\
    \  local count81=0\n  local count82=0\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_start=0\n  local word_end=0\n\
    \  local word_character\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=$((${#string}\
    \ - 1))\n    local j=$((${#string} + 1))\n    while [ $i -ge 0 ]; do\n       \
    \ local c=${string:$i:1}\n        local b=${string:$j:1}\n        local a=${b:0:1}\n\
    \        local b=${b:1:1}\n        local c=${c:0:1}\n        local d=${c:1:1}\n\
    \        local e=${d:0:1}\n        local f=${d:1:1}\n        local g=${e:0:1}\n\
    \        local h=${e:1:1}\n        local i=${f:0:1}\n        local j=${f:1:1}\n\
    \        local k=${g:0:1}\n        local l=${g:1:1}\n        local m=${h:0:1}\n\
    \        local n=${h:1:1}\n        local o=${i:0:1}\n        local p=${i:1:1}\n\
    \        local q=${k:0:1}\n        local r=${k:1:1}\n        local s=${l:0:1}\n\
    \        local t=${l:1:1}\n        local u=${m:0:1}\n        local v=${m:1:1}\n\
    \        local w=${n:0:1}\n        local x=${n:1:1}\n        local y=${o:0:1}\n\
    \        local z=${o:1:1}\n        local A=${q:0:1}\n        local B=${q:1:1}\n\
    \        local C=${r:0:1}\n        local D=${r:1:1}\n        local E=${s:0:1}\n\
    \        local F=${s:1:1}\n        local G=${t:0:1}\n        local H=${t:1:1}\n\
    \        local I=${u:0:1}\n        local J=${u:1:1}\n        local K=${v:0:1}\n\
    \        local L=${v:1:1}\n        local M=${w:0:1}\n        local N=${w:1:1}\n\
    \        local O=${x:0:1}\n        local P=${x:1:1}\n        local Q=${y:0:1}\n\
    \        local R=${y:1:1}\n        local S=${z:0:1}\n        local T=${z:1:1}\n\
    \        local U=${A:0:1}\n        local V=${A:1:1}\n        local W=${B:0:1}\n\
    \        local X=${B:1:1}\n        local Y=${C:0:1}\n        local Z=${C:1:1}\n\
    \        local A=${D:0:1}\n        local B=${D:1:1}\n        local C=${E:\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps9o43xvn.sh: line 97: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_array=()\n\
    \    local word_array2=()\n    local word_array3=()\n    local word_array4=()\n\
    \    local word_array5=()\n    local word_array6=()\n    local word_array7=()\n\
    \    local word_array8=()\n    local word_array9=()\n    local word_array10=()\n\
    \    local word_array11=()\n    local word_array12=()\n    local word_array13=()\n\
    \    local word_array14=()\n    local word_array15=()\n    local word_array16=()\n\
    \    local word_array17=()\n    local word_array18=()\n    local word_array19=()\n\
    \    local word_array20=()\n    local word_array21=()\n    local word_array22=()\n\
    \    local word_array23=()\n    local word_array24=()\n    local word_array25=()\n\
    \    local word_array26=()\n    local word_array27=()\n    local word_array28=()\n\
    \    local word_array29=()\n    local word_array30=()\n    local word_array31=()\n\
    \    local word_array32=()\n    local word_array33=()\n    local word_array34=()\n\
    \    local word_array35=()\n    local word_array36=()\n    local word_array37=()\n\
    \    local word_array38=()\n    local word_array39=()\n    local word_array40=()\n\
    \    local word_array41=()\n    local word_array42=()\n    local word_array43=()\n\
    \    local word_array44=()\n    local word_array45=()\n    local word_array46=()\n\
    \    local word_array47=()\n    local word_array48=()\n    local word_array49=()\n\
    \    local word_array50=()\n    local word_array51=()\n    local word_array52=()\n\
    \    local word_array53=()\n    local word_array54=()\n    local word_array55=()\n\
    \    local word_array56=()\n    local word_array57=()\n    local word_array58=()\n\
    \    local word_array59=()\n    local word_array60=()\n    local word_array\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        if [ $i -eq 0 ]; then\n  \
    \          new_string=$string\n        else\n            local first_char=${string:$i:1}\n\
    \            local last_char=${string:$((i+1)):1}\n            local first_char_ascii=${first_char:0:1}\n\
    \            local last_char_ascii=${last_char:0:1}\n            if [ $first_char_ascii\
    \ < $last_char_ascii ]; then\n                new_string=$new_string$first_char\n\
    \            else\n                new_string=$new_string$last_char\n        \
    \    fi\n        fi\n        i=$((i+1))\n    done\n    echo $new_string\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcinjpizn.sh: line 28: $last_char_ascii: ambiguous redirect

    /tmp/tmpcinjpizn.sh: line 28: l: No such file or directory

    /tmp/tmpcinjpizn.sh: line 28: l: No such file or directory

    /tmp/tmpcinjpizn.sh: line 28: o: No such file or directory

    /tmp/tmpcinjpizn.sh: line 28: $last_char_ascii: ambiguous redirect

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_index=0\n    local word_length=0\n    local word_character_index=0\n\
    \    local word_character_index2=0\n    local word_character_index3=0\n    local\
    \ word_character_index4=0\n    local word_character_index5=0\n    local word_character_index6=0\n\
    \    local word_character_index7=0\n    local word_character_index8=0\n    local\
    \ word_character_index9=0\n    local word_character_index10=0\n    local word_character_index11=0\n\
    \    local word_character_index12=0\n    local word_character_index13=0\n    local\
    \ word_character_index14=0\n    local word_character_index15=0\n    local word_character_index16=0\n\
    \    local word_character_index17=0\n    local word_character_index18=0\n    local\
    \ word_character_index19=0\n    local word_character_index20=0\n    local word_character_index21=0\n\
    \    local word_character_index22=0\n    local word_character_index23=0\n    local\
    \ word_character_index24=0\n    local word_character_index25=0\n    local word_character_index26=0\n\
    \    local word_character_index27=0\n    local word_character_index28=0\n    local\
    \ word_character_index29=0\n    local word_character_index30=0\n    local word_character_index31=0\n\
    \    local word_character_index32=0\n    local word_character_index33=0\n    local\
    \ word_character_index34=0\n    local word_character_index35=0\n    local word_character_index36=0\n\
    \    local word_character_index37=0\n    local word_character_index38=0\n    local\
    \ word_character_index39=0\n    local word_character_index40=0\n    local word_character_index41=0\n\
    \    local word_character_index42=0\n    local word_character_index43=0\n    local\
    \ word_character_index44=0\n    local word_character_index45=0\n    local word_character_index46=0\n\
    \    local word_character_index47=0\n    local word_character_index48=0\n    local\
    \ word_character_index49=0\n    local word_character_index50=0\n    local word_character_index51=0\n\
    \    local word_character_index52=0\n    local word_character_index53=0\n    local\
    \ word_character_index54=0\n    local word_character_index55=0\n    local word_character_index56=0\n\
    \    local word_character_index57=0\n    local word_character_index58=0\n    local\
    \ word_character_index59=0\n    local word_character_index60=0\n    local word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  while [ $i -lt ${#string} ]; do\n    local char=${string:$i:1}\n    local next_char=${string:$(($i+1)):1}\n\
    \    local new_char=${char:0:1}\n    local next_next_char=${next_char:0:1}\n \
    \   if [ $char $next_char $next_next_char ]\n    then\n      new_string=$new_string$new_char\n\
    \      i=$(($i+1))\n    else\n      new_string=$new_string$next_char\n      j=$(($j+1))\n\
    \    fi\n  done\n  echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=52 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=50 encoding='utf-8'>
  timestamp: 1660052294
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local words=\"\
    \"\n    local space=\"\"\n    local count=0\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local next_char=${string:$(($i+1)):1}\n\
    \        local next_char_value=${next_char:0:1}\n        if [ $char_value -gt\
    \ $next_char_value ]; then\n            new_string=\"${new_string}${char}\"\n\
    \            i=$(($i+1))\n        else\n            new_string=\"${new_string}${next_char}\"\
    \n            j=$(($j+1))\n        fi\n    done\n    echo \"$new_string\"\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=59 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=38 encoding='utf-8'>
  timestamp: 1660052294
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=$#\n  local word_char_index=0\n  local\
    \ word_char_length=$((${#string} - 1))\n  local word_char\n  local word_char_ascii_value\n\
    \  local word_char_ascii_value_index\n  local word_char_ascii_value_index2\n \
    \ local word_char_ascii_value_index3\n  local word_char_ascii_value_index4\n \
    \ local word_char_ascii_value_index5\n  local word_char_ascii_value_index6\n \
    \ local word_char_ascii_value_index7\n  local word_char_ascii_value_index8\n \
    \ local word_char_ascii_value_index9\n  local word_char_ascii_value_index10\n\
    \  local word_char_ascii_value_index11\n  local word_char_ascii_value_index12\n\
    \  local word_char_ascii_value_index13\n  local word_char_ascii_value_index14\n\
    \  local word_char_ascii_value_index15\n  local word_char_ascii_value_index16\n\
    \  local word_char_ascii_value_index17\n  local word_char_ascii_value_index18\n\
    \  local word_char_ascii_value_index19\n  local word_char_ascii_value_index20\n\
    \  local word_char_ascii_value_index21\n  local word_char_ascii_value_index22\n\
    \  local word_char_ascii_value_index23\n  local word_char_ascii_value_index24\n\
    \  local word_char_ascii_value_index25\n  local word_char_ascii_value_index26\n\
    \  local word_char_ascii_value_index27\n  local word_char_ascii_value_index28\n\
    \  local word_char_ascii_value_index29\n  local word_char_ascii_value_index30\n\
    \  local word_char_ascii_value_index31\n  local word_char_ascii_value_index32\n\
    \  local word_char_ascii_value_index33\n  local word_char_ascii_value_index34\n\
    \  local word_char_ascii_value_index35\n  local word_char_ascii_value_index36\n\
    \  local word_char_ascii_value_index37\n  local word_char_ascii_value_index38\n\
    \  local word_char_ascii_value_index39\n  local word_char_ascii_value_index40\n\
    \  local word_char_ascii_value_index41\n  local word_char_ascii_value_index42\n\
    \  local word_char_ascii_value_index43\n  local word_char_ascii_value_index44\n\
    \  local word_char_ascii_value_index45\n  local word_char_ascii_value_index46\n\
    \  local word_char_ascii_value_index47\n  local word_char_ascii_value_index48\n\
    \  local word_char_ascii_value_index49\n  local word_char_ascii_value_index50\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local new_string3=\"\"\n  local new_string4=\"\"\n  local new_string5=\"\
    \"\n  local new_string6=\"\"\n  local new_string7=\"\"\n  local new_string8=\"\
    \"\n  local new_string9=\"\"\n  local new_string10=\"\"\n  local new_string11=\"\
    \"\n  local new_string12=\"\"\n  local new_string13=\"\"\n  local new_string14=\"\
    \"\n  local new_string15=\"\"\n  local new_string16=\"\"\n  local new_string17=\"\
    \"\n  local new_string18=\"\"\n  local new_string19=\"\"\n  local new_string20=\"\
    \"\n  local new_string21=\"\"\n  local new_string22=\"\"\n  local new_string23=\"\
    \"\n  local new_string24=\"\"\n  local new_string25=\"\"\n  local new_string26=\"\
    \"\n  local new_string27=\"\"\n  local new_string28=\"\"\n  local new_string29=\"\
    \"\n  local new_string30=\"\"\n  local new_string31=\"\"\n  local new_string32=\"\
    \"\n  local new_string33=\"\"\n  local new_string34=\"\"\n  local new_string35=\"\
    \"\n  local new_string36=\"\"\n  local new_string37=\"\"\n  local new_string38=\"\
    \"\n  local new_string39=\"\"\n  local new_string40=\"\"\n  local new_string41=\"\
    \"\n  local new_string42=\"\"\n  local new_string43=\"\"\n  local new_string44=\"\
    \"\n  local new_string45=\"\"\n  local new_string46=\"\"\n  local new_string47=\"\
    \"\n  local new_string48=\"\"\n  local new_string49=\"\"\n  local new_string50=\"\
    \"\n  local new_string51=\"\"\n  local new_string52=\"\"\n  local new_string53=\"\
    \"\n  local new_string54=\"\"\n  local new_string55=\"\"\n  local new_string56=\"\
    \"\n  local new_string57=\"\"\n  local new_string58=\"\"\n  local new_string59=\"\
    \"\n  local new_string60=\"\"\n  local new_string61=\"\"\n  local new_string62=\"\
    \"\n  local new_string63=\"\"\n  local new_string64=\"\"\n  local new_string65=\"\
    \"\n  local new_string66=\"\"\n  local new_string67=\"\"\n  local new_string68=\"\
    \"\n  local new_string69=\"\"\n  local new_string70=\"\"\n  local new_string71=\"\
    \"\n  local new_string72=\"\"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_list=\"\"\n    local word_list_count=0\n    local\
    \ word_list_word=\"\"\n    local word_list_word_count=0\n    local word_list_word_char=\"\
    \"\n    local word_list_word_char_count=0\n    local word_list_word_char_prev=\"\
    \"\n    local word_list_word_char_prev_index=0\n    local word_list_word_char_prev_index2=0\n\
    \    local word_list_word_char_prev_index3=0\n    local word_list_word_char_prev_index4=0\n\
    \    local word_list_word_char_prev_index5=0\n    local word_list_word_char_prev_index6=0\n\
    \    local word_list_word_char_prev_index7=0\n    local word_list_word_char_prev_index8=0\n\
    \    local word_list_word_char_prev_index9=0\n    local word_list_word_char_prev_index10=0\n\
    \    local word_list_word_char_prev_index11=0\n    local word_list_word_char_prev_index12=0\n\
    \    local word_list_word_char_prev_index13=0\n    local word_list_word_char_prev_index14=0\n\
    \    local word_list_word_char_prev_index15=0\n    local word_list_word_char_prev_index16=0\n\
    \    local word_list_word_char_prev_index17=0\n    local word_list_word_char_prev_index18=0\n\
    \    local word_list_word_char_prev_index19=0\n    local word_list_word_char_prev_index20=0\n\
    \    local word_list_word_char_prev_index21=0\n    local word_list_word_char_prev_index22=0\n\
    \    local word_list_word_char_prev_index23=0\n    local word_list_word_char_prev_index24=0\n\
    \    local word_list_word_char_prev_index25=0\n    local word_list_word_char_prev_index26=0\n\
    \    local word_list_word_char_prev_index27=0\n    local word_list_word_char_prev_index28=0\n\
    \    local word_list_word_char_prev_index29=0\n    local word_list_word_char_prev_index30=0\n\
    \    local word_list_word_char_prev_index31=0\n    local word_list_word_char_prev_index32=0\n\
    \    local word_list_word_char_prev_index33=0\n    local word_list_word_char_prev_index34=0\n\
    \    local word_list_word_char_prev_index35=0\n    local word_list_word_char_prev_index36=0\n\
    \    local word_list_word_char_prev_index37=0\n    local word_list_word_char_prev_index38=0\n\
    \    local word_list_word_char_prev_index39=0\n    local word_list_word_char_prev_index40=0\n\
    \    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local words=$(echo \"$string\"\
    \ | sed 's/ /\\n/g')\n    local sorted=$(echo \"$words\" | sort -u)\n    local\
    \ result=$(echo \"$sorted\" | tr '\\n' ' ')\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_character_index=0\n\
    \    local word_character=\"\"\n    local word_character_index=0\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local new_char\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local last_char=\"\"\n  local last_char_count=0\n  local last_char_ascii_value=0\n\
    \  local last_char_ascii_value_count=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value_index=0\n  local last_char_ascii_value_index=0\n\
    \  local last_char_ascii_value\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local words=$2\n  local output\n  local\
    \ i\n  output=$string\n  for i in $words\n  do\n    output=\"${output// /$i}\"\
    \n  done\n  echo $output\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local new_string3=\"\"\n  local new_string4=\"\"\n  local new_string5=\"\
    \"\n  local new_string6=\"\"\n  local new_string7=\"\"\n  local new_string8=\"\
    \"\n  local new_string9=\"\"\n  local new_string10=\"\"\n  local new_string11=\"\
    \"\n  local new_string12=\"\"\n  local new_string13=\"\"\n  local new_string14=\"\
    \"\n  local new_string15=\"\"\n  local new_string16=\"\"\n  local new_string17=\"\
    \"\n  local new_string18=\"\"\n  local new_string19=\"\"\n  local new_string20=\"\
    \"\n  local new_string21=\"\"\n  local new_string22=\"\"\n  local new_string23=\"\
    \"\n  local new_string24=\"\"\n  local new_string25=\"\"\n  local new_string26=\"\
    \"\n  local new_string27=\"\"\n  local new_string28=\"\"\n  local new_string29=\"\
    \"\n  local new_string30=\"\"\n  local new_string31=\"\"\n  local new_string32=\"\
    \"\n  local new_string33=\"\"\n  local new_string34=\"\"\n  local new_string35=\"\
    \"\n  local new_string36=\"\"\n  local new_string37=\"\"\n  local new_string38=\"\
    \"\n  local new_string39=\"\"\n  local new_string40=\"\"\n  local new_string41=\"\
    \"\n  local new_string42=\"\"\n  local new_string43=\"\"\n  local new_string44=\"\
    \"\n  local new_string45=\"\"\n  local new_string46=\"\"\n  local new_string47=\"\
    \"\n  local new_string48=\"\"\n  local new_string49=\"\"\n  local new_string50=\"\
    \"\n  local new_string51=\"\"\n  local new_string52=\"\"\n  local new_string53=\"\
    \"\n  local new_string54=\"\"\n  local new_string55=\"\"\n  local new_string56=\"\
    \"\n  local new_string57=\"\"\n  local new_string58=\"\"\n  local new_string59=\"\
    \"\n  local new_string60=\"\"\n  local new_string61=\"\"\n  local new_string62=\"\
    \"\n  local new_string63=\"\"\n  local new_string64=\"\"\n  local new_string65=\"\
    \"\n  local new_string66=\"\"\n  local new_string67=\"\"\n  local new_string68=\"\
    \"\n  local new_string69=\"\"\n  local new_string70=\"\"\n  local new_string71=\"\
    \"\n  local new_string72=\"\"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_value=0\n    local word_char_prev=0\n\
    \    local word_char_next=0\n    local word_char_prev_length=0\n    local word_char_next_length=0\n\
    \    local word_char_prev_value=0\n    local word_char_next_value=0\n    local\
    \ word_char_prev_char=0\n    local word_char_next_char=0\n    local word_char_prev_prev_char=0\n\
    \    local word_char_next_prev_char=0\n    local word_char_prev_next_char=0\n\
    \    local word_char_next_next_char=0\n    local word_char_prev_prev_next_char=0\n\
    \    local word_char_next_prev_next_char=0\n    local word_char_prev_next_next_char=0\n\
    \    local word_char_prev_prev_next_next_char=0\n    local word_char_next_prev_prev_next_char=0\n\
    \    local word_char_next_prev_prev_next_next_char=0\n    local word_char_prev_next_prev_next_next_char=0\n\
    \    local word_char_prev_prev_next_prev_next_next_char=0\n    local word_char_next_prev_prev_prev_next_next_char=0\n\
    \    local word_char_next_prev_prev_prev_next_next_next_char=0\n    local word_char_prev_next_prev_prev_next_next_next_char=0\n\
    \    local word_char_prev_prev_next_prev_next_next_next_char=0\n    local word_char_next_prev_prev_prev_next_next_next_next_char=0\n\
    \    local word_char_next_prev_prev_prev_next_next_next_next_next_char=0\n   \
    \ local word_char_prev_next_prev_prev_next_next_next_next_next_char=0\n    local\
    \ word_char_prev_prev_next_prev_next_next_next_next_next_char=0\n    local word_char_next_prev_prev_prev_next_next_next_next_next_char=0\n\
    \    local word_char_next_prev_prev_prev_next_next_next_next_next_next_char=0\n\
    \    local word_char_prev_next_prev_prev_next_next_next_next_next_next_char=0\n\
    \    local word_char_prev_prev_next_prev_next_next_next_next_next_next_char=0\n\
    \    local word_char_next_prev_prev_prev_next_next_next_next_next_next_char=0\n\
    \    local word_char_next_prev_prev_prev_next_next_next_next_next_next_next_char=0\n\
    \    local word_char_prev_next_prev_prev_next_next_next_next_next_next_next_char=0\n\
    \    local word_char_prev_prev_next_prev_next_next_next_next_next_next_next_char=0\n\
    \    local word_char_next_prev_prev_prev_next_next_next_next_next_next_next_char=0\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local output\n    output=$(echo $string\
    \ | sed 's/\\(.\\)/\\1 /g' | sort -u)\n    echo $output\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local words=$string\n\
    \  local space=\" \"\n  local new_word=\"\"\n  local count=0\n  local count2=0\n\
    \  local count3=0\n  local count4=0\n  local count5=0\n  local count6=0\n  local\
    \ count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n  local count11=0\n\
    \  local count12=0\n  local count13=0\n  local count14=0\n  local count15=0\n\
    \  local count16=0\n  local count17=0\n  local count18=0\n  local count19=0\n\
    \  local count20=0\n  local count21=0\n  local count22=0\n  local count23=0\n\
    \  local count24=0\n  local count25=0\n  local count26=0\n  local count27=0\n\
    \  local count28=0\n  local count29=0\n  local count30=0\n  local count31=0\n\
    \  local count32=0\n  local count33=0\n  local count34=0\n  local count35=0\n\
    \  local count36=0\n  local count37=0\n  local count38=0\n  local count39=0\n\
    \  local count40=0\n  local count41=0\n  local count42=0\n  local count43=0\n\
    \  local count44=0\n  local count45=0\n  local count46=0\n  local count47=0\n\
    \  local count48=0\n  local count49=0\n  local count50=0\n  local count51=0\n\
    \  local count52=0\n  local count53=0\n  local count54=0\n  local count55=0\n\
    \  local count56=0\n  local count57=0\n  local count58=0\n  local count59=0\n\
    \  local count60=0\n  local count61=0\n  local count62=0\n  local count63=0\n\
    \  local count64=0\n  local count65=0\n  local count66=0\n  local count67=0\n\
    \  local count68=0\n  local count69=0\n  local count70=0\n  local count71=0\n\
    \  local count72=0\n  local count73=0\n  local count74=0\n  local count75=0\n\
    \  local count76=0\n  local count77=0\n  local count78=0\n  local count79=0\n\
    \  local count80=0\n  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  while [ $i -lt ${#string} ]; do\n    local letter=${string:$i:1}\n  \
    \  local letter_value=${letter:0:1}\n    local letter_value_ascii=${letter_value:0:1}\n\
    \    local letter_value_ascii_value=${letter_value_ascii:0:1}\n    local letter_value_ascii_value_lower=${letter_value_ascii_value:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value:1:1}\n  \
    \  local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii_value_upper:0:1}\n\
    \    local letter_value_ascii_value_upper=${letter_value_ascii\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhz6mc8g.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_list=\"\"\n    local word_list_sorted=\"\"\n  \
    \  local word_list_sorted_count=0\n    local word_list_sorted_count2=0\n    local\
    \ word_list_sorted_count3=0\n    local word_list_sorted_count4=0\n    local word_list_sorted_count5=0\n\
    \    local word_list_sorted_count6=0\n    local word_list_sorted_count7=0\n  \
    \  local word_list_sorted_count8=0\n    local word_list_sorted_count9=0\n    local\
    \ word_list_sorted_count10=0\n    local word_list_sorted_count11=0\n    local\
    \ word_list_sorted_count12=0\n    local word_list_sorted_count13=0\n    local\
    \ word_list_sorted_count14=0\n    local word_list_sorted_count15=0\n    local\
    \ word_list_sorted_count16=0\n    local word_list_sorted_count17=0\n    local\
    \ word_list_sorted_count18=0\n    local word_list_sorted_count19=0\n    local\
    \ word_list_sorted_count20=0\n    local word_list_sorted_count21=0\n    local\
    \ word_list_sorted_count22=0\n    local word_list_sorted_count23=0\n    local\
    \ word_list_sorted_count24=0\n    local word_list_sorted_count25=0\n    local\
    \ word_list_sorted_count26=0\n    local word_list_sorted_count27=0\n    local\
    \ word_list_sorted_count28=0\n    local word_list_sorted_count29=0\n    local\
    \ word_list_sorted_count30=0\n    local word_list_sorted_count31=0\n    local\
    \ word_list_sorted_count32=0\n    local word_list_sorted_count33=0\n    local\
    \ word_list_sorted_count34=0\n    local word_list_sorted_count35=0\n    local\
    \ word_list_sorted_count36=0\n    local word_list_sorted_count37=0\n    local\
    \ word_list_sorted_count38=0\n    local word_list_sorted_count39=0\n    local\
    \ word_list_sorted_count40=0\n    local word_list_sorted_count41=0\n    local\
    \ word_list_sorted_count42=0\n    local word_list_sorted_count43=0\n    local\
    \ word_list_sorted_count44=0\n    local word_list_sorted_count45=0\n    local\
    \ word_list_sorted_count46=0\n    local word_list_sorted_count47=0\n    local\
    \ word_list_sorted_count48=0\n    local word_list_sorted_count49=0\n    local\
    \ word_list_sorted_count50=0\n    local word_list_sorted_count51=0\n    local\
    \ word_list_sorted_count52=0\n    local word_list_sorted_count53=0\n    local\
    \ word_list_sorted_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local words=$(echo \"$string\" | sed\
    \ 's/ /\\n/g' | sort -u)\n  local new_string=\"\"\n  local i=0 j=0\n  while [\
    \ \"$i\" -lt \"$#\" ] && [ \"$j\" -lt \"$#\" ]; do\n    local word=$(( $i + $j\
    \ ))\n    local char=$(( $i + $j ))\n    local char_value=$(( $char + $i ))\n\
    \    local new_char=$(( $char_value + $i ))\n    local new_word=$(echo \"$words[$char]\"\
    \ | sed \"s/$char/$new_char/g\")\n    new_string=\"$new_string $new_word\"\n \
    \   i=$(( $i + 1 ))\n    j=$(( $j + 1 ))\n  done\n  echo \"$new_string\"\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_length_index=0\n  local\
    \ word_length_count=0\n  local word_length_index=0\n  local word_index=0\n  local\
    \ word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_index=0\n\
    \  local word_count=0\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_character\n  local\
    \ word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    local word_count=0\n    local word_length=0\n    local word_index=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index2=0\n\
    \    local word_char_count2=0\n    local word_char_index3=0\n    local word_char_count3=0\n\
    \    local word_char_index4=0\n    local word_char_count4=0\n    local word_char_index5=0\n\
    \    local word_char_count5=0\n    local word_char_index6=0\n    local word_char_count6=0\n\
    \    local word_char_index7=0\n    local word_char_count7=0\n    local word_char_index8=0\n\
    \    local word_char_count8=0\n    local word_char_index9=0\n    local word_char_count9=0\n\
    \    local word_char_index10=0\n    local word_char_count10=0\n    local word_char_index11=0\n\
    \    local word_char_count11=0\n    local word_char_index12=0\n    local word_char_count12=0\n\
    \    local word_char_index13=0\n    local word_char_count13=0\n    local word_char_index14=0\n\
    \    local word_char_count14=0\n    local word_char_index15=0\n    local word_char_count15=0\n\
    \    local word_char_index16=0\n    local word_char_count16=0\n    local word_char_index17=0\n\
    \    local word_char_count17=0\n    local word_char_index18=0\n    local word_char_count18=0\n\
    \    local word_char_index19=0\n    local word_char_count19=0\n    local word_char_index20=0\n\
    \    local word_char_count20=0\n    local word_char_index21=0\n    local word_char_count21=0\n\
    \    local word_char_index22=0\n    local word_char_count22=0\n    local word_char_index23=0\n\
    \    local word_char_count23=0\n    local word_char_index24=0\n    local word_char_count24=0\n\
    \    local word_char_index25=0\n    local word_char_count25=0\n    local word_char_index26=0\n\
    \    local word_char_count26=0\n    local word_char_index27=0\n    local word_char_count27=0\n\
    \    local word_char_index28=0\n    local word_char_count28=0\n    local word_char_index29=0\n\
    \    local word_char_count29=0\n    local word_char_index30=0\n    local word_char_count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_character_index=0\n\
    \  local word_character=\"\"\n  local word_character_index=0\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_length_index=0\n  local word_char_index=0\n\
    \  local word_char=\"\"\n  local word_char_ascii_value=0\n  local word_char_ascii_value_index=0\n\
    \  local word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n \
    \ local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\
    \"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n \
    \ local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\
    \"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n \
    \ local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\
    \"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n \
    \ local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\
    \"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n \
    \ local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\
    \"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n \
    \ local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\
    \"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n \
    \ local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\
    \"\n  local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n \
    \ local word_char_ascii_value=\"\"\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052289
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwxsdmcp8.sh: line 70: syntax error near unexpected token `}''

    /tmp/tmpwxsdmcp8.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660052288
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local new_count=0\n    local char\n    local new_char\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052288
