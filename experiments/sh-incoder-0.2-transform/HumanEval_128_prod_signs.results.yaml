language: sh
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=$((signs\
    \ + $i))\n    product=$((product * $i))\n  done\n  sum=$((signs * product))\n\
    \  if [[ $sum -eq 0 ]]; then\n    sum=1\n  fi\n  echo $sum\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\n\
    \    local sum=0\n    local product=1\n    local i\n\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        signs+=\"$(echo \"${arr[i]}\" | awk '{print ($1 * $2)}')\"\
    \n    done\n\n    sum=$(echo \"${signs}\" | awk '{print ($1 + $2)}')\n\n    if\
    \ [ -z \"${arr}\" ]; then\n        echo \"None\"\n    else\n        echo \"${sum}\"\
    \n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n  local signs_arr=$(echo \"\
    $signs\" | tr \" \" \"\\n\")\n  local signs_arr_len=${#signs_arr[@]}\n  local\
    \ signs_arr_i=0\n  local signs_arr_j=0\n  local signs_arr_k=0\n  local signs_arr_l=0\n\
    \  local signs_arr_m=0\n  local signs_arr_n=0\n  local signs_arr_o=0\n  local\
    \ signs_arr_p=0\n  local signs_arr_q=0\n  local signs_arr_r=0\n  local signs_arr_s=0\n\
    \  local signs_arr_t=0\n  local signs_arr_u=0\n  local signs_arr_v=0\n  local\
    \ signs_arr_w=0\n  local signs_arr_x=0\n  local signs_arr_y=0\n  local signs_arr_z=0\n\
    \  local signs_arr_arr_i=0\n  local signs_arr_arr_j=0\n  local signs_arr_arr_k=0\n\
    \  local signs_arr_arr_l=0\n  local signs_arr_arr_m=0\n  local signs_arr_arr_n=0\n\
    \  local signs_arr_arr_o=0\n  local signs_arr_arr_p=0\n  local signs_arr_arr_q=0\n\
    \  local signs_arr_arr_r=0\n  local signs_arr_arr_s=0\n  local signs_arr_arr_t=0\n\
    \  local signs_arr_arr_u=0\n  local signs_arr_arr_v=0\n  local signs_arr_arr_w=0\n\
    \  local signs_arr_arr_x=0\n  local signs_arr_arr_y=0\n  local signs_arr_arr_z=0\n\
    \  local signs_arr_arr_arr_i=0\n  local signs_arr_arr_arr_j=0\n  local signs_arr_arr_arr_k=0\n\
    \  local signs_arr_arr_arr_l=0\n  local signs_arr_arr_arr_m=0\n  local signs_arr_arr_arr_n=0\n\
    \  local signs_arr_arr_arr_o=0\n  local signs_arr_arr_arr_p=0\n  local signs_arr_arr_arr_q=0\n\
    \  local signs_arr_arr_arr_r=0\n  local signs_arr_arr_arr_s=0\n  local signs_arr_arr_arr_t=0\n\
    \  local signs_arr_arr_arr_u=0\n  local signs_arr_arr_arr_v=0\n  local signs_arr_arr_arr_w=0\n\
    \  \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr | head -1)\n    local\
    \ sum=0\n    local product=1\n    for sign in $signs; do\n        sum=$((sum +\
    \ $sign * product))\n        product=$((product * $sign))\n    done\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n     \
    \   ((sign*=arr[i]))\n        sum+=sign\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb5advc3n.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n    local sum=0\n    for sign in $signs; do\n    \
    \    sum=$((sum + $sign))\n    done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  local j\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=$((signs+i))\n\
    \  done\n  for i in $arr; do\n    product=$((product*i))\n  done\n  for i in $arr;\
    \ do\n    sum=$((sum+$i*$signs))\n  done\n  echo $sum\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]}\
    \ -gt 0 ]]; then\n      sum=$((sum + ${arr[i]}*sign))\n    fi\n    sign=$((sign*-1))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp758n1tj3.sh: line 21: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n    local signs_arr=()\n    for sign in $signs; do\n\
    \        signs_arr+=(\"$sign\")\n    done\n    local signs_str=$(printf \"%s\\\
    n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\"\
    )\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local\
    \ signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf\
    \ \"%s\\n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf \"%s\\n\" \"\
    ${signs_arr[@]}\")\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\"\
    )\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local\
    \ signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf\
    \ \"%s\\n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf \"%s\\n\" \"\
    ${signs_arr[@]}\")\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\"\
    )\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local\
    \ signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf\
    \ \"%s\\n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf \"%s\\n\" \"\
    ${signs_arr[@]}\")\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\"\
    )\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local\
    \ signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf\
    \ \"%s\\n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf \"%s\\n\" \"\
    ${signs_arr[@]}\")\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\"\
    )\n    local signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local\
    \ signs_arr_str=$(printf \"%s\\n\" \"${signs_arr[@]}\")\n    local signs_arr_str=$(printf\
    \ \"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpof06f2r7.sh: line 62: unexpected EOF while looking for matching
    `"''

    /tmp/tmpof06f2r7.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    signs+=\"$(echo \"${arr[i]}\" | sed 's/^-//' | sed 's/-//' |\
    \ sed 's/-//')\"\n  done\n\n  for i in ${arr[@]}; do\n    product=$((product *\
    \ $i))\n  done\n\n  sum=$((product * $signs))\n\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp82vk5vhx.sh: line 30: product * 1 2 2 4: syntax error in expression
    (error token is "2 2 4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in \"${arr[@]}\"; do\n    (( sum += sign *\
    \ i ))\n    (( sign *= -1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprw9u5cdi.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n\n  for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n    local sign=${arr[i]}\n    signs+=(\"$sign\")\n  done\n\n  for ((\
    \ i=0; i<${#signs[@]}; i++ )); do\n    local sign=${signs[i]}\n    product=$((product*sign))\n\
    \  done\n\n  sum=$((product*${#signs[@]}))\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpawnzk_a9.sh: line 29: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sum=0\n    local product=1\n    local i\n    local j\n    local sign\n\
    \    local signs\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    \n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sum=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        local sign=${arr[i]}\n        if [[ $sign -gt 0 ]]; then\n\
    \            signs=\"$signs 1\"\n        elif [[ $sign -lt 0 ]]; then\n      \
    \      signs=\"$signs -1\"\n        else\n            signs=\"$signs 0\"\n   \
    \     fi\n        sum=$((sum+signs))\n        product=$((product*sign))\n    done\n\
    \    echo \"$sum*$product\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp4hwolp51.sh: line 23: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp4hwolp51.sh: line 25: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp4hwolp51.sh: line 31: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  local j\n  local sign\n  local\
    \ signs\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    sign=$((sign*i))\n    sum=$((sum+sign))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    local elem=${arr[i]}\n\
    \    if (( elem < 0 )); then\n      sign=-1\n    elif (( elem > 0 )); then\n \
    \     sign=1\n    fi\n    sum=$(( sum + sign * elem ))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7cc_4mbs.sh: line 22: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp7cc_4mbs.sh: line 24: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp7cc_4mbs.sh: line 27: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  for i in \"${arr[@]}\"; do\n    signs=$((signs+$((\
    \ ${i}*${signs} ))))\n  done\n  sum=$(( ${signs}*${sum} ))\n  if [ -z \"$arr\"\
    \ ]; then\n    echo -n \"$sum\"\n    return 0\n  fi\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwq5eybyy.sh: line 21: 1 2 2 -4*0 : syntax error in expression (error
    token is "2 2 -4*0 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$(echo\
    \ $arr | tr \" \" \"\\n\" | sort -n | uniq -u | wc -l)\n  local signs_arr=()\n\
    \  local signs_sum=0\n  local signs_product=1\n  local signs_product2=1\n  local\
    \ signs_product3=1\n  local signs_product4=1\n  local signs_product5=1\n  local\
    \ signs_product6=1\n  local signs_product7=1\n  local signs_product8=1\n  local\
    \ signs_product9=1\n  local signs_product10=1\n  local signs_product11=1\n  local\
    \ signs_product12=1\n  local signs_product13=1\n  local signs_product14=1\n  local\
    \ signs_product15=1\n  local signs_product16=1\n  local signs_product17=1\n  local\
    \ signs_product18=1\n  local signs_product19=1\n  local signs_product20=1\n  local\
    \ signs_product21=1\n  local signs_product22=1\n  local signs_product23=1\n  local\
    \ signs_product24=1\n  local signs_product25=1\n  local signs_product26=1\n  local\
    \ signs_product27=1\n  local signs_product28=1\n  local signs_product29=1\n  local\
    \ signs_product30=1\n  local signs_product31=1\n  local signs_product32=1\n  local\
    \ signs_product33=1\n  local signs_product34=1\n  local signs_product35=1\n  local\
    \ signs_product36=1\n  local signs_product37=1\n  local signs_product38=1\n  local\
    \ signs_product39=1\n  local signs_product40=1\n  local signs_product41=1\n  local\
    \ signs_product42=1\n  local signs_product43=1\n  local signs_product44=1\n  local\
    \ signs_product45=1\n  local signs_product46=1\n  local signs_product47=1\n  local\
    \ signs_product48=1\n  local signs_product49=1\n  local signs_product50=1\n  local\
    \ signs_product51=1\n  local signs_product52=1\n  local signs_product53=1\n  local\
    \ signs_product54=1\n  local signs_product55=1\n  local signs_product56=1\n  local\
    \ signs_product57=1\n  local signs_product58=1\n  local \n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  local j\n  local signs\n  local sign\n  local product\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr | head -n 1)\n  \
    \  local signs_arr=$(echo \"$signs\" | tr \" \" \"\\n\" | sort -n)\n    local\
    \ signs_arr_len=${#signs_arr[@]}\n    local signs_arr_max=${#signs_arr[@]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_idx=0\n    local signs_\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    for x in $arr; do\n        (( sum += sign * x ))\n    \
    \    sign=$(( sign * -1 ))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  local j\n  local sum1\n  local sum2\n\
    \  local sum3\n  local sum4\n  local sum5\n  local sum6\n  local sum7\n  local\
    \ sum8\n  local sum9\n  local sum10\n  local sum11\n  local sum12\n  local sum13\n\
    \  local sum14\n  local sum15\n  local sum16\n  local sum17\n  local sum18\n \
    \ local sum19\n  local sum20\n  local sum21\n  local sum22\n  local sum23\n  local\
    \ sum24\n  local sum25\n  local sum26\n  local sum27\n  local sum28\n  local sum29\n\
    \  local sum30\n  local sum31\n  local sum32\n  local sum33\n  local sum34\n \
    \ local sum35\n  local sum36\n  local sum37\n  local sum38\n  local sum39\n  local\
    \ sum40\n  local sum41\n  local sum42\n  local sum43\n  local sum44\n  local sum45\n\
    \  local sum46\n  local sum47\n  local sum48\n  local sum49\n  local sum50\n \
    \ local sum51\n  local sum52\n  local sum53\n  local sum54\n  local sum55\n  local\
    \ sum56\n  local sum57\n  local sum58\n  local sum59\n  local sum60\n  local sum61\n\
    \  local sum62\n  local sum63\n  local sum64\n  local sum65\n  local sum66\n \
    \ local sum67\n  local sum68\n  local sum69\n  local sum70\n  local sum71\n  local\
    \ sum72\n  local sum73\n  local sum74\n  local sum75\n  local sum76\n  local sum77\n\
    \  local sum78\n  local sum79\n  local sum80\n  local sum81\n  local sum82\n \
    \ local sum83\n  local sum84\n  local sum85\n  local sum86\n  local sum87\n  local\
    \ sum88\n  local sum89\n  local sum90\n  local sum91\n  local sum92\n  local sum93\n\
    \  local sum94\n  local sum95\n  local sum96\n  local sum97\n\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs+=(\"${arr[i]}\")\n  done\n\n  for ((i=0; i<${#signs[@]}; i++));\
    \ do\n    product=$((product * ${signs[i]}))\n  done\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sum=$((sum + ${arr[i]} * ${product}))\n  done\n\n  echo \"$sum\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp70mngbbn.sh: line 27: product * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n  local sign\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=${arr[i]}\n    signs=\"${signs}${sign} \"\n  done\n  signs=\"\
    ${signs}${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"\
    ${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%%\
    \ }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\
    \n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n\
    \  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n \
    \ signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"\
    ${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%%\
    \ }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\
    \n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n\
    \  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n \
    \ signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"\
    ${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%%\
    \ }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\
    \n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n\
    \  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n  signs=\"${signs%% }\"\n \
    \ signs=\"${signs%% }\"\n  signs=\"${sign\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5r8107hp.sh: line 91: unexpected EOF while looking for matching
    `"''

    /tmp/tmp5r8107hp.sh: line 95: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  for i in $arr; do\n    signs=$((signs * $i))\n\
    \  done\n  for i in $arr; do\n    sum=$((sum + $i * $signs))\n  done\n  if ((\
    \ ${#arr} > 0 )); then\n    echo $sum\n  else\n    echo None\n  fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs+=(${arr[i]})\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    product=$((product*${signs[i]}))\n    sum=$((sum+product))\n  done\n\n  echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sign\n    local sum=0\n    local i\n    local j\n    local sign\n \
    \   local product=1\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\"\
    \ ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in \"${arr[@]}\"; do\n    (( sign *= (${i}\
    \ > 0) ))\n    (( sum += sign * ${i} ))\n  done\n  echo \"${sum}\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt2z8eaha.sh: line 21: ((: sign *= (1 2 2 -4 > 0) : missing `)''
    (error token is "2 2 -4 > 0) ")

    /tmp/tmpt2z8eaha.sh: line 22: ((: sum += sign * 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  local j\n  local product\n  local sign\n\
    \  signs=()\n  sum=0\n  for i in \"${arr[@]}\"; do\n    sign=${i#-}\n    signs+=(\"\
    $sign\")\n  done\n  for i in \"${signs[@]}\"; do\n    sign=${i#-}\n    product=1\n\
    \    for j in \"${arr[@]}\"; do\n      sign=${j#-}\n      if [ \"$i\" == \"$j\"\
    \ ]; then\n        product=0\n        break\n      fi\n      if [ \"$sign\" ==\
    \ \"$j\" ]; then\n        product=1\n        break\n      fi\n    done\n    sum=$((sum\
    \ + product))\n  done\n  if [ \"$sum\" -gt 0 ]; then\n    echo $sum\n  else\n\
    \    echo None\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local i\n    local sign\n    local\
    \ signsCount\n    local signsCount2\n    local signsCount3\n    local signsCount4\n\
    \    local signsCount5\n    local signsCount6\n    local signsCount7\n    local\
    \ signsCount8\n    local signsCount9\n    local signsCount10\n    local signsCount11\n\
    \    local signsCount12\n    local signsCount13\n    local signsCount14\n    local\
    \ signsCount15\n    local signsCount16\n    local signsCount17\n    local signsCount18\n\
    \    local signsCount19\n    local signsCount20\n    local signsCount21\n    local\
    \ signsCount22\n    local signsCount23\n    local signsCount24\n    local signsCount25\n\
    \    local signsCount26\n    local signsCount27\n    local signsCount28\n    local\
    \ signsCount29\n    local signsCount30\n    local signsCount31\n    local signsCount32\n\
    \    local signsCount33\n    local signsCount34\n    local signsCount35\n    local\
    \ signsCount36\n    local signsCount37\n    local signsCount38\n    local signsCount39\n\
    \    local signsCount40\n    local signsCount41\n    local signsCount42\n    local\
    \ signsCount43\n    local signsCount44\n    local signsCount45\n    local signsCount46\n\
    \    local signsCount47\n    local signsCount48\n    local signsCount49\n    local\
    \ signsCount50\n    local signsCount51\n    local signsCount52\n    local signsCount53\n\
    \    local signsCount54\n    local signsCount55\n    local signsCount56\n    local\
    \ signsCount57\n    local signsCount58\n    local signsCount59\n    local signsCount60\n\
    \    local signsCount61\n    local signsCount62\n    local signsCount63\n    local\
    \ signsCount64\n    local signsCount65\n    local signsCount66\n    local signsCount67\n\
    \    local signsCount68\n    local signsCount69\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs+=(\"${arr[i]}\")\n  done\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    product=$((product * ${signs[i]}))\n  done\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sum=$((sum + ${arr[i]} * ${signs[i]}))\n  done\n\n  echo \"${sum}\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3irsv9rz.sh: line 27: product * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=0\n\
    \  local sign\n  local i\n  local sum=0\n  for i in ${arr[@]}; do\n    sign=$(echo\
    \ $i | awk '{print $1 == \"-\" ? -1 : 1}')\n    signs=$((signs * sign))\n    sum=$((sum\
    \ + sign))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -n | awk '{print $2}')\n\
    \  local sum=0\n  local product=1\n  for sign in $signs; do\n    sum=$((sum +\
    \ sign*$product))\n    product=$((product*sign))\n  done\n  echo \"$sum\"\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs\n\
    \    local sign\n    local sum\n    local i\n    local j\n    local sign\n   \
    \ local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    (( sum += sign * i ))\n \
    \   sign=$(( sign * -1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$2\n\
    \  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    local sign=${signs:$i:1}\n    local num=${arr[$i]}\n    local sign=${sign:0:1}\n\
    \    local sign=${sign:1}\n    local product=$((product*sign))\n    local sum=$((sum+num*product))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp6wua53ve.sh: line 28: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=()\n  local sign\n  for sign in $arr; do\n    signs+=(\"$sign\"\
    )\n  done\n  for sign in ${signs[@]}; do\n    sum=$((sum + sign*$sign))\n  done\n\
    \  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=\"\
    $signs $i\"\n  done\n  for i in $signs; do\n    product=$((product * $i))\n  done\n\
    \  for i in $arr; do\n    sum=$((sum + $i * $product))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n    signs=$(( signs * ${arr[i]} ))\n  done\n  for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n    product=$(( product * ${arr[i]} ))\n  done\n  sum=$(( sum +\
    \ signs * product ))\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp23k29jer.sh: line 22: signs * 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in \"${arr[@]}\"; do\n    sign=$((sign*i))\n\
    \    sum=$((sum+sign))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1zmdt3ks.sh: line 21: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sign\n    local sign\n    local sum=0\n    local i\n    local j\n \
    \   local sign\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=\"${arr[i]}\"\
    \n        signs+=(\"$sign\")\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        sign=\"${signs[i]}\"\n        if [[ $sign == -* ]]; then\n          \
    \  sign=-1\n        elif [[ $sign == +* ]]; then\n            sign=1\n       \
    \ fi\n        sum=$((sum + sign*${arr[i]}))\n    done\n    echo \"$sum\"\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnyja4zjv.sh: line 35: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\n\
    \    local sum=0\n    local product=1\n    local i\n    local j\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        signs=\"${signs} ${arr[i]}\"\n    done\n  \
    \  for ((i=0; i<${#arr[@]}; i++)); do\n        ((j=0))\n        while ((j<${#signs[@]}));\
    \ do\n            ((j+=1))\n            if [[ ${signs[$j]} == \"-\" ]]; then\n\
    \                ((product*=-1))\n            fi\n        done\n        sum+=$((${product}*${arr[i]}))\n\
    \        product=1\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppqnbx3on.sh: line 33: 1*1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -n | awk '{print $2}')\n\
    \    local signs_len=${#signs[@]}\n    local signs_sum=0\n    local signs_product=1\n\
    \    local signs_product2=1\n    local signs_product3=1\n    local signs_product4=1\n\
    \    local signs_product5=1\n    local signs_product6=1\n    local signs_product7=1\n\
    \    local signs_product8=1\n    local signs_product9=1\n    local signs_product10=1\n\
    \    local signs_product11=1\n    local signs_product12=1\n    local signs_product13=1\n\
    \    local signs_product14=1\n    local signs_product15=1\n    local signs_product16=1\n\
    \    local signs_product17=1\n    local signs_product18=1\n    local signs_product19=1\n\
    \    local signs_product20=1\n    local signs_product21=1\n    local signs_product22=1\n\
    \    local signs_product23=1\n    local signs_product24=1\n    local signs_product25=1\n\
    \    local signs_product26=1\n    local signs_product27=1\n    local signs_product28=1\n\
    \    local signs_product29=1\n    local signs_product30=1\n    local signs_product31=1\n\
    \    local signs_product32=1\n    local signs_product33=1\n    local signs_product34=1\n\
    \    local signs_product35=1\n    local signs_product36=1\n    local signs_product37=1\n\
    \    local signs_product38=1\n    local signs_product39=1\n    local signs_product40=1\n\
    \    local signs_product41=1\n    local signs_product42=1\n    local signs_product43=1\n\
    \    local signs_product44=1\n    local signs_product45=1\n    local signs_product46=1\n\
    \    local signs_product47=1\n    local signs_product48=1\n    local signs_product49=1\n\
    \    local signs_product50=1\n    local signs_product51=1\n    local signs_product52=1\n\
    \    local signs_product53=1\n    local signs_product54=1\n    local signs_product55=1\n\
    \    local signs_product56=1\n    local signs_product57=1\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  local j\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    local j\n    local sign\n    local sign1\n\
    \    local sign2\n    local sign3\n    local sign4\n    local sign5\n    local\
    \ sign6\n    local sign7\n    local sign8\n    local sign9\n    local sign10\n\
    \    local sign11\n    local sign12\n    local sign13\n    local sign14\n    local\
    \ sign15\n    local sign16\n    local sign17\n    local sign18\n    local sign19\n\
    \    local sign20\n    local sign21\n    local sign22\n    local sign23\n    local\
    \ sign24\n    local sign25\n    local sign26\n    local sign27\n    local sign28\n\
    \    local sign29\n    local sign30\n    local sign31\n    local sign32\n    local\
    \ sign33\n    local sign34\n    local sign35\n    local sign36\n    local sign37\n\
    \    local sign38\n    local sign39\n    local sign40\n    local sign41\n    local\
    \ sign42\n    local sign43\n    local sign44\n    local sign45\n    local sign46\n\
    \    local sign47\n    local sign48\n    local sign49\n    local sign50\n    local\
    \ sign51\n    local sign52\n    local sign53\n    local sign54\n    local sign55\n\
    \    local sign56\n    local sign57\n    local sign58\n    local sign59\n    local\
    \ sign60\n    local sign61\n    local sign62\n    local sign63\n    local sign64\n\
    \    local sign65\n    local sign66\n    local sign67\n    local sign68\n    local\
    \ sign69\n    local sign70\n    local sign71\n    local sign72\n    local sign73\n\
    \    local sign74\n    local sign75\n    local sign76\n    local sign77\n    local\
    \ sign78\n    local sign79\n    local sign80\n    local sign81\n    local sign82\n\
    \    local sign83\n    local sign84\n    local sign85\n    local sign86\n    local\
    \ sign87\n    local sign88\n    local sign89\n    local sign90\n    local sign91\n\
    \    local sign92\n    local sign93\n    local sign94\n    local sign95\n    local\
    \ sign96\n    local sign\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sign\n  local sum=0\n  local i\n  local j\n  local sign\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    sign=\"${arr[i]}\"\n    signs+=(\"$sign\")\n  done\n\
    \  for ((i=0; i<${#signs[@]}; i++)); do\n    sign=\"${signs[i]}\"\n    for ((j=0;\
    \ j<${#arr[@]}; j++)); do\n      arr[j]=\"${arr[j]}\"\n    done\n    arr=\"${arr[@]}\"\
    \n    sign=\"${sign}\"\n    sign=\"${sign}1\"\n    sum=\"${sum}${sum}${sign}\"\
    \n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  for i in $arr; do\n    signs=$((signs * $i))\n \
    \   sum=$((sum + $i))\n  done\n  echo $((sum * signs))\n}\n\ncandidate() {\n \
    \   prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  local i\n  for i in $arr; do\n    sign=$(echo\
    \ $i | awk '{print $1}')\n    signs=$((signs*sign))\n    sum=$((sum+$i))\n  done\n\
    \  echo $((signs*sign*sum))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sign\n\
    \    local sum=0\n    for sign in $arr; do\n        sum=$((sum + sign))\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n    local signs_len=${#signs}\n    local signs_sum=0\n\
    \    local signs_product=1\n    local signs_product2=1\n    local signs_product3=1\n\
    \    local signs_product4=1\n    local signs_product5=1\n    local signs_product6=1\n\
    \    local signs_product7=1\n    local signs_product8=1\n    local signs_product9=1\n\
    \    local signs_product10=1\n    local signs_product11=1\n    local signs_product12=1\n\
    \    local signs_product13=1\n    local signs_product14=1\n    local signs_product15=1\n\
    \    local signs_product16=1\n    local signs_product17=1\n    local signs_product18=1\n\
    \    local signs_product19=1\n    local signs_product20=1\n    local signs_product21=1\n\
    \    local signs_product22=1\n    local signs_product23=1\n    local signs_product24=1\n\
    \    local signs_product25=1\n    local signs_product26=1\n    local signs_product27=1\n\
    \    local signs_product28=1\n    local signs_product29=1\n    local signs_product30=1\n\
    \    local signs_product31=1\n    local signs_product32=1\n    local signs_product33=1\n\
    \    local signs_product34=1\n    local signs_product35=1\n    local signs_product36=1\n\
    \    local signs_product37=1\n    local signs_product38=1\n    local signs_product39=1\n\
    \    local signs_product40=1\n    local signs_product41=1\n    local signs_product42=1\n\
    \    local signs_product43=1\n    local signs_product44=1\n    local signs_product45=1\n\
    \    local signs_product46=1\n    local signs_product47=1\n    local signs_product48=1\n\
    \    local signs_product49=1\n    local signs_product50=1\n    local signs_product51=1\n\
    \    local signs_product52=1\n    local signs_product53=1\n    local signs_product54=1\n\
    \    local signs_product55=1\n    local signs_product56=1\n    local signs_product57=1\n\
    \    local signs_product58=1\n    local signs_product59=1\n    local signs_product\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sign\n  local sign\n  local sum=0\n  local i\n  local j\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  local sign\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=${arr[i]}\n    signs+=(\"$sign\")\n    ((sum+=sign*product))\n\
    \    product=$((product*sign))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzmht0kgr.sh: line 25: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpzmht0kgr.sh: line 26: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    local elem=\"\
    ${arr[i]}\"\n    if [[ \"$elem\" =~ ^-?[0-9]+$ ]]; then\n      ((sum+=${elem}*$sign))\n\
    \      sign=$((sign*-1))\n    else\n      ((sum+=${elem}))\n    fi\n  done\n \
    \ echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_8iwl4m_.sh: line 26: ((: sum+=1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    local i\n    local j\n    local signs\n    local signs_len\n\
    \    local signs_sum\n    local signs_product\n    local signs_product2\n    local\
    \ signs_product3\n    local signs_product4\n    local signs_product5\n    local\
    \ signs_product6\n    local signs_product7\n    local signs_product8\n    local\
    \ signs_product9\n    local signs_product10\n    local signs_product11\n    local\
    \ signs_product12\n    local signs_product13\n    local signs_product14\n    local\
    \ signs_product15\n    local signs_product16\n    local signs_product17\n    local\
    \ signs_product18\n    local signs_product19\n    local signs_product20\n    local\
    \ signs_product21\n    local signs_product22\n    local signs_product23\n    local\
    \ signs_product24\n    local signs_product25\n    local signs_product26\n    local\
    \ signs_product27\n    local signs_product28\n    local signs_product29\n    local\
    \ signs_product30\n    local signs_product31\n    local signs_product32\n    local\
    \ signs_product33\n    local signs_product34\n    local signs_product35\n    local\
    \ signs_product36\n    local signs_product37\n    local signs_product38\n    local\
    \ signs_product39\n    local signs_product40\n    local signs_product41\n    local\
    \ signs_product42\n    local signs_product43\n    local signs_product44\n    local\
    \ signs_product45\n    local signs_product46\n    local signs_product47\n    local\
    \ signs_product48\n    local signs_product49\n    local signs_product50\n    local\
    \ signs_product51\n    local signs_product52\n    local signs_product53\n    local\
    \ signs_product54\n    local signs_product55\n    local signs_product56\n    local\
    \ signs_product57\n    local signs_product58\n    local signs_product59\n    local\
    \ signs_product60\n    local signs_product61\n    local signs_product62\n    local\
    \ signs_product63\n    local signs_product64\n    local signs_product65\n    local\
    \ signs_product66\n    local signs_product67\n    local sign\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local product=1\n    local i\n    local j\n    local sign\n\
    \    local sign1\n    local sign2\n    local sign3\n    local sign4\n    local\
    \ sign5\n    local sign6\n    local sign7\n    local sign8\n    local sign9\n\
    \    local sign10\n    local sign11\n    local sign12\n    local sign13\n    local\
    \ sign14\n    local sign15\n    local sign16\n    local sign17\n    local sign18\n\
    \    local sign19\n    local sign20\n    local sign21\n    local sign22\n    local\
    \ sign23\n    local sign24\n    local sign25\n    local sign26\n    local sign27\n\
    \    local sign28\n    local sign29\n    local sign30\n    local sign31\n    local\
    \ sign32\n    local sign33\n    local sign34\n    local sign35\n    local sign36\n\
    \    local sign37\n    local sign38\n    local sign39\n    local sign40\n    local\
    \ sign41\n    local sign42\n    local sign43\n    local sign44\n    local sign45\n\
    \    local sign46\n    local sign47\n    local sign48\n    local sign49\n    local\
    \ sign50\n    local sign51\n    local sign52\n    local sign53\n    local sign54\n\
    \    local sign55\n    local sign56\n    local sign57\n    local sign58\n    local\
    \ sign59\n    local sign60\n    local sign61\n    local sign62\n    local sign63\n\
    \    local sign64\n    local sign65\n    local sign66\n    local sign67\n    local\
    \ sign68\n    local sign69\n    local sign70\n    local sign71\n    local sign72\n\
    \    local sign73\n    local sign74\n    local sign75\n    local sign76\n    local\
    \ sign77\n    local sign78\n    local sign79\n    local sign80\n    local sign81\n\
    \    local sign82\n    local sign83\n    local sign84\n    local sign85\n    local\
    \ sign86\n    local sign87\n    local sign88\n    local sign89\n    local sign90\n\
    \    local sign91\n    local sign92\n    local sign93\n    local sign94\n    local\
    \ sign95\n    local sign\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  for sign in ${arr[*]}; do\n    signs=$((signs*sign))\n\
    \  done\n  for sign in ${arr[*]}; do\n    sum=$((sum+signs*sign))\n  done\n  echo\
    \ $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sign\n    local sum=0\n    local i\n    local j\n    local sign\n\
    \    local signs\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local \n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  local j\n  local sign\n  local\
    \ signs\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  for i in \"${arr[@]}\"; do\n    signs=$((signs\
    \ + $i))\n  done\n  for i in \"${arr[@]}\"; do\n    sum=$((sum + $i * $signs))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpwl13766j.sh: line 21: signs + 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sign\n\
    \    local sum\n    local i\n    local j\n    local signs\n    local signs_len\n\
    \    local signs_sum\n    local signs_product\n    local signs_product2\n    local\
    \ signs_product3\n    local signs_product4\n    local signs_product5\n    local\
    \ signs_product6\n    local signs_product7\n    local signs_product8\n    local\
    \ signs_product9\n    local signs_product10\n    local signs_product11\n    local\
    \ signs_product12\n    local signs_product13\n    local signs_product14\n    local\
    \ signs_product15\n    local signs_product16\n    local signs_product17\n    local\
    \ signs_product18\n    local signs_product19\n    local signs_product20\n    local\
    \ signs_product21\n    local signs_product22\n    local signs_product23\n    local\
    \ signs_product24\n    local signs_product25\n    local signs_product26\n    local\
    \ signs_product27\n    local signs_product28\n    local signs_product29\n    local\
    \ signs_product30\n    local signs_product31\n    local signs_product32\n    local\
    \ signs_product33\n    local signs_product34\n    local signs_product35\n    local\
    \ signs_product36\n    local signs_product37\n    local signs_product38\n    local\
    \ signs_product39\n    local signs_product40\n    local signs_product41\n    local\
    \ signs_product42\n    local signs_product43\n    local signs_product44\n    local\
    \ signs_product45\n    local signs_product46\n    local signs_product47\n    local\
    \ signs_product48\n    local signs_product49\n    local signs_product50\n    local\
    \ signs_product51\n    local signs_product52\n    local signs_product53\n    local\
    \ signs_product54\n    local signs_product55\n    local signs_product56\n    local\
    \ signs_product57\n    local signs_product58\n    local signs_product59\n    local\
    \ signs_product60\n    local signs_product61\n    local signs_product62\n    local\
    \ signs_product63\n    local signs_product64\n    local signs_product65\n    local\
    \ signs_product66\n    local signs_product67\n    local signs_product\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    for x in $arr; do\n        (( sum += sign * x ))\n    \
    \    (( sign *= -1 ))\n    done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\" | sort -n | uniq -c)\n    local sum=0\n    for sign\
    \ in $signs; do\n        sum=$((sum + ${arr[$((${#arr[@]} - 1))]} * $sign))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpj_3hvpjv.sh: line 20: sum + 1 2 2 -4 * 1: syntax error in expression
    (error token is "2 2 -4 * 1")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[i]}\n\
    \        if [[ ${elem} =~ ^-?[0-9]+$ ]]; then\n            sum=$(( sum + ${elem}\
    \ * sign ))\n            sign=$(( sign * -1 ))\n        else\n            sum=$((\
    \ sum + ${elem} ))\n        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp22znfga_.sh: line 25: sum + 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local sign\n    local sum=0\n    local i\n    local j\n \
    \   local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local product=1\n  local i\n  local j\n  local signs\n  local\
    \ signs_len\n  local signs_product\n  local signs_product2\n  local signs_product3\n\
    \  local signs_product4\n  local signs_product5\n  local signs_product6\n  local\
    \ signs_product7\n  local signs_product8\n  local signs_product9\n  local signs_product10\n\
    \  local signs_product11\n  local signs_product12\n  local signs_product13\n \
    \ local signs_product14\n  local signs_product15\n  local signs_product16\n  local\
    \ signs_product17\n  local signs_product18\n  local signs_product19\n  local signs_product20\n\
    \  local signs_product21\n  local signs_product22\n  local signs_product23\n \
    \ local signs_product24\n  local signs_product25\n  local signs_product26\n  local\
    \ signs_product27\n  local signs_product28\n  local signs_product29\n  local signs_product30\n\
    \  local signs_product31\n  local signs_product32\n  local signs_product33\n \
    \ local signs_product34\n  local signs_product35\n  local signs_product36\n  local\
    \ signs_product37\n  local signs_product38\n  local signs_product39\n  local signs_product40\n\
    \  local signs_product41\n  local signs_product42\n  local signs_product43\n \
    \ local signs_product44\n  local signs_product45\n  local signs_product46\n  local\
    \ signs_product47\n  local signs_product48\n  local signs_product49\n  local signs_product50\n\
    \  local signs_product51\n  local signs_product52\n  local signs_product53\n \
    \ local signs_product54\n  local signs_product55\n  local signs_product56\n  local\
    \ signs_product57\n  local signs_product58\n  local signs_product59\n  local signs_product60\n\
    \  local signs_product61\n  local signs_product62\n  local signs_product63\n \
    \ local signs_product64\n  local signs_product65\n  local signs_product66\n  local\
    \ signs_product67\n  local signs_\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    local j\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sum=$((sum+${arr[i]}*sign))\n        sign=$((sign*-1))\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5b7sjumu.sh: line 22: sum+1 2 2 -4*sign: syntax error in expression
    (error token is "2 2 -4*sign")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    local product=1\n    local i\n    local j\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        (( sign *= -1 ))\n        (( product *= sign\
    \ ))\n        (( sum += arr[i] * product ))\n    done\n    echo \"$sum\"\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3zih3tj_.sh: line 25: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  for i in $arr; do\n    signs=$((signs * $i))\n \
    \ done\n  for i in $arr; do\n    sum=$((sum + $i * $signs))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    sum=$((sum + $sign*$i))\n\
    \    sign=$((sign*-1))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=0\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n    \
    \    local val=${arr[i]}\n        if [[ ${val} -eq 0 ]]; then\n            signs=0\n\
    \        elif [[ ${val} -eq -1 ]]; then\n            signs=1\n        elif [[\
    \ ${val} -eq 1 ]]; then\n            signs=-1\n        else\n            echo\
    \ \"Invalid input: ${arr[i]}\"\n            exit 1\n        fi\n        sum=$((sum\
    \ + signs * val))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt2h8t0jx.sh: line 22: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpt2h8t0jx.sh: line 24: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpt2h8t0jx.sh: line 26: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n \
    \   signs+=(\"$i\")\n    product*=\"$i\"\n  done\n  for i in \"${signs[@]}\";\
    \ do\n    sum+=\"$i\"\n  done\n  if [ -z \"$sum\" ]; then\n    sum=\"None\"\n\
    \  fi\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpy5_i2tj4.sh: line 23: product*=1 2 2 -4: command not found

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=()\n\
    \    local sign\n    local sum=0\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local product\n    local productsign\n  \
    \  local productsigns\n    local productsign\n    local productsigns\n    local\
    \ productsign\n    local productsigns\n    local productsign\n    local productsigns\n\
    \    local productsign\n    local productsigns\n    local productsign\n    local\
    \ productsigns\n    local productsign\n    local productsigns\n    local productsign\n\
    \    local productsigns\n    local productsign\n    local productsigns\n    local\
    \ productsign\n    local productsigns\n    local productsign\n    local productsigns\n\
    \    local productsign\n    local productsigns\n    local productsign\n    local\
    \ productsigns\n    local productsign\n    local productsigns\n    local productsign\n\
    \    local productsigns\n    local productsign\n    local productsigns\n    local\
    \ productsign\n    local productsigns\n    local productsign\n    local productsigns\n\
    \    local productsign\n    local productsigns\n    local productsign\n    local\
    \ productsigns\n    local productsign\n    local productsigns\n    local productsign\n\
    \    local productsigns\n    local productsign\n    local productsigns\n    local\
    \ productsign\n    local productsigns\n    local productsign\n    local productsigns\n\
    \    local productsign\n    local productsigns\n    local productsign\n    local\
    \ productsigns\n    local productsign\n    local productsigns\n    local productsign\n\
    \    local productsigns\n    local productsign\n    local productsigns\n    local\
    \ productsign\n    local productsigns\n    local productsign\n    local productsigns\n\
    \    local productsign\n    local productsigns\n    local productsign\n    local\
    \ productsigns\n    local productsign\n    local productsigns\n    local productsign\n\
    \    local productsigns\n    local productsign\n    local productsigns\n    local\
    \ productsign\n    local productsigns\n    local productsign\n    local productsigns\n\
    \    local productsign\n    local productsigns\n    local productsign\n    local\
    \ productsigns\n    local productsign\n    local productsigns\n    local productsign\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\" | sort -n | uniq -d)\n    local signs_arr=$(echo $signs\
    \ | tr \" \" \"\\n\" | sort -n | uniq)\n    local sum=0\n    local product=1\n\
    \    for sign in $signs_arr; do\n        sum=$((sum + $sign * $product))\n   \
    \     product=$((product * $sign))\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $2}')\n  local\
    \ signs_sum=$(echo \"$signs\" | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print\
    \ $1}')\n  local signs_product=$(echo \"$signs\" | tr \" \" \"\\n\" | sort -n\
    \ | uniq -c | awk '{print $2}')\n  local signs_product=$(echo \"$signs_product\"\
    \ | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $1}')\n  local signs_product=$(echo\
    \ \"$signs_product\" | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $2}')\n\
    \  local signs_product=$(echo \"$signs_product\" | tr \" \" \"\\n\" | sort -n\
    \ | uniq -c | awk '{print $1}')\n  local signs_product=$(echo \"$signs_product\"\
    \ | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $2}')\n  local signs_product=$(echo\
    \ \"$signs_product\" | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $1}')\n\
    \  local signs_product=$(echo \"$signs_product\" | tr \" \" \"\\n\" | sort -n\
    \ | uniq -c | awk '{print $2}')\n  local signs_product=$(echo \"$signs_product\"\
    \ | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $1}')\n  local signs_product=$(echo\
    \ \"$signs_product\" | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $2}')\n\
    \  local signs_product=$(echo \"$signs_product\" | tr \" \" \"\\n\" | sort -n\
    \ | uniq -c | awk '{print $1}')\n  local signs_product=$(echo \"$signs_product\"\
    \ | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $2}')\n  local signs_product=$(echo\
    \ \"$signs_product\" | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $1}')\n\
    \  local signs_product=$(echo \"$signs_product\" | tr \" \" \"\\n\" | sort -n\
    \ | uniq -c | awk '{print $2}')\n  local signs_product=$(echo \"$signs_product\"\
    \ | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $1}')\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=$((signs\
    \ + $i))\n    product=$((product * $i))\n  done\n  if (( signs > 0 )); then\n\
    \    sum=$((sum + signs * product))\n  fi\n  if (( signs < 0 )); then\n    sum=$((sum\
    \ - signs * product))\n  fi\n  if (( signs == 0 )); then\n    sum=$((sum + product))\n\
    \  fi\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local product\n  local i\n  local j\n  local signs\n  local signs_len\n\
    \  local signs_product\n  local signs_product2\n  local signs_product3\n  local\
    \ signs_product4\n  local signs_product5\n  local signs_product6\n  local signs_product7\n\
    \  local signs_product8\n  local signs_product9\n  local signs_product10\n  local\
    \ signs_product11\n  local signs_product12\n  local signs_product13\n  local signs_product14\n\
    \  local signs_product15\n  local signs_product16\n  local signs_product17\n \
    \ local signs_product18\n  local signs_product19\n  local signs_product20\n  local\
    \ signs_product21\n  local signs_product22\n  local signs_product23\n  local signs_product24\n\
    \  local signs_product25\n  local signs_product26\n  local signs_product27\n \
    \ local signs_product28\n  local signs_product29\n  local signs_product30\n  local\
    \ signs_product31\n  local signs_product32\n  local signs_product33\n  local signs_product34\n\
    \  local signs_product35\n  local signs_product36\n  local signs_product37\n \
    \ local signs_product38\n  local signs_product39\n  local signs_product40\n  local\
    \ signs_product41\n  local signs_product42\n  local signs_product43\n  local signs_product44\n\
    \  local signs_product45\n  local signs_product46\n  local signs_product47\n \
    \ local signs_product48\n  local signs_product49\n  local signs_product50\n  local\
    \ signs_product51\n  local signs_product52\n  local signs_product53\n  local signs_product54\n\
    \  local signs_product55\n  local signs_product56\n  local signs_product57\n \
    \ local signs_product58\n  local signs_product59\n  local signs_product60\n  local\
    \ signs_product61\n  local signs_product62\n  local signs_product63\n  local signs_product64\n\
    \  local signs_product65\n  local signs_product66\n  local signs_product67\n \
    \ local signs_product68\n\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    signs=$((signs * $i))\n    product=$((product * $i))\n  done\n  sum=$((signs\
    \ * product))\n  if (( signs == 0 )); then\n    sum=$((sum + product))\n  fi\n\
    \  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg7jvm5es.sh: line 22: signs * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\n\
    \  local sum=0\n  local product=1\n  local i\n  local j\n  local sign\n  local\
    \ signs\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        signs=$((signs+${arr[i]}))\n        product=$((product*${arr[i]}))\n\
    \    done\n    sum=$((signs*product))\n    if [ -z \"$sum\" ]; then\n        sum=0\n\
    \    fi\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp2qsdr79s.sh: line 22: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    (( sum += sign * i ))\n \
    \   (( sign *= -1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    local j\n    for i in $arr; do\n        sum=$((sum\
    \ + $i*$sign))\n        sign=$((sign*-1))\n    done\n    if [ -z \"$arr\" ]; then\n\
    \        echo \"None\"\n    else\n        echo \"$sum\"\n    fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in \"${arr[@]}\"; do\n    (( sum += sign *\
    \ i ))\n    (( sign *= -1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprw9u5cdi.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n     \
    \   (( sign *= (${arr[i]} > 0 ? 1 : -1)))\n        ((sum += sign))\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx3jvl4fl.sh: line 21: ((: sign *= (1 2 2 -4 > 0 ? 1 : -1): missing
    `)'' (error token is "2 2 -4 > 0 ? 1 : -1)")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    if [ \"$i\" -gt 0 ]; then\n\
    \      sum=$((sum + sign*i))\n    fi\n    sign=$((sign*-1))\n  done\n  echo \"\
    $sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local product=1\n  local i\n  for i in $arr; do\n    sign=$((sign*i))\n\
    \    product=$((product*sign))\n    sum=$((sum+sign*i))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    (( sign *= (${i} == 0 ? 1\
    \ : -1)))\n    (( sum += sign))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    sum=$((sum + $i*$sign))\n\
    \    sign=$((sign*-1))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n  local j\n  local sign\n  local\
    \ signs\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    signs=\"${signs} ${i}\"\n  done\n  signs=\"${signs// / }\"\n  for i in \"\
    ${arr[@]}\"; do\n    product=$((product * ${i}))\n  done\n  sum=$((${product}\
    \ * ${signs}))\n  echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyuotftvt.sh: line 26: product * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=()\n\
    \    local sum=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        signs+=(${arr[i]})\n        ((product*=${arr[i]}))\n    done\n\
    \    for ((i=0; i<${#signs[@]}; i++)); do\n        ((sum+=${signs[i]}))\n    done\n\
    \    echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpoxaty3bu.sh: line 23: ((: product*=1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    local sign\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        sign=${arr[$i]}\n        if (( sign )); then\n          \
    \  signs+=1\n        fi\n        sum+=${sign}\n    done\n    if (( signs > 0 ));\
    \ then\n        sum=$(( sum * signs ))\n    fi\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpto47x6be.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        local sign=${signs:$i:1}\n        local num=${arr[$i]}\n\
    \        if (( sign == 0 )) ; then\n            sum=$(( sum + num ))\n       \
    \ elif (( sign == 1 )) ; then\n            sum=$(( sum - num ))\n        elif\
    \ (( sign == -1 )) ; then\n            product=$(( product * num ))\n        fi\n\
    \    done\n    if (( sum == 0 )) ; then\n        echo \"None\"\n    else\n   \
    \     echo \"$sum * $product\"\n    fi\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmrn_t2oy.sh: line 25: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  for i in $arr; do\n    signs=$((signs * $i))\n \
    \   sum=$((sum + $i))\n  done\n  echo $((sum * signs))\n}\n\ncandidate() {\n \
    \   prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    local val=${arr[i]}\n    local sign=${val}\n    product=$((product*sign))\n\
    \    sign=$((sign*-1))\n    sum=$((sum+product))\n  done\n  echo \"$sum\"\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxv7ngoli.sh: line 24: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n  local signs_arr=()\n  local signs_sum=0\n  local\
    \ signs_product=1\n  local signs_signs=0\n  local signs_products=0\n  local signs_products_signs=0\n\
    \  local signs_products_signs_sum=0\n  local signs_products_signs_product=1\n\
    \  local signs_products_signs_products=0\n  local signs_products_signs_products_signs=0\n\
    \  local signs_products_signs_products_signs_sum=0\n  local signs_products_signs_products_signs_product=1\n\
    \  local signs_products_signs_products_signs_products=0\n  local signs_products_signs_products_signs_products_signs=0\n\
    \  local signs_products_signs_products_signs_products_signs_sum=0\n  local signs_products_signs_products_signs_products_signs_product=1\n\
    \  local signs_products_signs_products_signs_products_signs_products=0\n  local\
    \ signs_products_signs_products_signs_products_signs_products_signs=0\n  local\
    \ signs_products_signs_products_signs_products_signs_products_signs_sum=0\n  local\
    \ signs_products_signs_products_signs_products_signs_products_signs_product=1\n\
    \  local signs_products_signs_products_signs_products_signs_products_signs_products=0\n\
    \  local signs_products_signs_products_signs_products_signs_products_signs_products_signs=0\n\
    \  local signs_products_signs_products_signs_products_signs_products_signs_products_signs_sum=0\n\
    \  local signs_products_signs_products_signs_products_signs_products_signs_products_signs_product=1\n\
    \  local signs_products_signs_products_signs_products_signs_products_signs_products_signs_products=0\n\
    \  local signs_products_signs_products_signs_products_signs_products_signs_products_signs_products_signs=0\n\
    \  local signs_products_signs_products_signs_products_signs_products_signs_products_signs_products_signs_sum=0\n\
    \  local signs_products_signs_products_signs_products_\n}\n\ncandidate() {\n \
    \   prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      sum=$((sum+i))\n      sign=$((sign*-1))\n\
    \    else\n      product=$((product*sign))\n    fi\n  done\n  echo $((product*sum))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        signs=$((signs+${arr[i]}))\n        product=$((product*${arr[i]}))\n\
    \    done\n    sum=$((signs*product))\n    if [[ ${#arr[@]} -gt 0 ]]; then\n \
    \       sum=$((sum+${arr[0]}))\n    fi\n    echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp8m7ew_u.sh: line 22: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  local j\n  local sign\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    sign=${arr[i]}\n    signs+=(\"$sign\")\n  done\n\
    \  for ((i=0; i<${#arr[@]}; i++)); do\n    sign=${arr[i]}\n    product=$((product*sign))\n\
    \  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sign=${arr[i]}\n    sum=$((sum+sign*product))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpx92fziz0.sh: line 29: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=$((signs+$i))\n\
    \    product=$((product*$i))\n  done\n  sum=$((signs*product))\n  if (( sum ==\
    \ 0 )); then\n    sum=1\n  fi\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | sed 's/ /\\n/g' | awk '{print $1}')\n    local sum=0\n    for sign in\
    \ $signs; do\n        sum=$((sum + $sign))\n    done\n    echo $sum\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      signs+=1\n      sum+=${i}\n    elif\
    \ [[ $i =~ ^-?[0-9]+\\.[0-9]+$ ]]; then\n      signs+=2\n      sum+=${i}\n   \
    \ elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      signs+=3\n      sum+=${i}\n\
    \    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      signs+=4\n\
    \      sum+=${i}\n    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$\
    \ ]]; then\n      signs+=5\n      sum+=${i}\n    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      signs+=6\n      sum+=${i}\n\
    \    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$\
    \ ]]; then\n      signs+=7\n      sum+=${i}\n    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      signs+=8\n\
    \      sum+=${i}\n    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      signs+=9\n      sum+=${i}\n\
    \    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      signs+=10\n      sum+=${i}\n    elif\
    \ [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+$ ]]; then\n      signs+=11\n      sum+=${i}\n    elif [[ $i =~\
    \ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+$ ]]; then\n      signs+=12\n      sum+=${i}\n    elif [[ $i =~\
    \ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      sign\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfmf02tcr.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpfmf02tcr.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local sign\n    local sum=0\n    local i\n    local j\n \
    \   local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n    \
    \    signs=$((signs+${arr[i]}))\n    done\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sum=$((sum+${arr[i]}*signs))\n    done\n    echo \"$sum\"\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpripzwbh9.sh: line 21: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sign\n    local sign\n    local sign\n    local sum=0\n    local\
    \ i\n    local j\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs\n\
    \    local sign\n    local sum\n    local i\n    local j\n    local result\n \
    \   signs=$(echo \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n    for ((i=0;\
    \ i<${#signs[@]}; i++)); do\n        sign=${signs[$i]}\n        sum=0\n      \
    \  for ((j=0; j<${#arr[@]}; j++)); do\n            if [[ ${arr[$j]} -eq \"$sign\"\
    \ ]]; then\n                sum=$((sum+j))\n            fi\n        done\n   \
    \     result=$((result+sum*sign))\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr9nktxym.sh: line 28: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    signs=$((signs * $i))\n    product=$((product * $i))\n  done\n  sum=$((signs\
    \ * product))\n  if (( sum == 0 )); then\n    return 0\n  else\n    return $sum\n\
    \  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2_zmkz7u.sh: line 22: signs * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sign\n    local sum\n    local i\n    local j\n    local product\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign\n    for sign in $arr; do\n        (( sum += sign * $sign ))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  local j\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sum=0\n    local product=1\n    local i\n    local sign\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n        if (( sign )); then\n\
    \            signs+=(\"$sign\")\n        fi\n    done\n    for ((i=0; i<${#signs[@]};\
    \ i++)); do\n        sign=${signs[i]}\n        if (( sign )); then\n         \
    \   product*=$sign\n        fi\n    done\n    sum=$(( product ))\n    if (( sum\
    \ )); then\n        echo \"$sum\"\n    else\n        echo \"None\"\n    fi\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp279puw5s.sh: line 24: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local product=1\n    for (( i=0; i<${#arr[@]}; i++ ));\
    \ do\n        signs=$(( signs * ${arr[i]} ))\n        sum=$(( sum + ${arr[i]}\
    \ * product ))\n        product=$(( product * ${arr[i]} ))\n    done\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9_s_epwr.sh: line 21: signs * 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[i]}\n\
    \        if [[ ${elem} -eq -1 ]]; then\n            sign=0\n        elif [[ ${elem}\
    \ -eq 1 ]]; then\n            sign=1\n        else\n            sum=$(( sum +\
    \ sign * elem ))\n        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8iknoid8.sh: line 21: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp8iknoid8.sh: line 23: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp8iknoid8.sh: line 26: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  signs=$(echo \"$arr\" | tr \" \" \"\\\
    n\" | sort -n)\n  sign=$(echo \"$signs\" | head -1)\n  sum=0\n  for i in $(seq\
    \ 0 $((${#arr[@]} - 1))); do\n    sum=$((sum + ${arr[i]} * ${sign}))\n    sign=$(echo\
    \ \"$signs\" | sed -n \"${i}p\")\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk__r7p6y.sh: line 25: sum + 1 2 2 -4 * -4: syntax error in expression
    (error token is "2 2 -4 * -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  local j\n  local sign\n  local signs\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    signs=0\n    for ((j=0; j<${#arr[@]}; j++)); do\n\
    \      if [[ ${arr[j]} -eq ${arr[i]} ]]; then\n        signs=$((signs+1))\n  \
    \    fi\n    done\n    signs=$((signs*${arr[i]}))\n    sum=$((sum+signs))\n  done\n\
    \  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuxnoa4vr.sh: line 26: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpuxnoa4vr.sh: line 30: signs*1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        signs=$((\
    \ signs * ${arr[$i]} ))\n        sum=$(( sum + ${arr[$i]} ))\n    done\n    if\
    \ [ -z \"$arr\" ]; then\n        echo \"None\"\n    else\n        echo \"$(( signs\
    \ * sum ))\"\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmptw2th_1d.sh: line 20: signs * 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    local j\n    local signs\n    local signs_len\n\
    \    local signs_prod\n    local signs_prod_len\n    local signs_prod_len2\n \
    \   local signs_prod_len3\n    local signs_prod_len4\n    local signs_prod_len5\n\
    \    local signs_prod_len6\n    local signs_prod_len7\n    local signs_prod_len8\n\
    \    local signs_prod_len9\n    local signs_prod_len10\n    local signs_prod_len11\n\
    \    local signs_prod_len12\n    local signs_prod_len13\n    local signs_prod_len14\n\
    \    local signs_prod_len15\n    local signs_prod_len16\n    local signs_prod_len17\n\
    \    local signs_prod_len18\n    local signs_prod_len19\n    local signs_prod_len20\n\
    \    local signs_prod_len21\n    local signs_prod_len22\n    local signs_prod_len23\n\
    \    local signs_prod_len24\n    local signs_prod_len25\n    local signs_prod_len26\n\
    \    local signs_prod_len27\n    local signs_prod_len28\n    local signs_prod_len29\n\
    \    local signs_prod_len30\n    local signs_prod_len31\n    local signs_prod_len32\n\
    \    local signs_prod_len33\n    local signs_prod_len34\n    local signs_prod_len35\n\
    \    local signs_prod_len36\n    local signs_prod_len37\n    local signs_prod_len38\n\
    \    local signs_prod_len39\n    local signs_prod_len40\n    local signs_prod_len41\n\
    \    local signs_prod_len42\n    local signs_prod_len43\n    local signs_prod_len44\n\
    \    local signs_prod_len45\n    local signs_prod_len46\n    local signs_prod_len47\n\
    \    local signs_prod_len48\n    local signs_prod_len49\n    local signs_prod_len50\n\
    \    local signs_prod_len51\n    local signs_prod_len52\n    local signs_prod_len53\n\
    \    local signs_prod_len54\n    local signs_prod_len55\n    local signs_prod_len56\n\
    \    local signs_prod_len57\n    local signs_prod_len58\n    local signs_prod_len59\n\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    local val=${arr[i]}\n\
    \    if [[ ${val} -gt 0 ]]; then\n      sum=$((sum + sign*val))\n    fi\n    sign=$((sign*-1))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpaaqvb5kp.sh: line 22: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local product\n   \
    \ local product\n    local product\n    local product\n    local \n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n     \
    \   if [[ ${arr[i]} -gt 0 ]]; then\n            sum=$((sum+sign*${arr[i]}))\n\
    \        fi\n        sign=$((sign*-1))\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7iqrfz3q.sh: line 21: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local product=1\n  local i\n  for i in $arr; do\n    sign=$((sign\
    \ * $i))\n    product=$((product * sign))\n    sum=$((sum + sign * $i))\n  done\n\
    \  if (( sum == 0 )); then\n    return 0\n  else\n    return $((product))\n  fi\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    sum=$((sum + $i*$sign))\n\
    \    sign=$((sign*-1))\n  done\n  if (( ${#arr} > 0 )); then\n    echo $sum\n\
    \  else\n    echo $sum\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sign\n    local sign\n    local sum=0\n    local i\n    local j\n \
    \   local k\n    local m\n    local n\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local sum=0\n    for sign in ${arr[*]}; do\n        ((signs+=sign))\n\
    \    done\n    for sign in ${arr[*]}; do\n        ((sum+=sign*signs))\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n    local product\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local sum\n    local product\n    local i\n\
    \    local j\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n    local product\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local sum\n    local product\n    local i\n\
    \    local j\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n    local product\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local sum\n    local product\n    local i\n\
    \    local j\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local i\n    local j\n    local sign\n\
    \    local signsCount\n    local signsCount2\n    local signsCount3\n    local\
    \ signsCount4\n    local signsCount5\n    local signsCount6\n    local signsCount7\n\
    \    local signsCount8\n    local signsCount9\n    local signsCount10\n    local\
    \ signsCount11\n    local signsCount12\n    local signsCount13\n    local signsCount14\n\
    \    local signsCount15\n    local signsCount16\n    local signsCount17\n    local\
    \ signsCount18\n    local signsCount19\n    local signsCount20\n    local signsCount21\n\
    \    local signsCount22\n    local signsCount23\n    local signsCount24\n    local\
    \ signsCount25\n    local signsCount26\n    local signsCount27\n    local signsCount28\n\
    \    local signsCount29\n    local signsCount30\n    local signsCount31\n    local\
    \ signsCount32\n    local signsCount33\n    local signsCount34\n    local signsCount35\n\
    \    local signsCount36\n    local signsCount37\n    local signsCount38\n    local\
    \ signsCount39\n    local signsCount40\n    local signsCount41\n    local signsCount42\n\
    \    local signsCount43\n    local signsCount44\n    local signsCount45\n    local\
    \ signsCount46\n    local signsCount47\n    local signsCount48\n    local signsCount49\n\
    \    local signsCount50\n    local signsCount51\n    local signsCount52\n    local\
    \ signsCount53\n    local signsCount54\n    local signsCount55\n    local signsCount56\n\
    \    local signsCount57\n    local signsCount58\n    local signsCount59\n    local\
    \ signsCount60\n    local signsCount61\n    local signsCount62\n    local signsCount63\n\
    \    local signsCount64\n    local signsCount65\n    local signsCount66\n    local\
    \ signsCount67\n    local signsCount68\n    local \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  for i in \"${arr[@]}\"; do\n    signs=$((signs\
    \ + $i))\n  done\n  for i in \"${arr[@]}\"; do\n    sum=$((sum + $i * $signs))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpwl13766j.sh: line 21: signs + 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    (( sum += sign * i ))\n  \
    \  (( sign *= -1 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    local val=${arr[i]}\n\
    \    if [[ ${val} -eq 0 ]]; then\n      continue\n    fi\n    local sign=${sign}\n\
    \    local val=${val}\n    local sign=${sign}\n    local val=${val}\n    local\
    \ sign=${sign}\n    local val=${val}\n    local sign=${sign}\n    local val=${val}\n\
    \    local sign=${sign}\n    local val=${val}\n    local sign=${sign}\n    local\
    \ val=${val}\n    local sign=${sign}\n    local val=${val}\n    local sign=${sign}\n\
    \    local val=${val}\n    local sign=${sign}\n    local val=${val}\n    local\
    \ sign=${sign}\n    local val=${val}\n    local sign=${sign}\n    local val=${val}\n\
    \    local sign=${sign}\n    local val=${val}\n    local sign=${sign}\n    local\
    \ val=${val}\n    local sign=${sign}\n    local val=${val}\n    local sign=${sign}\n\
    \    local val=${val}\n    local sign=${sign}\n    local val=${val}\n    local\
    \ sign=${sign}\n    local val=${val}\n    local sign=${sign}\n    local val=${val}\n\
    \    local sign=${sign}\n    local val=${val}\n    local sign=${sign}\n    local\
    \ val=${val}\n    local sign=${sign}\n    local val=${val}\n    local sign=${sign}\n\
    \    local val=${val}\n    local sign=${sign}\n    local val=${val}\n    local\
    \ sign=${sign}\n    local val=${val}\n    local sign=${sign}\n    local val=${val}\n\
    \    local sign=${sign}\n    local val=${val}\n    local sign=${sign}\n    local\
    \ val=${val}\n    local sign=${sign}\n    local val=${val}\n    local sign=${sign}\n\
    \    local val=${val}\n    local sign=${sign}\n    local val=${val}\n    local\
    \ sign=${sign}\n    local val=${val}\n    local sign=${sign}\n    local val=${val}\n\
    \    local sign=${sign}\n\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpyxiapz2o.sh: line 91: syntax error near unexpected token `}''

    /tmp/tmpyxiapz2o.sh: line 91: `}''

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  local j\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    signs=$((signs + $i))\n  done\n  for i in \"${arr[@]}\"; do\n    product=$((product\
    \ * $i))\n  done\n  sum=$((signs * product))\n  if (( signs == 0 )); then\n  \
    \  sum=0\n  fi\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpkq1on_u8.sh: line 22: signs + 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  local j\n  local signs\n  local signs_sum\n  local\
    \ signs_product\n  local signs_product2\n  local signs_product3\n  local signs_product4\n\
    \  local signs_product5\n  local signs_product6\n  local signs_product7\n  local\
    \ signs_product8\n  local signs_product9\n  local signs_product10\n  local signs_product11\n\
    \  local signs_product12\n  local signs_product13\n  local signs_product14\n \
    \ local signs_product15\n  local signs_product16\n  local signs_product17\n  local\
    \ signs_product18\n  local signs_product19\n  local signs_product20\n  local signs_product21\n\
    \  local signs_product22\n  local signs_product23\n  local signs_product24\n \
    \ local signs_product25\n  local signs_product26\n  local signs_product27\n  local\
    \ signs_product28\n  local signs_product29\n  local signs_product30\n  local signs_product31\n\
    \  local signs_product32\n  local signs_product33\n  local signs_product34\n \
    \ local signs_product35\n  local signs_product36\n  local signs_product37\n  local\
    \ signs_product38\n  local signs_product39\n  local signs_product40\n  local signs_product41\n\
    \  local signs_product42\n  local signs_product43\n  local signs_product44\n \
    \ local signs_product45\n  local signs_product46\n  local signs_product47\n  local\
    \ signs_product48\n  local signs_product49\n  local signs_product50\n  local signs_product51\n\
    \  local signs_product52\n  local signs_product53\n  local signs_product54\n \
    \ local signs_product55\n  local signs_product56\n  local signs_product57\n  local\
    \ signs_product58\n  local signs_product59\n  local signs_product60\n  local signs_product61\n\
    \  local signs_product62\n  local signs_product63\n  local signs_product64\n \
    \ local signs_product65\n  local signs_product66\n  local signs_product67\n  local\
    \ signs_product68\n  local signs_\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs=$((signs + ${arr[i]}))\n    product=$((product * ${arr[i]}))\n\
    \  done\n  sum=$((signs * product))\n  echo \"$sum\"\n}\n\ncandidate() {\n   \
    \ prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf8798gpw.sh: line 22: signs + 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=$((signs\
    \ + $i))\n    product=$((product * $i))\n  done\n  sum=$((signs * product))\n\
    \  if [[ $sum == 0 ]]; then\n    sum=1\n  fi\n  echo $sum\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      sum=$((sum + i))\n      product=$((product\
    \ * sign))\n    else\n      sign=$((sign * -1))\n    fi\n  done\n  if [[ $sum\
    \ -gt 0 ]]; then\n    echo \"$sum\"\n  else\n    echo \"None\"\n  fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local product=1\n    local i\n    local j\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        (( sign *= -1 ))\n        (( product *= sign))\n\
    \        (( sum += arr[i] * product))\n    done\n    echo $sum\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfrutudb2.sh: line 25: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local i\n    local sum=0\n    local product=1\n    local\
    \ sign\n    local signs\n    local sign\n    local signs\n    local sign\n   \
    \ local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    \n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n \
    \   signs+=(\"$i\")\n  done\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    product=$((product\
    \ * ${signs[i]}))\n    sum=$((sum + ${arr[i]}))\n  done\n  echo \"$sum\"\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpucqdgyqu.sh: line 25: product * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sign\n    local sum=0\n    local i\n    local j\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n        if [[ $sign -eq -1\
    \ ]]; then\n            signs=\"$signs -1\"\n        elif [[ $sign -eq 1 ]]; then\n\
    \            signs=\"$signs 1\"\n        else\n            signs=\"$signs 0\"\n\
    \        fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n\
    \        sum=$((sum+sign*${signs}))\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqfislh24.sh: line 24: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpqfislh24.sh: line 26: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpqfislh24.sh: line 34: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sum=0\n    local product=1\n    local i\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        signs+=(\"${arr[i]}\")\n        product*=${arr[i]}\n   \
    \ done\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        sum+=(${signs[i]}*${arr[i]})\n\
    \    done\n    echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpi87ylf8r.sh: line 23: product*=1: command not found

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local product=1\n  local i\n\n  for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n    signs=$(( signs * ${arr[i]} ))\n    product=$(( product * ${arr[i]}\
    \ ))\n  done\n\n  sum=$(( signs * product ))\n\n  if [[ ${#arr[@]} -gt 0 ]]; then\n\
    \    sum=$(( sum + ${arr[0]} ))\n  fi\n\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps8zop0pd.sh: line 23: signs * 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local product=1\n  local i\n  for i in $arr; do\n    sign=$((sign\
    \ * i))\n    product=$((product * sign))\n    sum=$((sum + sign * i))\n  done\n\
    \  echo $sum\n  echo $product\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    sum=$((sum + $i*$sign))\n\
    \    sign=$((sign*-1))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=0\n    local i\n    local j\n    local sign\n    local sign1\n\
    \    local sign2\n    local sign3\n    local sign4\n    local sign5\n    local\
    \ sign6\n    local sign7\n    local sign8\n    local sign9\n    local sign10\n\
    \    local sign11\n    local sign12\n    local sign13\n    local sign14\n    local\
    \ sign15\n    local sign16\n    local sign17\n    local sign18\n    local sign19\n\
    \    local sign20\n    local sign21\n    local sign22\n    local sign23\n    local\
    \ sign24\n    local sign25\n    local sign26\n    local sign27\n    local sign28\n\
    \    local sign29\n    local sign30\n    local sign31\n    local sign32\n    local\
    \ sign33\n    local sign34\n    local sign35\n    local sign36\n    local sign37\n\
    \    local sign38\n    local sign39\n    local sign40\n    local sign41\n    local\
    \ sign42\n    local sign43\n    local sign44\n    local sign45\n    local sign46\n\
    \    local sign47\n    local sign48\n    local sign49\n    local sign50\n    local\
    \ sign51\n    local sign52\n    local sign53\n    local sign54\n    local sign55\n\
    \    local sign56\n    local sign57\n    local sign58\n    local sign59\n    local\
    \ sign60\n    local sign61\n    local sign62\n    local sign63\n    local sign64\n\
    \    local sign65\n    local sign66\n    local sign67\n    local sign68\n    local\
    \ sign69\n    local sign70\n    local sign71\n    local sign72\n    local sign73\n\
    \    local sign74\n    local sign75\n    local sign76\n    local sign77\n    local\
    \ sign78\n    local sign79\n    local sign80\n    local sign81\n    local sign82\n\
    \    local sign83\n    local sign84\n    local sign85\n    local sign86\n    local\
    \ sign87\n    local sign88\n    local sign89\n    local sign90\n    local sign91\n\
    \    local sign92\n    local sign93\n    local sign94\n    local sign95\n    local\
    \ sign96\n    local sign\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$2\n\
    \  local sum=0\n  local product=1\n  local i\n  local sign\n  for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n    sign=${signs:$i:1}\n    if [[ ${sign} == -* ]]; then\n     \
    \ product=-$product\n    fi\n    sum=$(( sum + ${arr[i]} * $product ))\n  done\n\
    \  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7yyzq6p2.sh: line 27: sum + 1 2 2 -4 * 1 : syntax error in expression
    (error token is "2 2 -4 * 1 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sum=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local val=${arr[i]}\n\
    \        if [[ $val == -* ]]; then\n            signs=$((signs + 1))\n       \
    \ elif [[ $val == 1 ]]; then\n            signs=$((signs + 1))\n        elif [[\
    \ $val == 0 ]]; then\n            signs=$((signs + 1))\n        else\n       \
    \     signs=$((signs + 1))\n        fi\n        sum=$((sum + val))\n    done\n\
    \    echo \"$((sum * signs))\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpa2dk1tyf.sh: line 30: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs=${arr[i]}\n    product=${product} * ${signs}\n    ((sum+=product))\n\
    \  done\n  echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp8hnjvme0.sh: line 23: 0: command not found

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local sum=0\n    for sign in ${arr}; do\n        if [[ $sign\
    \ == 1 ]]; then\n            signs=$((signs+1))\n        elif [[ $sign == -1 ]];\
    \ then\n            signs=$((signs+1))\n        else\n            signs=$((signs+1))\n\
    \        fi\n    done\n    for sign in ${arr}; do\n        sum=$((sum+signs*sign))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  for i in $arr; do\n    signs=$((signs*$i))\n  done\n\
    \  for i in $arr; do\n    sum=$((sum+$i*$signs))\n  done\n  echo $sum\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  local sign\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    sign=${arr[i]}\n    signs=$((signs*sign))\n    ((sum+=signs))\n  done\n \
    \ echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfrkojkzo.sh: line 23: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  local i\n  for i in $arr; do\n    sign=$(( ${i}\
    \ == ${i} ))\n    signs=$(( signs + sign ))\n    sum=$(( sum + ${i} * signs ))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n    local sum=0\n    for sign in $signs; do\n    \
    \    sum=$((sum + $sign))\n    done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local val=${arr[i]}\n\
    \        if [[ ${val} -gt 0 ]]; then\n            signs=$((signs+1))\n       \
    \ fi\n        sum=$((sum+val))\n    done\n    echo $((signs*sum))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpinhe_4bj.sh: line 21: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpinhe_4bj.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n\n  for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n    signs+=( ${arr[i]} )\n  done\n\n  for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n    product=$(( product * ${signs[i]} ))\n    sum=$(( sum + ${arr[i]}\
    \ * ${signs[i]} ))\n  done\n\n  echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptu15ud23.sh: line 28: sum + 1 2 2 -4 * 1 : syntax error in expression
    (error token is "2 2 -4 * 1 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$2\n\
    \  local sum=0\n  local product=1\n  local i\n  local sign\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=${signs:$i:1}\n    if [[ ${sign} == -* ]]; then\n      product=-${product}\n\
    \    fi\n    sum=$((${sum} + ${arr[i]} * ${product}))\n  done\n  echo \"${sum}\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb3p1h9ka.sh: line 27: 0 + 1 2 2 -4 * 1: syntax error in expression
    (error token is "2 2 -4 * 1")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  for sign in $arr; do\n    signs=$((signs*sign))\n\
    \  done\n  for sign in $arr; do\n    sum=$((sum+signs*sign))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  local j\n  local sum1\n  local sum2\n\
    \  local sum3\n  local product\n  local product1\n  local product2\n  local product3\n\
    \  local sign1\n  local sign2\n  local sign3\n  local sign4\n  local sign5\n \
    \ local sign6\n  local sign7\n  local sign8\n  local sign9\n  local sign10\n \
    \ local sign11\n  local sign12\n  local sign13\n  local sign14\n  local sign15\n\
    \  local sign16\n  local sign17\n  local sign18\n  local sign19\n  local sign20\n\
    \  local sign21\n  local sign22\n  local sign23\n  local sign24\n  local sign25\n\
    \  local sign26\n  local sign27\n  local sign28\n  local sign29\n  local sign30\n\
    \  local sign31\n  local sign32\n  local sign33\n  local sign34\n  local sign35\n\
    \  local sign36\n  local sign37\n  local sign38\n  local sign39\n  local sign40\n\
    \  local sign41\n  local sign42\n  local sign43\n  local sign44\n  local sign45\n\
    \  local sign46\n  local sign47\n  local sign48\n  local sign49\n  local sign50\n\
    \  local sign51\n  local sign52\n  local sign53\n  local sign54\n  local sign55\n\
    \  local sign56\n  local sign57\n  local sign58\n  local sign59\n  local sign60\n\
    \  local sign61\n  local sign62\n  local sign63\n  local sign64\n  local sign65\n\
    \  local sign66\n  local sign67\n  local sign68\n  local sign69\n  local sign70\n\
    \  local sign71\n  local sign72\n  local sign73\n  local sign74\n  local sign75\n\
    \  local sign76\n  local sign77\n  local sign78\n  local sign79\n  local sign80\n\
    \  local sign81\n  local sign82\n  local sign83\n  local sign84\n  local sign85\n\
    \  local sign86\n  local sign87\n  local sign88\n  local sign89\n  local sign90\n\
    \  \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sum=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        local sign=${arr[$i]}\n        if (( sign )); then\n    \
    \        signs=\"${signs} ${sign}\"\n        fi\n    done\n    signs=\"${signs}\
    \ 0\"\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local sign=${arr[$i]}\n\
    \        if (( sign )); then\n            product=${product} * ${sign}\n     \
    \   fi\n    done\n    sum=$((${product} * ${signs}))\n    echo \"${sum}\"\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxf5ygljl.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpxf5ygljl.sh: line 30: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local product=1\n    local i\n    local j\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        signs=$((signs+${arr[i]}))\n        product=$((product*${arr[i]}))\n\
    \    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((${arr[i]} < 0));\
    \ then\n            sum=$((sum+signs))\n        fi\n    done\n    if ((${#arr[@]}\
    \ > 0)); then\n        sum=$((sum+signs))\n    fi\n    echo $((sum*product))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb50yhuuk.sh: line 23: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local i\n\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        local sign=${signs:$i:1}\n        local num=${arr[$i]}\n\
    \        if [[ $sign != \"\" ]]; then\n            product=$((product*sign))\n\
    \        fi\n        sum=$((sum+num))\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplt_952e2.sh: line 28: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | sed 's/ /\\n/g')\n    local sum=0\n    local product=1\n    for sign\
    \ in $signs; do\n        sum=$((sum + sign*product))\n        product=$((product*sign))\n\
    \    done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=()\n  local sign\n  for sign in $arr; do\n    signs+=(\"$sign\"\
    )\n  done\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum+=$((${arr[i]}*${signs[i]}))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpmjil_7ss.sh: line 25: 1 2 2 -4*1: syntax error in expression (error
    token is "2 2 -4*1")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  local i\n  for i in $arr; do\n    sign=$(( $i\
    \ < 0 ))\n    signs=$(( $signs * $sign ))\n    sum=$(( $sum + $i ))\n  done\n\
    \  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n  local sum=0\n  local product=1\n  for sign in $signs;\
    \ do\n    sum=$((sum + $sign * $product))\n    product=$((product * $sign))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  sum=0\n  for i in \"${arr[@]}\"; do\n    sign=$(( ${i}\
    \ == ${i} ))\n    sum=$(( ${sum} * ${sign} ))\n  done\n  echo \"${sum}\"\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm6jwlv2l.sh: line 22: 1 2 2 -4 == 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 == 1 2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    sum=$((sum + $i*sign))\n \
    \   sign=$((sign*-1))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local product\n  local i\n  local j\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        (( sign*=arr[i]\
    \ ))\n        (( sum+=sign ))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg0mjbo1_.sh: line 20: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[$i]}\n\
    \        local sign=${elem:0:1}\n        signs=$((signs*sign))\n        sum=$((sum+elem))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpqavxquq0.sh: line 23: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n  for i in $arr; do\n    local\
    \ sign=$(echo $i | awk '{print ($1 * $2)}')\n    signs=\"$signs $sign\"\n    sum=$((sum\
    \ + sign))\n    product=$((product * sign))\n  done\n  echo \"$sum\"\n  echo \"\
    $product\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=0\n    local i\n    local sign\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        sign=${arr[$i]}\n        if (( sign )); then\n          \
    \  signs+=1\n        fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n  \
    \      sign=${arr[$i]}\n        if (( sign )); then\n            sum+=${sign}\n\
    \        fi\n    done\n    if (( signs > 0 )); then\n        sum=$(( sum * signs\
    \ ))\n    fi\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmplknwcq24.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmplknwcq24.sh: line 29: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=0\n\
    \  local sign\n  local i\n  for i in ${arr[@]}; do\n    sign=$(( ${i} == ${i}\
    \ || ${i} == ${i} && ${i} > 0 ? 1 : -1 ))\n    signs=$(( signs + sign ))\n  done\n\
    \  echo $signs\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    sum=$((sum + $i*sign))\n \
    \   sign=$((sign*-1))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=()\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[i]}\n\
    \        if (( elem < 0 )); then\n            signs+=(-1)\n            elem=$((-elem))\n\
    \        fi\n        signs+=${elem}\n        sum=$(( sum + ${signs[*]} ))\n  \
    \  done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp2q7xabof.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp2q7xabof.sh: line 26: sum + 1 2 2 -4 : syntax error in expression (error
    token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=0\n\
    \  local sign\n  local i\n  local sum=0\n  local product=1\n  local sign\n  local\
    \ signs\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049176
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr | head -n 1)\n  local\
    \ signs_count=$(echo \"$signs\" | wc -w)\n  if [ \"$signs_count\" -eq 0 ]; then\n\
    \    return 0\n  fi\n  local signs_sum=$(echo \"$signs\" | awk '{sum+=$1} END\
    \ {print sum}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_product=$(echo \"$signs\" \n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4gm92tuw.sh: line 40: unexpected EOF while looking for matching
    `)''

    /tmp/tmp4gm92tuw.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    local j\n    local signs\n    local signs_len\n\
    \    local signs_arr\n    local signs_arr_len\n    local signs_arr_i\n    local\
    \ signs_arr_j\n    local signs_arr_sign\n    local signs_arr_signs\n    local\
    \ signs_arr_signs_len\n    local signs_arr_signs_i\n    local signs_arr_signs_j\n\
    \    local signs_arr_signs_sign\n    local signs_arr_signs_signs\n    local signs_arr_signs_signs_len\n\
    \    local signs_arr_signs_signs_i\n    local signs_arr_signs_signs_j\n    local\
    \ signs_arr_signs_signs_sign\n    local signs_arr_signs_signs_signs\n    local\
    \ signs_arr_signs_signs_signs_len\n    local signs_arr_signs_signs_signs_i\n \
    \   local signs_arr_signs_signs_signs_j\n    local signs_arr_signs_signs_signs_sign\n\
    \    local signs_arr_signs_signs_signs_signs\n    local signs_arr_signs_signs_signs_signs_len\n\
    \    local signs_arr_signs_signs_signs_signs_i\n    local signs_arr_signs_signs_signs_signs_j\n\
    \    local signs_arr_signs_signs_signs_signs_sign\n    local signs_arr_signs_signs_signs_signs_signs\n\
    \    local signs_arr_signs_signs_signs_signs_signs_len\n    local signs_arr_signs_signs_signs_signs_signs_i\n\
    \    local signs_arr_signs_signs_signs_signs_signs_j\n    local signs_arr_signs_signs_signs_signs_signs_sign\n\
    \    local signs_arr_signs_signs_signs_signs_signs_signs\n    local signs_arr_signs_signs_signs_signs_signs_signs_len\n\
    \    local signs_arr_signs_signs_signs_signs_signs_signs_i\n    local signs_arr_signs_signs_signs_signs_signs_signs_j\n\
    \    local signs_arr_signs_signs_signs_signs_signs_signs_sign\n    local signs_arr_signs_signs_signs_signs_signs_signs_signs\n\
    \    local signs_arr_signs_signs_\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=()\n  local sign\n  for sign in $(echo $arr | tr \" \" \"\\n\"\
    \ | sort -n | uniq); do\n    signs+=(\"$sign\")\n  done\n  for sign in \"${signs[@]}\"\
    ; do\n    sum=$((sum + $sign * $((${arr#$sign} * ${sign#-}))))\n  done\n  echo\
    \ $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmcf45ig_.sh: line 24: 1 2 2 -4 * 4: syntax error in expression
    (error token is "2 2 -4 * 4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[$i]}\n\
    \        if [[ ${elem} -eq 0 ]]; then\n            continue\n        fi\n    \
    \    local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n        local elem=${elem}\n\
    \        local sign=${sign}\n        local elem=${elem}\n        local sign=${sign}\n\
    \        local elem=${elem}\n        local sign=${sign}\n\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5qcuh7hn.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmp5qcuh7hn.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs+=(\"${arr[i]}\")\n    product*=(\"${arr[i]}\")\n  done\n  for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n    sum+=(${signs[i]})\n  done\n  echo \"${sum}\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpschzyg0l.sh: line 23: syntax error near unexpected token `"${arr[i]}"''

    /tmp/tmpschzyg0l.sh: line 23: `    product*=("${arr[i]}")''

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n    \
    \    signs=$((signs+${arr[i]}))\n    done\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sum=$((sum+${arr[i]}*${signs}))\n    done\n    echo \"$sum\"\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmi1if48x.sh: line 21: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local i\n    local sum=0\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sign=${arr[$i]}\n        if (( sign )); then\n            signs+=${sign}\n\
    \        else\n            signs=0\n        fi\n    done\n    sum=$((${signs}*${#arr[@]}))\n\
    \    if (( ${#arr[@]} )); then\n        sum=$((${sum}+${arr[0]}))\n    fi\n  \
    \  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4axi8hdf.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp4axi8hdf.sh: line 31: 0+1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  local sign\n  local signs\n\n\
    \  for ((i=0; i<${#arr[@]}; i++)); do\n    sign=\"${arr[i]}\"\n    signs+=(\"\
    $sign\")\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sign=\"${arr[i]}\"\
    \n    sign=${sign//-/+}\n    sign=${sign//+/-}\n    product=$((product*sign))\n\
    \  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sign=\"${arr[i]}\"\n    sign=${sign//+/-}\n\
    \    sum=$((sum+sign*product))\n  done\n\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuzryf248.sh: line 33: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$(echo\
    \ $arr | sed 's/ /\\n/g')\n  local sum=0\n  local product=1\n  local sign\n  for\
    \ sign in $signs; do\n    sum=$((sum + $sign*$product))\n    product=$((product*$sign))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local product\n  local i\n  local j\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    signs=\"${signs} ${arr[i]}\"\n  done\n\n  for i in ${arr[@]};\
    \ do\n    product=$((product*${signs%%-*}))\n    signs=\"${signs:0:${#signs}-1}\"\
    \n    sum=$((sum+product))\n  done\n\n  echo \"${sum}\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph6nn0u14.sh: line 27: product* 1 2 2 : syntax error in expression
    (error token is "2 2 ")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    (( sum += sign * i ))\n \
    \   (( sign *= -1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    local i\n    for (( i=0; i<${#arr[@]}; i++ )); do\n   \
    \     (( sign *= ( ${arr[i]} > 0 ) ))\n        (( sum += sign * ${arr[i]} ))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp4f7qygp1.sh: line 21: ((: sign *= ( 1 2 2 -4 > 0 ) : missing `)''
    (error token is "2 2 -4 > 0 ) ")

    /tmp/tmp4f7qygp1.sh: line 22: ((: sum += sign * 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  local j\n  local sign\n  local signs\n\
    \  local product\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n  local productsign\n\
    \  local productsigns\n  local productsign\n  local productsigns\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    signs=$((signs + $i))\n  done\n  for i in \"${arr[@]}\"; do\n    product=$((product\
    \ * $i))\n  done\n  sum=$((signs * product))\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz8cjcgzg.sh: line 22: signs + 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  for i in $arr; do\n    signs=$((signs * $i))\n \
    \ done\n  for i in $arr; do\n    sum=$((sum + $i * $signs))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local product=1\n  local i\n  for i in $arr; do\n    sign=$((sign*i))\n\
    \    product=$((product*sign))\n    sum=$((sum+product))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr | head -n 1)\n  local\
    \ signs_arr=$(echo \"$signs\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr\
    \ | head -n 1)\n  local signs_arr_sum=$(echo \"$signs_arr\" | awk '{sum+=$1} END\
    \ {print sum}')\n  local signs_arr_product=$(echo \"$signs_arr\" | awk '{product*=$1}\
    \ END {print product}')\n  local signs_arr_product=$(echo \"$signs_arr\" | awk\
    \ '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo \"$signs_arr\"\
    \ | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n  local signs_arr_product=$(echo\
    \ \"$signs_arr\" | awk '{product*=$1} END {print product}')\n\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sum=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        local sign=${arr[i]}\n        if (( sign < 0 )); then\n \
    \           signs=\"${signs} -1\"\n        else\n            signs=\"${signs}\
    \ 1\"\n        fi\n        sum=$((sum + sign*product))\n        product=$((product*sign))\n\
    \    done\n    echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpt_z43c_7.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpt_z43c_7.sh: line 28: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  signs=$(echo \"${arr}\" | tr \" \" \"\
    \\n\" | sort -n | uniq -c)\n  for i in \"${!signs[@]}\"; do\n    sign=\"${signs[$i]}\"\
    \n    sum=$(echo \"${arr}\" | sed -n \"s/^${sign}//p\")\n    if [ -z \"$sum\"\
    \ ]; then\n      sum=0\n    fi\n    arr=\"$arr $sign $sum\"\n  done\n  echo \"\
    $arr\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 13: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in \"${arr[@]}\"; do\n    (( sum += sign *\
    \ i ))\n    (( sign *= -1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprw9u5cdi.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049175
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs=$((signs * ${arr[i]}))\n    sum=$((sum + ${arr[i]}))\n  done\n\
    \n  product=$((signs * product))\n\n  if (( ${#arr[@]} > 0 )); then\n    sum=$((sum\
    \ / ${#arr[@]}))\n  fi\n\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyirmqtpf.sh: line 23: signs * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  local j\n  local sign\n  local signs\n  local sign\n\
    \  local product\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local sign\n  local product\n\
    \  local sign\n  local product\n  local sign\n  local product\n  local sign\n\
    \  local product\n  local sign\n  local product\n  local \n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049176
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -u -c)\n  local sum=0\n  local\
    \ product=1\n  for sign in $signs; do\n    sum=$((sum + $sign * $product))\n \
    \   product=$((product * $sign))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660049176
