language: sh
name: HumanEval_77_iscube
results:
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2cb15lty.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmp2cb15lty.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [[ $a -eq 0 ]]; then\n    echo \"true\"\n  else\n    if [[ $a -eq 1 ]]; then\n\
    \      echo \"true\"\n    else\n      if [[ $a -eq 2 ]]; then\n        echo \"\
    true\"\n      else\n        if [[ $a -eq 3 ]]; then\n          echo \"true\"\n\
    \        else\n          if [[ $a -eq 4 ]]; then\n            echo \"true\"\n\
    \          else\n            if [[ $a -eq 5 ]]; then\n              echo \"true\"\
    \n            else\n              if [[ $a -eq 6 ]]; then\n                echo\
    \ \"true\"\n              else\n                if [[ $a -eq 7 ]]; then\n    \
    \              echo \"true\"\n                else\n                  if [[ $a\
    \ -eq 8 ]]; then\n                    echo \"true\"\n                  else\n\
    \                    if [[ $a -eq 9 ]]; then\n                      echo \"true\"\
    \n                    else\n                      if [[ $a -eq 10 ]]; then\n \
    \                       echo \"true\"\n                      else\n          \
    \              if [[ $a -eq 11 ]]; then\n                          echo \"true\"\
    \n                        else\n                          if [[ $a -eq 12 ]];\
    \ then\n                            echo \"true\"\n                          else\n\
    \                            if [[ $a -eq 13 ]]; then\n                      \
    \        echo \"true\"\n                            else\n                   \
    \           if [[ $a -eq 14 ]]; then\n                                echo \"\
    true\"\n                              else\n                                if\
    \ [[ $a -eq 15 ]]; then\n                                  echo \"true\"\n   \
    \                             else\n                                  if [[ $a\
    \ -eq 16 ]]; then\n                                    echo \"true\"\n       \
    \                           else\n                                    if [[ $a\
    \ -eq 17 ]]; then\n                                      echo \"true\"\n     \
    \                               else\n                                      if\
    \ [[ $a -eq 18 ]]; then\n                                        echo \"true\"\
    \n                                      else\n                               \
    \         if [[ $a -eq 19 ]]; then\n                                         \
    \ echo \"true\"\n                                        else\n              \
    \                            if [[ $a -eq 20 ]]; then\n                      \
    \                      echo \"true\"\n                                       \
    \   else\n                                            if [[ $a -eq 21 ]]; then\n\
    \                                              echo \"true\"\n               \
    \                             else\n                                         \
    \     if [[ $a -eq 22 ]]; then\n                                             \
    \   echo \"true\"\n                                              else\n      \
    \                                          if [[ $a -eq 23 ]]; then\n        \
    \                                          echo \"true\"\n                   \
    \                             else\n                                         \
    \         if [[ $a -eq 24 ]]; then\n                                         \
    \           echo \"true\"\n                                                  else\n\
    \                                                    if [[ $a -eq 25 ]]; then\n\
    \                                                      echo \"true\"\n       \
    \                                             else\n                         \
    \                             if [[ $a -eq 26 ]]; then\n                     \
    \                                   echo \"true\"\n                          \
    \                            else\n                                          \
    \              if [[ $a -eq 27 ]]; then\n                                    \
    \                      echo \"true\"\n                                       \
    \                 else\n                                                     \
    \     if [\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq05h7ray.sh: line 107: syntax error near unexpected token `}''

    /tmp/tmpq05h7ray.sh: line 107: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=$(( x*x*x ))\n\tlocal z=$(( x*x*x*x ))\n\tlocal w=$(( x*x*x*x*x ))\n\
    \tlocal cube=$(( x*x*x*x*x*x ))\n\tlocal cube2=$(( x*x*x*x*x*x*x ))\n\tlocal cube3=$((\
    \ x*x*x*x*x*x*x*x ))\n\tlocal cube4=$(( x*x*x*x*x*x*x*x*x ))\n\tlocal cube5=$((\
    \ x*x*x*x*x*x*x*x*x*x ))\n\tlocal cube6=$(( x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal\
    \ cube7=$(( x*x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal cube8=$(( x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ ))\n\tlocal cube9=$(( x*x*x*x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal cube10=$(( x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ ))\n\tlocal cube11=$(( x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal cube12=$((\
    \ x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal cube13=$(( x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ ))\n\tlocal cube14=$(( x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal cube15=$((\
    \ x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal cube16=$(( x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ ))\n\tlocal cube17=$(( x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal\
    \ cube18=$(( x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal cube19=$((\
    \ x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x ))\n\tlocal cube20=$(( x*x*x*x*x*x*x*x*x*\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpiw40ujkq.sh: line 44: unexpected EOF while looking for matching
    `)''

    /tmp/tmpiw40ujkq.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((x*y*z))\n    local cubew=$((x*y*w))\n    local cubez=$((x*z*w))\n  \
    \  local cubeyw=$((y*w*z))\n    local cubeyz=$((y*z*w))\n    local cubexz=$((z*w*x))\n\
    \    local cubeyx=$((y*x*z))\n    local cubezx=$((z*x*y))\n    local cubeyx=$((y*x*w))\n\
    \    local cubezy=$((z*y*x))\n    local cubeyy=$((y*y*z))\n    local cubezy=$((z*y*y))\n\
    \    local cubewx=$((w*x*y))\n    local cubewy=$((w*y*x))\n    local cubewz=$((w*z*x))\n\
    \    local cubeww=$((w*w*x))\n    local cubewwx=$((w*w*x*x))\n    local cubewwy=$((w*w*y*x))\n\
    \    local cubewwz=$((w*w*z*x))\n    local cubewww=$((w*w*w*x))\n    local cubewwxw=$((w*w*w*x*x))\n\
    \    local cubewwyw=$((w*w*w*y*x))\n    local cubewwzw=$((w*w*w*z*x))\n    local\
    \ cubewwww=$((w*w*w*w*x))\n    local cubewwxww=$((w*w*w*w*x*x))\n    local cubewwyww=$((w*w*w*w*y*x))\n\
    \    local cubewwzww=$((w*w*w*w*z*x))\n    local cubewwwwx=$((w*w*w*w*x*x))\n\
    \    local cubewwwwy=$((w*w*w*w*y*x))\n    local cubewwwwz=$((w*w*w*w*z*x))\n\
    \    local cubewwwww=$((w*w*w*w*w*x))\n    local cubewwxwwx=$((w*w*w*w*w*x*x))\n\
    \    local cubewwywwy=\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $a -eq 1 ]\n    then\n\
    \      echo \"true\"\n    elif [ $a -eq 2 ]\n    then\n      echo \"true\"\n \
    \   elif [ $a -eq 3 ]\n    then\n      echo \"true\"\n    elif [ $a -eq 4 ]\n\
    \    then\n      echo \"true\"\n    elif [ $a -eq 5 ]\n    then\n      echo \"\
    true\"\n    elif [ $a -eq 6 ]\n    then\n      echo \"true\"\n    elif [ $a -eq\
    \ 7 ]\n    then\n      echo \"true\"\n    elif [ $a -eq 8 ]\n    then\n      echo\
    \ \"true\"\n    elif [ $a -eq 9 ]\n    then\n      echo \"true\"\n    elif [ $a\
    \ -eq 10 ]\n    then\n      echo \"true\"\n    elif [ $a -eq 11 ]\n    then\n\
    \      echo \"true\"\n    elif [ $a -eq 12 ]\n    then\n      echo \"true\"\n\
    \    elif [ $a -eq 13 ]\n    then\n      echo \"true\"\n    elif [ $a -eq 14 ]\n\
    \    then\n      echo \"true\"\n    elif [ $a -eq 15 ]\n    then\n      echo \"\
    true\"\n    elif [ $a -eq 16 ]\n    then\n      echo \"true\"\n    elif [ $a -eq\
    \ 17 ]\n    then\n      echo \"true\"\n    elif [ $a -eq 18 ]\n    then\n    \
    \  echo \"true\"\n    elif [ $a -eq 19 ]\n    then\n      echo \"true\"\n    elif\
    \ [ $a -eq 20 ]\n    then\n      echo \"true\"\n    elif [ $a -eq 21 ]\n    then\n\
    \      echo \"true\"\n    elif [ $a -eq 22 ]\n    then\n      echo \"true\"\n\
    \    elif [ $a -eq 23 ]\n    then\n      echo \"true\"\n    elif [ $a -eq 24 ]\n\
    \    then\n      echo \"true\"\n    elif [ $a -eq 25 ]\n    then\n      echo \"\
    true\"\n    elif [ $a -eq 26 ]\n    then\n      echo \"true\"\n    elif [ $a -eq\
    \ 27 ]\n    then\n      echo \"true\"\n    elif [ $a -eq 28 ]\n    then\n    \
    \  echo \"true\"\n    elif [ $a -eq 29 ]\n    then\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpucog4rym.sh: line 112: syntax error near unexpected token `}''

    /tmp/tmpucog4rym.sh: line 112: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local x\n    local y\n    local z\n    local cube\n    local cubes\n    local\
    \ cubescount\n    local cubescount2\n    local cubescount3\n    local cubescount4\n\
    \    local cubescount5\n    local cubescount6\n    local cubescount7\n    local\
    \ cubescount8\n    local cubescount9\n    local cubescount10\n    local cubescount11\n\
    \    local cubescount12\n    local cubescount13\n    local cubescount14\n    local\
    \ cubescount15\n    local cubescount16\n    local cubescount17\n    local cubescount18\n\
    \    local cubescount19\n    local cubescount20\n    local cubescount21\n    local\
    \ cubescount22\n    local cubescount23\n    local cubescount24\n    local cubescount25\n\
    \    local cubescount26\n    local cubescount27\n    local cubescount28\n    local\
    \ cubescount29\n    local cubescount30\n    local cubescount31\n    local cubescount32\n\
    \    local cubescount33\n    local cubescount34\n    local cubescount35\n    local\
    \ cubescount36\n    local cubescount37\n    local cubescount38\n    local cubescount39\n\
    \    local cubescount40\n    local cubescount41\n    local cubescount42\n    local\
    \ cubescount43\n    local cubescount44\n    local cubescount45\n    local cubescount46\n\
    \    local cubescount47\n    local cubescount48\n    local cubescount49\n    local\
    \ cubescount50\n    local cubescount51\n    local cubescount52\n    local cubescount53\n\
    \    local cubescount54\n    local cubescount55\n    local cubescount56\n    local\
    \ cubescount57\n    local cubescount58\n    local cubescount59\n    local cubescount60\n\
    \    local cubescount61\n    local cubescount62\n    local cubescount63\n    local\
    \ cubescount64\n    local cubescount65\n    local cubescount66\n    local cubescount67\n\
    \    local cubescount68\n    local cubescount69\n    local cube\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    if [ $number -eq 0 ]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    elif [ $n -eq 1 ]; then\n\
    \        echo \"false\"\n    elif [ $n -ge 0 ] && [ $n -le 180 ]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tlocal\
    \ b=$(( $a * $a * $a ))\n\tlocal c=$(( $a * $a * $a ))\n\tlocal d=$(( $a * $a\
    \ * $a ))\n\tlocal e=$(( $a * $a * $a ))\n\tlocal f=$(( $a * $a * $a ))\n\tlocal\
    \ g=$(( $a * $a * $a ))\n\tlocal h=$(( $a * $a * $a ))\n\tlocal i=$(( $a * $a\
    \ * $a ))\n\tlocal j=$(( $a * $a * $a ))\n\tlocal k=$(( $a * $a * $a ))\n\tlocal\
    \ l=$(( $a * $a * $a ))\n\tlocal m=$(( $a * $a * $a ))\n\tlocal n=$(( $a * $a\
    \ * $a ))\n\tlocal o=$(( $a * $a * $a ))\n\tlocal p=$(( $a * $a * $a ))\n\tlocal\
    \ q=$(( $a * $a * $a ))\n\tlocal r=$(( $a * $a * $a ))\n\tlocal s=$(( $a * $a\
    \ * $a ))\n\tlocal t=$(( $a * $a * $a ))\n\tlocal u=$(( $a * $a * $a ))\n\tlocal\
    \ v=$(( $a * $a * $a ))\n\tlocal w=$(( $a * $a * $a ))\n\tlocal x=$(( $a * $a\
    \ * $a ))\n\tlocal y=$(( $a * $a * $a ))\n\tlocal z=$(( $a * $a * $a ))\n\tlocal\
    \ A=$(( $a * $a * $a ))\n\tlocal B=$(( $a * $a * $a ))\n\tlocal C=$(( $a * $a\
    \ * $a ))\n\tlocal D=$(( $a * $a * $a ))\n\tlocal E=$(( $a * $a * $a ))\n\tlocal\
    \ F=$(( $a * $a * $a ))\n\tlocal G=$(( $a * $a * $a ))\n\tlocal H=$(( $a * $a\
    \ * $a ))\n\tlocal I=$(( $a * $a * \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpquu3ep0c.sh: line 55: unexpected EOF while looking for matching
    `)''

    /tmp/tmpquu3ep0c.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then return 1; fi\n    if [ $n -eq 1 ]; then return 0; fi\n\
    \    if [ $n -eq 2 ]; then return 1; fi\n    if [ $n -eq 3 ]; then return 1; fi\n\
    \    if [ $n -eq 4 ]; then return 1; fi\n    if [ $n -eq 5 ]; then return 1; fi\n\
    \    if [ $n -eq 6 ]; then return 1; fi\n    if [ $n -eq 7 ]; then return 1; fi\n\
    \    if [ $n -eq 8 ]; then return 1; fi\n    if [ $n -eq 9 ]; then return 1; fi\n\
    \    if [ $n -eq 10 ]; then return 1; fi\n    if [ $n -eq 11 ]; then return 1;\
    \ fi\n    if [ $n -eq 12 ]; then return 1; fi\n    if [ $n -eq 13 ]; then return\
    \ 1; fi\n    if [ $n -eq 14 ]; then return 1; fi\n    if [ $n -eq 15 ]; then return\
    \ 1; fi\n    if [ $n -eq 16 ]; then return 1; fi\n    if [ $n -eq 17 ]; then return\
    \ 1; fi\n    if [ $n -eq 18 ]; then return 1; fi\n    if [ $n -eq 19 ]; then return\
    \ 1; fi\n    if [ $n -eq 20 ]; then return 1; fi\n    if [ $n -eq 21 ]; then return\
    \ 1; fi\n    if [ $n -eq 22 ]; then return 1; fi\n    if [ $n -eq 23 ]; then return\
    \ 1; fi\n    if [ $n -eq 24 ]; then return 1; fi\n    if [ $n -eq 25 ]; then return\
    \ 1; fi\n    if [ $n -eq 26 ]; then return 1; fi\n    if [ $n -eq 27 ]; then return\
    \ 1; fi\n    if [ $n -eq 28 ]; then return 1; fi\n    if [ $n -eq 29 ]; then return\
    \ 1; fi\n    if [ $n -eq 30 ]; then return 1; fi\n    if [ $n -eq 31 ]; then return\
    \ 1; fi\n    if [ $n -eq 32 ]; then return 1; fi\n    if [ $n -eq 33 ]; then return\
    \ 1; fi\n    if [ $n -eq 34 ]; then return 1; fi\n    if [ $n -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl9560nrw.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpl9560nrw.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then return 1; fi\n    if [ $n -eq 1 ]; then return 0; fi\n\
    \    if [ $n -eq 2 ]; then return 1; fi\n    if [ $n -eq 3 ]; then return 1; fi\n\
    \    if [ $n -eq 4 ]; then return 1; fi\n    if [ $n -eq 5 ]; then return 1; fi\n\
    \    if [ $n -eq 6 ]; then return 1; fi\n    if [ $n -eq 7 ]; then return 1; fi\n\
    \    if [ $n -eq 8 ]; then return 1; fi\n    if [ $n -eq 9 ]; then return 1; fi\n\
    \    if [ $n -eq 10 ]; then return 1; fi\n    if [ $n -eq 11 ]; then return 1;\
    \ fi\n    if [ $n -eq 12 ]; then return 1; fi\n    if [ $n -eq 13 ]; then return\
    \ 1; fi\n    if [ $n -eq 14 ]; then return 1; fi\n    if [ $n -eq 15 ]; then return\
    \ 1; fi\n    if [ $n -eq 16 ]; then return 1; fi\n    if [ $n -eq 17 ]; then return\
    \ 1; fi\n    if [ $n -eq 18 ]; then return 1; fi\n    if [ $n -eq 19 ]; then return\
    \ 1; fi\n    if [ $n -eq 20 ]; then return 1; fi\n    if [ $n -eq 21 ]; then return\
    \ 1; fi\n    if [ $n -eq 22 ]; then return 1; fi\n    if [ $n -eq 23 ]; then return\
    \ 1; fi\n    if [ $n -eq 24 ]; then return 1; fi\n    if [ $n -eq 25 ]; then return\
    \ 1; fi\n    if [ $n -eq 26 ]; then return 1; fi\n    if [ $n -eq 27 ]; then return\
    \ 1; fi\n    if [ $n -eq 28 ]; then return 1; fi\n    if [ $n -eq 29 ]; then return\
    \ 1; fi\n    if [ $n -eq 30 ]; then return 1; fi\n    if [ $n -eq 31 ]; then return\
    \ 1; fi\n    if [ $n -eq 32 ]; then return 1; fi\n    if [ $n -eq 33 ]; then return\
    \ 1; fi\n    if [ $n -eq 34 ]; then return 1; fi\n    if [ $n -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl9560nrw.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpl9560nrw.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    elif [ $x -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 3 ]; then \n        echo \"true\"\n    elif [ $x -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 6 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $x -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 9 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $x -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 13 ]; then \n        echo \"true\"\n    elif [ $x -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 16 ]; then \n        echo \"true\"\n    elif [ $x -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 19 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $x -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 22 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $x -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 26 ]; then \n        echo \"true\"\n    elif [ $x -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 29 ]; then \n        echo \"true\"\n    elif [ $x -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6t61d5v0.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp6t61d5v0.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 1 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 2 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 3 ]\n    then\n        echo \"true\"\n    elif [\
    \ $a -eq 4 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 5 ]\n    then\n\
    \        echo \"true\"\n    elif [ $a -eq 6 ]\n    then\n        echo \"true\"\
    \n    elif [ $a -eq 7 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 8\
    \ ]\n    then\n        echo \"true\"\n    elif [ $a -eq 9 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $a -eq 10 ]\n    then\n        echo \"true\"\n  \
    \  elif [ $a -eq 11 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 12 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 13 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 14 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 15 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 16 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 17 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 18 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 19 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 20 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 21 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 23 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 24 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 25 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 26 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 27 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 28 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 29 ]\n    then\n        \n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvdhp1uv0.sh: line 112: syntax error near unexpected token `}''

    /tmp/tmpvdhp1uv0.sh: line 112: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tlocal\
    \ b=$(( a * a ))\n\tlocal c=$(( a * a + b ))\n\tlocal d=$(( a * a + b + c ))\n\
    \tlocal e=$(( a * a + b + c + d ))\n\tlocal f=$(( a * a + b + c + d + e ))\n\t\
    local g=$(( a * a + b + c + d + e + f ))\n\tlocal h=$(( a * a + b + c + d + e\
    \ + f + g ))\n\tlocal i=$(( a * a + b + c + d + e + f + g + h ))\n\tlocal j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n\tlocal k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n\tlocal l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n\tlocal m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n\tlocal n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \tlocal o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\t\
    local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \tlocal q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n\tlocal r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n\tlocal s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n\tlocal t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n\tlocal u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7j6ybslb.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7j6ybslb.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then return 1; fi\n    if [ $a -eq 1 ]; then return 1; fi\n\
    \    if [ $a -eq 2 ]; then return 1; fi\n    if [ $a -eq 3 ]; then return 1; fi\n\
    \    if [ $a -eq 4 ]; then return 1; fi\n    if [ $a -eq 5 ]; then return 1; fi\n\
    \    if [ $a -eq 6 ]; then return 1; fi\n    if [ $a -eq 7 ]; then return 1; fi\n\
    \    if [ $a -eq 8 ]; then return 1; fi\n    if [ $a -eq 9 ]; then return 1; fi\n\
    \    if [ $a -eq 10 ]; then return 1; fi\n    if [ $a -eq 11 ]; then return 1;\
    \ fi\n    if [ $a -eq 12 ]; then return 1; fi\n    if [ $a -eq 13 ]; then return\
    \ 1; fi\n    if [ $a -eq 14 ]; then return 1; fi\n    if [ $a -eq 15 ]; then return\
    \ 1; fi\n    if [ $a -eq 16 ]; then return 1; fi\n    if [ $a -eq 17 ]; then return\
    \ 1; fi\n    if [ $a -eq 18 ]; then return 1; fi\n    if [ $a -eq 19 ]; then return\
    \ 1; fi\n    if [ $a -eq 20 ]; then return 1; fi\n    if [ $a -eq 21 ]; then return\
    \ 1; fi\n    if [ $a -eq 22 ]; then return 1; fi\n    if [ $a -eq 23 ]; then return\
    \ 1; fi\n    if [ $a -eq 24 ]; then return 1; fi\n    if [ $a -eq 25 ]; then return\
    \ 1; fi\n    if [ $a -eq 26 ]; then return 1; fi\n    if [ $a -eq 27 ]; then return\
    \ 1; fi\n    if [ $a -eq 28 ]; then return 1; fi\n    if [ $a -eq 29 ]; then return\
    \ 1; fi\n    if [ $a -eq 30 ]; then return 1; fi\n    if [ $a -eq 31 ]; then return\
    \ 1; fi\n    if [ $a -eq 32 ]; then return 1; fi\n    if [ $a -eq 33 ]; then return\
    \ 1; fi\n    if [ $a -eq 34 ]; then return 1; fi\n    if [ $a -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk922l3df.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpk922l3df.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal w=\"$4\"\n\tlocal t=\"$5\"\n\tlocal\
    \ f=\"$6\"\n\tlocal r=\"$7\"\n\tlocal p=\"$8\"\n\tlocal u=\"$9\"\n\tlocal a=\"\
    $10\"\n\tlocal s=\"$11\"\n\tlocal d=\"$12\"\n\tlocal l=\"$13\"\n\tlocal c=\"$14\"\
    \n\tlocal h=\"$15\"\n\tlocal k=\"$16\"\n\tlocal j=\"$17\"\n\tlocal m=\"$18\"\n\
    \tlocal g=\"$19\"\n\tlocal f=\"$20\"\n\tlocal b=\"$21\"\n\tlocal e=\"$22\"\n\t\
    local h=\"$23\"\n\tlocal l=\"$24\"\n\tlocal c=\"$25\"\n\tlocal k=\"$26\"\n\tlocal\
    \ j=\"$27\"\n\tlocal m=\"$28\"\n\tlocal g=\"$29\"\n\tlocal f=\"$30\"\n\tlocal\
    \ b=\"$31\"\n\tlocal e=\"$32\"\n\tlocal h=\"$33\"\n\tlocal l=\"$34\"\n\tlocal\
    \ c=\"$35\"\n\tlocal k=\"$36\"\n\tlocal j=\"$37\"\n\tlocal m=\"$38\"\n\tlocal\
    \ g=\"$39\"\n\tlocal f=\"$40\"\n\tlocal b=\"$41\"\n\tlocal e=\"$42\"\n\tlocal\
    \ h=\"$43\"\n\tlocal l=\"$44\"\n\tlocal c=\"$45\"\n\tlocal k=\"$46\"\n\tlocal\
    \ j=\"$47\"\n\tlocal m=\"$48\"\n\tlocal g=\"$49\"\n\tlocal f=\"$50\"\n\tlocal\
    \ b=\"$51\"\n\tlocal e=\"$52\"\n\tlocal h=\"$53\"\n\tlocal l=\"$54\"\n\tlocal\
    \ c=\"$55\"\n\tlocal k=\"$56\"\n\tlocal j=\"$57\"\n\tlocal m=\"$58\"\n\tlocal\
    \ g=\"$59\"\n\tlocal f=\"$60\"\n\tlocal b=\"$61\"\n\tlocal e=\"$62\"\n\tlocal\
    \ h=\"$63\"\n\tlocal l=\"$64\"\n\tlocal c=\"$65\"\n\tlocal k=\"$66\"\n\tlocal\
    \ j=\"$67\"\n\tlocal m=\"$68\"\n\tlocal g=\"$69\"\n\tlocal f=\"$70\"\n\tlocal\
    \ b=\"$71\"\n\tlocal e=\"$72\"\n\tlocal h=\"$73\"\n\tlocal l=\"$74\"\n\tlocal\
    \ \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ \"$x\" -eq \"0\" ]; then\n        echo \"true\"\n    elif [ \"$x\"\
    \ -eq \"1\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"2\" ]; then\n\
    \        echo \"true\"\n    elif [ \"$x\" -eq \"3\" ]; then\n        echo \"true\"\
    \n    elif [ \"$x\" -eq \"4\" ]; then\n        echo \"true\"\n    elif [ \"$x\"\
    \ -eq \"5\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"6\" ]; then\n\
    \        echo \"true\"\n    elif [ \"$x\" -eq \"7\" ]; then\n        echo \"true\"\
    \n    elif [ \"$x\" -eq \"8\" ]; then\n        echo \"true\"\n    elif [ \"$x\"\
    \ -eq \"9\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"10\" ]; then\n\
    \        echo \"true\"\n    elif [ \"$x\" -eq \"11\" ]; then\n        echo \"\
    true\"\n    elif [ \"$x\" -eq \"12\" ]; then\n        echo \"true\"\n    elif\
    \ [ \"$x\" -eq \"13\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"\
    14\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"15\" ]; then\n  \
    \      echo \"true\"\n    elif [ \"$x\" -eq \"16\" ]; then\n        echo \"true\"\
    \n    elif [ \"$x\" -eq \"17\" ]; then\n        echo \"true\"\n    elif [ \"$x\"\
    \ -eq \"18\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"19\" ]; then\n\
    \        echo \"true\"\n    elif [ \"$x\" -eq \"20\" ]; then\n        echo \"\
    true\"\n    elif [ \"$x\" -eq \"21\" ]; then\n        echo \"true\"\n    elif\
    \ [ \"$x\" -eq \"22\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"\
    23\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"24\" ]; then\n  \
    \      echo \"true\"\n    elif [ \"$x\" -eq \"25\" ]; then\n        echo \"true\"\
    \n    elif [ \"$x\" -eq \"26\" ]; then\n        echo \"true\"\n    elif [ \"$x\"\
    \ -eq \"27\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"28\" ]; then\n\
    \        echo \"true\"\n    elif [ \"$x\" -eq \"29\" ]; then\n        echo \"\
    true\"\n    elif [ \"$x\" -eq \"30\" ]; then\n        echo \"true\"\n    elif\
    \ [ \"$x\" -eq \"31\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"\
    32\" ]; then\n        echo \"true\"\n    elif [ \"$x\" -eq \"33\" ]; then\n  \
    \      \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1nhj441a.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmp1nhj441a.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $x -eq -1 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 1 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 2 ]]; then\n        echo \"true\"\n    elif [[ $x -eq\
    \ 3 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 4 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $x -eq 5 ]]; then\n        echo \"true\"\n    elif [[\
    \ $x -eq 6 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 7 ]]; then\n  \
    \      echo \"true\"\n    elif [[ $x -eq 8 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 9 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 10 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 11 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 12 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 13 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 14 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 15 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 16 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 17 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 18 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 19 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 20 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 21 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 22 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 23 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 24 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 25 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 26 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 27 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 28 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 29 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 30 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 31 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 32 ]]; then\n        \n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsyw1kzu4.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmpsyw1kzu4.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    elif [ $x -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 3 ]; then \n        echo \"true\"\n    elif [ $x -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 6 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $x -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 9 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $x -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 13 ]; then \n        echo \"true\"\n    elif [ $x -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 16 ]; then \n        echo \"true\"\n    elif [ $x -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 19 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $x -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 22 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $x -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 26 ]; then \n        echo \"true\"\n    elif [ $x -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 29 ]; then \n        echo \"true\"\n    elif [ $x -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6t61d5v0.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp6t61d5v0.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 1 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 2 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 3 ]\n    then\n        echo \"true\"\n    elif [\
    \ $a -eq 4 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 5 ]\n    then\n\
    \        echo \"true\"\n    elif [ $a -eq 6 ]\n    then\n        echo \"true\"\
    \n    elif [ $a -eq 7 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 8\
    \ ]\n    then\n        echo \"true\"\n    elif [ $a -eq 9 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $a -eq 10 ]\n    then\n        echo \"true\"\n  \
    \  elif [ $a -eq 11 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 12 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 13 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 14 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 15 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 16 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 17 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 18 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 19 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 20 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 21 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 23 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 24 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 25 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 26 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 27 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 28 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 29 ]\n    then\n        \n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvdhp1uv0.sh: line 112: syntax error near unexpected token `}''

    /tmp/tmpvdhp1uv0.sh: line 112: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=\"$2\"\n    local z=\"$3\"\n    local w=\"$4\"\n    local a=\"$5\"\
    \n    local b=\"$6\"\n    local c=\"$7\"\n    local d=\"$8\"\n    local e=\"$9\"\
    \n    local f=\"$10\"\n    local g=\"$11\"\n    local h=\"$12\"\n    local i=\"\
    $13\"\n    local j=\"$14\"\n    local k=\"$15\"\n    local l=\"$16\"\n    local\
    \ m=\"$17\"\n    local n=\"$18\"\n    local o=\"$19\"\n    local p=\"$20\"\n \
    \   local q=\"$21\"\n    local r=\"$22\"\n    local s=\"$23\"\n    local t=\"\
    $24\"\n    local u=\"$25\"\n    local v=\"$26\"\n    local w=\"$27\"\n    local\
    \ x=\"$28\"\n    local y=\"$29\"\n    local z=\"$30\"\n    local a=\"$31\"\n \
    \   local b=\"$32\"\n    local c=\"$33\"\n    local d=\"$34\"\n    local e=\"\
    $35\"\n    local f=\"$36\"\n    local g=\"$37\"\n    local h=\"$38\"\n    local\
    \ i=\"$39\"\n    local j=\"$40\"\n    local k=\"$41\"\n    local l=\"$42\"\n \
    \   local m=\"$43\"\n    local n=\"$44\"\n    local o=\"$45\"\n    local p=\"\
    $46\"\n    local q=\"$47\"\n    local r=\"$48\"\n    local s=\"$49\"\n    local\
    \ t=\"$50\"\n    local u=\"$51\"\n    local v=\"$52\"\n    local w=\"$53\"\n \
    \   local x=\"$54\"\n    local y=\"$55\"\n    local z=\"$56\"\n    local a=\"\
    $57\"\n    local b=\"$58\"\n    local c=\"$59\"\n    local d=\"$60\"\n    local\
    \ e=\"$61\"\n    local f=\"$62\"\n    local g=\"$63\"\n    local h=\"$64\"\n \
    \   local i=\"$65\"\n    local j=\"$66\"\n    local k=\"$67\"\n    local l=\"\
    $68\"\n    local m=\"$69\"\n    local n=\"$70\"\n    local o=\"$71\"\n    local\
    \ p=\"$72\"\n    local q=\"$73\"\n    local r=\"$74\"\n    local \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        if [ $n -eq\
    \ 1 ]; then\n            echo \"true\"\n        elif [ $n -eq 2 ]; then\n    \
    \        echo \"true\"\n        elif [ $n -eq 3 ]; then\n            echo \"true\"\
    \n        elif [ $n -eq 4 ]; then\n            echo \"true\"\n        elif [ $n\
    \ -eq 5 ]; then\n            echo \"true\"\n        elif [ $n -eq 6 ]; then\n\
    \            echo \"true\"\n        elif [ $n -eq 7 ]; then\n            echo\
    \ \"true\"\n        elif [ $n -eq 8 ]; then\n            echo \"true\"\n     \
    \   elif [ $n -eq 9 ]; then\n            echo \"true\"\n        elif [ $n -eq\
    \ 10 ]; then\n            echo \"true\"\n        elif [ $n -eq 11 ]; then\n  \
    \          echo \"true\"\n        elif [ $n -eq 12 ]; then\n            echo \"\
    true\"\n        elif [ $n -eq 13 ]; then\n            echo \"true\"\n        elif\
    \ [ $n -eq 14 ]; then\n            echo \"true\"\n        elif [ $n -eq 15 ];\
    \ then\n            echo \"true\"\n        elif [ $n -eq 16 ]; then\n        \
    \    echo \"true\"\n        elif [ $n -eq 17 ]; then\n            echo \"true\"\
    \n        elif [ $n -eq 18 ]; then\n            echo \"true\"\n        elif [\
    \ $n -eq 19 ]; then\n            echo \"true\"\n        elif [ $n -eq 20 ]; then\n\
    \            echo \"true\"\n        elif [ $n -eq 21 ]; then\n            echo\
    \ \"true\"\n        elif [ $n -eq 22 ]; then\n            echo \"true\"\n    \
    \    elif [ $n -eq 23 ]; then\n            echo \"true\"\n        elif [ $n -eq\
    \ 24 ]; then\n            echo \"true\"\n        elif [ $n -eq 25 ]; then\n  \
    \          echo \"true\"\n        elif [ $n -eq 26 ]; then\n            echo \"\
    true\"\n        elif [ $n -eq 27 ]; then\n            echo \"true\"\n        elif\
    \ [ $n -eq 28 ]; then\n            echo \"true\"\n        elif [ $n -eq 29 ];\
    \ then\n            echo \"true\"\n        elif [ $n -eq 30 ]; then\n        \
    \    echo \"true\"\n        elif [ $n -eq 31 ]; then\n            echo \"true\"\
    \n        elif [ $n -eq 32 ]; then\n            echo \"true\"\n        elif [\
    \ $n -eq 33 ]; then\n            echo \"true\"\n        elif [ $n -eq 34 ]; then\n\
    \            echo \"true\"\n        elif [ $n -eq 35 ]; then\n            echo\
    \ \"true\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkxt4cylg.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmpkxt4cylg.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=\"$2\"\n  local z=\"$3\"\n  local w=\"$4\"\n  local t=\"$5\"\n  local\
    \ f=\"$6\"\n  local s=\"$7\"\n  local o=\"$8\"\n  local u=\"$9\"\n  local a=\"\
    $10\"\n  local b=\"$11\"\n  local c=\"$12\"\n  local d=\"$13\"\n  local e=\"$14\"\
    \n  local g=\"$15\"\n  local h=\"$16\"\n  local j=\"$17\"\n  local k=\"$18\"\n\
    \  local l=\"$19\"\n  local m=\"$20\"\n  local n=\"$21\"\n  local p=\"$22\"\n\
    \  local q=\"$23\"\n  local r=\"$24\"\n  local t=\"$25\"\n  local v=\"$26\"\n\
    \  local w=\"$27\"\n  local x=\"$28\"\n  local y=\"$29\"\n  local z=\"$30\"\n\
    \  local w=\"$31\"\n  local t=\"$32\"\n  local f=\"$33\"\n  local s=\"$34\"\n\
    \  local o=\"$35\"\n  local u=\"$36\"\n  local a=\"$37\"\n  local b=\"$38\"\n\
    \  local c=\"$39\"\n  local d=\"$40\"\n  local e=\"$41\"\n  local g=\"$42\"\n\
    \  local h=\"$43\"\n  local j=\"$44\"\n  local k=\"$45\"\n  local l=\"$46\"\n\
    \  local m=\"$47\"\n  local n=\"$48\"\n  local p=\"$49\"\n  local q=\"$50\"\n\
    \  local r=\"$51\"\n  local t=\"$52\"\n  local v=\"$53\"\n  local w=\"$54\"\n\
    \  local x=\"$55\"\n  local y=\"$56\"\n  local z=\"$57\"\n  local w=\"$58\"\n\
    \  local t=\"$59\"\n  local f=\"$60\"\n  local s=\"$61\"\n  local o=\"$62\"\n\
    \  local u=\"$63\"\n  local a=\"$64\"\n  local b=\"$65\"\n  local c=\"$66\"\n\
    \  local d=\"$67\"\n  local e=\"$68\"\n  local g=\"$69\"\n  local h=\"$70\"\n\
    \  local j=\"$71\"\n  local k=\"$72\"\n  local l=\"$73\"\n  local m=\"$74\"\n\
    \  local \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then return 1; fi\n    if [ $a -eq 1 ]; then return 1; fi\n\
    \    if [ $a -eq 2 ]; then return 1; fi\n    if [ $a -eq 3 ]; then return 1; fi\n\
    \    if [ $a -eq 4 ]; then return 1; fi\n    if [ $a -eq 5 ]; then return 1; fi\n\
    \    if [ $a -eq 6 ]; then return 1; fi\n    if [ $a -eq 7 ]; then return 1; fi\n\
    \    if [ $a -eq 8 ]; then return 1; fi\n    if [ $a -eq 9 ]; then return 1; fi\n\
    \    if [ $a -eq 10 ]; then return 1; fi\n    if [ $a -eq 11 ]; then return 1;\
    \ fi\n    if [ $a -eq 12 ]; then return 1; fi\n    if [ $a -eq 13 ]; then return\
    \ 1; fi\n    if [ $a -eq 14 ]; then return 1; fi\n    if [ $a -eq 15 ]; then return\
    \ 1; fi\n    if [ $a -eq 16 ]; then return 1; fi\n    if [ $a -eq 17 ]; then return\
    \ 1; fi\n    if [ $a -eq 18 ]; then return 1; fi\n    if [ $a -eq 19 ]; then return\
    \ 1; fi\n    if [ $a -eq 20 ]; then return 1; fi\n    if [ $a -eq 21 ]; then return\
    \ 1; fi\n    if [ $a -eq 22 ]; then return 1; fi\n    if [ $a -eq 23 ]; then return\
    \ 1; fi\n    if [ $a -eq 24 ]; then return 1; fi\n    if [ $a -eq 25 ]; then return\
    \ 1; fi\n    if [ $a -eq 26 ]; then return 1; fi\n    if [ $a -eq 27 ]; then return\
    \ 1; fi\n    if [ $a -eq 28 ]; then return 1; fi\n    if [ $a -eq 29 ]; then return\
    \ 1; fi\n    if [ $a -eq 30 ]; then return 1; fi\n    if [ $a -eq 31 ]; then return\
    \ 1; fi\n    if [ $a -eq 32 ]; then return 1; fi\n    if [ $a -eq 33 ]; then return\
    \ 1; fi\n    if [ $a -eq 34 ]; then return 1; fi\n    if [ $a -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk922l3df.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpk922l3df.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4gc_mva_.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp4gc_mva_.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=\"$2\"\n  local z=\"$3\"\n  local w=\"$4\"\n  local r=\"$5\"\n  local\
    \ p=\"$6\"\n  local q=\"$7\"\n  local r=\"$8\"\n  local s=\"$9\"\n  local t=\"\
    $10\"\n  local u=\"$11\"\n  local v=\"$12\"\n  local w=\"$13\"\n  local x=\"$14\"\
    \n  local y=\"$15\"\n  local z=\"$16\"\n  local w=\"$17\"\n  local r=\"$18\"\n\
    \  local p=\"$19\"\n  local q=\"$20\"\n  local r=\"$21\"\n  local s=\"$22\"\n\
    \  local t=\"$23\"\n  local u=\"$24\"\n  local v=\"$25\"\n  local w=\"$26\"\n\
    \  local x=\"$27\"\n  local y=\"$28\"\n  local z=\"$29\"\n  local w=\"$30\"\n\
    \  local r=\"$31\"\n  local p=\"$32\"\n  local q=\"$33\"\n  local r=\"$34\"\n\
    \  local s=\"$35\"\n  local t=\"$36\"\n  local u=\"$37\"\n  local v=\"$38\"\n\
    \  local w=\"$39\"\n  local x=\"$40\"\n  local y=\"$41\"\n  local z=\"$42\"\n\
    \  local w=\"$43\"\n  local r=\"$44\"\n  local p=\"$45\"\n  local q=\"$46\"\n\
    \  local r=\"$47\"\n  local s=\"$48\"\n  local t=\"$49\"\n  local u=\"$50\"\n\
    \  local v=\"$51\"\n  local w=\"$52\"\n  local x=\"$53\"\n  local y=\"$54\"\n\
    \  local z=\"$55\"\n  local w=\"$56\"\n  local r=\"$57\"\n  local p=\"$58\"\n\
    \  local q=\"$59\"\n  local r=\"$60\"\n  local s=\"$61\"\n  local t=\"$62\"\n\
    \  local u=\"$63\"\n  local v=\"$64\"\n  local w=\"$65\"\n  local x=\"$66\"\n\
    \  local y=\"$67\"\n  local z=\"$68\"\n  local w=\"$69\"\n  local r=\"$70\"\n\
    \  local p=\"$71\"\n  local q=\"$72\"\n  local r=\"$73\"\n  local s=\"$74\"\n\
    \  local \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    if [ $number -eq 0 ]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    elif [ $x -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 3 ]; then \n        echo \"true\"\n    elif [ $x -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 6 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $x -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 9 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $x -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 13 ]; then \n        echo \"true\"\n    elif [ $x -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 16 ]; then \n        echo \"true\"\n    elif [ $x -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 19 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $x -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 22 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $x -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 26 ]; then \n        echo \"true\"\n    elif [ $x -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 29 ]; then \n        echo \"true\"\n    elif [ $x -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6t61d5v0.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp6t61d5v0.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((w*w))\n    if [ $cube -eq $x ]\n    then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    elif (( $(echo \"$x\
    \ % $x\" | bc -l) -eq 0 ))\n    then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjxfe0bod.sh: line 24: ((: 0 -eq 0 : syntax error in expression
    (error token is "0 ")

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    elif [ $n -eq 1 ]\n\
    \    then\n        echo \"true\"\n    elif [ $n -eq 2 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $n -eq 3 ]\n    then\n        echo \"true\"\n    elif [\
    \ $n -eq 4 ]\n    then\n        echo \"true\"\n    elif [ $n -eq 5 ]\n    then\n\
    \        echo \"true\"\n    elif [ $n -eq 6 ]\n    then\n        echo \"true\"\
    \n    elif [ $n -eq 7 ]\n    then\n        echo \"true\"\n    elif [ $n -eq 8\
    \ ]\n    then\n        echo \"true\"\n    elif [ $n -eq 9 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $n -eq 10 ]\n    then\n        echo \"true\"\n  \
    \  elif [ $n -eq 11 ]\n    then\n        echo \"true\"\n    elif [ $n -eq 12 ]\n\
    \    then\n        echo \"true\"\n    elif [ $n -eq 13 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $n -eq 14 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $n -eq 15 ]\n    then\n        echo \"true\"\n    elif [ $n -eq 16 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $n -eq 17 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $n -eq 18 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $n -eq 19 ]\n    then\n        echo \"true\"\n    elif [ $n -eq 20 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $n -eq 21 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $n -eq 22 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $n -eq 23 ]\n    then\n        echo \"true\"\n    elif [ $n -eq 24 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $n -eq 25 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $n -eq 26 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $n -eq 27 ]\n    then\n        echo \"true\"\n    elif [ $n -eq 28 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $n -eq 29 ]\n    then\n        \n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0tavkkt6.sh: line 112: syntax error near unexpected token `}''

    /tmp/tmp0tavkkt6.sh: line 112: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then return 1; fi\n    if [ $a -eq 1 ]; then return 1; fi\n\
    \    if [ $a -eq 2 ]; then return 1; fi\n    if [ $a -eq 3 ]; then return 1; fi\n\
    \    if [ $a -eq 4 ]; then return 1; fi\n    if [ $a -eq 5 ]; then return 1; fi\n\
    \    if [ $a -eq 6 ]; then return 1; fi\n    if [ $a -eq 7 ]; then return 1; fi\n\
    \    if [ $a -eq 8 ]; then return 1; fi\n    if [ $a -eq 9 ]; then return 1; fi\n\
    \    if [ $a -eq 10 ]; then return 1; fi\n    if [ $a -eq 11 ]; then return 1;\
    \ fi\n    if [ $a -eq 12 ]; then return 1; fi\n    if [ $a -eq 13 ]; then return\
    \ 1; fi\n    if [ $a -eq 14 ]; then return 1; fi\n    if [ $a -eq 15 ]; then return\
    \ 1; fi\n    if [ $a -eq 16 ]; then return 1; fi\n    if [ $a -eq 17 ]; then return\
    \ 1; fi\n    if [ $a -eq 18 ]; then return 1; fi\n    if [ $a -eq 19 ]; then return\
    \ 1; fi\n    if [ $a -eq 20 ]; then return 1; fi\n    if [ $a -eq 21 ]; then return\
    \ 1; fi\n    if [ $a -eq 22 ]; then return 1; fi\n    if [ $a -eq 23 ]; then return\
    \ 1; fi\n    if [ $a -eq 24 ]; then return 1; fi\n    if [ $a -eq 25 ]; then return\
    \ 1; fi\n    if [ $a -eq 26 ]; then return 1; fi\n    if [ $a -eq 27 ]; then return\
    \ 1; fi\n    if [ $a -eq 28 ]; then return 1; fi\n    if [ $a -eq 29 ]; then return\
    \ 1; fi\n    if [ $a -eq 30 ]; then return 1; fi\n    if [ $a -eq 31 ]; then return\
    \ 1; fi\n    if [ $a -eq 32 ]; then return 1; fi\n    if [ $a -eq 33 ]; then return\
    \ 1; fi\n    if [ $a -eq 34 ]; then return 1; fi\n    if [ $a -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk922l3df.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpk922l3df.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  test \"$x\" -eq \"$x\" && echo \"true\" || echo \"false\"\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local result\n    if [ $n -eq 0 ]\n    then\n        result=\"true\"\n   \
    \ else\n        result=\"false\"\n    fi\n    echo $result\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        local n=$1\n\
    \        if [ $n -eq 1 ]; then\n            echo \"true\"\n        else\n    \
    \        local n=$1\n            if [ $n -eq 2 ]; then\n                echo \"\
    true\"\n            else\n                local n=$1\n                if [ $n\
    \ -eq 3 ]; then\n                    echo \"true\"\n                else\n   \
    \                 local n=$1\n                    if [ $n -eq 4 ]; then\n    \
    \                    echo \"true\"\n                    else\n               \
    \         local n=$1\n                        if [ $n -eq 5 ]; then\n        \
    \                    echo \"true\"\n                        else\n           \
    \                 echo \"false\"\n                        fi\n               \
    \     fi\n                fi\n            fi\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    elif [ $a -eq 1 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 2 ]; then\n        echo \"true\"\n \
    \   elif [ $a -eq 3 ]; then\n        echo \"true\"\n    elif [ $a -eq 4 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 5 ]; then\n        echo \"true\"\n \
    \   elif [ $a -eq 6 ]; then\n        echo \"true\"\n    elif [ $a -eq 7 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 8 ]; then\n        echo \"true\"\n \
    \   elif [ $a -eq 9 ]; then\n        echo \"true\"\n    elif [ $a -eq 10 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 11 ]; then\n        echo \"true\"\n\
    \    elif [ $a -eq 12 ]; then\n        echo \"true\"\n    elif [ $a -eq 13 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 14 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 15 ]; then\n        echo \"true\"\n    elif [ $a -eq 16 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 17 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 18 ]; then\n        echo \"true\"\n    elif [ $a -eq 19 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 20 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 21 ]; then\n        echo \"true\"\n    elif [ $a -eq 22 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 23 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 24 ]; then\n        echo \"true\"\n    elif [ $a -eq 25 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 26 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 27 ]; then\n        echo \"true\"\n    elif [ $a -eq 28 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 29 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 30 ]; then\n        echo \"true\"\n    elif [ $a -eq 31 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 32 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 33 ]; then\n        echo \"true\"\n    elif [ $a -eq 34 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 35 ]; then\n        echo \"true\"\
    \n    elif \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp34k7tr0w.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmp34k7tr0w.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4gc_mva_.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp4gc_mva_.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    if [ $number -eq 0 ]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local number=$1\n\
    \  local cubes=$(echo \"$number\" | grep -o \"^[0-9]*$\")\n  local result=$(echo\
    \ \"$number\" | grep -o \"^[0-9]*$\" | grep -o \"^[0-9]*$\" | grep -o \"^[0-9]*$\"\
    )\n  \n  if [ \"$cubes\" != \"\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2cb15lty.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmp2cb15lty.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        local cubes=$(echo\
    \ \"$n\" | bc)\n        if [ $cubes -eq 0 ]; then\n            echo \"true\"\n\
    \        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then \n        echo \"false\"\n    else\n        local cube=$((n**3))\n\
    \        if [ $cube -eq $n ]; then \n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=$((x*x*x))\n  local z=$((y*y))\n  local w=$((z*z))\n  local cube=$((w*w))\n\
    \  if [ \"$x\" -eq \"$cube\" ]\n  then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( $a%3 ))\n        if [ $b -eq 0 ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 1 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 2 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 3 ]]; then\n        echo \"true\"\n    elif [[ $x -eq\
    \ 4 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 5 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $x -eq 6 ]]; then\n        echo \"true\"\n    elif [[\
    \ $x -eq 7 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 8 ]]; then\n  \
    \      echo \"true\"\n    elif [[ $x -eq 9 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 10 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 11 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 12 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 13 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 14 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 15 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 16 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 17 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 18 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 19 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 20 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 21 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 22 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 23 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 24 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 25 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 26 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 27 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 28 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 29 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 30 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 31 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 32 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 33 ]]; then\n\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz1j4z5fj.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmpz1j4z5fj.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]; then \n    echo \"true\"\n  else\n    if [ $a -eq 1 ]; then \n\
    \      echo \"true\"\n    elif [ $a -eq 2 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 3 ]; then \n      echo \"true\"\n    elif [ $a -eq 4 ]; then \n   \
    \   echo \"true\"\n    elif [ $a -eq 5 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 6 ]; then \n      echo \"true\"\n    elif [ $a -eq 7 ]; then \n   \
    \   echo \"true\"\n    elif [ $a -eq 8 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 9 ]; then \n      echo \"true\"\n    elif [ $a -eq 10 ]; then \n  \
    \    echo \"true\"\n    elif [ $a -eq 11 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 12 ]; then \n      echo \"true\"\n    elif [ $a -eq 13 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 14 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 15 ]; then \n      echo \"true\"\n    elif [ $a -eq 16 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 17 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 18 ]; then \n      echo \"true\"\n    elif [ $a -eq 19 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 20 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 21 ]; then \n      echo \"true\"\n    elif [ $a -eq 22 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 23 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 24 ]; then \n      echo \"true\"\n    elif [ $a -eq 25 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 26 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 27 ]; then \n      echo \"true\"\n    elif [ $a -eq 28 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 29 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 30 ]; then \n      echo \"true\"\n    elif [ $a -eq 31 ]\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzrgkpm00.sh: line 86: syntax error near unexpected token `}''

    /tmp/tmpzrgkpm00.sh: line 86: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ cubes=$2\n  local cube=$((n**3))\n  local cubescount=$((cubes/cube))\n  local\
    \ cubesremain=$((cubescount-1))\n  local cubesremainremain=$((cubesremain-1))\n\
    \  local cubesremainremainremainremain=$((cubesremainremain-1))\n  local cubesremainremainremainremainremainremain=$((cubesremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremain=$((cubesremainremainremainremainremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremainremainremain=$((cubesremainremainremainremainremainremainremainremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremainremainremainremainremain=$((cubesremainremainremainremainremainremainremainremainremainremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain=$((cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain=$((cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain=$((cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain=$((cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain=$((cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain=$((cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain-1))\n\
    \  local cubesremainremainremainremainremainremainremainremainremainremainremainremainremainremainremain\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local number=$1\n\
    \  local result\n  result=$(echo \"$number\" | bc)\n  echo \"$result\"\n  if [\
    \ \"$result\" -eq \"1\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((x*y*z))\n    local cubew=$((w*w*w))\n    local cubecube=$((cube*cube))\n\
    \    local cubecubew=$((cubew*cubew))\n    local cubecubecube=$((cubecube*cube))\n\
    \    local cubecubecubew=$((cubecubew*cubew))\n    local cubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecubecube=$((cubecubecube*cube))\n\
    \    local cubecubecubecubecubew=$((cubecubecubew*cubew))\n    local cubecubecubecubecube=$((cube\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1udmwtcc.sh: line 53: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1udmwtcc.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( $a * $a * $a ))\n        if [ $b -eq $a ]\n        then\n         \
    \   echo \"true\"\n        else\n            echo \"false\"\n        fi\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2cb15lty.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmp2cb15lty.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a b\n  a=$1\n\
    \  if [[ $a =~ ^[0-9]+$ ]]; then\n    b=$(( $a % $a ))\n    if [[ $b -eq 0 ]];\
    \ then\n      return true\n    else\n      return false\n    fi\n  else\n    return\
    \ false\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjj8i5w36.sh: line 26: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( a % 3 ))\n        if [ $b -eq 0 ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $a -eq 1 ]\n    then\n\
    \      echo \"true\"\n    else\n      if [ $a -eq 2 ]\n      then\n        echo\
    \ \"true\"\n      else\n        if [ $a -eq 3 ]\n        then\n          echo\
    \ \"true\"\n        else\n          if [ $a -eq 4 ]\n          then\n        \
    \    echo \"true\"\n          else\n            if [ $a -eq 5 ]\n            then\n\
    \              echo \"true\"\n            else\n              if [ $a -eq 6 ]\n\
    \              then\n                echo \"true\"\n              else\n     \
    \           if [ $a -eq 7 ]\n                then\n                  echo \"true\"\
    \n                else\n                  if [ $a -eq 8 ]\n                  then\n\
    \                    echo \"true\"\n                  else\n                 \
    \   if [ $a -eq 9 ]\n                    then\n                      echo \"true\"\
    \n                    else\n                      if [ $a -eq 10 ]\n         \
    \             then\n                        echo \"true\"\n                  \
    \    else\n                        if [ $a -eq 11 ]\n                        then\n\
    \                          echo \"true\"\n                        else\n     \
    \                     if [ $a -eq 12 ]\n                          then\n     \
    \                       echo \"true\"\n                          else\n      \
    \                      if [ $a -eq 13 ]\n                            then\n  \
    \                            echo \"true\"\n                            else\n\
    \                              if [ $a -eq 14 ]\n                            \
    \  then\n                                echo \"true\"\n                     \
    \         else\n                                if [ $a -eq 15 ]\n           \
    \                     then\n                                  echo \"true\"\n\
    \                                else\n                                  if [\
    \ $a -eq 16 ]\n                                  then\n                      \
    \              echo \"true\"\n                                  else\n       \
    \                             if [ $a -eq 17 ]\n                             \
    \       then\n                                      echo \"true\"\n          \
    \                          else\n                                      if [ $a\
    \ -eq 18 ]\n                                      then\n                     \
    \                   echo \"true\"\n                                      else\n\
    \                                        if [ $a -eq 19 ]\n                  \
    \                      then\n                                          echo \"\
    true\"\n                                        else\n                       \
    \                   if [ $a -eq 20 ]\n                                       \
    \   then\n                                            echo \"true\"\n        \
    \                                  else\n                                    \
    \        if [ $a -eq 21 ]\n                                            then\n\
    \                                              echo \"true\"\n               \
    \                             else\n                                         \
    \     if [ $a -eq 22 ]\n                                              then\n \
    \                                               echo \"true\"\n              \
    \                                else\n                                      \
    \          if [ $a -eq 23 ]\n                                                then\n\
    \                                                  echo \"true\"\n           \
    \                                     else\n                                 \
    \                 if [ $a -eq 24 ]\n                                         \
    \         then\n                                                    echo \"\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwwvyq_nl.sh: line 136: unexpected EOF while looking for matching
    `"''

    /tmp/tmpwwvyq_nl.sh: line 140: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then return 1; fi\n    if [ $a -eq 1 ]; then return 1; fi\n\
    \    if [ $a -eq 2 ]; then return 1; fi\n    if [ $a -eq 3 ]; then return 1; fi\n\
    \    if [ $a -eq 4 ]; then return 1; fi\n    if [ $a -eq 5 ]; then return 1; fi\n\
    \    if [ $a -eq 6 ]; then return 1; fi\n    if [ $a -eq 7 ]; then return 1; fi\n\
    \    if [ $a -eq 8 ]; then return 1; fi\n    if [ $a -eq 9 ]; then return 1; fi\n\
    \    if [ $a -eq 10 ]; then return 1; fi\n    if [ $a -eq 11 ]; then return 1;\
    \ fi\n    if [ $a -eq 12 ]; then return 1; fi\n    if [ $a -eq 13 ]; then return\
    \ 1; fi\n    if [ $a -eq 14 ]; then return 1; fi\n    if [ $a -eq 15 ]; then return\
    \ 1; fi\n    if [ $a -eq 16 ]; then return 1; fi\n    if [ $a -eq 17 ]; then return\
    \ 1; fi\n    if [ $a -eq 18 ]; then return 1; fi\n    if [ $a -eq 19 ]; then return\
    \ 1; fi\n    if [ $a -eq 20 ]; then return 1; fi\n    if [ $a -eq 21 ]; then return\
    \ 1; fi\n    if [ $a -eq 22 ]; then return 1; fi\n    if [ $a -eq 23 ]; then return\
    \ 1; fi\n    if [ $a -eq 24 ]; then return 1; fi\n    if [ $a -eq 25 ]; then return\
    \ 1; fi\n    if [ $a -eq 26 ]; then return 1; fi\n    if [ $a -eq 27 ]; then return\
    \ 1; fi\n    if [ $a -eq 28 ]; then return 1; fi\n    if [ $a -eq 29 ]; then return\
    \ 1; fi\n    if [ $a -eq 30 ]; then return 1; fi\n    if [ $a -eq 31 ]; then return\
    \ 1; fi\n    if [ $a -eq 32 ]; then return 1; fi\n    if [ $a -eq 33 ]; then return\
    \ 1; fi\n    if [ $a -eq 34 ]; then return 1; fi\n    if [ $a -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk922l3df.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpk922l3df.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal w=\"$4\"\n\tlocal a=\"$5\"\n\tlocal\
    \ b=\"$6\"\n\tlocal c=\"$7\"\n\tlocal d=\"$8\"\n\tlocal e=\"$9\"\n\tlocal f=\"\
    $10\"\n\tlocal g=\"$11\"\n\tlocal h=\"$12\"\n\tlocal i=\"$13\"\n\tlocal j=\"$14\"\
    \n\tlocal k=\"$15\"\n\tlocal l=\"$16\"\n\tlocal m=\"$17\"\n\tlocal n=\"$18\"\n\
    \tlocal o=\"$19\"\n\tlocal p=\"$20\"\n\tlocal q=\"$21\"\n\tlocal r=\"$22\"\n\t\
    local s=\"$23\"\n\tlocal t=\"$24\"\n\tlocal u=\"$25\"\n\tlocal v=\"$26\"\n\tlocal\
    \ w=\"$27\"\n\tlocal x=\"$28\"\n\tlocal y=\"$29\"\n\tlocal z=\"$30\"\n\tlocal\
    \ w=\"$31\"\n\tlocal a=\"$32\"\n\tlocal b=\"$33\"\n\tlocal c=\"$34\"\n\tlocal\
    \ d=\"$35\"\n\tlocal e=\"$36\"\n\tlocal f=\"$37\"\n\tlocal g=\"$38\"\n\tlocal\
    \ h=\"$39\"\n\tlocal i=\"$40\"\n\tlocal j=\"$41\"\n\tlocal k=\"$42\"\n\tlocal\
    \ l=\"$43\"\n\tlocal m=\"$44\"\n\tlocal n=\"$45\"\n\tlocal o=\"$46\"\n\tlocal\
    \ p=\"$47\"\n\tlocal q=\"$48\"\n\tlocal r=\"$49\"\n\tlocal s=\"$50\"\n\tlocal\
    \ t=\"$51\"\n\tlocal u=\"$52\"\n\tlocal v=\"$53\"\n\tlocal w=\"$54\"\n\tlocal\
    \ x=\"$55\"\n\tlocal y=\"$56\"\n\tlocal z=\"$57\"\n\tlocal w=\"$58\"\n\tlocal\
    \ a=\"$59\"\n\tlocal b=\"$60\"\n\tlocal c=\"$61\"\n\tlocal d=\"$62\"\n\tlocal\
    \ e=\"$63\"\n\tlocal f=\"$64\"\n\tlocal g=\"$65\"\n\tlocal h=\"$66\"\n\tlocal\
    \ i=\"$67\"\n\tlocal j=\"$68\"\n\tlocal k=\"$69\"\n\tlocal l=\"$70\"\n\tlocal\
    \ m=\"$71\"\n\tlocal n=\"$72\"\n\tlocal o=\"$73\"\n\tlocal p=\"$74\"\n\tlocal\
    \ \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ cube=$((n**3))\n\t[ \"$n\" -eq \"$cube\" ] && return 0\n\treturn 1\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"false\"\n    else\n        local cubes=$(echo\
    \ \"$n\" | bc)\n        if [ $cubes -eq 0 ]; then\n            echo \"true\"\n\
    \        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ cubes=$2\n  local cube=$((n**3))\n  local cubes=$((cubes+1))\n  if [ $cubes\
    \ -eq $cube ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tlocal\
    \ b=$(( $a * $a * $a ))\n\tlocal c=$(( $a * $a * $a ))\n\tlocal d=$(( $a * $a\
    \ * $a ))\n\tlocal e=$(( $a * $a * $a ))\n\tlocal f=$(( $a * $a * $a ))\n\tlocal\
    \ g=$(( $a * $a * $a ))\n\tlocal h=$(( $a * $a * $a ))\n\tlocal i=$(( $a * $a\
    \ * $a ))\n\tlocal j=$(( $a * $a * $a ))\n\tlocal k=$(( $a * $a * $a ))\n\tlocal\
    \ l=$(( $a * $a * $a ))\n\tlocal m=$(( $a * $a * $a ))\n\tlocal n=$(( $a * $a\
    \ * $a ))\n\tlocal o=$(( $a * $a * $a ))\n\tlocal p=$(( $a * $a * $a ))\n\tlocal\
    \ q=$(( $a * $a * $a ))\n\tlocal r=$(( $a * $a * $a ))\n\tlocal s=$(( $a * $a\
    \ * $a ))\n\tlocal t=$(( $a * $a * $a ))\n\tlocal u=$(( $a * $a * $a ))\n\tlocal\
    \ v=$(( $a * $a * $a ))\n\tlocal w=$(( $a * $a * $a ))\n\tlocal x=$(( $a * $a\
    \ * $a ))\n\tlocal y=$(( $a * $a * $a ))\n\tlocal z=$(( $a * $a * $a ))\n\tlocal\
    \ A=$(( $a * $a * $a ))\n\tlocal B=$(( $a * $a * $a ))\n\tlocal C=$(( $a * $a\
    \ * $a ))\n\tlocal D=$(( $a * $a * $a ))\n\tlocal E=$(( $a * $a * $a ))\n\tlocal\
    \ F=$(( $a * $a * $a ))\n\tlocal G=$(( $a * $a * $a ))\n\tlocal H=$(( $a * $a\
    \ * $a ))\n\tlocal I=$(( $a * $a * \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpquu3ep0c.sh: line 55: unexpected EOF while looking for matching
    `)''

    /tmp/tmpquu3ep0c.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cubes=$2\n    local cube=$((n**3))\n    if [ \"$cube\" -eq \"$cubes\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaqbdvegz.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ result=false\n\tlocal cubes=$( echo \"$n\" | sed 's/^-?[0-9]*//g' )\n\tlocal\
    \ cube=$( echo \"$n\" | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g'\
    \ | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9]*//g' | sed 's/^-?[0-9\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq_faxz5z.sh: line 24: unexpected EOF while looking for matching
    `''''

    /tmp/tmpq_faxz5z.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4gc_mva_.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp4gc_mva_.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]; then \n    echo \"true\"\n  else\n    if [ $a -le 180 ]; then\
    \ \n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tif\
    \ [ $a -eq 0 ]\n\tthen\n\t\treturn 0\n\telif [ $a -eq 1 ]\n\tthen\n\t\treturn\
    \ 1\n\telif [ $a -eq 2 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 3 ]\n\tthen\n\t\
    \treturn 1\n\telif [ $a -eq 4 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 5 ]\n\t\
    then\n\t\treturn 1\n\telif [ $a -eq 6 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq\
    \ 7 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 8 ]\n\tthen\n\t\treturn 1\n\telif\
    \ [ $a -eq 9 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 10 ]\n\tthen\n\t\treturn\
    \ 1\n\telif [ $a -eq 11 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 12 ]\n\tthen\n\
    \t\treturn 1\n\telif [ $a -eq 13 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 14 ]\n\
    \tthen\n\t\treturn 1\n\telif [ $a -eq 15 ]\n\tthen\n\t\treturn 1\n\telif [ $a\
    \ -eq 16 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 17 ]\n\tthen\n\t\treturn 1\n\
    \telif [ $a -eq 18 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 19 ]\n\tthen\n\t\t\
    return 1\n\telif [ $a -eq 20 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 21 ]\n\t\
    then\n\t\treturn 1\n\telif [ $a -eq 22 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq\
    \ 23 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 24 ]\n\tthen\n\t\treturn 1\n\telif\
    \ [ $a -eq 25 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 26 ]\n\tthen\n\t\treturn\
    \ 1\n\telif [ $a -eq 27 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 28 ]\n\tthen\n\
    \t\treturn 1\n\telif [ $a -eq 29 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 30 ]\n\
    \tthen\n\t\treturn 1\n\telif [ $a -eq 31 ]\n\tthen\n\t\treturn 1\n\telif [ $a\
    \ -eq 32 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 33 ]\n\t\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplxh5ik55.sh: line 123: syntax error near unexpected token `}''

    /tmp/tmplxh5ik55.sh: line 123: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    local result=\"false\"\n    if [[ $number -eq 0 ]]; then\n        result=\"\
    true\"\n    elif (( number % 3 )); then\n        result=\"true\"\n    elif ((\
    \ number % 9 )); then\n        result=\"true\"\n    elif (( number % 27 )); then\n\
    \        result=\"true\"\n    elif (( number % 81 )); then\n        result=\"\
    true\"\n    elif (( number % 83 )); then\n        result=\"true\"\n    elif ((\
    \ number % 85 )); then\n        result=\"true\"\n    elif (( number % 89 )); then\n\
    \        result=\"true\"\n    elif (( number % 91 )); then\n        result=\"\
    true\"\n    elif (( number % 93 )); then\n        result=\"true\"\n    elif ((\
    \ number % 95 )); then\n        result=\"true\"\n    elif (( number % 97 )); then\n\
    \        result=\"true\"\n    elif (( number % 99 )); then\n        result=\"\
    true\"\n    elif (( number % 101 )); then\n        result=\"true\"\n    elif ((\
    \ number % 103 )); then\n        result=\"true\"\n    elif (( number % 105 ));\
    \ then\n        result=\"true\"\n    elif (( number % 107 )); then\n        result=\"\
    true\"\n    elif (( number % 109 )); then\n        result=\"true\"\n    elif ((\
    \ number % 111 )); then\n        result=\"true\"\n    elif (( number % 113 ));\
    \ then\n        result=\"true\"\n    elif (( number % 115 )); then\n        result=\"\
    true\"\n    elif (( number % 117 )); then\n        result=\"true\"\n    elif ((\
    \ number % 119 )); then\n        result=\"true\"\n    elif (( number % 121 ));\
    \ then\n        result=\"true\"\n    elif (( number % 123 )); then\n        result=\"\
    true\"\n    elif (( number % 125 )); then\n        result=\"true\"\n    elif ((\
    \ number % 127 )); then\n        result=\"true\"\n    elif (( number % 129 ));\
    \ then\n        result=\"true\"\n    elif (( number % 131 )); then\n        result=\"\
    true\"\n    elif (( number % 133 )); then\n        result=\"true\"\n    elif ((\
    \ number % 135 )); then\n        result=\"true\"\n    elif (( number % 137 ));\
    \ then\n        result=\"true\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphtm2v_af.sh: line 102: unexpected EOF while looking for matching
    `"''

    /tmp/tmphtm2v_af.sh: line 106: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal number=$1\n\
    \tif [ $number -eq 0 ]; then\n\t\treturn 1\n\tfi\n\tif [ $number -eq 1 ]; then\n\
    \t\treturn 0\n\tfi\n\tif [ $number -eq 2 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number\
    \ -eq 3 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 4 ]; then\n\t\treturn\
    \ 0\n\tfi\n\tif [ $number -eq 5 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq\
    \ 6 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 7 ]; then\n\t\treturn 0\n\t\
    fi\n\tif [ $number -eq 8 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 9 ];\
    \ then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 10 ]; then\n\t\treturn 0\n\tfi\n\
    \tif [ $number -eq 11 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 12 ]; then\n\
    \t\treturn 0\n\tfi\n\tif [ $number -eq 13 ]; then\n\t\treturn 0\n\tfi\n\tif [\
    \ $number -eq 14 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 15 ]; then\n\t\
    \treturn 0\n\tfi\n\tif [ $number -eq 16 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number\
    \ -eq 17 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 18 ]; then\n\t\treturn\
    \ 0\n\tfi\n\tif [ $number -eq 19 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq\
    \ 20 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 21 ]; then\n\t\treturn 0\n\
    \tfi\n\tif [ $number -eq 22 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 23\
    \ ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 24 ]; then\n\t\treturn 0\n\t\
    fi\n\tif [ $number -eq 25 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 26 ];\
    \ then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 27 ]; then\n\t\treturn 0\n\tfi\n\
    \tif [ $number -eq 28 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 29 ]; then\n\
    \t\treturn 0\n\tfi\n\tif [ $number -eq 30 ]; then\n\t\treturn 0\n\tfi\n\tif [\
    \ $number -eq 31 ]; then\n\t\treturn 0\n\tfi\n\tif [ $number -eq 32 ]; then\n\t\
    \treturn 0\n\tfi\n\tif [ $number -eq 33 ]; then\n\t\treturn \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5qwk_wp_.sh: line 123: syntax error near unexpected token `}''

    /tmp/tmp5qwk_wp_.sh: line 123: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    elif [ $x -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 3 ]; then \n        echo \"true\"\n    elif [ $x -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 6 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $x -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 9 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $x -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 13 ]; then \n        echo \"true\"\n    elif [ $x -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 16 ]; then \n        echo \"true\"\n    elif [ $x -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 19 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $x -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 22 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $x -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 26 ]; then \n        echo \"true\"\n    elif [ $x -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 29 ]; then \n        echo \"true\"\n    elif [ $x -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6t61d5v0.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp6t61d5v0.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n    local C\n    local D\n    local E\n    local F\n    local\
    \ G\n    local H\n    local I\n    local J\n    local K\n    local L\n    local\
    \ M\n    local N\n    local O\n    local P\n    local Q\n    local R\n    local\
    \ S\n    local T\n    local U\n    local V\n    local W\n    local X\n    local\
    \ Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( ${a} * ${a} * ${a} ))\n  local c=$(( ${a} * ${a} * ${a} + ${a} * ${a}\
    \ + ${a} ))\n  local d=$(( ${a} * ${a} * ${a} + ${a} * ${a} + ${a} ))\n  local\
    \ e=$(( ${a} * ${a} ))\n  local f=$(( ${a} * ${a} + ${a} ))\n  local g=$(( ${a}\
    \ + ${a} ))\n  local h=$(( ${a} + ${a} + ${a} ))\n  local i=$(( ${a} + ${a} +\
    \ ${a} + ${a} ))\n  local j=$(( ${a} + ${a} + ${a} + ${a} + ${a} ))\n  local k=$((\
    \ ${a} + ${a} + ${a} + ${a} + ${a} + ${a} ))\n  local l=$(( ${a} + ${a} + ${a}\
    \ + ${a} + ${a} + ${a} + ${a} ))\n  local m=$(( ${a} + ${a} + ${a} + ${a} + ${a}\
    \ + ${a} + ${a} + ${a} ))\n  local n=$(( ${a} + ${a} + ${a} + ${a} + ${a} + ${a}\
    \ + ${a} + ${a} + ${a} ))\n  local o=$(( ${a} + ${a} + ${a} + ${a} + ${a} + ${a}\
    \ + ${a} + ${a} + ${a} + ${a} ))\n  local p=$(( ${a} + ${a} + ${a} + ${a} + ${a}\
    \ + ${a} + ${a} + ${a} + ${a} + ${a} + ${a} ))\n  local q=$(( ${a} + ${a} + ${a}\
    \ + ${a} + ${a} + ${a} + ${a} + ${a} + ${a} + ${a} + ${a} ))\n  local r=$(( ${a}\
    \ + \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqvzx5e13.sh: line 38: unexpected EOF while looking for matching
    `)''

    /tmp/tmpqvzx5e13.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tif\
    \ [ $a -eq 0 ]\n\tthen\n\t\treturn 0\n\telif [ $a -eq 1 ]\n\tthen\n\t\treturn\
    \ 1\n\telif [ $a -eq 2 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 3 ]\n\tthen\n\t\
    \treturn 1\n\telif [ $a -eq 4 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 5 ]\n\t\
    then\n\t\treturn 1\n\telif [ $a -eq 6 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq\
    \ 7 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 8 ]\n\tthen\n\t\treturn 1\n\telif\
    \ [ $a -eq 9 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 10 ]\n\tthen\n\t\treturn\
    \ 1\n\telif [ $a -eq 11 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 12 ]\n\tthen\n\
    \t\treturn 1\n\telif [ $a -eq 13 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 14 ]\n\
    \tthen\n\t\treturn 1\n\telif [ $a -eq 15 ]\n\tthen\n\t\treturn 1\n\telif [ $a\
    \ -eq 16 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 17 ]\n\tthen\n\t\treturn 1\n\
    \telif [ $a -eq 18 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 19 ]\n\tthen\n\t\t\
    return 1\n\telif [ $a -eq 20 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 21 ]\n\t\
    then\n\t\treturn 1\n\telif [ $a -eq 22 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq\
    \ 23 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 24 ]\n\tthen\n\t\treturn 1\n\telif\
    \ [ $a -eq 25 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 26 ]\n\tthen\n\t\treturn\
    \ 1\n\telif [ $a -eq 27 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 28 ]\n\tthen\n\
    \t\treturn 1\n\telif [ $a -eq 29 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 30 ]\n\
    \tthen\n\t\treturn 1\n\telif [ $a -eq 31 ]\n\tthen\n\t\treturn 1\n\telif [ $a\
    \ -eq 32 ]\n\tthen\n\t\treturn 1\n\telif [ $a -eq 33 ]\n\t\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplxh5ik55.sh: line 123: syntax error near unexpected token `}''

    /tmp/tmplxh5ik55.sh: line 123: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a b\n\ta=$1\n\
    \tb=$(( a ** 3 ))\n\t[ \"$b\" -eq \"$a\" ] && return 0\n\treturn 1\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( $a % $a ))\n        if [ $b -eq 0 ]\n        then\n            echo\
    \ \"true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ sum=0\n\tlocal cubes=0\n\tlocal cube\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cubes=$(echo \"$n\" | awk '{print $1}')\n    local cubeslen=${#cubes[@]}\n\
    \    local cubesnum=0\n    local cubesnum2=0\n    local cubesnum3=0\n    local\
    \ cubesnum4=0\n    local cubesnum5=0\n    local cubesnum6=0\n    local cubesnum7=0\n\
    \    local cubesnum8=0\n    local cubesnum9=0\n    local cubesnum10=0\n    local\
    \ cubesnum11=0\n    local cubesnum12=0\n    local cubesnum13=0\n    local cubesnum14=0\n\
    \    local cubesnum15=0\n    local cubesnum16=0\n    local cubesnum17=0\n    local\
    \ cubesnum18=0\n    local cubesnum19=0\n    local cubesnum20=0\n    local cubesnum21=0\n\
    \    local cubesnum22=0\n    local cubesnum23=0\n    local cubesnum24=0\n    local\
    \ cubesnum25=0\n    local cubesnum26=0\n    local cubesnum27=0\n    local cubesnum28=0\n\
    \    local cubesnum29=0\n    local cubesnum30=0\n    local cubesnum31=0\n    local\
    \ cubesnum32=0\n    local cubesnum33=0\n    local cubesnum34=0\n    local cubesnum35=0\n\
    \    local cubesnum36=0\n    local cubesnum37=0\n    local cubesnum38=0\n    local\
    \ cubesnum39=0\n    local cubesnum40=0\n    local cubesnum41=0\n    local cubesnum42=0\n\
    \    local cubesnum43=0\n    local cubesnum44=0\n    local cubesnum45=0\n    local\
    \ cubesnum46=0\n    local cubesnum47=0\n    local cubesnum48=0\n    local cubesnum49=0\n\
    \    local cubesnum50=0\n    local cubesnum51=0\n    local cubesnum52=0\n    local\
    \ cubesnum53=0\n    local cubesnum54=0\n    local cubesnum55=0\n    local cubesnum56=0\n\
    \    local cubesnum57=0\n    local cubesnum58=0\n    local cubesnum59=0\n    local\
    \ cubesnum60=0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    local cubes=$2\n    if [ $number -eq $cubes ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn13_fxsn.sh: line 23: [: 1: unary operator expected

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 1 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 2 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 3 ]]; then\n        echo \"true\"\n    elif [[ $x -eq\
    \ 4 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 5 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $x -eq 6 ]]; then\n        echo \"true\"\n    elif [[\
    \ $x -eq 7 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 8 ]]; then\n  \
    \      echo \"true\"\n    elif [[ $x -eq 9 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 10 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 11 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 12 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 13 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 14 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 15 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 16 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 17 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 18 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 19 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 20 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 21 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 22 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 23 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 24 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 25 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 26 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 27 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 28 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 29 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 30 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 31 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 32 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 33 ]]; then\n\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz1j4z5fj.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmpz1j4z5fj.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cubes=$(echo \"$n\" | grep -E '^[0-9]+$')\n    local cube=$(echo \"\
    $n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n    local cube_sum=$(echo \"\
    $n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n    local\
    \ cube_sum2=$(echo \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E\
    \ '^[0-9]+$' | grep -E '^[0-9]+$')\n    local cube_sum3=$(echo \"$n\" | grep -E\
    \ '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' |\
    \ grep -E '^[0-9]+$')\n    local cube_sum4=$(echo \"$n\" | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$')\n    local cube_sum5=$(echo \"$n\" | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n    local cube_sum6=$(echo \"$n\"\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n\
    \    local cube_sum7=$(echo \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' |\
    \ grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n    local cube_sum8=$(echo\
    \ \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep\
    \ -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgb0kd6xz.sh: line 31: unexpected EOF while looking for matching
    `)''

    /tmp/tmpgb0kd6xz.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ \"$x\" -eq \"$x\" ] 2>/dev/null; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then return 1; fi\n    if [ $x -eq 1 ]; then return 1;\
    \ fi\n    if [ $x -eq 2 ]; then return 1; fi\n    if [ $x -eq 3 ]; then return\
    \ 1; fi\n    if [ $x -eq 4 ]; then return 1; fi\n    if [ $x -eq 5 ]; then return\
    \ 1; fi\n    if [ $x -eq 6 ]; then return 1; fi\n    if [ $x -eq 7 ]; then return\
    \ 1; fi\n    if [ $x -eq 8 ]; then return 1; fi\n    if [ $x -eq 9 ]; then return\
    \ 1; fi\n    if [ $x -eq 10 ]; then return 1; fi\n    if [ $x -eq 11 ]; then return\
    \ 1; fi\n    if [ $x -eq 12 ]; then return 1; fi\n    if [ $x -eq 13 ]; then return\
    \ 1; fi\n    if [ $x -eq 14 ]; then return 1; fi\n    if [ $x -eq 15 ]; then return\
    \ 1; fi\n    if [ $x -eq 16 ]; then return 1; fi\n    if [ $x -eq 17 ]; then return\
    \ 1; fi\n    if [ $x -eq 18 ]; then return 1; fi\n    if [ $x -eq 19 ]; then return\
    \ 1; fi\n    if [ $x -eq 20 ]; then return 1; fi\n    if [ $x -eq 21 ]; then return\
    \ 1; fi\n    if [ $x -eq 22 ]; then return 1; fi\n    if [ $x -eq 23 ]; then return\
    \ 1; fi\n    if [ $x -eq 24 ]; then return 1; fi\n    if [ $x -eq 25 ]; then return\
    \ 1; fi\n    if [ $x -eq 26 ]; then return 1; fi\n    if [ $x -eq 27 ]; then return\
    \ 1; fi\n    if [ $x -eq 28 ]; then return 1; fi\n    if [ $x -eq 29 ]; then return\
    \ 1; fi\n    if [ $x -eq 30 ]; then return 1; fi\n    if [ $x -eq 31 ]; then return\
    \ 1; fi\n    if [ $x -eq 32 ]; then return 1; fi\n    if [ $x -eq 33 ]; then return\
    \ 1; fi\n    if [ $x -eq 34 ]; then return 1; fi\n    if [ $x -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgq6yzw5i.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpgq6yzw5i.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( a%3 ))\n        if [ $b -eq 0 ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    elif [ $a -eq 1 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 2 ]; then\n        echo \"true\"\n \
    \   elif [ $a -eq 3 ]; then\n        echo \"true\"\n    elif [ $a -eq 4 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 5 ]; then\n        echo \"true\"\n \
    \   elif [ $a -eq 6 ]; then\n        echo \"true\"\n    elif [ $a -eq 7 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 8 ]; then\n        echo \"true\"\n \
    \   elif [ $a -eq 9 ]; then\n        echo \"true\"\n    elif [ $a -eq 10 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 11 ]; then\n        echo \"true\"\n\
    \    elif [ $a -eq 12 ]; then\n        echo \"true\"\n    elif [ $a -eq 13 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 14 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 15 ]; then\n        echo \"true\"\n    elif [ $a -eq 16 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 17 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 18 ]; then\n        echo \"true\"\n    elif [ $a -eq 19 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 20 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 21 ]; then\n        echo \"true\"\n    elif [ $a -eq 22 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 23 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 24 ]; then\n        echo \"true\"\n    elif [ $a -eq 25 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 26 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 27 ]; then\n        echo \"true\"\n    elif [ $a -eq 28 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 29 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 30 ]; then\n        echo \"true\"\n    elif [ $a -eq 31 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 32 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 33 ]; then\n        echo \"true\"\n    elif [ $a -eq 34 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 35 ]; then\n        echo \"true\"\
    \n    elif \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp34k7tr0w.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmp34k7tr0w.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        local i\n\
    \        for i in $(seq 1 $n); do\n            if [ $((i*i*i)) -eq $n ]; then\n\
    \                echo \"true\"\n                break\n            fi\n      \
    \  done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ cubes=$(echo \"$n\" | grep -E '^[0-9]+$')\n  local cube=$(( $cubes ))\n  local\
    \ cube=$(( $cube*$cube*$cube))\n  local cube=$(( $cube*$cube*$cube))\n  local\
    \ cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n\
    \  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$((\
    \ $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n\
    \  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$((\
    \ $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n\
    \  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$((\
    \ $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n\
    \  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$((\
    \ $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n\
    \  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$((\
    \ $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n\
    \  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$((\
    \ $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n\
    \  local cube=$(( $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$((\
    \ $cube*$cube))\n  local cube=$(( $cube*$cube))\n  local cube=$((\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv59qnlht.sh: line 63: unexpected EOF while looking for matching
    `)''

    /tmp/tmpv59qnlht.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a b\n\ta=$1\n\
    \tb=$(( a * a ))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b\
    \ * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqe3apc5q.sh: line 78: unexpected EOF while looking for matching
    `)''

    /tmp/tmpqe3apc5q.sh: line 98: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n       \
    \ b=$(( $a**3 ))\n        if [ $b -eq $a ]; then \n            echo \"true\"\n\
    \        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tif\
    \ [ $a -eq 0 ]; then return 1; fi\n\tif [ $a -eq 1 ]; then return 1; fi\n\tif\
    \ [ $a -eq 2 ]; then return 1; fi\n\tif [ $a -eq 3 ]; then return 1; fi\n\tif\
    \ [ $a -eq 4 ]; then return 1; fi\n\tif [ $a -eq 5 ]; then return 1; fi\n\tif\
    \ [ $a -eq 6 ]; then return 1; fi\n\tif [ $a -eq 7 ]; then return 1; fi\n\tif\
    \ [ $a -eq 8 ]; then return 1; fi\n\tif [ $a -eq 9 ]; then return 1; fi\n\tif\
    \ [ $a -eq 10 ]; then return 1; fi\n\tif [ $a -eq 11 ]; then return 1; fi\n\t\
    if [ $a -eq 12 ]; then return 1; fi\n\tif [ $a -eq 13 ]; then return 1; fi\n\t\
    if [ $a -eq 14 ]; then return 1; fi\n\tif [ $a -eq 15 ]; then return 1; fi\n\t\
    if [ $a -eq 16 ]; then return 1; fi\n\tif [ $a -eq 17 ]; then return 1; fi\n\t\
    if [ $a -eq 18 ]; then return 1; fi\n\tif [ $a -eq 19 ]; then return 1; fi\n\t\
    if [ $a -eq 20 ]; then return 1; fi\n\tif [ $a -eq 21 ]; then return 1; fi\n\t\
    if [ $a -eq 22 ]; then return 1; fi\n\tif [ $a -eq 23 ]; then return 1; fi\n\t\
    if [ $a -eq 24 ]; then return 1; fi\n\tif [ $a -eq 25 ]; then return 1; fi\n\t\
    if [ $a -eq 26 ]; then return 1; fi\n\tif [ $a -eq 27 ]; then return 1; fi\n\t\
    if [ $a -eq 28 ]; then return 1; fi\n\tif [ $a -eq 29 ]; then return 1; fi\n\t\
    if [ $a -eq 30 ]; then return 1; fi\n\tif [ $a -eq 31 ]; then return 1; fi\n\t\
    if [ $a -eq 32 ]; then return 1; fi\n\tif [ $a -eq 33 ]; then return 1; fi\n\t\
    if [ $a -eq 34 ]; then return 1; fi\n\tif [ $a -eq 35 ]; then return 1; fi\n\t\
    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprjl9bumn.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmprjl9bumn.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4gc_mva_.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp4gc_mva_.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq $x ]] ; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ cube=$((n**3))\n  echo $((cube%1))\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local number=$1\n\
    \  if [ $number -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $number -eq\
    \ 1 ]\n    then\n      if [ $number -eq 2 ]\n      then\n        if [ $number\
    \ -eq 3 ]\n        then\n          if [ $number -eq 4 ]\n          then\n    \
    \        if [ $number -eq 5 ]\n            then\n              if [ $number -eq\
    \ 6 ]\n              then\n                if [ $number -eq 7 ]\n            \
    \    then\n                  if [ $number -eq 8 ]\n                  then\n  \
    \                  if [ $number -eq 9 ]\n                    then\n          \
    \            echo \"true\"\n                    else\n                      echo\
    \ \"false\"\n                    fi\n                  else\n                \
    \    echo \"false\"\n                  fi\n                else\n            \
    \      echo \"false\"\n                fi\n              else\n              \
    \  echo \"false\"\n              fi\n            else\n              echo \"false\"\
    \n            fi\n          else\n            echo \"false\"\n          fi\n \
    \       else\n          echo \"false\"\n        fi\n      else\n        echo \"\
    false\"\n      fi\n    else\n      echo \"false\"\n    fi\n  fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( $a % $a ))\n  local c=$(( $a / $a ))\n  local d=$(( $a / $b ))\n  local\
    \ e=$(( $a / $c ))\n  local f=$(( $a / $d ))\n  local g=$(( $a / $e ))\n  local\
    \ h=$(( $a / $f ))\n  local i=$(( $a / $g ))\n  local j=$(( $a / $h ))\n  local\
    \ k=$(( $a / $i ))\n  local l=$(( $a / $j ))\n  local m=$(( $a / $k ))\n  local\
    \ n=$(( $a / $l ))\n  local o=$(( $a / $m ))\n  local p=$(( $a / $n ))\n  local\
    \ q=$(( $a / $o ))\n  local r=$(( $a / $p ))\n  local s=$(( $a / $q ))\n  local\
    \ t=$(( $a / $r ))\n  local u=$(( $a / $s ))\n  local v=$(( $a / $t ))\n  local\
    \ w=$(( $a / $u ))\n  local x=$(( $a / $v ))\n  local y=$(( $a / $w ))\n  local\
    \ z=$(( $a / $x ))\n  echo $(( $a == $b )) && echo $(( $a == $c )) && echo $((\
    \ $a == $d )) && echo $(( $a == $e )) && echo $(( $a == $f )) && echo $(( $a ==\
    \ $g )) && echo $(( $a == $h )) && echo $(( $a == $i )) && echo $(( $a == $j ))\
    \ && echo $(( $a == $k )) && echo $(( $a == $l )) && echo $(( $a == $m )) && echo\
    \ $(( $a == $n )) && echo $(( $a == $o )) && echo $(( $a == $p )) && echo $((\
    \ $a == $q )) && echo $(( $a == $r )) && echo $(( $a == $s )) && echo $(( $a ==\
    \ $t )) && echo $(( $a == $u )) && echo $(( $a == $v )) && echo $(( $a == $w ))\
    \ && echo $(( $a == $x )) && echo $(( $a == $y )) && echo $(( $a == $z ))\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvz6dkzl9.sh: line 24: 1 / 0 : division by 0 (error token is "0
    ")

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then return 1; fi\n    if [ $n -eq 1 ]; then return 1; fi\n\
    \    if [ $n -eq 2 ]; then return 1; fi\n    if [ $n -eq 3 ]; then return 1; fi\n\
    \    if [ $n -eq 4 ]; then return 1; fi\n    if [ $n -eq 5 ]; then return 1; fi\n\
    \    if [ $n -eq 6 ]; then return 1; fi\n    if [ $n -eq 7 ]; then return 1; fi\n\
    \    if [ $n -eq 8 ]; then return 1; fi\n    if [ $n -eq 9 ]; then return 1; fi\n\
    \    if [ $n -eq 10 ]; then return 1; fi\n    if [ $n -eq 11 ]; then return 1;\
    \ fi\n    if [ $n -eq 12 ]; then return 1; fi\n    if [ $n -eq 13 ]; then return\
    \ 1; fi\n    if [ $n -eq 14 ]; then return 1; fi\n    if [ $n -eq 15 ]; then return\
    \ 1; fi\n    if [ $n -eq 16 ]; then return 1; fi\n    if [ $n -eq 17 ]; then return\
    \ 1; fi\n    if [ $n -eq 18 ]; then return 1; fi\n    if [ $n -eq 19 ]; then return\
    \ 1; fi\n    if [ $n -eq 20 ]; then return 1; fi\n    if [ $n -eq 21 ]; then return\
    \ 1; fi\n    if [ $n -eq 22 ]; then return 1; fi\n    if [ $n -eq 23 ]; then return\
    \ 1; fi\n    if [ $n -eq 24 ]; then return 1; fi\n    if [ $n -eq 25 ]; then return\
    \ 1; fi\n    if [ $n -eq 26 ]; then return 1; fi\n    if [ $n -eq 27 ]; then return\
    \ 1; fi\n    if [ $n -eq 28 ]; then return 1; fi\n    if [ $n -eq 29 ]; then return\
    \ 1; fi\n    if [ $n -eq 30 ]; then return 1; fi\n    if [ $n -eq 31 ]; then return\
    \ 1; fi\n    if [ $n -eq 32 ]; then return 1; fi\n    if [ $n -eq 33 ]; then return\
    \ 1; fi\n    if [ $n -eq 34 ]; then return 1; fi\n    if [ $n -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp24pog_4d.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp24pog_4d.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]; then return 1; fi\n    if [ $a -eq -1 ]; then return\
    \ 1; fi\n    if [ $a -eq 1 ]; then return 1; fi\n    if [ $a -eq 2 ]; then return\
    \ 1; fi\n    if [ $a -eq 3 ]; then return 1; fi\n    if [ $a -eq 4 ]; then return\
    \ 1; fi\n    if [ $a -eq 5 ]; then return 1; fi\n    if [ $a -eq 6 ]; then return\
    \ 1; fi\n    if [ $a -eq 7 ]; then return 1; fi\n    if [ $a -eq 8 ]; then return\
    \ 1; fi\n    if [ $a -eq 9 ]; then return 1; fi\n    if [ $a -eq 10 ]; then return\
    \ 1; fi\n    if [ $a -eq 11 ]; then return 1; fi\n    if [ $a -eq 12 ]; then return\
    \ 1; fi\n    if [ $a -eq 13 ]; then return 1; fi\n    if [ $a -eq 14 ]; then return\
    \ 1; fi\n    if [ $a -eq 15 ]; then return 1; fi\n    if [ $a -eq 16 ]; then return\
    \ 1; fi\n    if [ $a -eq 17 ]; then return 1; fi\n    if [ $a -eq 18 ]; then return\
    \ 1; fi\n    if [ $a -eq 19 ]; then return 1; fi\n    if [ $a -eq 20 ]; then return\
    \ 1; fi\n    if [ $a -eq 21 ]; then return 1; fi\n    if [ $a -eq 22 ]; then return\
    \ 1; fi\n    if [ $a -eq 23 ]; then return 1; fi\n    if [ $a -eq 24 ]; then return\
    \ 1; fi\n    if [ $a -eq 25 ]; then return 1; fi\n    if [ $a -eq 26 ]; then return\
    \ 1; fi\n    if [ $a -eq 27 ]; then return 1; fi\n    if [ $a -eq 28 ]; then return\
    \ 1; fi\n    if [ $a -eq 29 ]; then return 1; fi\n    if [ $a -eq 30 ]; then return\
    \ 1; fi\n    if [ $a -eq 31 ]; then return 1; fi\n    if [ $a -eq 32 ]; then return\
    \ 1; fi\n    if [ $a -eq 33 ]; then return 1; fi\n    if [ $a -eq 34 ]; then return\
    \ 1; \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdd12b1i8.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpdd12b1i8.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 1 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 2 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 3 ]]; then\n        echo \"true\"\n    elif [[ $x -eq\
    \ 4 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 5 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $x -eq 6 ]]; then\n        echo \"true\"\n    elif [[\
    \ $x -eq 7 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 8 ]]; then\n  \
    \      echo \"true\"\n    elif [[ $x -eq 9 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 10 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 11 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 12 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 13 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 14 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 15 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 16 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 17 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 18 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 19 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 20 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 21 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 22 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 23 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 24 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 25 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 26 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 27 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 28 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 29 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 30 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 31 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 32 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 33 ]]; then\n\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz1j4z5fj.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmpz1j4z5fj.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n       \
    \ b=$(( a * a ))\n        if [ $b -eq 0 ]; then \n            echo \"true\"\n\
    \        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]; then \n    echo \"true\"\n  else\n    if [ $a -eq 1 ]; then \n\
    \      echo \"true\"\n    elif [ $a -eq 2 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 3 ]; then \n      echo \"true\"\n    elif [ $a -eq 4 ]; then \n   \
    \   echo \"true\"\n    elif [ $a -eq 5 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 6 ]; then \n      echo \"true\"\n    elif [ $a -eq 7 ]; then \n   \
    \   echo \"true\"\n    elif [ $a -eq 8 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 9 ]; then \n      echo \"true\"\n    elif [ $a -eq 10 ]; then \n  \
    \    echo \"true\"\n    elif [ $a -eq 11 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 12 ]; then \n      echo \"true\"\n    elif [ $a -eq 13 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 14 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 15 ]; then \n      echo \"true\"\n    elif [ $a -eq 16 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 17 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 18 ]; then \n      echo \"true\"\n    elif [ $a -eq 19 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 20 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 21 ]; then \n      echo \"true\"\n    elif [ $a -eq 22 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 23 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 24 ]; then \n      echo \"true\"\n    elif [ $a -eq 25 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 26 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 27 ]; then \n      echo \"true\"\n    elif [ $a -eq 28 ]; then \n \
    \     echo \"true\"\n    elif [ $a -eq 29 ]; then \n      echo \"true\"\n    elif\
    \ [ $a -eq 30 ]; then \n      echo \"true\"\n    elif [ $a -eq 31 ]\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzrgkpm00.sh: line 86: syntax error near unexpected token `}''

    /tmp/tmpzrgkpm00.sh: line 86: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        if [ $n -eq\
    \ 1 ]; then\n            echo \"true\"\n        elif [ $n -eq 2 ]; then\n    \
    \        echo \"true\"\n        elif [ $n -eq 3 ]; then\n            echo \"true\"\
    \n        elif [ $n -eq 4 ]; then\n            echo \"true\"\n        elif [ $n\
    \ -eq 5 ]; then\n            echo \"true\"\n        elif [ $n -eq 6 ]; then\n\
    \            echo \"true\"\n        elif [ $n -eq 7 ]; then\n            echo\
    \ \"true\"\n        elif [ $n -eq 8 ]; then\n            echo \"true\"\n     \
    \   elif [ $n -eq 9 ]; then\n            echo \"true\"\n        elif [ $n -eq\
    \ 10 ]; then\n            echo \"true\"\n        elif [ $n -eq 11 ]; then\n  \
    \          echo \"true\"\n        elif [ $n -eq 12 ]; then\n            echo \"\
    true\"\n        elif [ $n -eq 13 ]; then\n            echo \"true\"\n        elif\
    \ [ $n -eq 14 ]; then\n            echo \"true\"\n        elif [ $n -eq 15 ];\
    \ then\n            echo \"true\"\n        elif [ $n -eq 16 ]; then\n        \
    \    echo \"true\"\n        elif [ $n -eq 17 ]; then\n            echo \"true\"\
    \n        elif [ $n -eq 18 ]; then\n            echo \"true\"\n        elif [\
    \ $n -eq 19 ]; then\n            echo \"true\"\n        elif [ $n -eq 20 ]; then\n\
    \            echo \"true\"\n        elif [ $n -eq 21 ]; then\n            echo\
    \ \"true\"\n        elif [ $n -eq 22 ]; then\n            echo \"true\"\n    \
    \    elif [ $n -eq 23 ]; then\n            echo \"true\"\n        elif [ $n -eq\
    \ 24 ]; then\n            echo \"true\"\n        elif [ $n -eq 25 ]; then\n  \
    \          echo \"true\"\n        elif [ $n -eq 26 ]; then\n            echo \"\
    true\"\n        elif [ $n -eq 27 ]; then\n            echo \"true\"\n        elif\
    \ [ $n -eq 28 ]; then\n            echo \"true\"\n        elif [ $n -eq 29 ];\
    \ then\n            echo \"true\"\n        elif [ $n -eq 30 ]; then\n        \
    \    echo \"true\"\n        elif [ $n -eq 31 ]; then\n            echo \"true\"\
    \n        elif [ $n -eq 32 ]; then\n            echo \"true\"\n        elif [\
    \ $n -eq 33 ]; then\n            echo \"true\"\n        elif [ $n -eq 34 ]; then\n\
    \            echo \"true\"\n        elif [ $n -eq 35 ]; then\n            echo\
    \ \"true\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkxt4cylg.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmpkxt4cylg.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  if [ $x -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $x -le 0 ]\n \
    \   then\n      echo \"false\"\n    else\n      if [ $x -le 180 ]\n      then\n\
    \        echo \"true\"\n      else\n        echo \"false\"\n      fi\n    fi\n\
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4gc_mva_.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp4gc_mva_.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( a**3 ))\n        if [ $b -eq $a ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=$(( x*x*x ))\n\tlocal z=$(( x*x*x*x ))\n\tlocal w=$(( x*x*x*x*x ))\n\
    \tlocal cube=$(( y*z*w ))\n\t[ \"$cube\" -eq \"$x\" ] && return 0\n\treturn 1\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=$((x*x*x))\n\tlocal z=$((y*y))\n\tlocal w=$((z*z))\n\t[ \"$w\" -eq \"\
    $x\" ] || return 1\n\treturn 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    elif (( $(echo \"$x\
    \ != 0\" | bc -l) )) ; then\n        echo \"false\"\n    else\n        echo \"\
    true\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y\n\tlocal z\n\tlocal w\n\tlocal cube\n\tlocal result\n\t\n\ty=0\n\tz=0\n\
    \tw=0\n\tcube=\"1\"\n\tresult=\"false\"\n\t\n\twhile [ \"$y\" -lt \"$x\" ]; do\n\
    \t\tz=$((z+1))\n\t\tw=$((w+1))\n\t\tif [ \"$z\" -eq \"$x\" ]; then\n\t\t\tcube=\"\
    $cube$w\"\n\t\t\tresult=\"$result$cube\"\n\t\tfi\n\tdone\n\t\n\techo \"$result\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660050243
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then return 1; fi\n    if [ $a -eq 1 ]; then return 1; fi\n\
    \    if [ $a -eq 2 ]; then return 1; fi\n    if [ $a -eq 3 ]; then return 1; fi\n\
    \    if [ $a -eq 4 ]; then return 1; fi\n    if [ $a -eq 5 ]; then return 1; fi\n\
    \    if [ $a -eq 6 ]; then return 1; fi\n    if [ $a -eq 7 ]; then return 1; fi\n\
    \    if [ $a -eq 8 ]; then return 1; fi\n    if [ $a -eq 9 ]; then return 1; fi\n\
    \    if [ $a -eq 10 ]; then return 1; fi\n    if [ $a -eq 11 ]; then return 1;\
    \ fi\n    if [ $a -eq 12 ]; then return 1; fi\n    if [ $a -eq 13 ]; then return\
    \ 1; fi\n    if [ $a -eq 14 ]; then return 1; fi\n    if [ $a -eq 15 ]; then return\
    \ 1; fi\n    if [ $a -eq 16 ]; then return 1; fi\n    if [ $a -eq 17 ]; then return\
    \ 1; fi\n    if [ $a -eq 18 ]; then return 1; fi\n    if [ $a -eq 19 ]; then return\
    \ 1; fi\n    if [ $a -eq 20 ]; then return 1; fi\n    if [ $a -eq 21 ]; then return\
    \ 1; fi\n    if [ $a -eq 22 ]; then return 1; fi\n    if [ $a -eq 23 ]; then return\
    \ 1; fi\n    if [ $a -eq 24 ]; then return 1; fi\n    if [ $a -eq 25 ]; then return\
    \ 1; fi\n    if [ $a -eq 26 ]; then return 1; fi\n    if [ $a -eq 27 ]; then return\
    \ 1; fi\n    if [ $a -eq 28 ]; then return 1; fi\n    if [ $a -eq 29 ]; then return\
    \ 1; fi\n    if [ $a -eq 30 ]; then return 1; fi\n    if [ $a -eq 31 ]; then return\
    \ 1; fi\n    if [ $a -eq 32 ]; then return 1; fi\n    if [ $a -eq 33 ]; then return\
    \ 1; fi\n    if [ $a -eq 34 ]; then return 1; fi\n    if [ $a -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk922l3df.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpk922l3df.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [[ $a -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    local result=$(echo \"$number\" | grep -E '^[0-9]+$')\n    if [[ $result\
    \ != \"\" ]]; then\n        if [ $number -eq $result ]; then\n            echo\
    \ \"true\"\n        else\n            echo \"false\"\n        fi\n    else\n \
    \       echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660050238
