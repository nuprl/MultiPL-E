name: HumanEval_27_flip_case
language: sh
prompt: "#!/bin/bash\n# For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1\
  \ is a string\nflip_case() {\n"
tests: "}\n\ncandidate() {\n    flip_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hello\\!\") = \"hELLO\\!\" ]]\n\
  \    [[ $(candidate \"These violent delights have violent ends\") = \"tHESE VIOLENT\
  \ DELIGHTS HAVE VIOLENT ENDS\" ]]\n}\n\nrun_test"
completions: ["  local string=\"$1\"\n  echo \"${string^}\"", "    local string=$1\n\
    \    local output\n    output=$(echo \"$string\" | sed 's/\\(.\\)/\\U\\1/')\n\
    \    output=$(echo \"$output\" | sed 's/\\(.\\)/\\L\\1/')\n    echo \"$output\"",
  "    local string=$1\n    local output\n    output=$(echo $string | sed -e 's/\\\
    (.\\)/\\U\\1/')\n    output=$(echo $output | sed -e 's/\\U\\(.\\)/\\L\\1/')\n\
    \    echo \"$output\"", "    local string=\"$1\"\n    local result=\"\"\n    local\
    \ i\n    for (( i=0; i<${#string}; i++ )); do\n        result+=\"${string[i]^^}\"\
    \n    done\n    echo \"$result\"", "    local string=\"$1\"\n    local output\n\
    \    for (( i = 0; i < ${#string}; i++ )); do\n        output=\"${string:$i:1}${string:$i:1}\"\
    \n    done\n    echo \"$output\"", "    local string=\"$1\"\n    local output=\"\
    \"\n    for (( i = 0; i < ${#string}; i++ )); do\n        local c=\"${string:$i:1}\"\
    \n        case \"$c\" in\n            [:lower:])\n                output+=\"$(echo\
    \ \"$c\" | tr '[:upper:]' '[:lower:]')\"\n                ;;\n            [:upper:])\n\
    \                output+=\"$(echo \"$c\" | tr '[:lower:]' '[:upper:]')\"\n   \
    \             ;;\n        esac\n    done\n    echo \"$output\"", "    local string=\"\
    $1\"\n    local output=\"\"\n    local i\n    for (( i=1; i<${#string}; i++ ));\
    \ do\n        local c=\"${string:$i:1}\"\n        case $c in\n            [a-z])\n\
    \                output+=\"[A-Z]${string:$i:1}\"\n                ;;\n       \
    \     *)\n                output+=\"$c\"\n                ;;\n        esac\n \
    \   done\n    echo \"$output\"", "    local string=\"$1\"\n    local output=\"\
    \"\n    local i\n    for (( i = 0; i < ${#string}; i++ )); do\n        local c=${string:$i:1}\n\
    \        case \"$c\" in\n            [a-z])\n                output+=\"[A-Z]${string:$((i+1)):1}\"\
    \n                ;;\n            *)\n                output+=\"$c\"\n       \
    \         ;;\n        esac\n    done\n    echo \"$output\"", "    local string=\"\
    $1\"\n    local output=\"\"\n    local i\n    for (( i = 0; i < ${#string}; i++\
    \ )); do\n        local c=\"${string:$i:1}\"\n        case $c in\n           \
    \ [:lower:])\n                output+=\"\\U$c\"\n                ;;\n        \
    \    [:upper:])\n                output+=\"\\L$c\"\n                ;;\n     \
    \       *)\n                output+=\"$c\"\n                ;;\n        esac\n\
    \    done\n    echo \"$output\"", "    local string=\"$1\"\n    local output\n\
    \    for (( i = 0; i < ${#string}; i++ )); do\n        output=\"${string:i:1}${string:i+1:1}\"\
    \n    done\n    echo \"$output\"", "    local string=\"$1\"\n    local newstring=\"\
    \"\n    local i\n    for (( i = 0; i < ${#string}; i++ )); do\n        local c=\"\
    ${string:$i:1}\"\n        case \"$c\" in\n            [:lower:])\n           \
    \     newstring=\"${newstring}$c\"\n                ;;\n            [:upper:])\n\
    \                newstring=\"${newstring}${c:0:1}\"\n                ;;\n    \
    \        *)\n                newstring=\"${newstring}${c}\"\n                ;;\n\
    \        esac\n    done\n    echo \"$newstring\"", "    local string=\"$1\"\n\
    \    local output=\"\"\n    local i\n    for (( i=1; i<${#string}; i++ )); do\n\
    \        local c=\"${string:$i:1}\"\n        case \"$c\" in\n            [:lower:]\
    \ )\n                output+=\"$(echo \"$c\" | tr '[:upper:]' '[:lower:]')\"\n\
    \                ;;\n            [:upper:] )\n                output+=\"$(echo\
    \ \"$c\" | tr '[:lower:]' '[:upper:]')\"\n                ;;\n            * )\n\
    \                output+=\"$c\"\n                ;;\n        esac\n    done\n\
    \    echo \"$output\"", "    local string=$1\n    local newstring=\"\"\n    local\
    \ i\n    for (( i = 0; i < ${#string}; i++ )); do\n        local letter=${string:$i:1}\n\
    \        case \"${letter}\" in\n            A) newstring+=\"a\"\n            B)\
    \ newstring+=\"b\"\n            C) newstring+=\"c\"\n            D) newstring+=\"\
    d\"\n            E) newstring+=\"e\"\n            F) newstring+=\"f\"\n      \
    \      G) newstring+=\"g\"\n            H) newstring+=\"h\"\n            I) newstring+=\"\
    i\"\n            J) newstring+=\"j\"\n            K) newstring+=\"k\"\n      \
    \      L) newstring+=\"l\"\n            M) newstring+=\"m\"\n            N) newstring+=\"\
    n\"\n            O) newstring+=\"o\"\n            P) newstring+=\"p\"\n      \
    \      Q) newstring+=\"q\"\n            R) newstring+=\"r\"\n            S) newstring+=\"\
    s\"\n            T) newstring+=\"t\"\n            U) newstring+=\"u\"\n      \
    \      V) newstring+=\"v\"\n            W) newstring+=\"w\"\n            X) newstring+=\"\
    x\"\n            Y) newstring+=\"y\"\n            Z) newstring+=\"z\"\n      \
    \  esac\n    done\n    echo \"${newstring}\"", "    local string=\"$1\"\n    local\
    \ output=\"\"\n    local i\n    for (( i = 0; i < ${#string}; i++ )); do\n   \
    \     local c=\"${string:$i:1}\"\n        if [[ $c =~ [a-z] ]]; then\n       \
    \     c=\"${c^^}\"\n        fi\n        output+=\"$c\"\n    done\n    echo \"\
    $output\"", "    local string=\"$1\"\n    local newString=\"\"\n    for (( i =\
    \ 0; i < ${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n     \
    \   case \"$char\" in\n            [:lower:] )\n                newString+=\"\
    $(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n                ;;\n       \
    \     [:upper:] )\n                newString+=\"$(echo \"$char\" | tr '[:lower:]'\
    \ '[:upper:]')\"\n                ;;\n            * )\n                newString+=\"\
    $char\"\n                ;;\n        esac\n    done\n    echo \"$newString\"",
  "    local string=$1\n    local output\n    output=$(echo \"${string}\" | sed 's/\\\
    (.\\)/\\U\\1/')\n    output=$(echo \"${output}\" | sed 's/\\(.\\)/\\L\\1/')\n\
    \    echo \"${output}\"", "    local string=\"$1\"\n    local output=\"\"\n  \
    \  for (( i=0; i<${#string}; i++ )); do\n        local letter=${string:$i:1}\n\
    \        case \"${letter}\" in\n            [a-z]) output+=\"[A-Z]\" ;;\n    \
    \        [A-Z]) output+=\"[a-z]\" ;;\n        esac\n    done\n    echo \"${output}\"",
  "  local string=$1\n  local result=\"\"\n  local i\n  for i in $(seq 0 $((${#string}\
    \ - 1)))\n  do\n    local c=${string:$i:1}\n    case \"$c\" in\n      [a-z])\n\
    \        result+=\"[A-Z]${string:$((i + 1)):1}\"\n        ;;\n      [A-Z])\n \
    \       result+=\"[a-z]${string:$((i + 1)):1}\"\n        ;;\n      *)\n      \
    \  result+=\"$c\"\n        ;;\n    esac\n  done\n  echo \"$result\"", "    local\
    \ string=\"$1\"\n    local output\n    output=$(echo \"$string\" | sed -e 's/\\\
    (.\\)/\\U\\1/')\n    output=$(echo \"$output\" | sed -e 's/\\(.\\)/\\L\\1/')\n\
    \    echo \"$output\"", "    local string=$1\n    local new_string=\"\"\n    for\
    \ (( i=0; i<${#string}; i++ )); do\n        local letter=${string:$i:1}\n    \
    \    local upper_letter=${letter^^}\n        local lower_letter=${letter^^}\n\
    \        new_string+=\"${upper_letter}\"\n        new_string+=\"${lower_letter}\"\
    \n    done\n    echo \"$new_string\""]
stop_tokens:
- "\n}"
