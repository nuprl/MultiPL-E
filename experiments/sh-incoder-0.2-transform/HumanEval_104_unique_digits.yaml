name: HumanEval_104_unique_digits
language: sh
prompt: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
  \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
  \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
  \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422\
  \ 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n"
tests: "}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
  \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
  \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
completions: ["    local x=\"$1\"\n    local output\n    output=$(echo \"$x\" | tr\
    \ \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"", "    local\
    \ x=\"$1\"\n    local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort\
    \ -u | tr \"\\n\" \" \")\n    echo \"$output\"", "    local x=\"$1\"\n    local\
    \ output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n\
    \    echo \"$output\"", "    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n    echo \"$output\"", "   \
    \ local x=\"$1\"\n    local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\"\
    \ | sort -n | uniq -d)\n    echo \"$output\"", "    local x=\"$1\"\n    local\
    \ output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n\
    \        if [[ ${digit:0:1} == \"0\" ]]; then\n            output+=(\"$digit\"\
    )\n        fi\n    done\n    echo \"${output[@]}\"", "    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"", "    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for i in $(seq 0 $((${#x}\
    \ - 1))); do\n        if [[ ${x:$i:1} == *\"0\"* ]]; then\n            output=$(echo\
    \ \"$output\" | sed 's/'\"$i\"'/\\1/')\n        fi\n    done\n    echo \"$output\"",
  "    local x=\"$1\"\n    local output\n    output=$(echo \"$x\" | tr ' ' '\\n' |\
    \ sort -u | tr '\\n' ' ')\n    echo \"$output\"", "    local x=\"$1\"\n    local\
    \ output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n \
    \   echo \"$output\"", "    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for i in $(seq 0 $((${#x}\
    \ - 1))); do\n        if [[ ${x:$i:1} == *\"0\"* ]]; then\n            output=$(echo\
    \ \"$output\" | sed \"s/$i/\\\"$i\\\"/\")\n        fi\n    done\n    echo \"$output\"",
  "    local x=\"$1\"\n    local output\n    output=$(echo \"$x\" | tr \" \" \"\\\
    n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"", "    local x=\"$1\"\n\
    \    local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq\
    \ -d)\n    echo \"$output\"", "    local x=\"$1\"\n    local -a y\n    local -a\
    \ z\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local\
    \ -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a w\n    local\
    \ -a x\n    local -a y\n    local -a z\n    local -a w\n    local -a x\n    local\
    \ -a y\n    local -a z\n    local -a w\n    local -a x\n    local -a y\n    local\
    \ -a z\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local\
    \ -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a w\n    local\
    \ -a x\n    local -a y\n    local -a z\n    local -a w\n    local -a x\n    local\
    \ -a y\n    local -a z\n    local -a w\n    local -a x\n    local -a y\n    local\
    \ -a z\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local\
    \ -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a w\n    local\
    \ -a x\n    local -a y\n    local -a z\n    local -a w\n    local -a x\n    local\
    \ -a y\n    local -a z\n    local -a w\n    local -a x\n    local -a y\n    local\
    \ -a z\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local\
    \ -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a w\n    local\
    \ -a x\n    local -a y\n    local -a z\n    local -a w\n    local -a x\n    local\
    \ -a y\n    local -a z\n    local -a w\n    local -a x\n    local -a y\n    local\
    \ -a z\n    local -a w\n    local -a x\n    local ", "    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"", "    local x=\"$1\"\n    local output\n   \
    \ output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for ((\
    \ i=0; i<${#output}; i++ )); do\n        if [[ ${output[$i]} == 0 ]]; then\n \
    \           echo \"$output[$i]\"\n        fi\n    done", "    local x=\"$1\"\n\
    \    local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr\
    \ \"\\n\" \" \")\n    echo \"$output\"", "    local x=\"$1\"\n    local output\n\
    \    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n\
    \        if (( ${digit:0:1} == 0 )) ; then\n            output+=(\"$digit\")\n\
    \        fi\n    done\n    echo \"${output[@]}\"", "    local x=\"$1\"\n    local\
    \ ret=()\n    local i\n    local digit\n    local j\n    local count\n    local\
    \ tmp\n    \n    for i in $x; do\n        digit=$(( 10#$i ))\n        count=0\n\
    \        for j in $x; do\n            if [ $j -ne $i ] && [ $j -eq $(( 10#$digit\
    \ )) ]; then\n                count=$(( count+1 ))\n            fi\n        done\n\
    \        if [ $count -eq 0 ]; then\n            tmp=\"\\\"$i\\\"\"\n         \
    \   echo \"$tmp\"\n        fi\n    done", "    local x=\"$1\"\n    local ret=()\n\
    \    local i=0\n    while [ $i -lt ${#x} ]; do\n        local j=0\n        while\
    \ [ $j -lt ${#ret[@]} ]; do\n            local k=0\n            while [ $k -lt\
    \ ${#ret[@]} ]; do\n                if [ \"${ret[$k]}\" == \"${x[$i]}\" ]; then\n\
    \                    ret[$j]=${ret[$j]}\" \"${x[$i]}\n                    break\n\
    \                fi\n                ((k++))\n            done\n            ((j++))\n\
    \        done\n        ((i++))\n    done\n    echo \"${ret[@]}\""]
stop_tokens:
- "\n}"
