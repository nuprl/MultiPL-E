name: HumanEval_44_change_base
language: sh
prompt: "#!/bin/bash\n# Change numerical base of input number x to base.\n# return\
  \ string representation after the conversion.\n# base numbers are less than 10.\n\
  # >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n#\
  \ \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n\
  # $2 is an integer\nchange_base() {\n"
tests: "}\n\ncandidate() {\n    change_base \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"8\" \"3\") = \"22\" ]]\n    [[ $(candidate \"9\" \"3\") = \"\
  100\" ]]\n    [[ $(candidate \"234\" \"2\") = \"11101010\" ]]\n    [[ $(candidate\
  \ \"16\" \"2\") = \"10000\" ]]\n    [[ $(candidate \"8\" \"2\") = \"1000\" ]]\n\
  \    [[ $(candidate \"7\" \"2\") = \"111\" ]]\n    [[ $(candidate \"2\" \"3\") =\
  \ \"2\" ]]\n    [[ $(candidate \"3\" \"4\") = \"3\" ]]\n    [[ $(candidate \"4\"\
  \ \"5\") = \"4\" ]]\n    [[ $(candidate \"5\" \"6\") = \"5\" ]]\n    [[ $(candidate\
  \ \"6\" \"7\") = \"6\" ]]\n    [[ $(candidate \"7\" \"8\") = \"7\" ]]\n}\n\nrun_test"
completions: ["  local x base\n  x=$1\n  base=$2\n  local result\n  if [ $base -lt\
    \ 10 ]; then\n    result=$((10#$x))\n  else\n    result=$((10#$x%$base))\n  fi\n\
    \  echo $result", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo\
    \ \"$x\" | bc)\n  echo \"$result\" | bc | awk -v base=\"$base\" 'BEGIN{printf\
    \ \"%0${base}d\\n\", $0}'", "  local x base result\n  x=$1\n  base=$2\n  result=$((\
    \ 10#$x ))\n  result=$(( result * $base ))\n  result=$(( result / $base ))\n \
    \ result=$(( result + 1 ))\n  result=$(( result % 10 ))\n  echo $result", "  local\
    \ x base\n  x=$1\n  base=$2\n  local ret\n  if [ $x -lt 10 ]; then\n    ret=$((10#$x))\n\
    \  else\n    ret=$((10#$x%$base))\n  fi\n  echo \"$ret\"", "    local x base\n\
    \    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\" ]; then\n      \
    \  echo \"$base: base must be less than 10\"\n        return 1\n    fi\n    if\
    \ [ \"$base\" -gt \"10\" ]; then\n        echo \"$base: base must be less than\
    \ 10\"\n        return 1\n    fi\n    if [ \"$base\" -eq \"0\" ]; then\n     \
    \   echo \"$base: base must be greater than 0\"\n        return 1\n    fi\n  \
    \  local result\n    result=$(echo \"$x\" | bc)\n    if [ \"$result\" -eq \"$x\"\
    \ ]; then\n        echo \"$base: base conversion failed\"\n        return 1\n\
    \    fi\n    echo \"$result\"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\
    \n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"$base: Base must be less\
    \ than 10\"\n        return 1\n    fi\n    if [ \"$base\" -eq \"10\" ]; then\n\
    \        echo \"$base: Base must be equal to 10\"\n        return 1\n    fi\n\
    \    if [ \"$base\" -ge \"10\" ]; then\n        echo \"$base: Base must be less\
    \ than 10\"\n        return 1\n    fi\n    if [ \"$base\" -le \"10\" ]; then\n\
    \        echo \"$base: Base must be greater than or equal to 10\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -lt \"0\" ]; then\n        echo \"$x: Input must\
    \ be greater than 0\"\n        return 1\n    fi\n    if [ \"$x\" -ge \"0\" ];\
    \ then\n        echo \"$x: Input must be greater than 0\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -le \"0\" ]; then\n        echo \"$x: Input must be greater\
    \ than 0\"\n        return 1\n    fi\n    if [ \"$base\" -eq \"10\" ]; then\n\
    \        echo \"$x: Input must be less than 10\"\n        return 1\n    fi\n \
    \   if [ \"$x\" -eq \"0\" ]; then\n        echo \"$x: Input must be greater than\
    \ 0\"\n        return 1\n    fi\n    if [ \"$x\" -ge \"0\" ]; then\n        echo\
    \ \"$x: Input must be greater than 0\"\n        return 1\n    fi\n    if [ \"\
    $x\" -le \"0\" ]; then\n        echo \"$x: Input must be greater than 0\"\n  \
    \      return 1\n    fi\n    if [ \"$base\" -eq \"10\" ]; then\n        echo \"\
    $x: Input must be less than 10\"\n        return 1\n    fi\n    if [ \"$x\" -eq\
    \ \"0\" ]; then\n        echo \"$x: Input must be greater than 0\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -ge \"0\" ]; then\n        echo \"$x: Input must\
    \ be greater than 0\"\n        return 1\n    fi\n    if [ \"$x\" -le \"0\" ];\
    \ then\n        echo \"$x: Input must be greater than 0\"\n        return 1\n\
    \    fi\n    if [ \"$base\" -eq \"10\" ]; then\n        echo \"$x: Input must\
    \ be less than 10\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"0\" ]; then\n\
    \        echo \"$x: Input must be greater than 0\"\n        return 1\n    fi\n\
    \    if [ \"$x\" -ge \"0\" ]; then\n        echo \"$x: Input must be greater than\
    \ 0\"\n        return 1\n    fi\n    if [ \"$x\" -le \"0\" ]; then\n        echo\
    \ \"$x: Input must be greater than 0\"\n        return 1\n    fi\n    if [ \"\
    $base\" -eq \"10\" ]; then\n        echo \"$x: Input must be less than 10\"\n\
    \        return 1\n    fi\n    if [ \"$x\" -eq \"0\" ]; then\n        echo \"\
    $x: Input must be greater than 0\"\n        return 1\n    fi\n    if [ \"$", " \
    \ local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x / base ))\n\
    \  result=$(( result * base ))\n  result=$(( result + x ))\n  echo \"$result\"",
  "    local x base result\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n\
    \        echo \"Base must be less than 10\"\n        return 1\n    fi\n    if\
    \ [ $base -gt 360 ]; then\n        echo \"Base must be less than 360\"\n     \
    \   return 1\n    fi\n    if [ $x -eq 0 ]; then\n        result=\"0\"\n    elif\
    \ [ $x -eq 1 ]; then\n        result=\"1\"\n    elif [ $x -eq 2 ]; then\n    \
    \    result=\"2\"\n    elif [ $x -eq 3 ]; then\n        result=\"3\"\n    elif\
    \ [ $x -eq 4 ]; then\n        result=\"4\"\n    elif [ $x -eq 5 ]; then\n    \
    \    result=\"5\"\n    elif [ $x -eq 6 ]; then\n        result=\"6\"\n    elif\
    \ [ $x -eq 7 ]; then\n        result=\"7\"\n    elif [ $x -eq 8 ]; then\n    \
    \    result=\"8\"\n    elif [ $x -eq 9 ]; then\n        result=\"9\"\n    elif\
    \ [ $x -eq 10 ]; then\n        result=\"10\"\n    elif [ $x -eq 11 ]; then\n \
    \       result=\"11\"\n    elif [ $x -eq 12 ]; then\n        result=\"12\"\n \
    \   elif [ $x -eq 13 ]; then\n        result=\"13\"\n    elif [ $x -eq 14 ]; then\n\
    \        result=\"14\"\n    elif [ $x -eq 15 ]; then\n        result=\"15\"\n\
    \    elif [ $x -eq 16 ]; then\n        result=\"16\"\n    elif [ $x -eq 17 ];\
    \ then\n        result=\"17\"\n    elif [ $x -eq 18 ]; then\n        result=\"\
    18\"\n    elif [ $x -eq 19 ]; then\n        result=\"19\"\n    elif [ $x -eq 20\
    \ ]; then\n        result=\"20\"\n    elif [ $x -eq 21 ]; then\n        result=\"\
    21\"\n    elif [ $x -eq 22 ]; then\n        result=\"22\"\n    elif [ $x -eq 23\
    \ ]; then\n        result=\"23\"\n    elif [ $x -eq 24 ]; then\n        result=\"\
    24\"\n    elif [ $x -eq 25 ]; then\n        result=\"25\"\n    elif [ $x -eq 26\
    \ ]; then\n        result=\"26\"\n    elif [ $x -eq 27 ]; then\n        result=\"\
    27\"\n    elif [ $x -eq 28 ]; then\n        result=\"28\"\n    elif [ $x -eq 29\
    \ ]; then\n        result=\"29\"\n    elif [ $x -eq 30 ]; then\n        result=\"\
    30\"\n    elif [ $x -eq 31 ]; then\n        result=\"31\"\n    elif [ $x -eq 32\
    \ ]; then\n        result=\"32\"\n    elif [ $x ", "    local x base\n    x=$1\n\
    \    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"Base $base is too\
    \ small\"\n        return 1\n    fi\n    if [ $base -gt 10 ]; then\n        echo\
    \ \"Base $base is too large\"\n        return 1\n    fi\n    local result\n  \
    \  result=$(( x / base ))\n    echo $result", "  local x base\n  x=$1\n  base=$2\n\
    \  local ret\n  ret=$(( x / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret +\
    \ x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret\
    \ + x % base ))\n  ret=$(( ret / base ))\n  ret=$(( ", "    local x base\n   \
    \ x=$1\n    base=$2\n    local result\n    if [ $base -lt 10 ]; then\n       \
    \ result=$(( x / $base ))\n    else\n        result=$(( x / 10 ))\n        result=$((\
    \ result * $base ))\n    fi\n    echo \"$result\"", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( 10#$x ))\n  result=$(( result*$base ))\n\
    \  result=$(( result+1 ))\n  result=$(( result%10 ))\n  echo \"$result\"", " \
    \   local x base\n    x=$1\n    base=$2\n    local result\n    if [ $base -lt\
    \ 10 ]; then\n        result=$(echo \"$x\" | bc)\n    else\n        result=$(echo\
    \ \"$x\" | bc -l)\n    fi\n    echo \"$result\"", "    local x base result\n \
    \   x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"Base $base\
    \ is too small\"\n        return 1\n    fi\n    if [ $base -gt 36 ]; then\n  \
    \      echo \"Base $base is too large\"\n        return 1\n    fi\n    result=$((\
    \ x / $base ))\n    if [ $result -eq 0 ]; then\n        echo \"Base $base is too\
    \ small\"\n        return 1\n    fi\n    if [ $result -gt $x ]; then\n       \
    \ echo \"Base $base is too large\"\n        return 1\n    fi\n    echo $(( $result\
    \ * $base ))", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(echo\
    \ \"$x\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  result=$(echo\
    \ \"$result\" | b", "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt\
    \ 10 ]; then\n        echo \"Base must be less than 10\"\n        return 1\n \
    \   fi\n    local result\n    result=$(echo \"$x\" | bc)\n    local i\n    for\
    \ (( i=1; i<$base; i++ )); do\n        result=$(bc <<< \"$result*$base\")\n  \
    \  done\n    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n   \
    \ if [ $base -lt 10 ]; then\n        echo \"$base\"\n        return\n    fi\n\
    \    if [ $base -gt 10 ]; then\n        echo \"$base\"\n        return\n    fi\n\
    \    local res\n    res=$(echo $x | sed \"s/\\([0-9]*\\)$base/\\$base\\1/g\")\n\
    \    echo \"$res\"", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ \"$result\"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"\
    $base\" -lt \"10\" ]; then\n        echo \"Base $base is less than 10.\"\n   \
    \     return 1\n    fi\n    if [ \"$base\" -eq \"10\" ]; then\n        echo \"\
    Base $base is equal to 10.\"\n        echo \"$x\"\n        return 0\n    fi\n\
    \    if [ \"$base\" -ge \"10\" ]; then\n        echo \"Base $base is greater than\
    \ 10.\"\n        echo \"$x\"\n        return 1\n    fi", "  local x base result\n\
    \  x=$1\n  base=$2\n  result=$(( 10#$x ))\n  result=$(( result*$base ))\n  result=$((\
    \ result+1 ))\n  result=$(( result%10 ))\n  echo $result", "    local x base result\n\
    \    x=$1\n    base=$2\n    result=$(( x / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( ", "  local x base\n  x=$1\n  base=$2\n  local\
    \ result\n  result=$(echo \"$x\" | bc)\n  result=$(echo \"$result\" | sed -e \"\
    s/$base//g\")\n  echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $x -eq 0 ]\n    then\n        echo \"0\"\n    elif [ $x -eq 1 ]\n  \
    \  then\n        echo \"1\"\n    elif [ $x -eq 2 ]\n    then\n        echo \"\
    2\"\n    elif [ $x -eq 3 ]\n    then\n        echo \"3\"\n    elif [ $x -eq 4\
    \ ]\n    then\n        echo \"4\"\n    elif [ $x -eq 5 ]\n    then\n        echo\
    \ \"5\"\n    elif [ $x -eq 6 ]\n    then\n        echo \"6\"\n    elif [ $x -eq\
    \ 7 ]\n    then\n        echo \"7\"\n    elif [ $x -eq 8 ]\n    then\n       \
    \ echo \"8\"\n    elif [ $x -eq 9 ]\n    then\n        echo \"9\"\n    elif [\
    \ $x -eq 10 ]\n    then\n        echo \"a\"\n    elif [ $x -eq 11 ]\n    then\n\
    \        echo \"b\"\n    elif [ $x -eq 12 ]\n    then\n        echo \"c\"\n  \
    \  elif [ $x -eq 13 ]\n    then\n        echo \"d\"\n    elif [ $x -eq 14 ]\n\
    \    then\n        echo \"e\"\n    elif [ $x -eq 15 ]\n    then\n        echo\
    \ \"f\"\n    elif [ $x -eq 16 ]\n    then\n        echo \"g\"\n    elif [ $x -eq\
    \ 17 ]\n    then\n        echo \"h\"\n    elif [ $x -eq 18 ]\n    then\n     \
    \   echo \"i\"\n    elif [ $x -eq 19 ]\n    then\n        echo \"j\"\n    elif\
    \ [ $x -eq 20 ]\n    then\n        echo \"k\"\n    elif [ $x -eq 21 ]\n    then\n\
    \        echo \"l\"\n    elif [ $x -eq 22 ]\n    then\n        echo \"m\"\n  \
    \  elif [ $x -eq 23 ]\n    then\n        echo \"n\"\n    elif [ $x -eq 24 ]\n\
    \    then\n        echo \"o\"\n    elif [ $x -eq 25 ]\n    then\n        echo\
    \ \"p\"\n    elif [ $x -eq 26 ]\n    then\n        echo \"q\"\n    elif [ $x -eq\
    \ 27 ]\n    then\n        echo \"r\"\n    elif [ $x -eq 28 ]\n    then\n     \
    \   echo \"s\"\n    elif [ $x -eq 29 ]\n    then\n        echo \"t\"\n    elif\
    \ [ $x ", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x /\
    \ base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo \"\
    $result\"", "    local x base result\n    x=${1%%-*}\n    base=${1##*-}\n    result=$((\
    \ ${x} / ${base} ))\n    if [ ${base} -lt 10 ]; then\n        result=$(( ${result}\
    \ + 10 ))\n    fi\n    echo \"${result}\"", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo $result", "    local x base\n    x=\"$1\"\n    base=\"\
    $2\"\n    if [ \"$base\" -eq 0 ]; then\n        echo \"$x\"\n    elif [ \"$base\"\
    \ -eq 1 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 2 ]; then\n\
    \        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 3 ]; then\n        echo\
    \ \"$((10#$x))\"\n    elif [ \"$base\" -eq 4 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 5 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 6 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq\
    \ 7 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 8 ]; then\n\
    \        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 9 ]; then\n        echo\
    \ \"$((10#$x))\"\n    elif [ \"$base\" -eq 10 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 11 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 12 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\"\
    \ -eq 13 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 14 ];\
    \ then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 15 ]; then\n   \
    \     echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 16 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ \"$base\" -eq 17 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 18 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 19 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\"\
    \ -eq 20 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 21 ];\
    \ then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 22 ]; then\n   \
    \     echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 23 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ \"$base\" -eq 24 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 25 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 26 ", "  local x base\n  x=$1\n  base=$2\n  echo \"$(( ${x} /\
    \ ${base} ))\"", "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt\
    \ 10 ]; then\n        echo \"Base must be less than 10\"\n        return 1\n \
    \   fi\n    if [ $base -gt 36 ]; then\n        echo \"Base must be less than 36\"\
    \n        return 1\n    fi\n    local result\n    result=$(( x / base ))\n   \
    \ if [ $result -eq 0 ]; then\n        echo \"Base must be less than 36\"\n   \
    \     return 1\n    fi\n    echo $(( x * base ))", "    local x base\n    x=$1\n\
    \    base=$2\n    if [ $x -lt 10 ]; then\n        echo \"$x\"\n    else\n    \
    \    echo \"$(( 10#$x ))\"\n    fi", "  local x=\"$1\"\n  local base=\"$2\"\n\
    \  local result\n  result=$(echo \"$x\" | bc)\n  echo \"$result\"", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $x -eq 0 ]\n    then\n        echo \"\
    0\"\n    elif [ $x -eq 1 ]\n    then\n        echo \"1\"\n    elif [ $x -eq 2\
    \ ]\n    then\n        echo \"2\"\n    elif [ $x -eq 3 ]\n    then\n        echo\
    \ \"3\"\n    elif [ $x -eq 4 ]\n    then\n        echo \"4\"\n    elif [ $x -eq\
    \ 5 ]\n    then\n        echo \"5\"\n    elif [ $x -eq 6 ]\n    then\n       \
    \ echo \"6\"\n    elif [ $x -eq 7 ]\n    then\n        echo \"7\"\n    elif [\
    \ $x -eq 8 ]\n    then\n        echo \"8\"\n    elif [ $x -eq 9 ]\n    then\n\
    \        echo \"9\"\n    elif [ $x -eq 10 ]\n    then\n        echo \"a\"\n  \
    \  elif [ $x -eq 11 ]\n    then\n        echo \"b\"\n    elif [ $x -eq 12 ]\n\
    \    then\n        echo \"c\"\n    elif [ $x -eq 13 ]\n    then\n        echo\
    \ \"d\"\n    elif [ $x -eq 14 ]\n    then\n        echo \"e\"\n    elif [ $x -eq\
    \ 15 ]\n    then\n        echo \"f\"\n    elif [ $x -eq 16 ]\n    then\n     \
    \   echo \"g\"\n    elif [ $x -eq 17 ]\n    then\n        echo \"h\"\n    elif\
    \ [ $x -eq 18 ]\n    then\n        echo \"i\"\n    elif [ $x -eq 19 ]\n    then\n\
    \        echo \"j\"\n    elif [ $x -eq 20 ]\n    then\n        echo \"k\"\n  \
    \  elif [ $x -eq 21 ]\n    then\n        echo \"l\"\n    elif [ $x -eq 22 ]\n\
    \    then\n        echo \"m\"\n    elif [ $x -eq 23 ]\n    then\n        echo\
    \ \"n\"\n    elif [ $x -eq 24 ]\n    then\n        echo \"o\"\n    elif [ $x -eq\
    \ 25 ]\n    then\n        echo \"p\"\n    elif [ $x -eq 26 ]\n    then\n     \
    \   echo \"q\"\n    elif [ $x -eq 27 ]\n    then\n        echo \"r\"\n    elif\
    \ [ $x -eq 28 ]\n    then\n        echo \"s\"\n    elif [ $x -eq 29 ]\n    then\n\
    \        echo \"t\"\n    elif [ $x ", "    local x base\n    x=\"$1\"\n    base=\"\
    $2\"\n    local result\n    if [ \"$base\" -lt \"10\" ]; then\n        result=$(echo\
    \ \"$x\" | bc)\n    else\n        result=$(echo \"$x\" | bc -l)\n    fi\n    echo\
    \ \"$result\"", "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10\
    \ ]; then\n        echo \"$base\"\n    elif [ $base -eq 10 ]; then\n        echo\
    \ \"$x\"\n    else\n        echo \"$(( $x / $base ))$(( $x % $base ))\"\n    fi",
  "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\"\
    \ ]; then\n        echo \"Base $base is too small\"\n        return 1\n    fi\n\
    \    if [ \"$base\" -gt \"10\" ]; then\n        echo \"Base $base is too large\"\
    \n        return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc)\n\
    \    if [ \"$result\" -eq \"$x\" ]; then\n        echo \"$x\"\n    else\n    \
    \    echo \"$result\"\n    fi", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=0\n  while [ $x -gt 0 ]; do\n    result=$((result*base+$((x%base))))\n\
    \    x=$((x/base))\n  done\n  echo $result", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(echo \"$x\" | bc)\n  result=$(( ${result} * ${base}\
    \ ))\n  result=$(( ${result} / ${base} ))\n  result=$(( ${result} + ${base} ))\n\
    \  result=$(( ${result} % ${base} ))\n  echo \"$result\"", "    local x base result\n\
    \    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        result=$((10#$x))\n\
    \    else\n        result=$((10#$x%$base))\n    fi\n    echo \"$result\"", " \
    \   local x base\n    x=$1\n    base=$2\n    local result\n    result=$(echo \"\
    $x\" | bc)\n    if [ $result -eq 0 ] ; then\n        echo \"0\"\n    elif [ $base\
    \ -eq 10 ] ; then\n        echo \"$result\"\n    else\n        echo \"$result\"\
    \ | bc | awk -v b=$base 'BEGIN{printf \"%0*d\", b, int(b)}'\n    fi", "    local\
    \ x base result\n    x=$1\n    base=$2\n    result=$(( 10#$x ))\n    while [ $x\
    \ -gt 0 ]; do\n        result=$(( 10#$result + $base ))\n        x=$(( $x - $base\
    \ ))\n    done\n    echo $result", "    local x base\n    x=$1\n    base=$2\n\
    \    local result\n    if [ $base -lt 10 ]; then\n        result=$(( 10#$x ))\n\
    \    else\n        result=$(( 10#$x ))\n    fi\n    echo \"$result\"", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $x -lt 10 ]; then\n        echo \"$((10#$x))\"\
    \n    else\n        echo \"$((10#$x%$base))\"\n    fi", "    local x base result\n\
    \    x=$1\n    base=$2\n    result=$(echo \"$x\" | bc)\n    if [ $base -eq 10\
    \ ]; then\n        echo \"$result\"\n    else\n        echo \"$result\" | bc |\
    \ awk '{printf \"%d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03d%03",
  "    local x base result\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n\
    \        result=$(( 10#$x ))\n    else\n        result=$(( 10#$x ))\n        while\
    \ [ $result -ge $base ]; do\n            result=$(( $result/10 ))\n        done\n\
    \        result=$(( $result*$base ))\n    fi\n    echo \"$result\"", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $x -lt 10 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ $base -lt 10 ]; then\n        echo \"$((10#$x))\"\n    elif [ $base\
    \ -eq 10 ]; then\n        echo \"$x\"\n    else\n        echo \"$((10#$x))\"\n\
    \    fi", "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo \"$x\"\
    \ | bc)\n  echo \"$ret\"", "    local x base\n    x=$1\n    base=$2\n    if [\
    \ $base -lt 10 ]; then\n        echo \"Base must be less than 10\"\n        return\
    \ 1\n    fi\n    if [ $base -gt 36 ]; then\n        echo \"Base must be less than\
    \ 36\"\n        return 1\n    fi\n    if [ $x -lt 0 ]; then\n        echo \"Input\
    \ number must be positive\"\n        return 1\n    fi\n    if [ $x -gt $((10#$base))\
    \ ]; then\n        echo \"Input number must be less than $base\"\n        return\
    \ 1\n    fi\n    local result\n    result=$((10#$x))\n    echo $result", "   \
    \ local x base\n    x=\"$1\"\n    base=\"$2\"\n    local result\n    result=$(echo\
    \ \"$x\" | bc)\n    if [ \"$base\" -lt 10 ]; then\n        echo \"$result\"\n\
    \    else\n        echo \"$(echo \"$result\" | sed \"s/$base/$((10#$base))/\"\
    )\"\n    fi", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\"\
    \ -eq 0 ]; then\n        echo \"$x\"\n    elif [ \"$base\" -eq 1 ]; then\n   \
    \     echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 2 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ \"$base\" -eq 3 ]; then\n        echo \"$((10#$x))\"\n\
    \    elif [ \"$base\" -eq 4 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"\
    $base\" -eq 5 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 6\
    \ ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 7 ]; then\n \
    \       echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 8 ]; then\n        echo\
    \ \"$((10#$x))\"\n    elif [ \"$base\" -eq 9 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 10 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 11 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\"\
    \ -eq 12 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 13 ];\
    \ then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 14 ]; then\n   \
    \     echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 15 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ \"$base\" -eq 16 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 17 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 18 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\"\
    \ -eq 19 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 20 ];\
    \ then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 21 ]; then\n   \
    \     echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 22 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ \"$base\" -eq 23 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 24 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 25 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\"\
    \ -eq 26 ", "    local x base result\n    x=$1\n    base=$2\n    result=$(( 10#$x\
    \ ))\n    while [ $base -gt 0 ]; do\n        result=$(( 10#$result * $base ))\n\
    \        base=$(( $base - 1 ))\n    done\n    result=$(( 10#$result ))\n    echo\
    \ \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "    local i x base\n    local result\n    local count\n    local\
    \ digits\n    local digit\n    local digit2\n    local digit3\n    local digit4\n\
    \    local digit5\n    local digit6\n    local digit7\n    local digit8\n    local\
    \ digit9\n    local digit10\n    local digit11\n    local digit12\n    local digit13\n\
    \    local digit14\n    local digit15\n    local digit16\n    local digit17\n\
    \    local digit18\n    local digit19\n    local digit20\n    local digit21\n\
    \    local digit22\n    local digit23\n    local digit24\n    local digit25\n\
    \    local digit26\n    local digit27\n    local digit28\n    local digit29\n\
    \    local digit30\n    local digit31\n    local digit32\n    local digit33\n\
    \    local digit34\n    local digit35\n    local digit36\n    local digit37\n\
    \    local digit38\n    local digit39\n    local digit40\n    local digit41\n\
    \    local digit42\n    local digit43\n    local digit44\n    local digit45\n\
    \    local digit46\n    local digit47\n    local digit48\n    local digit49\n\
    \    local digit50\n    local digit51\n    local digit52\n    local digit53\n\
    \    local digit54\n    local digit55\n    local digit56\n    local digit57\n\
    \    local digit58\n    local digit59\n    local digit60\n    local digit61\n\
    \    local digit62\n    local digit63\n    local digit64\n    local digit65\n\
    \    local digit66\n    local digit67\n    local digit68\n    local digit69\n\
    \    local digit70\n    local digit71\n    local digit72\n    local digit73\n\
    \    local digit74\n    local digit75\n    local digit76\n    local digit77\n\
    \    local digit78\n    local digit79\n    local digit80\n    local digit81\n\
    \    local digit82\n    local digit83\n    local digit84\n    local digit85\n\
    \    local digit86\n    local digit87\n    local digit88\n    local digit89\n\
    \    local digit90\n    local digit91\n    local digit92\n    local digit93\n\
    \    local digit94\n    local digit95\n    local digit96\n    local digit97\n\
    \    local digit98\n    local digit99\n", "  local x base\n  x=$1\n  base=$2\n\
    \  local ret\n  ret=$(( x / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret +\
    \ x % base ))\n  echo \"$ret\"", "    local x base result\n    x=$1\n    base=$2\n\
    \    if [ $base -lt 10 ]; then\n        echo \"Base must be less than 10\"\n \
    \       return 1\n    fi\n    if [ $base -gt $x ]; then\n        echo \"Base must\
    \ be less than or equal to $x\"\n        return 1\n    fi\n    result=$(( $x /\
    \ $base ))\n    if [ $result -eq 0 ]; then\n        echo \"Base $base is equal\
    \ to $x\"\n    else\n        echo \"Base $base is equal to $result\"\n    fi",
  "    local x base result\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n\
    \        echo \"Base $base is too small.\"\n        return 1\n    fi\n    if [\
    \ $base -gt 10 ]; then\n        echo \"Base $base is too large.\"\n        return\
    \ 1\n    fi\n    result=$(( x / $base ))\n    if [ $result -eq 0 ]; then\n   \
    \     echo \"Base $base is 0.\"\n        return 1\n    fi\n    if [ $result -gt\
    \ $x ]; then\n        echo \"Base $base is too large.\"\n        return 1\n  \
    \  fi\n    if [ $result -lt $x ]; then\n        echo \"Base $base is too small.\"\
    \n        return 1\n    fi\n    echo \"$result\"", "  local x base\n  x=$1\n \
    \ base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x % base ))\n  echo \"$result\"", "    local i j\n\
    \    local base=$1\n    local number=$2\n    local result=\"\"\n    local digits=\"\
    \"\n    local digit\n    local tmp\n    local tmp2\n    local tmp3\n    local\
    \ tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local\
    \ tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n \
    \   local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n    local\
    \ tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n\
    \    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n    local\
    \ tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n\
    \    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n    local\
    \ tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n\
    \    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n    local\
    \ tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n\
    \    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n    local\
    \ tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n\
    \    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n    local\
    \ tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n\
    \    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n    local\
    \ tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n\
    \    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n    local\
    \ tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n\
    \    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n    local\
    \ tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n\
    \    local tmp95\n    local tmp96\n    ", "  local x base\n  x=$1\n  base=$2\n\
    \  local ret\n  ret=$(( x / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret /\
    \ base ))\n  ret=$(( ret + x ))\n  echo \"$ret\"", "    local x base\n    x=$1\n\
    \    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"Base must be less\
    \ than 10\"\n        return 1\n    fi\n    if [ $base -gt 36 ]; then\n       \
    \ echo \"Base must be less than 36\"\n        return 1\n    fi\n    local result\n\
    \    result=0\n    while [ $x -gt 0 ]; do\n        ((result+=x))\n        x=$((x/base))\n\
    \    done\n    echo \"$result\"", "    local i j\n    local base=$1\n    local\
    \ number=$2\n    local result\n    local digit\n    local digit2\n    local digit3\n\
    \    local digit4\n    local digit5\n    local digit6\n    local digit7\n    local\
    \ digit8\n    local digit9\n    local digit10\n    local digit11\n    local digit12\n\
    \    local digit13\n    local digit14\n    local digit15\n    local digit16\n\
    \    local digit17\n    local digit18\n    local digit19\n    local digit20\n\
    \    local digit21\n    local digit22\n    local digit23\n    local digit24\n\
    \    local digit25\n    local digit26\n    local digit27\n    local digit28\n\
    \    local digit29\n    local digit30\n    local digit31\n    local digit32\n\
    \    local digit33\n    local digit34\n    local digit35\n    local digit36\n\
    \    local digit37\n    local digit38\n    local digit39\n    local digit40\n\
    \    local digit41\n    local digit42\n    local digit43\n    local digit44\n\
    \    local digit45\n    local digit46\n    local digit47\n    local digit48\n\
    \    local digit49\n    local digit50\n    local digit51\n    local digit52\n\
    \    local digit53\n    local digit54\n    local digit55\n    local digit56\n\
    \    local digit57\n    local digit58\n    local digit59\n    local digit60\n\
    \    local digit61\n    local digit62\n    local digit63\n    local digit64\n\
    \    local digit65\n    local digit66\n    local digit67\n    local digit68\n\
    \    local digit69\n    local digit70\n    local digit71\n    local digit72\n\
    \    local digit73\n    local digit74\n    local digit75\n    local digit76\n\
    \    local digit77\n    local digit78\n    local digit79\n    local digit80\n\
    \    local digit81\n    local digit82\n    local digit83\n    local digit84\n\
    \    local digit85\n    local digit86\n    local digit87\n    local digit88\n\
    \    local digit89\n    local digit90\n    local digit91\n    local digit92\n\
    \    local digit93\n    local digit94\n    local digit95\n    local digit96\n\
    \    local digit97\n    local digit98\n    local ", "  local x base result\n \
    \ x=$1\n  base=$2\n  result=$(( x / base ))\n  result=$(( result * base ))\n \
    \ result=$(( result + x % base ))\n  echo $result", "    local x base\n    x=$1\n\
    \    base=$2\n    local result\n    result=$(( x / base ))\n    if [ $result -gt\
    \ 10 ]; then\n        result=$(( result * base ))\n    fi\n    echo \"$result\"",
  "  local x base\n  x=$1\n  base=$2\n  local result\n  result=0\n  while [ $x -gt\
    \ 0 ]; do\n    result=$((result*base+x))\n    x=$((x-1))\n  done\n  echo $result",
  "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo \"$x\" | bc -l)\n\
    \  echo \"$ret\" | bc -l <<< \"scale=$base\"", "    local x base\n    x=\"$1\"\
    \n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"$base: Base\
    \ must be less than 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt 36\
    \ ]; then\n        echo \"$base: Base must be less than 36\"\n        return 1\n\
    \    fi\n    local y\n    y=\"$(( x / $base ))\"\n    local z\n    z=\"$(( x %\
    \ $base ))\"\n    local w\n    w=\"$(( z / 10 ))\"\n    local v\n    v=\"$(( z\
    \ % 10 ))\"\n    echo \"$w$v\"", "    local x base new_base\n    x=\"$1\"\n  \
    \  base=\"$2\"\n    new_base=\"$(( 10#$base + 10#$x ))\"\n    echo $(echo \"$new_base\"\
    \ | bc)", "    local x base result\n    x=$1\n    base=$2\n    if [ $base -lt\
    \ 10 ]; then\n        result=$(echo \"$x\" | bc)\n    else\n        result=$(echo\
    \ \"$x\" | bc -l)\n    fi\n    echo \"$result\"", "    local x base\n    x=$1\n\
    \    base=$2\n    if [ $x -lt 10 ]; then\n        echo \"$x\"\n    else\n    \
    \    echo \"$((10#$x))\"\n    fi", "  local x base\n  x=$1\n  base=$2\n  local\
    \ ret\n  ret=$(echo $x | bc)\n  ret=$(echo $ret | sed -e \"s/$base//g\")\n  echo\
    \ $ret", "    local x base result\n    x=\"$1\"\n    base=\"$2\"\n    if [[ $base\
    \ -lt 10 ]]; then\n        result=$(echo \"$x\" | bc)\n    else\n        result=$(echo\
    \ \"$x\" | bc -l)\n    fi\n    echo \"$result\"", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    if [ $base -lt 10 ]; then\n        echo \"$base\"\n\
    \    elif [ $base -eq 10 ]; then\n        echo \"0\"\n    elif [ $base -eq 2 ];\
    \ then\n        echo \"$(( 10#$x ))\"\n    else\n        echo \"$(( 10#$x / $base\
    \ ))\"\n    fi", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    result=$(( x / base ))\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    result=$(( result / base ))\n    result=$(( result % base ))\n \
    \   result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result", "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo\
    \ \"$x\" | bc)\n  echo \"$ret\"", "  local x base\n  x=$1\n  base=$2\n  local\
    \ ret\n  ret=$(echo $x | bc -l | awk '{printf \"%d\",$1}')\n  ret=$((ret*$base))\n\
    \  ret=$(echo $ret | bc -l | awk '{printf \"%d\",$1}')\n  echo $ret", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"\
    Base must be less than 10\"\n        return 1\n    fi\n    if [ $base -gt 36 ];\
    \ then\n        echo \"Base must be less than 36\"\n        return 1\n    fi\n\
    \    if [ $x -lt 0 ]; then\n        echo \"x must be positive\"\n        return\
    \ 1\n    fi\n    if [ $x -gt $(( 10#$base )) ]; then\n        echo \"x must be\
    \ less than $base\"\n        return 1\n    fi\n    local result\n    result=$((\
    \ 10#$x ))\n    while [ $result -lt $base ]; do\n        result=$(( $result *\
    \ 10 ))\n    done\n    echo $result", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $base -lt 10 ]; then\n        echo \"Base $base is too small\"\n   \
    \     return 1\n    fi\n    if [ $base -gt 10 ]; then\n        echo \"Base $base\
    \ is too large\"\n        return 1\n    fi\n    local result\n    result=$(( $x\
    \ / $base ))\n    echo $result", "    local x base\n    x=\"$1\"\n    base=\"\
    $2\"\n    if [ \"${base}\" -gt 10 ]; then\n        echo \"Base must be less than\
    \ 10\"\n        return 1\n    fi\n    if [ \"${base}\" -lt 1 ]; then\n       \
    \ echo \"Base must be greater than 0\"\n        return 1\n    fi\n    if [ \"\
    ${x}\" -lt 1 ]; then\n        echo \"Input must be greater than 0\"\n        return\
    \ 1\n    fi\n    if [ \"${x}\" -gt \"${base}\" ]; then\n        echo \"Input must\
    \ be less than ${base}\"\n        return 1\n    fi\n    if [ \"${x}\" -eq 0 ];\
    \ then\n        echo \"Input must be greater than 0\"\n        return 1\n    fi\n\
    \    if [ \"${x}\" -eq \"${base}\" ]; then\n        echo \"Input must be less\
    \ than ${base}\"\n        return 1\n    fi\n    if [ \"${x}\" -eq 1 ]; then\n\
    \        echo \"Input must be greater than 0\"\n        return 1\n    fi\n   \
    \ if [ \"${x}\" -eq \"${base}\" ]; then\n        echo \"Input must be less than\
    \ ${base}\"\n        return 1\n    fi\n    if [ \"${x}\" -eq 2 ]; then\n     \
    \   echo \"Input must be greater than 0\"\n        return 1\n    fi\n    if [\
    \ \"${x}\" -eq \"${base}\" ]; then\n        echo \"Input must be less than ${base}\"\
    \n        return 1\n    fi\n    if [ \"${x}\" -eq 3 ]; then\n        echo \"Input\
    \ must be greater than 0\"\n        return 1\n    fi\n    if [ \"${x}\" -eq \"\
    ${base}\" ]; then\n        echo \"Input must be less than ${base}\"\n        return\
    \ 1\n    fi\n    if [ \"${x}\" -eq 4 ]; then\n        echo \"Input must be greater\
    \ than 0\"\n        return 1\n    fi\n    if [ \"${x}\" -eq \"${base}\" ]; then\n\
    \        echo \"Input must be less than ${base}\"\n        return 1\n    fi\n\
    \    if [ \"${x}\" -eq 5 ]; then\n        echo \"Input must be greater than 0\"\
    \n        return 1\n    fi\n    if [ \"${x}\" -eq \"${base}\" ]; then\n      \
    \  echo \"Input must be less than ${base}\"\n        return 1\n    fi\n    if\
    \ [ \"${x}\" -eq 6 ]; then\n        echo \"Input must be greater than 0\"\n  \
    \      return 1\n    fi\n    if [ \"${x}\" -eq \"${base}\" ]; then\n        echo\
    \ \"Input must be less than ${base}\"\n        return 1\n    fi\n    if [ \"${x}\"\
    \ -eq 7 ]; then\n        echo \"Input must be greater than 0\"\n        return\
    \ 1\n    fi\n    if [ \"${x}\" -eq \"${base}\" ]; then\n        echo \"Input must\
    \ be less than ${base}\"\n        return 1\n    fi\n    if [ \"${x}\" -eq 8 ];\
    \ then\n        echo \"Input must be greater than 0\"\n        return 1\n    fi\n\
    \    if [ \"${x}\" -eq \"${base}\" ]; then\n", "    local i j\n    local base=$1\n\
    \    local number=$2\n    local result=\"\"\n    local digits=\"\"\n    local\
    \ digit\n    local digits\n    local digit\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n", "    local x\
    \ base\n    x=$1\n    base=$2\n    local result\n    if [ $x -lt 10 ]; then\n\
    \        result=$((10#$x))\n    else\n        result=$((10#$x)*$base)\n    fi\n\
    \    echo \"$result\"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n   \
    \ if [ \"$base\" -lt \"10\" ]; then\n        echo \"$base: base must be less than\
    \ 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt \"10\" ]; then\n    \
    \    echo \"$base: base must be less than 10\"\n        return 1\n    fi\n   \
    \ if [ \"$base\" -eq \"0\" ]; then\n        echo \"$base: base must be greater\
    \ than 0\"\n        return 1\n    fi\n    if [ \"$x\" -lt \"0\" ]; then\n    \
    \    echo \"$x: x must be greater than 0\"\n        return 1\n    fi\n    if [\
    \ \"$x\" -gt \"0\" ]; then\n        echo \"$x: x must be greater than 0\"\n  \
    \      return 1\n    fi\n    if [ \"$x\" -eq \"0\" ]; then\n        echo \"$x:\
    \ x must be greater than 0\"\n        return 1\n    fi\n    if [ \"$base\" -eq\
    \ \"1\" ]; then\n        echo \"$x: base must be greater than 1\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -eq \"1\" ]; then\n        echo \"$x: x must be greater\
    \ than 1\"\n        return 1\n    fi\n    if [ \"$x\" -lt \"$base\" ]; then\n\
    \        echo \"$x: x must be less than $base\"\n        return 1\n    fi\n  \
    \  if [ \"$x\" -gt \"$base\" ]; then\n        echo \"$x: x must be less than $base\"\
    \n        return 1\n    fi\n    if [ \"$x\" -eq \"$base\" ]; then\n        echo\
    \ \"$x: x must be less than $base\"\n        return 1\n    fi\n    if [ \"$x\"\
    \ -lt \"$(( 10#$base ))\" ]; then\n        echo \"$x: x must be less than $base\"\
    \n        return 1\n    fi\n    if [ \"$x\" -gt \"$(( 10#$base ))\" ]; then\n\
    \        echo \"$x: x must be less than $base\"\n        return 1\n    fi\n  \
    \  if [ \"$x\" -eq \"$(( 10#$base ))\" ]; then\n        echo \"$x: x must be less\
    \ than $base\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"$base\" ]; then\n\
    \        echo \"$x: x must be less than $base\"\n        return 1\n    fi\n  \
    \  if [ \"$x\" -eq \"$base\" ]; then\n        echo \"$x: x must be less than $base\"\
    \n        return 1\n    fi\n    if [ \"$x\" -eq \"$(( 10#$base ))\" ]; then\n\
    \        echo \"$x: x must be less than $base\"\n        return 1\n    fi\n  \
    \  if [ \"$x\" -eq \"$(( 10#$base ))\" ]; then\n        echo \"$x: x must be less\
    \ than $base\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"$base\" ]; then\n\
    \        echo \"$x: x must be less than $base\"\n        return 1\n    fi\n  \
    \  if [ \"$x\" -eq \"$base\" ]; then\n", "  local x base\n  x=$1\n  base=$2\n\
    \  local ret\n  ret=$(( x / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret *\
    \ 10 ))\n  ret=$(( ret + x % base ))\n  ret=$(( ret / 10 ))\n  ret=$(( ret % 10\
    \ ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x % base ))\n  ret=$(( ret / 10\
    \ ))\n  ret=$(( ret % 10 ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x % base\
    \ ))\n  ret=$(( ret / 10 ))\n  ret=$(( ret % 10 ))\n  ret=$(( ret * base ))\n\
    \  ret=$(( ret + x % base ))\n  ret=$(( ret / 10 ))\n  ret=$(( ret % 10 ))\n \
    \ ret=$(( ret * base ))\n  ret=$(( ret + x % base ))\n  ret=$(( ret / 10 ))\n\
    \  ret=$(( ret % 10 ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x % base ))\n\
    \  ret=$(( ret / 10 ))\n  ret=$(( ret % 10 ))\n  ret=$(( ret * base ))\n  ret=$((\
    \ ret + x % base ))\n  ret=$(( ret / 10 ))\n  ret=$(( ret % 10 ))\n  ret=$(( ret\
    \ * base ))\n  ret=$(( ret + x % base ))\n  ret=$(( ret / 10 ))\n  ret=$(( ret\
    \ % 10 ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x % base ))\n  ret=$(( ret\
    \ / 10 ))\n  ret=$(( ret % 10 ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x %\
    \ base ))\n  ret=$(( ret / 10 ))\n  ret=$(( ret % 10 ))\n  ret=$(( ret * base\
    \ ))\n  ret=$(( ret + x % base ))\n  ret=$(( ret / 10 ))\n  ret=$(( ret % 10 ))\n\
    \  ret=$(( ret * base ))\n  ret=$", "  local x base\n  x=$1\n  base=$2\n  local\
    \ result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo \"$result\"", "    local x base result\n    x=\"$1\"\n\
    \    base=\"$2\"\n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"Base must\
    \ be less than 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt \"10\" ];\
    \ then\n        echo \"Base must be less than 10\"\n        return 1\n    fi\n\
    \    if [ \"$x\" -lt \"$base\" ]; then\n        echo \"Base must be less than\
    \ 10\"\n        return 1\n    fi\n    if [ \"$x\" -gt \"$base\" ]; then\n    \
    \    echo \"Base must be less than 10\"\n        return 1\n    fi\n    result=$((\
    \ $x / $base ))\n    if [ \"$result\" -eq \"$x\" ]; then\n        echo \"Base\
    \ must be less than 10\"\n        return 1\n    fi\n    if [ \"$result\" -lt \"\
    $base\" ]; then\n        result=$(( $result * $base ))\n    fi\n    echo \"$result\"",
  "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\"\
    \ ]; then\n        echo \"Base $base is too small\"\n        return 1\n    fi\n\
    \    if [ \"$base\" -gt \"10\" ]; then\n        echo \"Base $base is too large\"\
    \n        return 1\n    fi\n    if [ \"$x\" -lt \"0\" ]; then\n        echo \"\
    $x is too small\"\n        return 1\n    fi\n    if [ \"$x\" -gt \"0\" ]; then\n\
    \        echo \"$x is too large\"\n        return 1\n    fi\n    local y\n   \
    \ y=\"$(( x / $base ))\"\n    local z\n    z=\"$(( x % $base ))\"\n    local res\n\
    \    res=\"$y\"\n    if [ \"$z\" -ne \"0\" ]; then\n        res=\"$res$z\"\n \
    \   fi\n    echo \"$res\"", "    local x base\n    x=$1\n    base=$2\n    if [\
    \ $base -lt 10 ]; then\n        echo \"Base must be less than 10\"\n        return\
    \ 1\n    fi\n    if [ $base -gt 360 ]; then\n        echo \"Base must be less\
    \ than 360\"\n        return 1\n    fi\n    if [ $x -lt 0 ]; then\n        echo\
    \ \"x must be positive\"\n        return 1\n    fi\n    if [ $x -gt 360 ]; then\n\
    \        echo \"x must be less than 360\"\n        return 1\n    fi\n    if [\
    \ $base -eq 0 ]; then\n        echo \"Base must be greater than 0\"\n        return\
    \ 1\n    fi\n    if [ $x -eq 0 ]; then\n        echo \"x must be greater than\
    \ 0\"\n        return 1\n    fi\n    if [ $x -eq $x ]; then\n        echo \"x\
    \ must be different from itself\"\n        return 1\n    fi\n    if [ $x -eq 0\
    \ ]; then\n        echo \"x must be greater than 0\"\n        return 1\n    fi\n\
    \    if [ $x -lt $base ]; then\n        echo \"x must be less than base\"\n  \
    \      return 1\n    fi\n    if [ $x -lt $base ]; then\n        echo \"x must\
    \ be less than base\"\n        return 1\n    fi\n    if [ $x -eq $x ]; then\n\
    \        echo \"x must be different from itself\"\n        return 1\n    fi\n\
    \    if [ $x -eq $x ]; then\n        echo \"x must be different from itself\"\n\
    \        return 1\n    fi\n    if [ $x -eq $x ]; then\n        echo \"x must be\
    \ different from itself\"\n        return 1\n    fi\n    if [ $x -eq $x ]; then\n\
    \        echo \"x must be different from itself\"\n        return 1\n    fi\n\
    \    if [ $x -eq $x ]; then\n        echo \"x must be different from itself\"\n\
    \        return 1\n    fi\n    if [ $x -eq $x ]; then\n        echo \"x must be\
    \ different from itself\"\n        return 1\n    fi\n    if [ $x -eq $x ]; then\n\
    \        echo \"x must be different from itself\"\n        return 1\n    fi\n\
    \    if [ $x -eq $x ]; then\n        echo \"x must be different from itself\"\n\
    \        return 1\n    fi\n    if [ $x -eq $x ]; then\n        echo \"x must be\
    \ different from itself\"\n        return 1\n    fi\n    if [ $x -eq $x ]; then\n\
    \        echo \"x must be different from itself\"\n        return 1\n    fi\n\
    \    if [ $x -eq $x ]; then\n        echo \"x must be different from itself\"\n\
    \        return 1\n    fi\n    if [ $x -eq $x ]; then\n        echo \"x must be\
    \ different from itself\"\n        return 1\n    fi\n    if [ $x -eq $x ]; then\n\
    \        echo \"x must be different from itself\"\n        return 1\n    fi\n\
    \    if [ $x -eq $x ]; then", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo \"$result\"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\
    \n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base $base is too small\"\n\
    \        return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc -l\
    \ | awk '{print ('\"$base\"' * $1 + $2)}')\n    echo \"$result\"", "    local\
    \ x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\" ]; then\n\
    \        echo \"Base must be less than 10\"\n        return 1\n    fi\n    if\
    \ [ \"$base\" -gt \"10\" ]; then\n        echo \"Base must be less than 10\"\n\
    \        return 1\n    fi\n    if [ \"$base\" -eq \"0\" ]; then\n        echo\
    \ \"Base must be greater than 0\"\n        return 1\n    fi\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    if [ \"$result\" -eq \"$x\" ]; then\n   \
    \     echo \"Base $base is equal to $x\"\n        return 1\n    fi\n    if [ \"\
    $result\" -lt \"$x\" ]; then\n        echo \"Base $base is less than $x\"\n  \
    \      return 1\n    fi\n    if [ \"$result\" -gt \"$x\" ]; then\n        echo\
    \ \"Base $base is greater than $x\"\n        return 1\n    fi\n    echo \"Base\
    \ $base is equal to $x\"", "    local x base result\n    x=$1\n    base=$2\n \
    \   if [ $base -lt 10 ]; then\n        result=$(( 10#$x ))\n    else\n       \
    \ result=$(( 10#$x ))\n        result=$(( 10#$result ))\n    fi\n    echo $result",
  "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo \"$x\" | bc -l | awk\
    \ '{printf \"%0${base}d\\n\", $0}')\n  echo \"$ret\"", "  local x base result\n\
    \  x=$1\n  base=$2\n  result=$(( 10#$x ))\n  result=$(( result*$base ))\n  result=$((\
    \ result+1 ))\n  result=$(( 10#$result ))\n  echo $result", "  local x base\n\
    \  x=$1\n  base=$2\n  local ret\n  ret=$(( x / base ))\n  ret=$(( ret * base ))\n\
    \  ret=$(( ret / base ))\n  ret=$(( ret + x % base ))\n  echo \"$ret\"", "   \
    \ local x base result\n    x=$1\n    base=$2\n    result=$(echo \"$x\" | bc)\n\
    \    if [ $base -gt 10 ]; then\n        result=$(echo \"$result\" | bc -l)\n \
    \   fi\n    echo \"$result\"", "  local x=\"$1\"\n  local base=\"$2\"\n  local\
    \ result\n  result=$(echo \"$x\" | bc)\n  echo \"$result\" | bc | awk '{printf\
    \ \"%d%0${base}d\\n\", $1, $2}'", "  local x base\n  x=$1\n  base=$2\n  local\
    \ result\n  result=0\n  while [ $x -gt 0 ]; do\n    result=$((result*base))\n\
    \    result=$((result+x))\n    x=$((x-1))\n  done\n  echo $result", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $x -lt 10 ]\n    then\n        echo\
    \ \"$x\"\n    elif [ $base -lt 10 ]\n    then\n        echo \"$((10#$x))\"\n \
    \   else\n        echo \"$((10#$x)*$base)\"\n    fi", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"$base:\
    \ base must be less than 10\"\n        return 1\n    fi\n    local result\n  \
    \  result=0\n    while [ \"$x\" -gt 0 ]; do\n        result=$((result*base+$((x%base))))\n\
    \        x=$((x/base))\n    done\n    echo \"$result\"", "    local x base\n \
    \   x=\"$1\"\n    base=\"$2\"\n    if [[ $base -lt 10 ]]; then\n        echo \"\
    $base\"\n    elif [[ $base -gt 10 ]]; then\n        echo \"$base\"\n    else\n\
    \        echo \"$base\"\n    fi", "  local x base\n  x=$1\n  base=$2\n  local\
    \ result\n  result=$(( 10#$x ))\n  result=$(( result*$base ))\n  result=$(( result+1\
    \ ))\n  result=$(( result%10 ))\n  echo $result", "    local x base result\n \
    \   x=\"$1\"\n    base=\"$2\"\n    result=$(echo \"$x\" | bc)\n    if [ \"$base\"\
    \ -lt 10 ]; then\n        echo \"$result\"\n    else\n        echo \"$(echo \"\
    $result\" | sed \"s/$base/$((10#$base))/\")\"\n    fi", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo \"$result\"", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=0\n  while [ $x -gt 0 ]; do\n    result=$((result*base))\n\
    \    result=$((result+x))\n    x=$((x-1))\n  done\n  echo $result", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"\
    Base $base is too small.\"\n        return 1\n    fi\n    local result\n    result=$((\
    \ x / base ))\n    echo $result", "    local x base\n    x=$1\n    base=$2\n \
    \   if [ $base -lt 10 ]; then\n        echo \"Base $base is not supported\"\n\
    \        return 1\n    fi\n    local res\n    res=$(echo \"$x\" | bc)\n    res=$(echo\
    \ \"$res/$base\" | bc)\n    res=$(echo \"$res%$base\" | bc)\n    echo \"$res\"",
  "  local x base\n  x=$1\n  base=$2\n  local result\n  if [ $x -lt 10 ]; then\n \
    \   result=$((10#$x))\n  else\n    result=$((10#$x%$base))\n  fi\n  echo \"$result\"",
  "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo \"$x\" | bc | awk\
    \ '{print $1*$base}')\n  echo \"$ret\"", "    local x base result\n    x=$1\n\
    \    base=$2\n    result=$(( 10#$x ))\n    while [ $base -gt 0 ]; do\n       \
    \ result=$(( $result * 10 ))\n        base=$(( $base - 1 ))\n    done\n    result=$((\
    \ $result + 1 ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n\
    \    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result\
    \ ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$((\
    \ 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n\
    \    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result\
    \ ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$((\
    \ 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n\
    \    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result\
    \ ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$((\
    \ 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n\
    \    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result\
    \ ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$((\
    \ 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n\
    \    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result\
    \ ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$((\
    \ 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n\
    \    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result\
    \ ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n    result=$((\
    \ 10#$result ))\n    result=$(( 10#$result ))\n    result=$(( 10#$result ))\n",
  "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\"\
    \ ]; then\n        echo \"Base $base is too small\"\n        return 1\n    fi\n\
    \    if [ \"$base\" -gt \"10\" ]; then\n        echo \"Base $base is too large\"\
    \n        return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc)\n\
    \    if [ \"$result\" -eq \"$x\" ]; then\n        echo \"$x\"\n    else\n    \
    \    echo \"$result\"\n    fi", "    local x base\n    x=$1\n    base=$2\n   \
    \ if [ $base -lt 10 ]; then\n        echo \"Base $base is too small\"\n      \
    \  return 1\n    fi\n    if [ $base -gt 10 ]; then\n        echo \"Base $base\
    \ is too large\"\n        return 1\n    fi\n    local result\n    result=$(( x\
    \ / $base ))\n    echo $result", "  local x base result\n  x=$1\n  base=$2\n \
    \ result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result +\
    \ x ))\n  echo $result", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n  \
    \  local ret\n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"Base $base\
    \ is too small\"\n        return 1\n    fi\n    if [ \"$base\" -gt \"10\" ]; then\n\
    \        echo \"Base $base is too large\"\n        return 1\n    fi\n    if [\
    \ \"$x\" -lt \"0\" ]; then\n        echo \"$x is too small\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -gt \"0\" ]; then\n        echo \"$x is too large\"\n\
    \        return 1\n    fi\n    local i\n    local j\n    local k\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    ", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt\
    \ 10 ]; then\n        echo \"Base $base is less than 10.\"\n        return 1\n\
    \    fi\n    if [ \"$base\" -gt 10 ]; then\n        echo \"Base $base is greater\
    \ than 10.\"\n        return 1\n    fi\n    local result\n    result=$(echo \"\
    $x\" | bc)\n    if [ \"$result\" -gt \"$base\" ]; then\n        echo \"Base $base\
    \ is greater than $x.\"\n        return 1\n    fi\n    echo \"$result\"", "  \
    \  local x base\n    x=$1\n    base=$2\n    if [ $x -lt 10 ]; then\n        echo\
    \ \"$x\"\n    elif [ $base -lt 10 ]; then\n        echo \"$((10#$x))\"\n    else\n\
    \        echo \"$((10#$x)*$base)\"\n    fi", "    local x base\n    x=$1\n   \
    \ base=$2\n    if [ $base -lt 10 ]; then\n        echo \"Base must be less than\
    \ 10\"\n        exit 1\n    fi\n    if [ $x -lt 0 ]; then\n        echo \"x must\
    \ be greater than 0\"\n        exit 1\n    fi\n    if [ $x -gt $base ]; then\n\
    \        echo \"x must be less than or equal to base\"\n        exit 1\n    fi\n\
    \    local result\n    result=$(( x / $base ))\n    echo $result", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $x -lt 10 ]; then\n        echo \"$x\"\
    \n    elif [ $base -lt 10 ]; then\n        echo \"$((10#$x))\"\n    else\n   \
    \     echo \"$((10#$x)$((10#$base)))\"\n    fi", "    local x base\n    x=\"$1\"\
    \n    base=\"$2\"\n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"Base\
    \ $base is less than 10.\"\n        return\n    fi\n    if [ \"$base\" -eq \"\
    10\" ]; then\n        echo \"Base $base is equal to 10.\"\n        return\n  \
    \  fi\n    if [ \"$base\" -ge \"10\" ]; then\n        echo \"Base $base is greater\
    \ than 10.\"\n        return\n    fi\n    local result\n    result=$(echo \"$x\"\
    \ | bc)\n    if [ \"$result\" -eq \"$x\" ]; then\n        echo \"Base $base is\
    \ equal to $x.\"\n        return\n    fi\n    if [ \"$result\" -gt \"$x\" ]; then\n\
    \        echo \"Base $base is greater than $x.\"\n        return\n    fi\n   \
    \ echo \"Base $base is less than $x.\"\n    return", "  local x base result\n\
    \  x=$1\n  base=$2\n  result=$(( 10#$x ))\n  result=$(( result*$base ))\n  result=$((\
    \ result+1 ))\n  result=$(( 10#$result ))\n  echo \"$result\"", "  local x base\n\
    \  x=$1\n  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result\
    \ * base ))\n  result=$(( result + x ))\n  echo \"$result\"", "    local x base\n\
    \    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\" ]; then\n      \
    \  echo \"Base $base is less than 10.\"\n        return 1\n    fi\n    if [ \"\
    $base\" -eq \"10\" ]; then\n        echo \"Base $base is 10.\"\n        echo \"\
    $x\"\n        return 0\n    fi\n    if [ \"$base\" -eq \"16\" ]; then\n      \
    \  echo \"Base $base is 16.\"\n        echo \"$x\"\n        return 0\n    fi\n\
    \    if [ \"$base\" -eq \"8\" ]; then\n        echo \"Base $base is 8.\"\n   \
    \     echo \"$x\"\n        return 0\n    fi\n    if [ \"$base\" -eq \"2\" ]; then\n\
    \        echo \"Base $base is 2.\"\n        echo \"$x\"\n        return 0\n  \
    \  fi\n    if [ \"$base\" -eq \"1\" ]; then\n        echo \"Base $base is 1.\"\
    \n        echo \"$x\"\n        return 0\n    fi\n    if [ \"$base\" -eq \"3\"\
    \ ]; then\n        echo \"Base $base is 3.\"\n        echo \"$x\"\n        return\
    \ 0\n    fi\n    if [ \"$base\" -eq \"4\" ]; then\n        echo \"Base $base is\
    \ 4.\"\n        echo \"$x\"\n        return 0\n    fi\n    if [ \"$base\" -eq\
    \ \"5\" ]; then\n        echo \"Base $base is 5.\"\n        echo \"$x\"\n    \
    \    return 0\n    fi\n    if [ \"$base\" -eq \"6\" ]; then\n        echo \"Base\
    \ $base is 6.\"\n        echo \"$x\"\n        return 0\n    fi\n    if [ \"$base\"\
    \ -eq \"7\" ]; then\n        echo \"Base $base is 7.\"\n        echo \"$x\"\n\
    \        return 0\n    fi\n    if [ \"$base\" -eq \"9\" ]; then\n        echo\
    \ \"Base $base is 9.\"\n        echo \"$x\"\n        return 0\n    fi\n    if\
    \ [ \"$base\" -eq \"10\" ]; then\n        echo \"Base $base is 10.\"\n       \
    \ echo \"$x\"\n        return 0\n    fi\n    if [ \"$base\" -eq \"11\" ]; then\n\
    \        echo \"Base $base is 11.\"\n        echo \"$x\"\n        return 0\n \
    \   fi\n    if [ \"$base\" -eq \"12\" ]; then\n        echo \"Base $base is 12.\"\
    \n        echo \"$x\"\n        return 0\n    fi\n    if [ \"$base\" -eq \"13\"\
    \ ]; then\n        echo \"Base $base is 13.\"\n        echo \"$x\"\n        return\
    \ 0\n    fi\n    if [ \"$base\" -eq \"14\" ]; then\n        echo \"Base $base\
    \ is 14.\"\n        echo \"$x\"\n        return 0\n    fi\n    if [ \"$base\"\
    \ -eq \"15\" ]; then\n        ", "    local x base\n    x=\"$1\"\n    base=\"\
    $2\"\n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"$base: base must be\
    \ less than 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt \"10\" ]; then\n\
    \        echo \"$base: base must be less than 10\"\n        return 1\n    fi\n\
    \    if [ \"$x\" -lt \"$base\" ]; then\n        echo \"$x: input number must be\
    \ less than $base\"\n        return 1\n    fi\n    if [ \"$x\" -gt \"$base\" ];\
    \ then\n        echo \"$x: input number must be less than $base\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -eq \"$base\" ]; then\n        echo \"$x: input number\
    \ must be less than $base\"\n        return 1\n    fi\n    if [ \"$x\" -le \"\
    $base\" ]; then\n        echo \"$x: input number must be less than $base\"\n \
    \       return 1\n    fi\n    if [ \"$x\" -ge \"$base\" ]; then\n        echo\
    \ \"$x: input number must be less than $base\"\n        return 1\n    fi\n   \
    \ if [ \"$x\" -eq \"$base\" ]; then\n        echo \"$x: input number must be less\
    \ than $base\"\n        return 1\n    fi\n    if [ \"$x\" -ge \"$base\" ]; then\n\
    \        echo \"$x: input number must be less than $base\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -le \"$base\" ]; then\n        echo \"$x: input number\
    \ must be less than $base\"\n        return 1\n    fi\n    if [ \"$x\" -ge \"\
    $base\" ]; then\n        echo \"$x: input number must be less than $base\"\n \
    \       return 1\n    fi\n    if [ \"$x\" -eq \"$base\" ]; then\n        echo\
    \ \"$x: input number must be less than $base\"\n        return 1\n    fi\n   \
    \ if [ \"$x\" -ge \"$base\" ]; then\n        echo \"$x: input number must be less\
    \ than $base\"\n        return 1\n    fi\n    if [ \"$x\" -le \"$base\" ]; then\n\
    \        echo \"$x: input number must be less than $base\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -ge \"$base\" ]; then\n        echo \"$x: input number\
    \ must be less than $base\"\n        return 1\n    fi\n    if [ \"$x\" -le \"\
    $base\" ]; then\n        echo \"$x: input number must be less than $base\"\n \
    \       return 1\n    fi\n    if [ \"$x\" -ge \"$base\" ]; then\n        echo\
    \ \"$x: input number must be less than $base\"\n        return 1\n    fi\n   \
    \ if [ \"$x\" -le \"$base\" ]; then\n        echo \"$x: input number must be less\
    \ than $base\"\n        return 1\n    fi\n    if [ \"$x\" -ge \"$base\" ]; then\n\
    \        echo \"$x: input number must be less than $base\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -le \"$", "    local x base result\n    x=\"$1\"\n  \
    \  base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base must be\
    \ less than 10.\"\n        return 1\n    fi\n    if [ \"$base\" -gt 36 ]; then\n\
    \        echo \"Base must be less than 36.\"\n        return 1\n    fi\n    if\
    \ [ \"$x\" -lt 0 ]; then\n        echo \"x must be positive.\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -gt \"$base\" ]; then\n        echo \"x must be less\
    \ than base.\"\n        return 1\n    fi\n    result=$(( x / $base ))\n    result=$((\
    \ result * $base ))\n    result=$(( result + x % $base ))\n    echo \"$result\"",
  "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n      \
    \  echo \"Base $base is too small.\"\n        exit 1\n    fi\n    if [ $base -gt\
    \ 10 ]; then\n        echo \"Base $base is too large.\"\n        exit 1\n    fi\n\
    \    local result\n    result=$(( x / base ))\n    echo $result", "  local x base\n\
    \  x=$1\n  base=$2\n  local y\n  y=0\n  while [ $x -gt 0 ]; do\n    y=$(( $y *\
    \ $base ))\n    x=$(( $x / $base ))\n  done\n  echo $y", "    local x base result\n\
    \    x=$1\n    base=$2\n    result=$(( 10#$x ))\n    while [ $base -gt 0 ]; do\n\
    \        result=$(( 10#$result * $base ))\n        base=$(( base-1 ))\n    done\n\
    \    echo \"$result\"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n   \
    \ if [ \"$base\" -lt \"10\" ]; then\n        echo \"$base: Base must be less than\
    \ 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt \"10\" ]; then\n    \
    \    echo \"$base: Base must be less than 10\"\n        return 1\n    fi\n   \
    \ local result\n    if [ \"$base\" -eq \"0\" ]; then\n        result=\"$x\"\n\
    \    else\n        result=\"$(( $x / $base ))\"\n    fi\n    echo \"$result\"",
  "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo \"$x\" |\
    \ bc)\n  echo \"$result\"", "  local x base result\n  x=$1\n  base=$2\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "  local x base result\n  x=$1\n  base=$2\n  result=$(( 10#$x ))\n\
    \  while [ $result -ge $base ]; do\n    result=$(( $result*10 ))\n  done\n  echo\
    \ $result", "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo $x |\
    \ bc -l | awk '{print ('$base' * $2)}')\n  echo $ret", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=0\n  while [ $x -gt 0 ]; do\n    result=$((result*base+$((x%base))))\n\
    \    x=$((x/base))\n  done\n  echo $result", "  local x base result\n  x=$1\n\
    \  base=$2\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $base -lt 10 ]; then\n        echo \"Base $base is too small.\"\n  \
    \      return 1\n    fi\n    if [ $base -gt 10 ]; then\n        echo \"Base $base\
    \ is too large.\"\n        return 1\n    fi\n    if [ $x -lt 1 ]; then\n     \
    \   echo \"Input number $x is too small.\"\n        return 1\n    fi\n    if [\
    \ $x -gt $((10#$base)) ]; then\n        echo \"Input number $x is too large.\"\
    \n        return 1\n    fi\n    local result\n    result=$((10#$x*$base))\n  \
    \  echo $result", "  local x base\n  x=$1\n  base=$2\n  local res\n  res=$(echo\
    \ \"$x\" | bc)\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n\
    \  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n\
    \  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n\
    \  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n\
    \  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n\
    \  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n\
    \  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n\
    \  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n\
    \  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n\
    \  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n\
    \  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n\
    \  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n  res=${res%$base}\n  res=${res#0}\n\
    \  res=${res%$base}\n  res=${res", "  local x base result\n  x=$1\n  base=$2\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x % base ))\n  echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local\
    \ ret\n  ret=$(echo \"$x\" | bc)\n  echo \"$ret\"", "    local x base\n    x=$1\n\
    \    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"Base must be less\
    \ than 10\"\n        exit 1\n    fi\n    local result\n    result=$(( x / base\
    \ ))\n    if [ $result -eq 0 ]; then\n        echo \"Base must be less than 10\"\
    \n        exit 1\n    fi\n    echo $(( x * base ))", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base\
    \ must be less than 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt 36\
    \ ]; then\n        echo \"Base must be less than 36\"\n        return 1\n    fi\n\
    \    local result\n    result=$(echo \"$x\" | bc -l | awk '{print $1*$2}')\n \
    \   echo \"$result\"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if\
    \ [ \"${base}\" -lt \"10\" ]; then\n        echo \"Base must be less than 10\"\
    \n        return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc)\n\
    \    local remainder\n    remainder=$(echo \"$x%$base\" | bc)\n    if [ \"$remainder\"\
    \ -eq 0 ]; then\n        echo \"$result\"\n    else\n        echo \"$result$remainder\"\
    \n    fi", "    local i j\n    local base=10\n    local str=$1\n    local len=${#str}\n\
    \    local res\n\n    # base must be less than 10\n    if [ $2 -lt 10 ]; then\n\
    \        echo \"Base must be less than 10\"\n        return 1\n    fi\n\n    #\
    \ convert string to integer\n    i=$(( ${str} / ${base} ))\n\n    # convert integer\
    \ back to string\n    j=$(( ${i} % ${base} ))\n\n    # convert integer back to\
    \ string\n    res=$(( ${j} + ${base} ))\n\n    # convert integer back to string\n\
    \    str=$(( ${res} % ${base} ))\n\n    # convert integer back to string\n   \
    \ res=$(( ${str} + ${base} ))\n\n    # convert integer back to string\n    str=$((\
    \ ${res} % ${base} ))\n\n    # convert integer back to string\n    res=$(( ${str}\
    \ + ${base} ))\n\n    # convert integer back to string\n    str=$(( ${res} % ${base}\
    \ ))\n\n    # convert integer back to string\n    res=$(( ${str} + ${base} ))\n\
    \n    # convert integer back to string\n    str=$(( ${res} % ${base} ))\n\n  \
    \  # convert integer back to string\n    res=$(( ${str} + ${base} ))\n\n    #\
    \ convert integer back to string\n    str=$(( ${res} % ${base} ))\n\n    # convert\
    \ integer back to string\n    res=$(( ${str} + ${base} ))\n\n    # convert integer\
    \ back to string\n    str=$(( ${res} % ${base} ))\n\n    # convert integer back\
    \ to string\n    res=$(( ${str} + ${base} ))\n\n    # convert integer back to\
    \ string\n    str=$(( ${res} % ${base} ))\n\n    # convert integer back to string\n\
    \    res=$(( ${str} + ${base} ))\n\n    # convert integer back to string\n   \
    \ str=$(( ${res} % ${base} ))\n\n    # convert integer back to string\n    res=$((\
    \ ${str} + ${base} ))\n\n    # convert integer back to string\n    str=$(( ${res}\
    \ % ${base} ))\n\n    # convert integer back to string\n    res=$(( ${str} + ${base}\
    \ ))\n\n    # convert integer back to string\n    str=$(( ${res} % ${base} ))\n\
    \n    # convert integer back to string\n    res=$(( ${str} + ${base} ))\n\n  \
    \  # convert integer back to string\n    str=$(( ", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"\
    Base $base is too small\"\n        return 1\n    fi\n    if [ \"$base\" -gt \"\
    10\" ]; then\n        echo \"Base $base is too large\"\n        return 1\n   \
    \ fi\n    local y\n    y=\"$(( 10#$x ))\"\n    echo \"$(( $y * $base ))\"", " \
    \ local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo \"$x\"\
    \ | bc)\n  echo \"$result\" | sed \"s/$base//\"", "    local x base result\n \
    \   x=$1\n    base=$2\n    result=$(( x / base ))\n    if [ $x -gt $base ]; then\n\
    \        result=$(( result * base ))\n    fi\n    echo \"$result\"", "    local\
    \ x base\n    x=\"$1\"\n    base=\"$2\"\n    local result\n    result=$(echo \"\
    $x\" | bc)\n    local i\n    for (( i=1; i<$base; i++ )); do\n        result=$(echo\
    \ \"$result\" | bc)\n    done\n    echo \"$result\"", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    local result\n    result=$(echo \"$x\" | bc -l | sed\
    \ \"s/^0*//\")\n    if [ \"$base\" -gt 10 ]; then\n        result=$(echo \"$result\"\
    \ | bc -l | sed \"s/^0*$base//\")\n    fi\n    echo \"$result\"", "    local x\
    \ base\n    x=$1\n    base=$2\n    local result\n    result=$(( x / base ))\n\
    \    result=$(( result * base ))\n    result=$(( result + x % base ))\n    echo\
    \ \"$result\"", "    local x base\n    x=$1\n    base=$2\n    if [ $x -lt 10 ];\
    \ then\n        echo \"$x\"\n    elif [ $base -lt 10 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ $base -gt 10 ]; then\n        echo \"$((10#$x%$base))\"\
    \n    else\n        echo \"$((10#$x%$base))\"\n    fi", "    local x base\n  \
    \  x=$1\n    base=$2\n    local result\n    result=$(( x / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result % base\
    \ ))\n    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n    local\
    \ res\n    res=$(echo \"$x\" | bc)\n    if [ \"$res\" -eq 0 ]; then\n        echo\
    \ \"0\"\n    elif [ \"$base\" -eq 2 ]; then\n        echo \"$res\"\n    elif [\
    \ \"$base\" -eq 3 ]; then\n        echo \"$res\"\n    elif [ \"$base\" -eq 4 ];\
    \ then\n        echo \"$res\"\n    elif [ \"$base\" -eq 5 ]; then\n        echo\
    \ \"$res\"\n    elif [ \"$base\" -eq 6 ]; then\n        echo \"$res\"\n    elif\
    \ [ \"$base\" -eq 7 ]; then\n        echo \"$res\"\n    elif [ \"$base\" -eq 8\
    \ ]; then\n        echo \"$res\"\n    elif [ \"$base\" -eq 9 ]; then\n       \
    \ echo \"$res\"\n    elif [ \"$base\" -eq 10 ]; then\n        echo \"$res\"\n\
    \    elif [ \"$base\" -eq 11 ]; then\n        echo \"$res\"\n    elif [ \"$base\"\
    \ -eq 12 ]; then\n        echo \"$res\"\n    elif [ \"$base\" -eq 13 ]; then\n\
    \        echo \"$res\"\n    elif [ \"$base\" -eq 14 ]; then\n        echo \"$res\"\
    \n    elif [ \"$base\" -eq 15 ]; then\n        echo \"$res\"\n    elif [ \"$base\"\
    \ -eq 16 ]; then\n        echo \"$res\"\n    elif [ \"$base\" -eq 17 ]; then\n\
    \        echo \"$res\"\n    elif [ \"$base\" -eq 18 ]; then\n        echo \"$res\"\
    \n    elif [ \"$base\" -eq 19 ]; then\n        echo \"$res\"\n    elif [ \"$base\"\
    \ -eq 20 ]; then\n        echo \"$res\"\n    elif [ \"$base\" -eq 21 ]; then\n\
    \        echo \"$res\"\n    elif [ \"$base\" -eq 22 ]; then\n        echo \"$res\"\
    \n    elif [ \"$base\" -eq 23 ]; then\n        echo \"$res\"\n    elif [ \"$base\"\
    \ -eq 24 ]; then\n        echo \"$res\"\n    elif [ \"$base\" -eq 25 ]; then\n\
    \        echo \"$res\"\n    elif [ \"$base\" -eq 26 ]; then\n        echo \"$res\"\
    \n    elif [ \"$base\" -eq 27 ]; then\n        echo \"$res\"\n    elif [ \"$base\"\
    \ -eq 28 ]; then\n        echo \"$res\"\n    elif [ \"$base\" -eq 29 ]; then\n\
    \        echo \"$res\"\n    elif [ \"$base\" -eq 30 ]; then\n        echo \"$res\"\
    \n    elif [ \"$base\" -eq ", "    local x base\n    x=$1\n    base=$2\n    local\
    \ result\n    if [ $x -lt 10 ]; then\n        result=$((10#$x))\n    else\n  \
    \      result=$((10#$x%$base))\n    fi\n    echo $result", "  local x base result\n\
    \  x=$1\n  base=$2\n  result=$(( 10#$x ))\n  result=$(( result * $base ))\n  result=$((\
    \ result + 10 ))\n  result=$(( result / $base ))\n  result=$(( result % 10 ))\n\
    \  echo $result", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    local\
    \ ret\n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"Base $base is less\
    \ than 10.\"\n        return\n    fi\n    if [ \"$base\" -eq \"10\" ]; then\n\
    \        echo \"Base $base is equal to 10.\"\n        return\n    fi\n    if [\
    \ \"$base\" -eq \"0\" ]; then\n        echo \"Base $base is equal to 0.\"\n  \
    \      return\n    fi\n    if [ \"$base\" -eq \"1\" ]; then\n        echo \"Base\
    \ $base is equal to 1.\"\n        return\n    fi\n    if [ \"$base\" -eq \"2\"\
    \ ]; then\n        echo \"Base $base is equal to 2.\"\n        return\n    fi\n\
    \    if [ \"$base\" -eq \"3\" ]; then\n        echo \"Base $base is equal to 3.\"\
    \n        return\n    fi\n    if [ \"$base\" -eq \"4\" ]; then\n        echo \"\
    Base $base is equal to 4.\"\n        return\n    fi\n    if [ \"$base\" -eq \"\
    5\" ]; then\n        echo \"Base $base is equal to 5.\"\n        return\n    fi\n\
    \    if [ \"$base\" -eq \"6\" ]; then\n        echo \"Base $base is equal to 6.\"\
    \n        return\n    fi\n    if [ \"$base\" -eq \"7\" ]; then\n        echo \"\
    Base $base is equal to 7.\"\n        return\n    fi\n    if [ \"$base\" -eq \"\
    8\" ]; then\n        echo \"Base $base is equal to 8.\"\n        return\n    fi\n\
    \    if [ \"$base\" -eq \"9\" ]; then\n        echo \"Base $base is equal to 9.\"\
    \n        return\n    fi\n    if [ \"$base\" -eq \"10\" ]; then\n        echo\
    \ \"Base $base is equal to 10.\"\n        return\n    fi\n    if [ \"$base\" -eq\
    \ \"11\" ]; then\n        echo \"Base $base is equal to 11.\"\n        return\n\
    \    fi\n    if [ \"$base\" -eq \"12\" ]; then\n        echo \"Base $base is equal\
    \ to 12.\"\n        return\n    fi\n    if [ \"$base\" -eq \"13\" ]; then\n  \
    \      echo \"Base $base is equal to 13.\"\n        return\n    fi\n    if [ \"\
    $base\" -eq \"14\" ]; then\n        echo \"Base $base is equal to 14.\"\n    \
    \    return\n    fi\n    if [ \"$base\" -eq \"15\" ]; then\n        echo \"Base\
    \ $base is equal to 15.\"\n        return\n    fi\n    if [ \"$base\" -eq \"16\"\
    \ ]; then\n        echo \"Base $base is equal to 16.\"\n        return\n    fi\n\
    \    if [ \"$base\" -eq \"17\" ]; then\n        echo \"Base $base is equal to\
    \ 17.\"\n        return\n    fi\n    if [ \"$base\" -eq \"18\" ]; then\n     \
    \   echo \"Base $base ", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    if [ $base -lt 10 ]; then\n        result=$(( x / $base ))\n    else\n  \
    \      result=$(( x / 10 ))\n        result=$(( result * $base ))\n    fi\n  \
    \  result=$(( result + $1 ))\n    echo \"$result\"", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"\
    $base: Base must be less than 10\"\n        return 1\n    fi\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    if [ \"$result\" -gt \"$x\" ]; then\n   \
    \     echo \"$result: Base must be less than $x\"\n        return 1\n    fi\n\
    \    echo \"$result\"", "    local x base result\n    x=\"$1\"\n    base=\"$2\"\
    \n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"$base: base must be less\
    \ than 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt \"10\" ]; then\n\
    \        echo \"$base: base must be less than 10\"\n        return 1\n    fi\n\
    \    result=$(( x / $base ))\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi\n    if [ \"$result\" -eq 0 ]; then\n        result=$((\
    \ x % $base ))\n    fi", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n  \
    \  local result\n    if [ \"$base\" -eq 0 ]; then\n        result=\"$x\"\n   \
    \ elif [ \"$base\" -eq 1 ]; then\n        result=$(echo \"$x\" | bc)\n    elif\
    \ [ \"$base\" -eq 2 ]; then\n        result=$(echo \"$x\" | bc -l)\n    elif [\
    \ \"$base\" -eq 3 ]; then\n        result=$(echo \"$x\" | bc -l | tr -d '\\n')\n\
    \    elif [ \"$base\" -eq 4 ]; then\n        result=$(echo \"$x\" | bc -l | tr\
    \ -d '\\n')\n    elif [ \"$base\" -eq 5 ]; then\n        result=$(echo \"$x\"\
    \ | bc -l | tr -d '\\n')\n    elif [ \"$base\" -eq 6 ]; then\n        result=$(echo\
    \ \"$x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\" -eq 7 ]; then\n        result=$(echo\
    \ \"$x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\" -eq 8 ]; then\n        result=$(echo\
    \ \"$x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\" -eq 9 ]; then\n        result=$(echo\
    \ \"$x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\" -eq 10 ]; then\n       \
    \ result=$(echo \"$x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\" -eq 11 ];\
    \ then\n        result=$(echo \"$x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\"\
    \ -eq 12 ]; then\n        result=$(echo \"$x\" | bc -l | tr -d '\\n')\n    elif\
    \ [ \"$base\" -eq 13 ]; then\n        result=$(echo \"$x\" | bc -l | tr -d '\\\
    n')\n    elif [ \"$base\" -eq 14 ]; then\n        result=$(echo \"$x\" | bc -l\
    \ | tr -d '\\n')\n    elif [ \"$base\" -eq 15 ]; then\n        result=$(echo \"\
    $x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\" -eq 16 ]; then\n        result=$(echo\
    \ \"$x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\" -eq 17 ]; then\n       \
    \ result=$(echo \"$x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\" -eq 18 ];\
    \ then\n        result=$(echo \"$x\" | bc -l | tr -d '\\n')\n    elif [ \"$base\"\
    \ -eq 19 ", "    local x base result\n    x=$1\n    base=$2\n    if [ $base -lt\
    \ 10 ]; then\n        echo \"Base must be less than 10\"\n        return 1\n \
    \   fi\n    if [ $base -gt 36 ]; then\n        echo \"Base must be less than 36\"\
    \n        return 1\n    fi\n    result=$((10#$((x / $base))*$base))\n    if [\
    \ $x -eq $result ]; then\n        echo \"$x is equal to $result\"\n    else\n\
    \        echo \"$x is not equal to $result\"\n    fi", "    local x base\n   \
    \ x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"\
    $base: base must be less than 10\"\n        return 1\n    fi\n    if [ \"$base\"\
    \ -gt 36 ]; then\n        echo \"$base: base must be less than 36\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -lt 1 ]; then\n        echo \"$x: input number must\
    \ be greater than 0\"\n        return 1\n    fi\n    if [ \"$x\" -gt \"$base\"\
    \ ]; then\n        echo \"$x: input number must be less than $base\"\n       \
    \ return 1\n    fi\n    local result\n    result=$(( x / $base ))\n    local remainder\n\
    \    remainder=$(( x % $base ))\n    if [ \"$remainder\" -eq 0 ]; then\n     \
    \   echo \"$result\"\n    else\n        echo \"$result$base\"\n    fi", "  local\
    \ x base\n  x=$1\n  base=$2\n  local result\n  result=0\n  while [ $x -gt 0 ];\
    \ do\n    result=$((result*base+x))\n    x=$((x-1))\n  done\n  echo $result",
  "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    local result\n    if [ \"\
    $base\" -lt \"10\" ]; then\n        result=$(echo \"$x\" | bc)\n    else\n   \
    \     result=$(echo \"$x\" | bc -l)\n    fi\n    echo \"$result\"", "    local\
    \ i base\n    local x\n    local result\n    local digit\n    local digit2\n \
    \   local digit3\n    local digit4\n    local digit5\n    local digit6\n    local\
    \ digit7\n    local digit8\n    local digit9\n    local digit10\n    local digit11\n\
    \    local digit12\n    local digit13\n    local digit14\n    local digit15\n\
    \    local digit16\n    local digit17\n    local digit18\n    local digit19\n\
    \    local digit20\n    local digit21\n    local digit22\n    local digit23\n\
    \    local digit24\n    local digit25\n    local digit26\n    local digit27\n\
    \    local digit28\n    local digit29\n    local digit30\n    local digit31\n\
    \    local digit32\n    local digit33\n    local digit34\n    local digit35\n\
    \    local digit36\n    local digit37\n    local digit38\n    local digit39\n\
    \    local digit40\n    local digit41\n    local digit42\n    local digit43\n\
    \    local digit44\n    local digit45\n    local digit46\n    local digit47\n\
    \    local digit48\n    local digit49\n    local digit50\n    local digit51\n\
    \    local digit52\n    local digit53\n    local digit54\n    local digit55\n\
    \    local digit56\n    local digit57\n    local digit58\n    local digit59\n\
    \    local digit60\n    local digit61\n    local digit62\n    local digit63\n\
    \    local digit64\n    local digit65\n    local digit66\n    local digit67\n\
    \    local digit68\n    local digit69\n    local digit70\n    local digit71\n\
    \    local digit72\n    local digit73\n    local digit74\n    local digit75\n\
    \    local digit76\n    local digit77\n    local digit78\n    local digit79\n\
    \    local digit80\n    local digit81\n    local digit82\n    local digit83\n\
    \    local digit84\n    local digit85\n    local digit86\n    local digit87\n\
    \    local digit88\n    local digit89\n    local digit90\n    local digit91\n\
    \    local digit92\n    local digit93\n    local digit94\n    local digit95\n\
    \    local digit96\n    local digit97\n    local digit98\n    local digit99\n\
    \    local digit100\n", "    local x base\n    x=$1\n    base=$2\n    if [ $base\
    \ -lt 10 ]; then\n        echo \"Base $base is too small\"\n        return 1\n\
    \    fi\n    if [ $base -gt 10 ]; then\n        echo \"Base $base is too large\"\
    \n        return 1\n    fi\n    local result\n    result=$(( x / $base ))\n  \
    \  echo $result", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(echo\
    \ \"$x\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/$base//g\")\n  echo \"\
    $result\"", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x\
    \ / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(echo\
    \ \"$x\" | bc)\n  echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $base -lt 10 ]; then\n        echo \"Base $base is less than 10.\"\n\
    \        return 1\n    fi\n    if [ $base -gt 10 ]; then\n        echo \"Base\
    \ $base is greater than 10.\"\n        return 1\n    fi\n    local result\n  \
    \  result=0\n    while [ $x -gt 0 ]; do\n        result=$((result*base+$((x%base))))\n\
    \        x=$((x/base))\n    done\n    echo \"$result\"", "    local x base result\n\
    \    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        result=$((10#$x))\n\
    \    else\n        result=$((10#$x%$base))\n    fi\n    echo \"$result\"", " \
    \ local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(( x / base ))\n  ret=$((\
    \ ret * base ))\n  ret=$(( ret + x % base ))\n  echo \"$ret\"", "    local x base\n\
    \    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"Base $base\
    \ is not supported\"\n        return 1\n    fi\n    if [ $base -gt 2 ]; then\n\
    \        echo \"Base $base is not supported\"\n        return 1\n    fi\n    if\
    \ [ $x -lt 0 ]; then\n        echo \"Number $x is not supported\"\n        return\
    \ 1\n    fi\n    if [ $x -gt $((10#$base)) ]; then\n        echo \"Number $x is\
    \ not supported\"\n        return 1\n    fi\n    local result\n    result=$((10#$x))\n\
    \    while [ $result -gt 0 ]; do\n        result=$((result/10))\n    done\n  \
    \  echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n    if [ $base\
    \ -lt 10 ]; then\n        echo \"Base $base is too small\"\n        return 1\n\
    \    fi\n    if [ $base -gt 10 ]; then\n        echo \"Base $base is too large\"\
    \n        return 1\n    fi\n    local ret\n    if [ $x -lt 0 ]; then\n       \
    \ x=$((-$x))\n        ret=$((-$x))\n    else\n        ret=$(( $x / $base ))\n\
    \        x=$(( $x % $base ))\n    fi\n    echo \"$ret\"", "    local x base\n\
    \    x=\"$1\"\n    base=\"$2\"\n    local ret\n    if [ \"$base\" -eq 10 ]; then\n\
    \        echo \"$x\"\n    else\n        local i\n        local tmp\n        local\
    \ j\n        local k\n        local l\n        local m\n        local n\n    \
    \    local o\n        local p\n        local q\n        local r\n        local\
    \ s\n        local t\n        local u\n        local v\n        local w\n    \
    \    local x\n        local y\n        local z\n        local a\n        local\
    \ b\n        local c\n        local d\n        local e\n        local f\n    \
    \    local g\n        local h\n        local i\n        local j\n        local\
    \ k\n        local l\n        local m\n        local n\n        local o\n    \
    \    local p\n        local q\n        local r\n        local s\n        local\
    \ t\n        local u\n        local v\n        local w\n        local x\n    \
    \    local y\n        local z\n        local a\n        local b\n        local\
    \ c\n        local d\n        local e\n        local f\n        local g\n    \
    \    local h\n        local i\n        local j\n        local k\n        local\
    \ l\n        local m\n        local n\n        local o\n        local p\n    \
    \    local q\n        local r\n        local s\n        local t\n        local\
    \ u\n        local v\n        local w\n        local x\n        local y\n    \
    \    local z\n        local a\n        local b\n        local c\n        local\
    \ d\n        local e\n        local f\n        local g\n        local h\n    \
    \    local i\n        local j\n        local k\n        local l\n        local\
    \ m\n        local n\n        local o\n        local p\n        local q\n    \
    \    local r\n        local s\n        local t\n        local u\n        local\
    \ v\n        local w\n        local x\n        local y\n        local z\n    \
    \    local a\n        local b\n        local c\n        local d\n        local\
    \ e\n        local f\n        local g\n        local h\n        local i\n    \
    \    local j\n        local k\n        local l\n        local m\n        local\
    \ n\n        local o\n        local p\n        local q\n        local r\n    \
    \    local s\n        local t\n        local u\n        local v\n        ", " \
    \   local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n     \
    \   echo \"Base $base is too small\"\n        exit 1\n    fi\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    local i\n    for (( i=1; i<$base; i++ ));\
    \ do\n        result=$(bc <<< \"$result*$base\")\n    done\n    echo \"$result\"",
  "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\"\
    \ ]; then\n        echo \"Base $base is less than 10.\"\n        return 1\n  \
    \  fi\n    if [ \"$base\" -eq \"10\" ]; then\n        echo \"Base $base is equal\
    \ to 10.\"\n        return 0\n    fi\n    if [ \"$base\" -ge \"10\" ]; then\n\
    \        echo \"Base $base is greater than 10.\"\n        return 1\n    fi\n \
    \   if [ \"$base\" -le \"10\" ]; then\n        echo \"Base $base is less than\
    \ or equal to 10.\"\n        return 1\n    fi\n    if [ \"$base\" -eq \"0\" ];\
    \ then\n        echo \"Base $base is equal to 0.\"\n        return 0\n    fi\n\
    \    if [ \"$base\" -ge \"0\" ]; then\n        echo \"Base $base is greater than\
    \ 0.\"\n        return 1\n    fi\n    if [ \"$base\" -le \"0\" ]; then\n     \
    \   echo \"Base $base is less than or equal to 0.\"\n        return 1\n    fi\n\
    \    if [ \"$base\" -eq \"1\" ]; then\n        echo \"Base $base is equal to 1.\"\
    \n        return 0\n    fi\n    if [ \"$base\" -ge \"1\" ]; then\n        echo\
    \ \"Base $base is greater than 1.\"\n        return 1\n    fi\n    if [ \"$base\"\
    \ -le \"1\" ]; then\n        echo \"Base $base is less than or equal to 1.\"\n\
    \        return 1\n    fi\n    if [ \"$base\" -eq \"2\" ]; then\n        echo\
    \ \"Base $base is equal to 2.\"\n        return 0\n    fi\n    if [ \"$base\"\
    \ -ge \"2\" ]; then\n        echo \"Base $base is greater than 2.\"\n        return\
    \ 1\n    fi\n    if [ \"$base\" -le \"2\" ]; then\n        echo \"Base $base is\
    \ less than or equal to 2.\"\n        return 1\n    fi\n    if [ \"$base\" -eq\
    \ \"3\" ]; then\n        echo \"Base $base is equal to 3.\"\n        return 0\n\
    \    fi\n    if [ \"$base\" -ge \"3\" ]; then\n        echo \"Base $base is greater\
    \ than 3.\"\n        return 1\n    fi\n    if [ \"$base\" -le \"3\" ]; then\n\
    \        echo \"Base $base is less than or equal to 3.\"\n        return 1\n \
    \   fi\n    if [ \"$base\" -eq \"4\" ]; then\n        echo \"Base $base is equal\
    \ to 4.\"\n        return 0\n    fi\n    if [ \"$base\" -ge \"4\" ]; then\n  \
    \      echo \"Base $base is greater than 4.\"\n        return 1\n    fi\n    if\
    \ [ \"$base\" -le \"4\" ]; then\n        echo \"Base $base is less than or equal\
    \ to 4.\"\n        return 1\n    fi\n    if [ \"$base\" -eq \"5\" ]; then\n  \
    \      echo \"Base $base is equal to 5.\"\n        return 0\n    fi\n    if [\
    \ \"$base\" -ge \"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    local\
    \ result\n    result=$(echo \"$x\" | bc)\n    if [ \"$base\" -gt 10 ]; then\n\
    \        result=$(echo \"$result\" | bc -l)\n    fi\n    echo \"$result\"", " \
    \   local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n     \
    \   echo \"Base $base is too small\"\n        return 1\n    fi\n    if [ $base\
    \ -gt 10 ]; then\n        echo \"Base $base is too large\"\n        return 1\n\
    \    fi\n    if [ $x -lt 0 ]; then\n        echo \"Base $base is too small\"\n\
    \        return 1\n    fi\n    if [ $x -gt $((10#$base)) ]; then\n        echo\
    \ \"Base $base is too large\"\n        return 1\n    fi\n    echo $((10#$x%$base))",
  "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n\
    \        echo \"$base: Base must be less than 10\"\n        return 1\n    fi\n\
    \    if [ \"$base\" -gt 36 ]; then\n        echo \"$base: Base must be less than\
    \ 36\"\n        return 1\n    fi\n    local result\n    result=$(echo \"$x\" |\
    \ bc)\n    if [ \"$result\" -eq 0 ]; then\n        echo \"$base: Base must be\
    \ less than 36\"\n        return 1\n    fi\n    echo \"$result\"", "    local\
    \ x base result\n    x=$1\n    base=$2\n    result=$(( 10#$x ))\n    while [ $base\
    \ -gt 0 ]; do\n        result=$(( 10#$result ))\n        base=$(( base-1 ))\n\
    \    done\n    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n \
    \   if [ $base -lt 10 ]; then\n        echo \"Base $base is not supported\"\n\
    \        return 1\n    fi\n    if [ $base -eq 0 ]; then\n        echo \"Base $base\
    \ is not supported\"\n        return 1\n    fi\n    if [ $x -lt 0 ]; then\n  \
    \      echo \"$x is less than 0\"\n        return 1\n    fi\n    if [ $x -gt $((10#$base))\
    \ ]; then\n        echo \"$x is greater than $base\"\n        return 1\n    fi\n\
    \    echo $((10#$x%$base))", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n\
    \    if [ \"$base\" -lt \"10\" ]; then\n        echo \"Base must be less than\
    \ 10.\"\n        return 1\n    fi\n    if [ \"$base\" -gt \"36\" ]; then\n   \
    \     echo \"Base must be less than 36.\"\n        return 1\n    fi\n    if [\
    \ \"$base\" -eq \"0\" ]; then\n        echo \"Base must be greater than 0.\"\n\
    \        return 1\n    fi\n    if [ \"$x\" -lt \"0\" ]; then\n        echo \"\
    Input must be greater than 0.\"\n        return 1\n    fi\n    if [ \"$x\" -gt\
    \ \"10\" ]; then\n        echo \"Input must be less than 10.\"\n        return\
    \ 1\n    fi\n    if [ \"$base\" -eq \"10\" ]; then\n        echo \"Base must be\
    \ equal to 10.\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"0\" ]; then\n\
    \        echo \"Input must be equal to 0.\"\n        return 1\n    fi\n    if\
    \ [ \"$x\" -eq \"1\" ]; then\n        echo \"Input must be equal to 1.\"\n   \
    \     return 1\n    fi\n    if [ \"$x\" -eq \"2\" ]; then\n        echo \"Input\
    \ must be equal to 2.\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"3\" ];\
    \ then\n        echo \"Input must be equal to 3.\"\n        return 1\n    fi\n\
    \    if [ \"$x\" -eq \"4\" ]; then\n        echo \"Input must be equal to 4.\"\
    \n        return 1\n    fi\n    if [ \"$x\" -eq \"5\" ]; then\n        echo \"\
    Input must be equal to 5.\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"\
    6\" ]; then\n        echo \"Input must be equal to 6.\"\n        return 1\n  \
    \  fi\n    if [ \"$x\" -eq \"7\" ]; then\n        echo \"Input must be equal to\
    \ 7.\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"8\" ]; then\n        echo\
    \ \"Input must be equal to 8.\"\n        return 1\n    fi\n    if [ \"$x\" -eq\
    \ \"9\" ]; then\n        echo \"Input must be equal to 9.\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -eq \"10\" ]; then\n        echo \"Input must be equal\
    \ to 10.\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"11\" ]; then\n   \
    \     echo \"Input must be equal to 11.\"\n        return 1\n    fi\n    if [\
    \ \"$x\" -eq \"12\" ]; then\n        echo \"Input must be equal to 12.\"\n   \
    \     return 1\n    fi\n    if [ \"$x\" -eq \"13\" ]; then\n        echo \"Input\
    \ must be equal to 13.\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"14\"\
    \ ]; then\n        echo \"Input must be equal to 14.\"\n        return 1\n   \
    \ fi\n    if [ \"$x\" -eq \"15\" ]; then\n        echo \"Input must be equal to\
    \ 15.\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"16\" ]; then\n      \
    \  echo \"Input must be equal to ", "    local x base\n    x=\"$1\"\n    base=\"\
    $2\"\n    if [ \"$base\" -lt \"10\" ]; then\n        echo \"Base $base is less\
    \ than 10\"\n        return 1\n    fi\n    if [ \"$base\" -eq \"10\" ]; then\n\
    \        echo \"Base $base is equal to 10\"\n        echo \"$x\"\n        return\
    \ 0\n    fi\n    if [ \"$base\" -ge \"10\" ]; then\n        echo \"Base $base\
    \ is greater than 10\"\n        echo \"$x\"\n        return 0\n    fi", "    local\
    \ x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt \"10\" ]; then\n\
    \        echo \"$base: Base must be less than 10\"\n        return 1\n    fi\n\
    \    if [ \"$base\" -eq \"10\" ]; then\n        echo \"$base: Base must be equal\
    \ to 10\"\n        return 1\n    fi\n    if [ \"$base\" -ge \"10\" ]; then\n \
    \       echo \"$base: Base must be less than or equal to 10\"\n        return\
    \ 1\n    fi\n    if [ \"$base\" -le \"10\" ]; then\n        echo \"$base: Base\
    \ must be greater than or equal to 10\"\n        return 1\n    fi\n    if [ \"\
    $base\" -eq \"0\" ]; then\n        echo \"$base: Base must be equal to 0\"\n \
    \       return 1\n    fi\n    if [ \"$base\" -ge \"0\" ]; then\n        echo \"\
    $base: Base must be less than or equal to 0\"\n        return 1\n    fi\n    if\
    \ [ \"$base\" -le \"0\" ]; then\n        echo \"$base: Base must be greater than\
    \ or equal to 0\"\n        return 1\n    fi\n    if [ \"$base\" -eq \"1\" ]; then\n\
    \        echo \"$base: Base must be equal to 1\"\n        return 1\n    fi\n \
    \   if [ \"$base\" -ge \"1\" ]; then\n        echo \"$base: Base must be less\
    \ than or equal to 1\"\n        return 1\n    fi\n    if [ \"$base\" -le \"1\"\
    \ ]; then\n        echo \"$base: Base must be greater than or equal to 1\"\n \
    \       return 1\n    fi\n    if [ \"$base\" -eq \"2\" ]; then\n        echo \"\
    $base: Base must be equal to 2\"\n        return 1\n    fi\n    if [ \"$base\"\
    \ -ge \"2\" ]; then\n        echo \"$base: Base must be less than or equal to\
    \ 2\"\n        return 1\n    fi\n    if [ \"$base\" -le \"2\" ]; then\n      \
    \  echo \"$base: Base must be greater than or equal to 2\"\n        return 1\n\
    \    fi\n    if [ \"$base\" -eq \"3\" ]; then\n        echo \"$base: Base must\
    \ be equal to 3\"\n        return 1\n    fi\n    if [ \"$base\" -ge \"3\" ]; then\n\
    \        echo \"$base: Base must be less than or equal to 3\"\n        return\
    \ 1\n    fi\n    if [ \"$base\" -le \"3\" ]; then\n        echo \"$base: Base\
    \ must be greater than or equal to 3\"\n        return 1\n    fi\n    if [ \"\
    $base\" -eq \"4\" ]; then\n        echo \"$base: Base must be equal to 4\"\n \
    \       return 1\n    fi\n    if [ \"$base\" -ge \"4\" ]; then\n        echo \"\
    $base: Base must be less than or equal to 4\"\n        return 1\n    fi\n    if\
    \ [ \"$base\" -le \"4\" ]; then\n        echo \"$base: Base must be greater than\
    \ or equal to 4\"\n        return 1\n    fi\n    if [ \"$base\" -eq \"5\" ]; then\n\
    \        echo \"", "    local x base result\n    x=${1//[^0-9]}\n    base=${2//[^0-9]}\n\
    \    result=$(( ${x} / ${base} ))\n    result=${result#0}\n    result=${result%${base}}\n\
    \    echo \"$result\"", "    local x base result\n    x=${1#0}\n    base=${2#0}\n\
    \    if [ $base -lt 10 ]; then\n        result=$((10#$x))\n    else\n        result=$((10#$x\
    \ $base))\n    fi\n    echo \"$result\"", "    local x base\n    x=\"$1\"\n  \
    \  base=\"$2\"\n    local result\n    if [[ $base -lt 10 ]]; then\n        result=$(echo\
    \ \"$x\" | bc)\n    else\n        result=$(echo \"$x\" | bc | sed 's/^0\\([0-9]*\\\
    )$/\\10\\1/g')\n    fi\n    echo \"$result\"", "    local x base\n    x=$1\n \
    \   base=$2\n    local ret\n    ret=$(echo \"$x\" | bc)\n    if [ $ret -eq 0 ];\
    \ then\n        echo \"0\"\n    else\n        echo \"$ret\"\n    fi", "    local\
    \ i base\n    local x\n    local result\n\n    x=\"$1\"\n    base=\"$2\"\n\n \
    \   # handle negative numbers\n    if [ \"$x\" -lt 0 ]; then\n        x=\"$((\
    \ x - 1 ))\"\n    fi\n\n    # handle base 0\n    if [ \"$base\" -eq 0 ]; then\n\
    \        result=\"$x\"\n    elif [ \"$base\" -lt 10 ]; then\n        result=\"\
    $(( x * $base ))\"\n    elif [ \"$base\" -gt 10 ]; then\n        result=\"$((\
    \ x / $base ))\"\n    fi\n\n    # handle base 10\n    if [ \"$base\" -eq 10 ];\
    \ then\n        result=\"$x\"\n    elif [ \"$base\" -lt 10 ]; then\n        result=\"\
    $(( x * $base ))\"\n    elif [ \"$base\" -gt 10 ]; then\n        result=\"$((\
    \ x / $base ))\"\n    fi\n\n    # handle base 16\n    if [ \"$base\" -eq 16 ];\
    \ then\n        result=\"$x\"\n    elif [ \"$base\" -lt 10 ]; then\n        result=\"\
    $(( x * $base ))\"\n    elif [ \"$base\" -gt 10 ]; then\n        result=\"$((\
    \ x / $base ))\"\n    fi\n\n    # handle base 10\n    if [ \"$base\" -eq 10 ];\
    \ then\n        result=\"$x\"\n    elif [ \"$base\" -lt 10 ]; then\n        result=\"\
    $(( x * $base ))\"\n    elif [ \"$base\" -gt 10 ]; then\n        result=\"$((\
    \ x / $base ))\"\n    fi\n\n    # handle base 16\n    if [ \"$base\" -eq 16 ];\
    \ then\n        result=\"$x\"\n    elif [ \"$base\" -lt 10 ]; then\n        result=\"\
    $(( x * $base ))\"\n    elif [ \"$base\" -gt 10 ]; then\n        result=\"$((\
    \ x / $base ))\"\n    fi\n\n    # handle base 10\n    if [ \"$base\" -eq 10 ];\
    \ then\n        result=\"$x\"\n    elif [ \"$base\" -lt 10 ]; then\n        result=\"\
    $(( x * $base ))\"\n    elif [ \"$base\" -gt 10 ]; then\n        result=\"$((\
    \ x / $base ))\"\n    fi\n\n    # handle base 16\n    if [ \"$base\" -eq 16 ];\
    \ then\n        result=\"$x\"\n    elif [ \"$base\" -lt 10 ]; then\n        result=\"\
    $(( x * $base ))\"\n    elif [ \"$base\" -gt 10 ]; then\n        result=\"$((\
    \ x / $base ))\"\n    fi\n\n    # handle base 10\n    if [ \"$base\" -eq 10 ];\
    \ then\n        result=\"$x\"\n    elif [ \"$base\" -lt 10 ]; then\n        result=\"\
    $(( x * $base ))\"\n    elif [ \"$base\" -gt 10 ", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"$base:\
    \ base must be less than 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt\
    \ 10 ]; then\n        echo \"$base: base must be less than 10\"\n        return\
    \ 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc -l | awk '{print\
    \ $base}')\n    echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local\
    \ result\n  result=0\n  while [ $x -gt 0 ]; do\n    result=$((result*base))\n\
    \    result=$((result+x))\n    x=$((x-1))\n  done\n  echo $result", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"\
    Base $base is too small\"\n        return 1\n    fi\n    if [ $base -gt 10 ];\
    \ then\n        echo \"Base $base is too large\"\n        return 1\n    fi\n \
    \   local result\n    result=0\n    while [ $x -gt 0 ]; do\n        local digit=$((\
    \ $x / $base ))\n        result=$(( $result * $base ))\n        result=$(( $result\
    \ + $digit ))\n        local remainder=$(( $x % $base ))\n        x=$(( $x - $remainder\
    \ ))\n    done\n    echo $result", "  local x base\n  x=$1\n  base=$2\n  local\
    \ ret\n  ret=$(( x / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x % base\
    \ ))\n  echo \"$ret\"", "  local x base result\n  x=$1\n  base=$2\n  result=$((\
    \ 10#$x ))\n  result=$(( result*$base ))\n  result=$(( result+1 ))\n  result=$((\
    \ result%10 ))\n  echo \"$result\"", "    local x base result\n    x=${1#0}\n\
    \    base=${2#0}\n    if [ $x -lt 10 ] ; then\n        result=$((10#$x))\n   \
    \ else\n        result=$((10#$x))\n        result=$((result+$base))\n    fi\n\
    \    echo \"$result\"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n   \
    \ if [ \"$base\" -lt 10 ]; then\n        echo \"$base: Base must be less than\
    \ 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt 36 ]; then\n        echo\
    \ \"$base: Base must be less than 36\"\n        return 1\n    fi\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    if [ \"$result\" -gt \"$base\" ]; then\n\
    \        echo \"$result\"\n    else\n        echo \"$result\" | bc | awk '{printf\
    \ \"%d\",$0}'\n    fi", "    local x base\n    x=$1\n    base=$2\n    if [ $base\
    \ -lt 10 ]; then\n        echo \"Base must be less than 10\"\n        return 1\n\
    \    fi\n    if [ $base -gt 36 ]; then\n        echo \"Base must be less than\
    \ 36\"\n        return 1\n    fi\n    if [ $x -lt 0 ]; then\n        echo \"Input\
    \ number must be positive\"\n        return 1\n    fi\n    if [ $x -gt $(( 10#$base\
    \ )) ]; then\n        echo \"Input number must be less than $base\"\n        return\
    \ 1\n    fi\n    local result\n    result=$(( 10#$x ))\n    while [ $result -gt\
    \ $(( 10#$base )) ]; do\n        (( result = $result / $base ))\n    done\n  \
    \  echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n    if [ $base\
    \ -lt 10 ]; then\n        echo \"Base must be less than 10\"\n        return 1\n\
    \    fi\n    if [ $base -gt 36 ]; then\n        echo \"Base must be less than\
    \ 36\"\n        return 1\n    fi\n    local result\n    result=$(( x / base ))\n\
    \    echo $result", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [\
    \ \"$base\" -eq 0 ]; then\n        echo \"$x\"\n    elif [ \"$base\" -eq 1 ];\
    \ then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 2 ]; then\n    \
    \    echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 3 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ \"$base\" -eq 4 ]; then\n        echo \"$((10#$x))\"\n\
    \    elif [ \"$base\" -eq 5 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"\
    $base\" -eq 6 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 7\
    \ ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 8 ]; then\n \
    \       echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 9 ]; then\n        echo\
    \ \"$((10#$x))\"\n    elif [ \"$base\" -eq 10 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 11 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 12 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\"\
    \ -eq 13 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 14 ];\
    \ then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 15 ]; then\n   \
    \     echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 16 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ \"$base\" -eq 17 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 18 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 19 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\"\
    \ -eq 20 ]; then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 21 ];\
    \ then\n        echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 22 ]; then\n   \
    \     echo \"$((10#$x))\"\n    elif [ \"$base\" -eq 23 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ \"$base\" -eq 24 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ \"$base\" -eq 25 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ \"$base\" -eq 26 ", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if\
    \ [ $base -lt 10 ]; then\n        echo \"$base\"\n    else\n        echo \"$((\
    \ 10#$x ))\"\n    fi", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$((\
    \ 10#$x ))\n  result=$(( result*$base ))\n  result=$(( result+1 ))\n  result=$((\
    \ result%10 ))\n  echo $result", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=0\n  while [ $x -gt 0 ]; do\n    result=$(( $result * $base ))\n   \
    \ x=$(( $x / $base ))\n  done\n  echo $result"]
stop_tokens:
- "\n}"
