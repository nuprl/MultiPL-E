language: sh
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=\"$1\"\n \
    \   local -a arr2=()\n    local -a arr3=()\n    local -a arr4=()\n    local -a\
    \ arr5=()\n    local -a arr6=()\n    local -a arr7=()\n    local -a arr8=()\n\
    \    local -a arr9=()\n    local -a arr10=()\n    local -a arr11=()\n    local\
    \ -a arr12=()\n    local -a arr13=()\n    local -a arr14=()\n    local -a arr15=()\n\
    \    local -a arr16=()\n    local -a arr17=()\n    local -a arr18=()\n    local\
    \ -a arr19=()\n    local -a arr20=()\n    local -a arr21=()\n    local -a arr22=()\n\
    \    local -a arr23=()\n    local -a arr24=()\n    local -a arr25=()\n    local\
    \ -a arr26=()\n    local -a arr27=()\n    local -a arr28=()\n    local -a arr29=()\n\
    \    local -a arr30=()\n    local -a arr31=()\n    local -a arr32=()\n    local\
    \ -a arr33=()\n    local -a arr34=()\n    local -a arr35=()\n    local -a arr36=()\n\
    \    local -a arr37=()\n    local -a arr38=()\n    local -a arr39=()\n    local\
    \ -a arr40=()\n    local -a arr41=()\n    local -a arr42=()\n    local -a arr43=()\n\
    \    local -a arr44=()\n    local -a arr45=()\n    local -a arr46=()\n    local\
    \ -a arr47=()\n    local -a arr48=()\n    local -a arr49=()\n    local -a arr50=()\n\
    \    local -a arr51=()\n    local -a arr52=()\n    local -a arr53=()\n    local\
    \ -a arr54=()\n    local -a arr55=()\n    local -a arr56=()\n    local -a arr57=()\n\
    \    local -a \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2y6x8nya.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  arr=(\
    \ $1 )\n  local -a names\n  names=(\n    \"One\"\n    \"Two\"\n    \"Three\"\n\
    \    \"Four\"\n    \"Five\"\n    \"Six\"\n    \"Seven\"\n    \"Eight\"\n    \"\
    Nine\"\n  )\n  local -a result\n  result=()\n  local -a tmp\n  tmp=()\n  local\
    \ -i i\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    local j\n    for (( j=0; j<${#names[@]};\
    \ j++ )); do\n      if [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]} -le 9 ]]; then\n\
    \        tmp+=( ${names[j]} )\n      fi\n    done\n    local k\n    for (( k=0;\
    \ k<${#tmp[@]}; k++ )); do\n      result+=( \"${tmp[k]}\" )\n    done\n  done\n\
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a length=()\n   \
    \ local -a tmp=()\n    local -i i\n    local j\n    local k\n    local l\n   \
    \ local m\n    local n\n    local o\n    local p\n    local q\n    local r\n \
    \   local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcsz80etd.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a map=()\n    local -a tmp=()\n    local -i\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp20ml58j.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a tmp=()\n    local -i i\n\n    for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n        tmp=()\n        for (( j=0; j<${#arr[@]};\
    \ j++ )); do\n            if [[ ${arr[j]} -ge 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n\
    \                tmp+=(\"${arr[j]}\")\n            fi\n        done\n        arr=(\"\
    ${tmp[@]}\")\n        result+=(\"${arr[@]:1}\")\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb1e42e95.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local k\n    local l\n  \
    \  local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    \    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp3wxploh.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a tmp=()\n    local -a digits=()\n    local\
    \ -a digits_tmp=()\n    local -a digits_reversed=()\n    local -a digits_reversed_tmp=()\n\
    \    local -a digits_reversed_tmp2=()\n    local -a digits_reversed_tmp3=()\n\
    \    local -a digits_reversed_tmp4=()\n    local -a digits_reversed_tmp5=()\n\
    \    local -a digits_reversed_tmp6=()\n    local -a digits_reversed_tmp7=()\n\
    \    local -a digits_reversed_tmp8=()\n    local -a digits_reversed_tmp9=()\n\
    \    local -a digits_reversed_tmp10=()\n    local -a digits_reversed_tmp11=()\n\
    \    local -a digits_reversed_tmp12=()\n    local -a digits_reversed_tmp13=()\n\
    \    local -a digits_reversed_tmp14=()\n    local -a digits_reversed_tmp15=()\n\
    \    local -a digits_reversed_tmp16=()\n    local -a digits_reversed_tmp17=()\n\
    \    local -a digits_reversed_tmp18=()\n    local -a digits_reversed_tmp19=()\n\
    \    local -a digits_reversed_tmp20=()\n    local -a digits_reversed_tmp21=()\n\
    \    local -a digits_reversed_tmp22=()\n    local -a digits_reversed_tmp23=()\n\
    \    local -a digits_reversed_tmp24=()\n    local -a digits_reversed_tmp25=()\n\
    \    local -a digits_reversed_tmp26=()\n    local -a digits_reversed_tmp27=()\n\
    \    local -a digits_reversed_tmp28=()\n    local -a digits_reversed_tmp29=()\n\
    \    local -a digits_reversed_tmp30=()\n    local -a digits_reversed_tmp31=()\n\
    \    local -a digits_reversed_tmp32=()\n    local -a digits_reversed_tmp33=()\n\
    \    local -a digits_reversed_tmp34=()\n    local -a digits_reversed_tmp35=()\n\
    \    local -a digits_reversed_\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcct0bpx3.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local result=()\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -a names=()\n    local\
    \ -i i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxqiapmxx.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a names\n    local -a result\n\n    arr=( $1 )\n    IFS=' ' read -a names <<<\
    \ \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read\
    \ -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n\
    \    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<<\
    \ \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read\
    \ -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n\
    \    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<<\
    \ \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read\
    \ -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n\
    \    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<<\
    \ \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read\
    \ -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n\
    \    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<<\
    \ \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read\
    \ -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n\
    \    IFS=' ' read -a result <<< \"${arr[@]}\"\n    IFS=' ' read -a result <<<\
    \ \"${arr[@]}\"\n    IFS=' ' read -a result <<< \"${arr[@]}\"\n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp54eap0qd.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  arr=(\
    \ $1 )\n  local -a result\n  result=()\n  local -i i\n  local j\n  for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n    (( j=i+1 ))\n    while (( j<${#arr[@]}) && ( ${arr[j]}\
    \ -lt 10 )); do\n      (( j++ ))\n    done\n    local -a tmp\n    tmp=( ${arr[@]:$i:$j}\
    \ )\n    for (( j=0; j<${#tmp[@]}; j++ )); do\n      result+=( \"\\\"${tmp[j]}\\\
    \"\" )\n    done\n  done\n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfkl2lxkz.sh: line 25: j: command not found

    /tmp/tmpfkl2lxkz.sh: line 25: j: command not found

    /tmp/tmpfkl2lxkz.sh: line 25: j: command not found

    /tmp/tmpfkl2lxkz.sh: line 25: j: command not found

    /tmp/tmpfkl2lxkz.sh: line 25: j: command not found

    /tmp/tmpfkl2lxkz.sh: line 25: j: command not found

    /tmp/tmpfkl2lxkz.sh: line 25: j: command not found

    /tmp/tmpfkl2lxkz.sh: line 25: j: command not found

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=()\n  local -a tmp=()\n\
    \  local i\n  local j\n  local len\n  local tmplen\n  local tmpdigit\n  local\
    \ tmpname\n  local tmpdigit2\n  local tmpname2\n  local tmpdigit3\n  local tmpname3\n\
    \  local tmpdigit4\n  local tmpname4\n  local tmpdigit5\n  local tmpname5\n  local\
    \ tmpdigit6\n  local tmpname6\n  local tmpdigit7\n  local tmpname7\n  local tmpdigit8\n\
    \  local tmpname8\n  local tmpdigit9\n  local tmpname9\n  local tmpdigit10\n \
    \ local tmpname10\n  local tmpdigit11\n  local tmpname11\n  local tmpdigit12\n\
    \  local tmpname12\n  local tmpdigit13\n  local tmpname13\n  local tmpdigit14\n\
    \  local tmpname14\n  local tmpdigit15\n  local tmpname15\n  local tmpdigit16\n\
    \  local tmpname16\n  local tmpdigit17\n  local tmpname17\n  local tmpdigit18\n\
    \  local tmpname18\n  local tmpdigit19\n  local tmpname19\n  local tmpdigit20\n\
    \  local tmpname20\n  local tmpdigit21\n  local tmpname21\n  local tmpdigit22\n\
    \  local tmpname22\n  local tmpdigit23\n  local tmpname23\n  local tmpdigit24\n\
    \  local tmpname24\n  local tmpdigit25\n  local tmpname25\n  local tmpdigit26\n\
    \  local tmpname26\n  local tmpdigit27\n  local tmpname27\n  local tmpdigit28\n\
    \  local tmpname28\n  local tmpdigit29\n  local tmpname29\n  local tmpdigit30\n\
    \  local tmpname30\n  local tmpdigit31\n  local tmpname31\n  local tmpdigit32\n\
    \  local tmpname32\n  local tmpdigit33\n  local tmpname33\n  local tmpdigit34\n\
    \  local tmpname34\n  local tmpdigit35\n  local tmpname35\n  local tmpdigit36\n\
    \  local tmpname36\n  local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplewaz617.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=( $1 )\n\
    \  local -a result=()\n  local -i i\n  local -a names=( One Two Three Four Five\
    \ Six Seven Eight Nine )\n  local -a digits=( 0 1 2 3 4 5 6 7 8 9 )\n  local -a\
    \ tmp\n  local -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local\
    \ -a tmp6\n  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n\
    \  local -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local\
    \ -a tmp15\n  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n\
    \  local -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local\
    \ -a tmp24\n  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n\
    \  local -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local\
    \ -a tmp33\n  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n\
    \  local -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local\
    \ -a tmp42\n  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n\
    \  local -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local\
    \ -a tmp51\n  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n\
    \  local -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local\
    \ -a tmp60\n  local -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a \n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=$1\n    local\
    \ -a arr2\n    local -a arr3\n    local -a arr4\n    local -a arr5\n    local\
    \ -a arr6\n    local -a arr7\n    local -a arr8\n    local -a arr9\n    local\
    \ -a arr10\n    local -a arr11\n    local -a arr12\n    local -a arr13\n    local\
    \ -a arr14\n    local -a arr15\n    local -a arr16\n    local -a arr17\n    local\
    \ -a arr18\n    local -a arr19\n    local -a arr20\n    local -a arr21\n    local\
    \ -a arr22\n    local -a arr23\n    local -a arr24\n    local -a arr25\n    local\
    \ -a arr26\n    local -a arr27\n    local -a arr28\n    local -a arr29\n    local\
    \ -a arr30\n    local -a arr31\n    local -a arr32\n    local -a arr33\n    local\
    \ -a arr34\n    local -a arr35\n    local -a arr36\n    local -a arr37\n    local\
    \ -a arr38\n    local -a arr39\n    local -a arr40\n    local -a arr41\n    local\
    \ -a arr42\n    local -a arr43\n    local -a arr44\n    local -a arr45\n    local\
    \ -a arr46\n    local -a arr47\n    local -a arr48\n    local -a arr49\n    local\
    \ -a arr50\n    local -a arr51\n    local -a arr52\n    local -a arr53\n    local\
    \ -a arr54\n    local -a arr55\n    local -a arr56\n    local -a arr57\n    local\
    \ -a arr58\n    local -a arr59\n    local -a arr60\n    local -a arr61\n    local\
    \ -a arr62\n    local -a arr63\n    local -a arr64\n    local -a arr65\n    local\
    \ -a arr66\n    local -a arr67\n    local -a arr68\n    local -a arr69\n    local\
    \ -a arr70\n    local -a arr71\n    local -a arr72\n    local -a arr73\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a names\n    local -i i\n    local -a tmp\n    local -a tmp2\n    local -a\
    \ tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n    local -a\
    \ tmp7\n    local -a tmp8\n    local -a tmp9\n    local -a tmp10\n    local -a\
    \ tmp11\n    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n    local\
    \ -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n    local\
    \ -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n    local\
    \ -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n    local\
    \ -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n    local\
    \ -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n    local\
    \ -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n    local\
    \ -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n    local\
    \ -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n    local\
    \ -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n    local\
    \ -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n    local\
    \ -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n    local\
    \ -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n    local\
    \ -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n    local\
    \ -a tmp67\n    local -a tmp68\n    local -a tmp69\n    local -a tmp70\n    local\
    \ -a tmp71\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -n i=0\n    while\
    \ [ $i -lt ${#arr[@]} ]; do\n        if [[ ${arr[$i]} -ge 1 ]] && [[ ${arr[$i]}\
    \ -le 9 ]]; then\n            arr[$i]=${names[${arr[$i]}]}\n        fi\n     \
    \   result+=(\"${arr[$i]}\")\n        ((i++))\n    done\n    IFS=' ' read -ra\
    \ arr <<< \"${result[*]}\"\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbh1wbz99.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpbh1wbz99.sh: line 20: local: `0'': invalid variable name for name reference

    /tmp/tmpbh1wbz99.sh: line 21: [: -lt: unary operator expected

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=$1\n    local\
    \ lengths=$2\n    local names=$3\n    local result=()\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length\n  local i\n  local j\n  local result\n  local lengths\n  local\
    \ length\n  local lengths\n  local length\n  local lengths\n  local length\n \
    \ local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        j=$(( ${#arr[@]} - i - 1 ))\n        result+=(\"${arr[i]}\")\n      \
    \  arr[i]=${arr[j]}\n        arr[j]=${arr[i]}\n    done\n    local -n result2=$result\n\
    \    local -n result3=$result\n    local -n result4=$result\n    local -n result5=$result\n\
    \    local -n result6=$result\n    local -n result7=$result\n    local -n result8=$result\n\
    \    local -n result9=$result\n    local -n result10=$result\n    local -n result11=$result\n\
    \    local -n result12=$result\n    local -n result13=$result\n    local -n result14=$result\n\
    \    local -n result15=$result\n    local -n result16=$result\n    local -n result17=$result\n\
    \    local -n result18=$result\n    local -n result19=$result\n    local -n result20=$result\n\
    \    local -n result21=$result\n    local -n result22=$result\n    local -n result23=$result\n\
    \    local -n result24=$result\n    local -n result25=$result\n    local -n result26=$result\n\
    \    local -n result27=$result\n    local -n result28=$result\n    local -n result29=$result\n\
    \    local -n result30=$result\n    local -n result31=$result\n    local -n result32=$result\n\
    \    local -n result33=$result\n    local -n result34=$result\n    local -n result35=$result\n\
    \    local -n result36=$result\n    local -n result37=$result\n    local -n result38=$result\n\
    \    local -n result39=$result\n    local -n result40=$result\n    local -n result41=$result\n\
    \    local -n result42=$result\n    local -n result43=$result\n    local -n result44=$result\n\
    \    local -n result45=$result\n    local -n result46=$result\n    local -n result47=$result\n\
    \    local -n result48=$result\n    local -n result49=$result\n    local -\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo4jvgaqq.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpo4jvgaqq.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 28: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 30: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 31: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 37: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 38: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 40: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 41: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 42: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 43: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 44: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 45: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 46: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 47: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 48: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 49: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 50: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 51: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 52: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 53: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 54: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 55: local: `'': not a valid identifier

    /tmp/tmpo4jvgaqq.sh: line 56: l'
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local i j k l m\n  for (( i=0; i<${#arr[@]}; i++ )); do\n  \
    \  (( ${#result[@]} > 0 )) && result+=( )\n    arr[i]=${arr[i]#*[!0-9]}\n    arr[i]=${arr[i]%[!0-9]}\n\
    \    arr[i]=${arr[i]#*[!a-z]}\n    arr[i]=${arr[i]%[!a-z]}\n    arr[i]=${arr[i]#*[!A-Z]}\n\
    \    arr[i]=${arr[i]%[!A-Z]}\n    arr[i]=${arr[i]#*[!0-9]}\n    arr[i]=${arr[i]%[!0-9]}\n\
    \    arr[i]=${arr[i]#*[!a-z]}\n    arr[i]=${arr[i]%[!a-z]}\n    arr[i]=${arr[i]#*[!A-Z]}\n\
    \    arr[i]=${arr[i]%[!A-Z]}\n    arr[i]=${arr[i]#*[!0-9]}\n    arr[i]=${arr[i]%[!0-9]}\n\
    \    arr[i]=${arr[i]#*[!a-z]}\n    arr[i]=${arr[i]%[!a-z]}\n    arr[i]=${arr[i]#*[!A-Z]}\n\
    \    arr[i]=${arr[i]%[!A-Z]}\n    arr[i]=${arr[i]#*[!0-9]}\n    arr[i]=${arr[i]%[!0-9]}\n\
    \    arr[i]=${arr[i]#*[!a-z]}\n    arr[i]=${arr[i]%[!a-z]}\n    arr[i]=${arr[i]#*[!A-Z]}\n\
    \    arr[i]=${arr[i]%[!A-Z]}\n    arr[i]=${arr[i]#*[!0-9]}\n    arr[i]=${arr[i]%[!0-9]}\n\
    \    arr[i]=${arr[i]#*[!a-z]}\n    arr[i]=${arr[i]%[!a-z]}\n    arr[i]=${arr[i]#*[!A-Z]}\n\
    \    arr[i]=${arr[i]%[!A-Z]}\n    arr[i]=${arr[i]#*[!0-9]}\n    arr[i]=${arr[i]%[!0-9]}\n\
    \    arr[i]=${arr[i]#*[!a-z]}\n    arr[i]=${arr[i]%[!a-z]}\n    arr[i]=${arr[i]#*[!A-Z]}\n\
    \    arr[i]=${arr[i]%[!A-Z]}\n    arr[i]=${arr[i]\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6_28b4cs.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names\n    local -a tmp\n    local -a tmp2\n\
    \    local -i i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local A\n    local B\n    local C\n    local D\n    local E\n    local\
    \ F\n    local G\n    local H\n    local I\n    local J\n    local K\n    local\
    \ L\n    local M\n    local N\n    local O\n    local P\n    local Q\n    local\
    \ R\n    local S\n    local T\n    local U\n    local V\n    local W\n    local\
    \ X\n    local Y\n    local Z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local A\n    local\
    \ B\n    local C\n    local D\n    local E\n    local F\n    local G\n    local\
    \ H\n    local I\n    local J\n    local K\n    local L\n    local M\n    local\
    \ N\n    local O\n    local P\n    local Q\n    local R\n    local S\n    local\
    \ T\n    local U\n    local V\n    local W\n    local X\n    local Y\n    local\
    \ Z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplz33bufs.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=( $1 )\n\
    \    local -a result=()\n    local -a digits=()\n    local -a names=( One Two\
    \ Three Four Five Six Seven Eight Nine )\n    local -i i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  output=$(IFS=\" \"; echo \"\
    ${array[@]}\" | sort -n | cut -d \" \" -f \"$length\")\n  for i in $(seq 0 $((${#output}\
    \ - 1))); do\n    array[$i]=\"${output[$i]}\"\n  done\n  echo \"${array[@]}\"\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=(\"0\" \"1\" \"2\"\
    \ \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  local -i i\n  local -a tmp\n \
    \ local -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a\
    \ tmp6\n  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n\
    \  local -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local\
    \ -a tmp15\n  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n\
    \  local -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local\
    \ -a tmp24\n  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n\
    \  local -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local\
    \ -a tmp33\n  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n\
    \  local -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local\
    \ -a tmp42\n  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n\
    \  local -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local\
    \ -a tmp51\n  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n\
    \  local -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local\
    \ -a tmp60\n  local -a tmp61\n  local -a tmp62\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp10lxdxv7.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=()\n  local -a tmp=()\n\
    \  local -a tmp2=()\n  local -a tmp3=()\n  local -a tmp4=()\n  local -a tmp5=()\n\
    \  local -a tmp6=()\n  local -a tmp7=()\n  local -a tmp8=()\n  local -a tmp9=()\n\
    \  local -a tmp10=()\n  local -a tmp11=()\n  local -a tmp12=()\n  local -a tmp13=()\n\
    \  local -a tmp14=()\n  local -a tmp15=()\n  local -a tmp16=()\n  local -a tmp17=()\n\
    \  local -a tmp18=()\n  local -a tmp19=()\n  local -a tmp20=()\n  local -a tmp21=()\n\
    \  local -a tmp22=()\n  local -a tmp23=()\n  local -a tmp24=()\n  local -a tmp25=()\n\
    \  local -a tmp26=()\n  local -a tmp27=()\n  local -a tmp28=()\n  local -a tmp29=()\n\
    \  local -a tmp30=()\n  local -a tmp31=()\n  local -a tmp32=()\n  local -a tmp33=()\n\
    \  local -a tmp34=()\n  local -a tmp35=()\n  local -a tmp36=()\n  local -a tmp37=()\n\
    \  local -a tmp38=()\n  local -a tmp39=()\n  local -a tmp40=()\n  local -a tmp41=()\n\
    \  local -a tmp42=()\n  local -a tmp43=()\n  local -a tmp44=()\n  local -a tmp45=()\n\
    \  local -a tmp46=()\n  local -a tmp47=()\n  local -a tmp48=()\n  local -a tmp49=()\n\
    \  local -a tmp50=()\n  local -a tmp51=()\n  local -a tmp52=()\n  local -a tmp53=()\n\
    \  local -a tmp54\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvq5pge3i.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local -a names=(\"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        local -n num=${arr[i]}\n        if (( num >\
    \ 9 )); then\n            local -n num=${num/10}\n            local -n num=${num}\n\
    \            local -n num=${num/10}\n            local -n num=${num}\n       \
    \     local -n num=${num/10}\n            local -n num=${num}\n            local\
    \ -n num=${num/10}\n            local -n num=${num}\n            local -n num=${num/10}\n\
    \            local -n num=${num}\n            local -n num=${num/10}\n       \
    \     local -n num=${num}\n            local -n num=${num/10}\n            local\
    \ -n num=${num}\n            local -n num=${num/10}\n            local -n num=${num}\n\
    \            local -n num=${num/10}\n            local -n num=${num}\n       \
    \     local -n num=${num/10}\n            local -n num=${num}\n            local\
    \ -n num=${num/10}\n            local -n num=${num}\n            local -n num=${num/10}\n\
    \            local -n num=${num}\n            local -n num=${num/10}\n       \
    \     local -n num=${num}\n            local -n num=${num/10}\n            local\
    \ -n num=${num}\n            local -n num=${num/10}\n            local -n num=${num}\n\
    \            local -n num=${num/10}\n            local -n num=${num}\n       \
    \     local -n num=${num/10}\n            local -n num=${num}\n            local\
    \ -n num=${num/10}\n            local -n num=${num}\n            local -n num=${num/10}\n\
    \            local -n num=${num}\n            local -n num=${num/10}\n       \
    \     local -n num=${num}\n            local -n num=${num/10}\n            local\
    \ -n num=${num}\n            local -n num=${num/\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqo83xyxm.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n'\n \
    \   local -a arr\n    local -a names\n    local -a result\n    local -a tmp\n\
    \    local -i len\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n    local C\n    local D\n    local E\n    local F\n    local\
    \ G\n    local H\n    local I\n    local J\n    local K\n    local L\n    local\
    \ M\n    local N\n    local O\n    local P\n    local Q\n    local R\n    local\
    \ S\n    local T\n    local U\n    local V\n    local W\n    local X\n    local\
    \ Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  arr=(\
    \ $1 )\n  local -i i\n  local j\n  local k\n  local -a names\n  names=( One Two\
    \ Three Four Five Six Seven Eight Nine )\n  local -a reversed\n  reversed=( )\n\
    \  local -a result\n  result=( )\n  for (( i=0; i<${#arr[@]}; i++ )); do\n   \
    \ local -a digits\n    digits=( ${arr[i]} )\n    for (( j=0; j<${#digits[@]};\
    \ j++ )); do\n      local -a digit\n      digit=( ${digits[j]} )\n      if [[\
    \ ${digit} -ge 1 ]] && [[ ${digit} -le 9 ]]; then\n        reversed+=( ${digit}\
    \ )\n      else\n        break\n      fi\n    done\n  done\n  for (( i=0; i<${#reversed[@]};\
    \ i++ )); do\n    local -a digit\n    digit=( ${reversed[i]} )\n    for (( j=0;\
    \ j<${#names[@]}; j++ )); do\n      local -a name\n      name=( ${names[j]} )\n\
    \      if [[ ${digit} -eq ${name[@]} ]]; then\n        result+=( ${name[@]} )\n\
    \        break\n      fi\n    done\n  done\n  printf '%s\\n' \"${result[@]}\"\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local lengths\n    local length\n    local length_name\n    local length_names\n\
    \    local length_name\n    local length_names\n    local length_name\n    local\
    \ length_names\n    local length_name\n    local length_names\n    local length_name\n\
    \    local length_names\n    local length_name\n    local length_names\n    local\
    \ length_name\n    local length_names\n    local length_name\n    local length_names\n\
    \    local length_name\n    local length_names\n    local length_name\n    local\
    \ length_names\n    local length_name\n    local length_names\n    local length_name\n\
    \    local length_names\n    local length_name\n    local length_names\n    local\
    \ length_name\n    local length_names\n    local length_name\n    local length_names\n\
    \    local length_name\n    local length_names\n    local length_name\n    local\
    \ length_names\n    local length_name\n    local length_names\n    local length_name\n\
    \    local length_names\n    local length_name\n    local length_names\n    local\
    \ length_name\n    local length_names\n    local length_name\n    local length_names\n\
    \    local length_name\n    local length_names\n    local length_name\n    local\
    \ length_names\n    local length_name\n    local length_names\n    local length_name\n\
    \    local length_names\n    local length_name\n    local length_names\n    local\
    \ length_name\n    local length_names\n    local length_name\n    local length_names\n\
    \    local length_name\n    local length_names\n    local length_name\n    local\
    \ length_names\n    local length_name\n    local length_names\n    local length_name\n\
    \    local length_names\n    local length_name\n    local length_names\n    local\
    \ length_name\n    local length_names\n    local length_name\n    local length_names\n\
    \    local length_name\n    local length_names\n    local length_name\n    local\
    \ length_names\n    local length_name\n    local length_names\n    local length_name\n\
    \    local length_names\n    local length_name\n    local length_names\n    local\
    \ length_name\n    local length_names\n    local length_name\n    local length_names\n\
    \    local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length\n    local i\n    local j\n    local name\n    local result\n\
    \    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n\
    \    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n\
    \    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local\
    \ tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n\
    \    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local\
    \ tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n\
    \    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local\
    \ tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n\
    \    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local\
    \ tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n\
    \    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local\
    \ tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n\
    \    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local\
    \ tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n\
    \    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local\
    \ tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n\
    \    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local\
    \ tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n\
    \    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local\
    \ tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n\
    \    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local\
    \ tmp96\n    local tmp97\n    local \n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local length\n    local name\n\
    \n    length=${#arr[@]}\n    if [[ $length == 0 ]]; then\n        result=()\n\
    \    elif [[ $length == 1 ]]; then\n        result=(\"${arr[@]}\")\n    else\n\
    \        result=()\n        for ((i=0; i<length; i++)); do\n            ((j=i+1))\n\
    \            if [[ $((j%2)) -eq 0 ]]; then\n                name=${arr[i]}\n \
    \               arr[i]=${arr[j]}\n                arr[j]=$name\n            fi\n\
    \        done\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp360tmqi8.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a tmp\n  local i j\n  local length\n  local name\n  local\
    \ -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n\
    \  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local\
    \ -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n\
    \  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local\
    \ -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n\
    \  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local\
    \ -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n\
    \  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local\
    \ -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n\
    \  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local\
    \ -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n\
    \  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local\
    \ -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n\
    \  local -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local\
    \ -a tmp65\n  local -a tmp66\n  local -a tmp67\n  local -a tmp68\n  local -a tmp69\n\
    \  local -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd3if2swd.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -n digits=$2\n  local -n digits_map=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map_index=()\n  local -n digits_map_index=()\n\
    \  local -n digits_map_index=()\n  local -n digits_map\n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphwcue7u4.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmphwcue7u4.sh: line 19: local: `'': not a valid identifier

    /tmp/tmphwcue7u4.sh: line 20: local: digits_map: reference variable cannot be
    an array

    /tmp/tmphwcue7u4.sh: line 21: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 22: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 23: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 24: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 25: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 26: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 27: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 28: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 29: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 30: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 31: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 32: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 33: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 34: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 35: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 36: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 37: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 38: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 39: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphwcue7u4.sh: line 40: loc'
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a map\n  local -a tmp\n  local -a tmp2\n  local -a tmp3\n\
    \  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n  local -a tmp7\n  local -a\
    \ tmp8\n  local -a tmp9\n  local -a tmp10\n  local -a tmp11\n  local -a tmp12\n\
    \  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n  local -a tmp16\n  local\
    \ -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local -a tmp20\n  local -a tmp21\n\
    \  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n  local -a tmp25\n  local\
    \ -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local -a tmp29\n  local -a tmp30\n\
    \  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n  local -a tmp34\n  local\
    \ -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local -a tmp38\n  local -a tmp39\n\
    \  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n  local -a tmp43\n  local\
    \ -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local -a tmp47\n  local -a tmp48\n\
    \  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n  local -a tmp52\n  local\
    \ -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local -a tmp56\n  local -a tmp57\n\
    \  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n  local -a tmp61\n  local\
    \ -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local -a tmp65\n  local -a tmp66\n\
    \  local -a tmp67\n  local -a tmp68\n  local -a tmp69\n  local -a tmp70\n  local\
    \ -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7q4oib9t.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=' '\n    local\
    \ -a arr\n    local -a result\n    local -a digits\n    local -a names\n    local\
    \ -a num\n    local -a str\n    local -a word\n    local -a wordlen\n    local\
    \ -a wordlenlen\n    local -a wordlenlenlen\n    local -a wordlenlenlenlen\n \
    \   local -a wordlenlenlenlenlen\n    local -a wordlenlenlenlenlenlen\n    local\
    \ -a wordlenlenlenlenlenlenlen\n    local -a wordlenlenlenlenlenlenlenlen\n  \
    \  local -a wordlenlenlenlenlenlenlenlenlen\n    local -a wordlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a wordlenlenlenlenlenlenlenlenlenlenlen\n    local -a wordlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local\
    \ -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local\
    \ -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a wordlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=()\n   \
    \ local -i i\n    local j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local\
    \ j=0\n        while [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]} -le 9 ]]; then\n  \
    \          ((j++))\n            arr[i]=${arr[i]}\n        done\n        if ((j\
    \ == 0)); then\n            arr[i]=${arr[i]}\n            continue\n        fi\n\
    \        local k\n        for ((k=0; k<${#names[@]}; k++)); do\n            if\
    \ ((${arr[i]} >= ${names[k]} && ${arr[i]} <= ${names[k+1]})); then\n         \
    \       arr[i]=${names[$k]}\n                break\n            fi\n        done\n\
    \        local l\n        for ((l=0; l<${#digits[@]}; l++)); do\n            if\
    \ ((${arr[i]} >= ${digits[l]} && ${arr[i]} <= ${digits[l+1]})); then\n       \
    \         arr[i]=${digits[$l]}\n                break\n            fi\n      \
    \  done\n        result+=(\"${arr[i]}\")\n    done\n    if ((${#result[@]} > 0));\
    \ then\n        echo \"${result[@]}\"\n    else\n        echo \"\"\n    fi\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp34fyv_qp.sh: line 25: syntax error near unexpected token `then''

    /tmp/tmp34fyv_qp.sh: line 25: `        while [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]}
    -le 9 ]]; then''

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits_tmp=()\n\
    \  local -a names_tmp=()\n  local -a digits_tmp2=()\n  local -a names_tmp2=()\n\
    \  local -a digits_tmp3=()\n  local -a names_tmp3=()\n  local -a digits_tmp4=()\n\
    \  local -a names_tmp4=()\n  local -a digits_tmp5=()\n  local -a names_tmp5=()\n\
    \  local -a digits_tmp6=()\n  local -a names_tmp6=()\n  local -a digits_tmp7=()\n\
    \  local -a names_tmp7=()\n  local -a digits_tmp8=()\n  local -a names_tmp8=()\n\
    \  local -a digits_tmp9=()\n  local -a names_tmp9=()\n  local -a digits_tmp10=()\n\
    \  local -a names_tmp10=()\n  local -a digits_tmp11=()\n  local -a names_tmp11=()\n\
    \  local -a digits_tmp12=()\n  local -a names_tmp12=()\n  local -a digits_tmp13=()\n\
    \  local -a names_tmp13=()\n  local -a digits_tmp14=()\n  local -a names_tmp14=()\n\
    \  local -a digits_tmp15=()\n  local -a names_tmp15=()\n  local -a digits_tmp16=()\n\
    \  local -a names_tmp16=()\n  local -a digits_tmp17=()\n  local -a names_tmp17=()\n\
    \  local -a digits_tmp18=()\n  local -a names_tmp18=()\n  local -a digits_tmp19=()\n\
    \  local -a names_tmp19=()\n  local -a digits_tmp20=()\n  local -a names_tmp20=()\n\
    \  local -a digits_tmp21=()\n  local -a names_tmp21=()\n  \n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbom7gpp2.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=(\"${@}\"\
    )\n    local -a result=()\n    local -i i\n    local -a names=(\"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        local -a arr2=()\n        local -a arr3=()\n\
    \        local -a arr4=()\n        local -a arr5=()\n        local -a arr6=()\n\
    \        local -a arr7=()\n        local -a arr8=()\n        local -a arr9=()\n\
    \        local -a arr10=()\n        local -a arr11=()\n        local -a arr12=()\n\
    \        local -a arr13=()\n        local -a arr14=()\n        local -a arr15=()\n\
    \        local -a arr16=()\n        local -a arr17=()\n        local -a arr18=()\n\
    \        local -a arr19=()\n        local -a arr20=()\n        local -a arr21=()\n\
    \        local -a arr22=()\n        local -a arr23=()\n        local -a arr24=()\n\
    \        local -a arr25=()\n        local -a arr26=()\n        local -a arr27=()\n\
    \        local -a arr28=()\n        local -a arr29=()\n        local -a arr30=()\n\
    \        local -a arr31=()\n        local -a arr32=()\n        local -a arr33=()\n\
    \        local -a arr34=()\n        local -a arr35=()\n        local -a arr36=()\n\
    \        local -a arr37=()\n        local -a arr38=()\n        local -a arr39=()\n\
    \        local -a arr40=()\n        local -a arr41=()\n        local -a arr42=()\n\
    \        local -a arr43=()\n        local -a arr44=()\n        local -a arr45=()\n\
    \        local -a arr46=()\n        local -a arr47=()\n        local -a arr48=()\n\
    \        local -a arr49=()\n        local -a arr50=()\n        local -a arr5\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp29p9cdjy.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmp29p9cdjy.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -i i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local A\n  local\
    \ B\n  local C\n  local D\n  local E\n  local F\n  local G\n  local H\n  local\
    \ I\n  local J\n  local K\n  local L\n  local M\n  local N\n  local O\n  local\
    \ P\n  local Q\n  local R\n  local S\n  local T\n  local U\n  local V\n  local\
    \ W\n  local X\n  local Y\n  local Z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local\
    \ F\n  local G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local\
    \ M\n  local N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local\
    \ T\n  local U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local A\n  local B\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkk9_yz60.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        j=$((i+1))\n        if [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]} -le 9 ]];\
    \ then\n            result+=(\"\\\"${arr[i]}\\\"\" \"${arr[j]}\")\n        fi\n\
    \    done\n    IFS=' ' read -ra arr <<<\"${result[*]}\"\n    IFS=' ' read -ra\
    \ arr <<<\"${result[*]}\"\n    IFS=' ' read -ra arr <<<\"${result[*]}\"\n    IFS='\
    \ ' read -ra arr <<<\"${result[*]}\"\n    IFS=' ' read -ra arr <<<\"${result[*]}\"\
    \n    IFS=' ' read -ra arr <<<\"${result[*]}\"\n    IFS=' ' read -ra arr <<<\"\
    ${result[*]}\"\n    IFS=' ' read -ra arr <<<\"${result[*]}\"\n    IFS=' ' read\
    \ -ra arr <<<\"${result[*]}\"\n    IFS=' ' read -ra arr <<<\"${result[*]}\"\n\
    \    IFS=' ' read -ra arr <<<\"${result[*]}\"\n    IFS=' ' read -ra arr <<<\"\
    ${result[*]}\"\n    IFS=' ' read -ra arr <<<\"${result[*]}\"\n    IFS=' ' read\
    \ -ra arr <<<\"${result[*]}\"\n    IFS=' ' read -ra arr <<<\"${result[*]}\"\n\
    \    IFS=' ' read -ra arr <<<\"${result[*]}\"\n    IFS=' ' read -ra arr <<<\"\
    ${result[*]}\"\n    IFS=' ' read -ra arr <<<\"${result[*]}\"\n    IFS=' ' read\
    \ -ra arr <<<\"${result[*]}\"\n    IFS=' ' read -ra arr <<<\"${result[*]}\"\n\
    \    IFS=' ' read -ra arr <<<\"${result[*]}\"\n    IFS=' ' read -ra arr <<<\"\
    ${result[*]}\"\n    IFS=' ' read -ra arr <<\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcsjy8k3f.sh: line 48: syntax error near unexpected token `newline''

    /tmp/tmpcsjy8k3f.sh: line 48: `    IFS='' '' read -ra arr <<''

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -i len lens i\n    local -a names\n    local -i i j\n    local -a tmp\n    local\
    \ -a tmp2\n    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local\
    \ -a tmp6\n    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local\
    \ -a tmp10\n    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local\
    \ -a tmp14\n    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local\
    \ -a tmp18\n    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local\
    \ -a tmp22\n    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local\
    \ -a tmp26\n    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local\
    \ -a tmp30\n    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local\
    \ -a tmp34\n    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local\
    \ -a tmp38\n    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local\
    \ -a tmp42\n    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local\
    \ -a tmp46\n    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local\
    \ -a tmp50\n    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local\
    \ -a tmp54\n    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local\
    \ -a tmp58\n    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local\
    \ -a tmp62\n    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local\
    \ -a tmp66\n    local -a tmp67\n    local -a tmp68\n    local -a tmp69\n    local\
    \ -a \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=( $1 )\n \
    \   local len\n    local i\n    local j\n    local k\n    local name\n    local\
    \ tmp\n    local output\n    local len\n    local tmp\n    local output\n    local\
    \ tmp\n    local output\n    local tmp\n    local output\n    local tmp\n    local\
    \ output\n    local tmp\n    local output\n    local tmp\n    local output\n \
    \   local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n    local tmp\n    local output\n    local tmp\n    local output\n\
    \    local tmp\n    local output\n    local tmp\n    local output\n    local tmp\n\
    \    local output\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -i i\n    local\
    \ j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        j=$((${#arr[@]} - i - 1))\n\
    \        result+=(\"${names[${arr[j]}]}\")\n    done\n    if [ \"${#result[@]}\"\
    \ -eq 0 ]; then\n        result=()\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxchf53cj.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a tmp\n  local i\n  local j\n  local length\n  local name\n\
    \  local lengths\n  local lengths_tmp\n  local lengths_tmp2\n  local lengths_tmp3\n\
    \  local lengths_tmp4\n  local lengths_tmp5\n  local lengths_tmp6\n  local lengths_tmp7\n\
    \  local lengths_tmp8\n  local lengths_tmp9\n  local lengths_tmp10\n  local lengths_tmp11\n\
    \  local lengths_tmp12\n  local lengths_tmp13\n  local lengths_tmp14\n  local\
    \ lengths_tmp15\n  local lengths_tmp16\n  local lengths_tmp17\n  local lengths_tmp18\n\
    \  local lengths_tmp19\n  local lengths_tmp20\n  local lengths_tmp21\n  local\
    \ lengths_tmp22\n  local lengths_tmp23\n  local lengths_tmp24\n  local lengths_tmp25\n\
    \  local lengths_tmp26\n  local lengths_tmp27\n  local lengths_tmp28\n  local\
    \ lengths_tmp29\n  local lengths_tmp30\n  local lengths_tmp31\n  local lengths_tmp32\n\
    \  local lengths_tmp33\n  local lengths_tmp34\n  local lengths_tmp35\n  local\
    \ lengths_tmp36\n  local lengths_tmp37\n  local lengths_tmp38\n  local lengths_tmp39\n\
    \  local lengths_tmp40\n  local lengths_tmp41\n  local lengths_tmp42\n  local\
    \ lengths_tmp43\n  local lengths_tmp44\n  local lengths_tmp45\n  local lengths_tmp46\n\
    \  local lengths_tmp47\n  local lengths_tmp48\n  local lengths_tmp49\n  local\
    \ lengths_tmp50\n  local lengths_tmp51\n  local lengths_tmp52\n  local lengths_tmp53\n\
    \  local lengths_tmp54\n  local lengths_tmp55\n  local lengths_tmp56\n  local\
    \ lengths_tmp57\n  local lengths_tmp58\n  local lengths_tmp59\n  local lengths_tmp60\n\
    \  local lengths_tmp61\n  local lengths_tmp62\n  local lengths_tmp63\n  local\
    \ lengths_tmp64\n  local lengths_tmp65\n  local lengths_tmp66\n  local lengths_tmp67\n\
    \  local length\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplbb1ame6.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=(\"0\" \"1\" \"2\"\
    \ \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  local -a digits_reversed=()\n\
    \  local -a digits_reversed_reversed=()\n  local -a digits_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed=()\n  local -a digits_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpet915kga.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local j\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        j=$((i+1))\n        if ((j > 9)) ; then\n            j=$((j-9))\n\
    \        fi\n        result+=(\"${arr[i]}\" \"${arr[j]}\")\n    done\n    IFS=$'\\\
    n' arr=(\"${result[@]}\") IFS=$' ' arr=(\"${arr[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\") IFS=$' ' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=(\"${result[@]}\")\n    IFS=$'\\n' result=(\"\
    ${result[@]}\")\n    IFS=$'\\n' result=\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4onole3i.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=()\n\
    \    local -a digits_reversed_length=()\n    local -a digits_reversed_name=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_first=()\n\
    \    local -a digits_reversed_name_first_length=()\n    local -a digits_reversed_name_last=()\n\
    \    local -a digits_reversed_name_last_length=()\n    local -a digits_reversed_name_middle=()\n\
    \    local -a digits_reversed_name_middle_length=()\n    local -a digits_reversed_name_middle_name=()\n\
    \    local -a digits_reversed_name_middle_first_name=()\n    local -a digits_reversed_name_middle_last_name=()\n\
    \    local -a digits_reversed_name_middle_middle_name=()\n    local -a digits_reversed_name_middle_middle_first_name=()\n\
    \    local -a digits_reversed_name_middle_middle_last_name=()\n    local -a digits_reversed_name_middle_middle_middle_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_first_name=()\n    local\
    \ -a digits_reversed_name_middle_middle_middle_last_name=()\n    local -a digits_reversed_name_middle_middle_middle_middle_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_middle_first_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_middle_last_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_middle_middle_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_middle_middle_first_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_middle_middle_last_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_middle_middle_middle_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_middle_middle_middle_first_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_middle_middle_middle_last_name=()\n\
    \    local -a digits_reversed_name_middle_middle_middle_middle_middle_middle_name=()\n\
    \    local -a digits_\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu85cg8zd.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptxcqzu3s.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    output=$(IFS=' '; echo \"${array[@]}\"\
    \ | sort -n | cut -d ' ' -f \"$length\")\n    IFS=$' \\t\\n'\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  arr=(\
    \ $1 )\n  local -i i\n  local -a res\n  local -a names\n  local -a tmp\n  local\
    \ -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n\
    \  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local\
    \ -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n\
    \  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local\
    \ -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n\
    \  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local\
    \ -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n\
    \  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local\
    \ -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n\
    \  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local\
    \ -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n\
    \  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local\
    \ -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n\
    \  local -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local\
    \ -a tmp65\n  local -a tmp66\n  local -a tmp67\n  local -a tmp68\n  local -a tmp69\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local numbers=$1\n  local\
    \ names=()\n  local lengths=()\n  local length\n  local number\n  local name\n\
    \  local i\n  local j\n  local length\n  local lengths\n  local length\n  local\
    \ numbers\n  local names\n  local lengths\n  local length\n  local number\n  local\
    \ name\n  local i\n  local j\n  local length\n  local lengths\n  local length\n\
    \  local number\n  local name\n  local i\n  local j\n  local length\n  local lengths\n\
    \  local length\n  local number\n  local name\n  local i\n  local j\n  local length\n\
    \  local lengths\n  local length\n  local number\n  local name\n  local i\n  local\
    \ j\n  local length\n  local lengths\n  local length\n  local number\n  local\
    \ name\n  local i\n  local j\n  local length\n  local lengths\n  local length\n\
    \  local number\n  local name\n  local i\n  local j\n  local length\n  local lengths\n\
    \  local length\n  local number\n  local name\n  local i\n  local j\n  local length\n\
    \  local lengths\n  local length\n  local number\n  local name\n  local i\n  local\
    \ j\n  local length\n  local lengths\n  local length\n  local number\n  local\
    \ name\n  local i\n  local j\n  local length\n  local lengths\n  local length\n\
    \  local number\n  local name\n  local i\n  local j\n  local length\n  local lengths\n\
    \  local length\n  local number\n  local name\n  local i\n  local j\n  local length\n\
    \  local lengths\n  local length\n  local number\n  local name\n  local i\n  local\
    \ j\n  local length\n  local lengths\n  local length\n  local number\n  local\
    \ name\n  local i\n  local j\n  local length\n  local lengths\n  local length\n\
    \  local number\n  local name\n  local i\n  local j\n  local length\n  local lengths\n\
    \  local length\n  local number\n  local name\n  local i\n  local j\n  local length\n\
    \  local lengths\n  local length\n  local number\n  local name\n  \n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a name\n    local -a length\n    local -i i\n \
    \   local -a tmp\n    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n  \
    \  local -a tmp5\n    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n  \
    \  local -a tmp9\n    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n\
    \    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n\
    \    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n\
    \    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n\
    \    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n\
    \    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n\
    \    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n\
    \    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n\
    \    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n\
    \    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n\
    \    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n\
    \    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n\
    \    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n\
    \    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n\
    \    local -a tmp65\n    local -a tmp66\n    local -a tmp67\n    local -a tmp68\n\
    \    local -a tmp69\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv_sw6lu3.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=$1\n    local\
    \ lengths=$(echo \"${arr}\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -n |\
    \ awk '{print $2}')\n    local result\n    if [ -n \"${arr}\" ]; then\n      \
    \  result=$(echo \"${arr}\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -n |\
    \ awk '{print $2}')\n    else\n        result=\n    fi\n    local index\n    for\
    \ index in ${!lengths[@]}; do\n        if [ \"${lengths[$index]}\" -gt 1 ]; then\n\
    \            local length\n            length=${lengths[$index]}\n           \
    \ local index2\n            index2=${index}\n            while [ \"${lengths[$index2]}\"\
    \ -gt 1 ]; do\n                index2=$((index2+1))\n            done\n      \
    \      local index3\n            index3=$((index2+1))\n            while [ \"\
    ${lengths[$index3]}\" -gt 1 ]; do\n                index3=$((index3+1))\n    \
    \        done\n            local index4\n            index4=$((index3+1))\n  \
    \          while [ \"${lengths[$index4]}\" -gt 1 ]; do\n                index4=$((index4+1))\n\
    \            done\n            local index5\n            index5=$((index4+1))\n\
    \            while [ \"${lengths[$index5]}\" -gt 1 ]; do\n                index5=$((index5+1))\n\
    \            done\n            local index6\n            index6=$((index5+1))\n\
    \            while [ \"${lengths[$index6]}\" -gt 1 ]; do\n                index6=$((index6+1))\n\
    \            done\n            local index7\n            index7=$((index6+1))\n\
    \            while [ \"${lengths[$index7]}\" -gt 1 ]; do\n                index7=$((index7+1))\n\
    \            done\n            local index8\n            index8=$((index7+1))\n\
    \            while [ \"${lengths[$index8]}\" -gt 1 ]; do\n                index8=$((index8+1))\n\
    \            done\n            local index9\n            index9=$((index8+1))\n\
    \            while [ \"${lengths[$index9]}\" -gt 1 ]; do\n                index9=$((index9+1))\n\
    \            done\n            local index10\n            index10=$((index9+1))\n\
    \            while [ \"${lengths[$index10]}\" -gt 1 ]; do\n                index10=$((index10+1))\n\
    \            done\n            local \n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqnk1_5fl.sh: line 76: syntax error near unexpected token `}''

    /tmp/tmpqnk1_5fl.sh: line 76: `}''

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  output=$(IFS=' '; echo \"\
    $array\" | sort -n | cut -d ' ' -f \"$length\")\n  IFS=$' \\t\\n'\n  for ((i=0;\
    \ i<${#output[@]}; i++)); do\n    output[i]=\"${output[i]//\\\"/One}\"\n    output[i]=\"\
    ${output[i]//\\\"/Two}\"\n    output[i]=\"${output[i]//\\\"/Three}\"\n    output[i]=\"\
    ${output[i]//\\\"/Four}\"\n    output[i]=\"${output[i]//\\\"/Five}\"\n    output[i]=\"\
    ${output[i]//\\\"/Six}\"\n    output[i]=\"${output[i]//\\\"/Seven}\"\n    output[i]=\"\
    ${output[i]//\\\"/Eight}\"\n    output[i]=\"${output[i]//\\\"/Nine}\"\n  done\n\
    \  echo \"${output[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=()\n\
    \    local -a digits_reversed_length=()\n    local -a digits_reversed_name=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_count=()\n\
    \    local -a digits_reversed_name_count_length=()\n    local -a digits_reversed_name_count_value=()\n\
    \    local -a digits_reversed_name_count_value_length=()\n    local -a digits_reversed_name_count_value_count=()\n\
    \    local -a digits_reversed_name_count_value_count_length=()\n    local -a digits_reversed_name_count_value_count_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_length=()\n    local\
    \ -a digits_reversed_name_count_value_count_value_value=()\n    local -a digits_reversed_name_count_value_count_value_value_length=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value=()\n  \
    \  local -a digits_reversed_name_count_value_count_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value_value_value_value=()\n\
    \    local -a digits_reversed_name_count_value_count_value_value_value_value_value_value_value=()\n\
    \    local -a \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2fistgo1.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -i i\n    local j\n \
    \   local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    \    local C\n    local D\n    local E\n    local F\n    local G\n    local H\n\
    \    local I\n    local J\n    local K\n    local L\n    local M\n    local N\n\
    \    local O\n    local P\n    local Q\n    local R\n    local S\n    local T\n\
    \    local U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp648ixxqd.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=()\n   \
    \ local -a digits_reversed=()\n    local -a digits_reversed_name=()\n    local\
    \ -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a digits_reversed_name_length=()\n    local -a digits_reversed_name_length=()\n\
    \    local -a \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1gz4c1tp.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=\"$1\"\n  local\
    \ length\n  local i\n  local j\n  local output\n  local count\n  local tmp\n \
    \ local tmp2\n  local tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n  local\
    \ tmp7\n  local tmp8\n  local tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n\
    \  local tmp13\n  local tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n \
    \ local tmp18\n  local tmp19\n  local tmp20\n  local tmp21\n  local tmp22\n  local\
    \ tmp23\n  local tmp24\n  local tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n\
    \  local tmp29\n  local tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n \
    \ local tmp34\n  local tmp35\n  local tmp36\n  local tmp37\n  local tmp38\n  local\
    \ tmp39\n  local tmp40\n  local tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n\
    \  local tmp45\n  local tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n \
    \ local tmp50\n  local tmp51\n  local tmp52\n  local tmp53\n  local tmp54\n  local\
    \ tmp55\n  local tmp56\n  local tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n\
    \  local tmp61\n  local tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n \
    \ local tmp66\n  local tmp67\n  local tmp68\n  local tmp69\n  local tmp70\n  local\
    \ tmp71\n  local tmp72\n  local tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n\
    \  local tmp77\n  local tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n \
    \ local tmp82\n  local tmp83\n  local tmp84\n  local tmp85\n  local tmp86\n  local\
    \ tmp87\n  local tmp88\n  local tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n\
    \  local tmp93\n  local tmp94\n  local tmp95\n  local tmp96\n  local tmp97\n \
    \ local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -n digits=$2\n    local -i i\n    local digit\n\
    \    local length\n\n    if [ -z \"$arr\" ]; then\n        arr=()\n    fi\n\n\
    \    length=${#arr[@]}\n    if [ $length -eq 0 ]; then\n        result=()\n  \
    \  elif [ $length -gt 9 ]; then\n        result=()\n    else\n        result=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n    fi\n\n    for (( i = 0; i < length; i++ )); do\n        digit=${arr[i]}\n\
    \        if [ $i -lt 9 ]; then\n            digit=${digit:0:1}\n            arr[i]=${digits[$digit]}\n\
    \        fi\n    done\n\n    printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoowi2bp8.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpoowi2bp8.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=(\"0\" \"1\" \"2\"\
    \ \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  local -a tmp=()\n  local -a digit\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5__ppp9p.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptxcqzu3s.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=' '\n    local\
    \ -a arr\n    local -a names\n    local -a result\n\n    arr=( $1 )\n    names=(\n\
    \        \"One\"\n        \"Two\"\n        \"Three\"\n        \"Four\"\n     \
    \   \"Five\"\n        \"Six\"\n        \"Seven\"\n        \"Eight\"\n        \"\
    Nine\"\n    )\n\n    IFS=$'\\n'\n    for (( i=0; i<${#arr[@]}; i++ )); do\n  \
    \      local j=0\n        while [[ ${arr[$i]} -ge 1 ]] && [[ ${arr[$i]} -le 9\
    \ ]]; then\n            result[$j]=\"${names[${arr[$i]}]}\"\n            j=$((\
    \ j + 1 ))\n            arr[$i]=$(( ${arr[$i]} - 1 ))\n        done\n    done\n\
    \n    IFS=$IFS_ORIG\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8tqj16w6.sh: line 38: syntax error near unexpected token `then''

    /tmp/tmp8tqj16w6.sh: line 38: `        while [[ ${arr[$i]} -ge 1 ]] && [[ ${arr[$i]}
    -le 9 ]]; then''

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local output\n    local i\n    local j\n    local length\n    local number\n\
    \    local name\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a map\n    local -a names\n    local -a tmp\n \
    \   local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    \    local C\n    local D\n    local E\n    local F\n    local G\n    local H\n\
    \    local I\n    local J\n    local K\n    local L\n    local M\n    local N\n\
    \    local O\n    local P\n    local Q\n    local R\n    local S\n    local T\n\
    \    local U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr0vxd7kr.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a names\n  local -a lengths\n  local -a i\n  local -a j\n\
    \  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local\
    \ -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n\
    \  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local\
    \ -a a\n  local -a b\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n\
    \  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local\
    \ -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n\
    \  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local\
    \ -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a a\n  local -a b\n\
    \  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local\
    \ -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n\
    \  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local\
    \ -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n\
    \  local -a y\n  local -a z\n  local -a a\n  local -a b\n  local -a c\n  local\
    \ -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n\
    \  local -a j\n  local -a k\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo7vgt524.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -n digits=$2\n    local -n digits_map=()\n  \
    \  local -n digits_reversed=()\n    local -n digits_reversed_map=()\n    local\
    \ -n digits_reversed_reversed=()\n    local -n digits_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed=()\n    local -n digits_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed=()\n    local -n digits_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed=()\n    local\
    \ -n digits_reversed_reversed_reversed_reversed_reversed_map=()\n    local -n\
    \ digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n    local -n\
    \ digits_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n    local\
    \ -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwyfjf_t9.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpwyfjf_t9.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpwyfjf_t9.sh: line 20: local: digits_map: reference variable cannot be
    an array

    /tmp/tmpwyfjf_t9.sh: line 21: local: digits_reversed: reference variable cannot
    be an array

    /tmp/tmpwyfjf_t9.sh: line 22: local: digits_reversed_map: reference variable cannot
    be an array

    /tmp/tmpwyfjf_t9.sh: line 23: local: digits_reversed_reversed: reference variable
    cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 24: local: digits_reversed_reversed_map: reference variable
    cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 25: local: digits_reversed_reversed_reversed: reference
    variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 26: local: digits_reversed_reversed_reversed_map: reference
    variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 27: local: digits_reversed_reversed_reversed_reversed:
    reference variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 28: local: digits_reversed_reversed_reversed_reversed_map:
    reference variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 29: local: digits_reversed_reversed_reversed_reversed_reversed:
    reference variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 30: local: digits_reversed_reversed_reversed_reversed_reversed_map:
    reference variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 31: local: digits_reversed_reversed_reversed_reversed_reversed_reversed:
    reference variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 32: local: digits_reversed_reversed_reversed_reversed_reversed_reversed_map:
    reference variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 33: local: digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed:
    reference variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 34: local: digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map:
    reference variable cannot be an array

    /tmp/tmpwyfjf_t9.sh: line 35: local: digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed'
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  output=$(IFS=' '; echo \"${array[@]}\"\
    \ | sort -n | sed 's/^/\"/; s/$/\"/; s/^/\"/; s/$/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvoufzatj.sh: line 20: unexpected EOF while looking for matching
    `''''

    /tmp/tmpvoufzatj.sh: line 37: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"${#array}\"\n  local result\n  local i\n  local j\n  local name\n\
    \  local tmp\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  \n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -i len=${#arr[@]}\n\
    \    local -i i\n    local j\n    for ((i=0; i<len; i++)); do\n        local j\n\
    \        for ((j=0; j<9; j++)); do\n            if [[ ${arr[i]} -ge ${digits[j]}\
    \ && ${arr[i]} -le ${digits[j+1]} ]]; then\n                local -n num=${arr[i]}\n\
    \                local -n name=${names[j]}\n                result+=(\"\\\"${name}\\\
    \"\")\n                arr[i]=${num}\n                break\n            fi\n\
    \        done\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0y_58fkk.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local i\n    local j\n    local length\n    local name\n\
    \    local num\n    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n\
    \    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n\
    \    local tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n    local\
    \ tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n\
    \    local tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n    local\
    \ tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n\
    \    local tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n    local\
    \ tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n\
    \    local tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n    local\
    \ tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n\
    \    local tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n    local\
    \ tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n\
    \    local tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n    local\
    \ tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n\
    \    local tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n    local\
    \ tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n\
    \    local tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n    local\
    \ tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n\
    \    local tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n    local\
    \ tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n\
    \    local tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n    local\
    \ tmp95\n    local tmp96\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2serndhr.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a tmp=()\n  local i j\n  for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n    local -a tmp2=()\n    for (( j=0; j<${#arr[@]}; j++ )); do\n   \
    \   if [[ ${arr[j]} -ge 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n        tmp2+=(${arr[j]})\n\
    \      fi\n    done\n    local -n tmp3=${tmp2}\n    for (( j=0; j<${#tmp3[@]};\
    \ j++ )); do\n      tmp+=(${tmp3[j]})\n    done\n    for (( j=0; j<${#tmp[@]};\
    \ j++ )); do\n      result+=(\"${tmp[j]}\")\n    done\n  done\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp66qphoug.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=' '\n    local\
    \ -a arr\n    local -a names\n    local -a result\n    local i\n    local len\n\
    \    local str\n    local j\n    local k\n    local name\n    local tmp\n\n  \
    \  arr=( $1 )\n    len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n        echo []\n\
    \        return\n    fi\n\n    # Sort array from smallest to largest\n    local\
    \ i\n    for (( i=0; i<len-1; i++ )); do\n        for (( j=i+1; j<len; j++ ));\
    \ do\n            if [ \"${arr[i]}\" -gt \"${arr[j]}\" ]; then\n             \
    \   tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=${tmp}\n\
    \            fi\n        done\n    done\n\n    # Reverse the array\n    local\
    \ i\n    for (( i=0; i<len-1; i++ )); do\n        arr[i]=${arr[i]}\n    done\n\
    \n    # Replace each digit by its corresponding name from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    for\
    \ (( i=0; i<len; i++ )); do\n        str=\"${arr[i]}\"\n        name=${str%% *}\n\
    \        name=${name##* }\n        name=${name% *}\n        name=${name#* }\n\
    \        result+=( \"$name\" )\n    done\n\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=(\"${1//[[:space:]]/}\"\
    )\n    local -a result=()\n    local i j\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        if (( ${arr[i]} > 9 )); then\n            arr[i]=$(printf \"%02d\"\
    \ \"${arr[i]}\")\n        fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        j=$((i+1))\n        if (( ${arr[i]} > 9 )); then\n            result+=(\"\
    \\\"${arr[i]}\\\" \\\"${arr[j]}\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=(\"${@//\
    \ /}\")\n  local -a result=()\n  local -a digits=()\n  local -i len=${#arr[@]}\n\
    \  local -i i\n  local -i j\n  local -i k\n  local -i len2\n  local -i len3\n\
    \  local -i len4\n  local -i len5\n  local -i len6\n  local -i len7\n  local -i\
    \ len8\n  local -i len9\n  local -i len10\n  local -i len11\n  local -i len12\n\
    \  local -i len13\n  local -i len14\n  local -i len15\n  local -i len16\n  local\
    \ -i len17\n  local -i len18\n  local -i len19\n  local -i len20\n  local -i len21\n\
    \  local -i len22\n  local -i len23\n  local -i len24\n  local -i len25\n  local\
    \ -i len26\n  local -i len27\n  local -i len28\n  local -i len29\n  local -i len30\n\
    \  local -i len31\n  local -i len32\n  local -i len33\n  local -i len34\n  local\
    \ -i len35\n  local -i len36\n  local -i len37\n  local -i len38\n  local -i len39\n\
    \  local -i len40\n  local -i len41\n  local -i len42\n  local -i len43\n  local\
    \ -i len44\n  local -i len45\n  local -i len46\n  local -i len47\n  local -i len48\n\
    \  local -i len49\n  local -i len50\n  local -i len51\n  local -i len52\n  local\
    \ -i len53\n  local -i len54\n  local -i len55\n  local -i len56\n  local -i len57\n\
    \  local -i len58\n  local -i len59\n  local -i len60\n  local -i len61\n  local\
    \ -i len62\n  local -i len63\n  local -i len64\n  local -i len65\n  local -i len66\n\
    \  local -i len67\n  local -i len68\n  local -i len69\n  local -i len70\n  local\
    \ -i len71\n  local -i len72\n  local -i len73\n  local -i len74\n  local -i len75\n\
    \  local -i len76\n  local -i len77\n  local \n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=( $1 )\n  local\
    \ length\n  local i\n  local j\n  local name\n  local output\n  local lengths\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_arr\n\
    \  local lengths_str\n  local lengths_arr\n  local lengths_str\n  local lengths_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -i i\n  local -a digits=()\n  local -a names=(\"One\"\
    \ \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n\
    \  local -a tmp\n  local -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a\
    \ tmp5\n  local -a tmp6\n  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n \
    \ local -a tmp10\n  local -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local\
    \ -a tmp14\n  local -a tmp15\n  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n\
    \  local -a tmp19\n  local -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local\
    \ -a tmp23\n  local -a tmp24\n  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n\
    \  local -a tmp28\n  local -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local\
    \ -a tmp32\n  local -a tmp33\n  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n\
    \  local -a tmp37\n  local -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local\
    \ -a tmp41\n  local -a tmp42\n  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n\
    \  local -a tmp46\n  local -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local\
    \ -a tmp50\n  local -a tmp51\n  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n\
    \  local -a tmp55\n  local -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local\
    \ -a tmp59\n  local -a tmp60\n  local -a tmp61\n  local -a tmp62\n  local -a tmp63\n\
    \  local -a tmp64\n  local -a tmp\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpilqrgu4v.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length\n    local i\n    local j\n    local output\n    local num\n\
    \    local nums\n    local nums_length\n    local nums_lengths\n    local nums_lengths_sorted\n\
    \    local nums_lengths_sorted_reversed\n    local nums_lengths_sorted_reversed_reversed\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted\n    local nums_lengths_sorted_reversed_reversed_sorted_reversed\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted\n    local\
    \ nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed\n    local\
    \ nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local nums_lengths_sorted_reversed_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local nums_lengths_sorted_reversed_\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  output=$(IFS=' '; echo \"\
    ${array[@]}\" | sort -n | sed 's/^/\"/; s/$/\"/; s/^/\"/; s/$/\"/')\n  IFS=$'\\\
    n'\n  for (( i = 0; i < ${#output}; i++ )); do\n    local j\n    for (( j = 1;\
    \ j < ${length}; j++ )); do\n      local k\n      for (( k = 0; k < ${#output};\
    \ k++ )); do\n        if [[ ${output[k]} -eq ${output[i]} ]]; then\n         \
    \ output[k]=${output[i]}\n        fi\n      done\n    done\n    output[i]=${output[i]//\"\
    One\"}\n    output[i]=${output[i]//\"Two\"}\n    output[i]=${output[i]//\"Three\"\
    }\n    output[i]=${output[i]//\"Four\"}\n    output[i]=${output[i]//\"Five\"}\n\
    \    output[i]=${output[i]//\"Six\"}\n    output[i]=${output[i]//\"Seven\"}\n\
    \    output[i]=${output[i]//\"Eight\"}\n    output[i]=${output[i]//\"Nine\"}\n\
    \  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected
    (error token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    /tmp/tmp1j62rhr7.sh: line 27: ((: j < : syntax error: operand expected (error
    token is "< ")

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=( $1 )\n  local\
    \ length\n  local i\n  local j\n  local result\n  local tmp\n  local name\n  local\
    \ num\n  local lengths\n  local length\n  local length_count\n  local length_name\n\
    \  local length_index\n  local length_names\n  local length_name\n  local length_indexes\n\
    \  local length_index\n  local length_indexes\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n  local length_index\n\
    \  local length_indexes\n  local length_names\n  local length_name\n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"\
    Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a lengths=(\"1\" \"2\" \"3\" \"\
    4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  local -a digits=()\n  local -a tmp\n  local\
    \ i j k l m\n  local -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n\
    \  local -a tmp6\n  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a\
    \ tmp10\n  local -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n\
    \  local -a tmp15\n  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local\
    \ -a tmp19\n  local -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n\
    \  local -a tmp24\n  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local\
    \ -a tmp28\n  local -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n\
    \  local -a tmp33\n  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local\
    \ -a tmp37\n  local -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n\
    \  local -a tmp42\n  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local\
    \ -a tmp46\n  local -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n\
    \  local -a tmp51\n  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local\
    \ -a tmp55\n  local -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n\
    \  local -a tmp60\n  local -a tmp61\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpg8w912hn.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"${#array}\"\n    local result=()\n    local i\n    for ((\
    \ i = 0; i < length; i++ )); do\n        local j\n        for (( j = 1; j <= 9;\
    \ j++ )); do\n            local k\n            for (( k = 0; k < j; k++ )); do\n\
    \                local item=\"${array[k]}${array[k+1]}\"\n                if [[\
    \ \"$item\" =~ ^[0-9]$ ]]; then\n                    result+=(\"$item\")\n   \
    \             fi\n            done\n        done\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local result=()\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=(\"0\" \"1\" \"2\"\
    \ \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  local -a digits_reversed=()\n\
    \  local -a digits_reversed_reversed=()\n  local -a digits_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed=()\n  local -a digits_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reverse\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp02vmx1f.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local i j\n    local -a names\n    local -a lengths\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n    local -a\
    \ numbers\n    local -a numbers\n    local -a numbers\n    local -a numbers\n\
    \    local -a numbers\n    local -a numbers\n    local -a numbers\n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiqo3jjhr.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=(\"$@\")\n\
    \  local -a result=()\n  local -i i\n  local j\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    local -a digits=()\n    local -a names=()\n    local -a lengths=()\n\
    \    for ((j=0; j<${#arr[i]}; j++)); do\n      local -a digit\n      local -a\
    \ name\n      local -a length\n      if [[ ${arr[i]} =~ ^[0-9]+$ ]]; then\n  \
    \      digit+=(${arr[i]})\n      elif [[ ${arr[i]} =~ ^[[:digit:]]+$ ]]; then\n\
    \        digit+=(${arr[i]})\n      else\n        continue\n      fi\n      name+=(${name[@]})\n\
    \      length+=(${length[@]})\n    done\n    local -a reversed\n    local -a reversed_length\n\
    \    local -a reversed_name\n    for ((j=0; j<${#digits[@]}; j++)); do\n     \
    \ local -a digit\n      local -a name\n      local -a length\n      if [[ ${digits[$j]}\
    \ -le 9 ]]; then\n        digit+=(${digits[$j]})\n      elif [[ ${digits[$j]}\
    \ -ge 1 ]]; then\n        digit+=(${digits[$j]})\n      else\n        continue\n\
    \      fi\n      name+=(${names[$j]})\n      length+=(${lengths[$j]})\n    done\n\
    \    for ((j=0; j<${#digits[@]}; j++)); do\n      local -a digit\n      local\
    \ -a name\n      local -a length\n      if [[ ${digits[$j]} -le 9 ]]; then\n \
    \       digit+=(${digits[$j]})\n      elif [[ ${digits[$j]} -ge 1 ]]; then\n \
    \       digit+=(${digits[$j]})\n      else\n        continue\n      fi\n     \
    \ name+=(${names[$j]})\n      length+=(${lengths[$j]})\n    done\n    for ((j=0;\
    \ j<${#digits[@]}; j++)); do\n      local -a digit\n      local -a name\n    \
    \  local -a length\n      if [[ ${digits[$j]} -le 9 ]]; then\n        digit+=(${digits[$j]})\n\
    \      elif [[ ${digits[$j]} -ge 1 ]]; then\n        \n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwo76u7rd.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmpwo76u7rd.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=()\n   \
    \ local -a digits_reversed=()\n    local -a digits_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed=()\n    local -a digits_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl44z7lic.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=( $1 )\n\
    \    local -a result=()\n    local -i i\n    local j\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        if (( ${arr[i]} >= 1 && ${arr[i]} <= 9 )); then\n      \
    \      for (( j=i; j>0; j-- )); do\n                if (( ${arr[j]} >= 1 && ${arr[j]}\
    \ <= 9 )); then\n                    result+=( ${arr[j]} )\n                 \
    \   arr[j]=${arr[j-1]}\n                else\n                    break\n    \
    \            fi\n            done\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        j=$((i+1))\n        if [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]} -le 9 ]];\
    \ then\n            result+=(\"\\\"${arr[i]}\\\"\" \"${arr[j]}\")\n        fi\n\
    \    done\n    IFS=$'\\n' printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_0jsmie1.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=$1\n  local\
    \ output\n  output=$(IFS=' '; echo \"${arr[*]}\" | sort -n | sed 's/^/\"/; s/$/\"\
    /; s/^/\"/; s/$/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjpr28xxy.sh: line 19: unexpected EOF while looking for matching
    `''''

    /tmp/tmpjpr28xxy.sh: line 36: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n' arr=(\
    \ $1 )\n    local len=0\n    local i=0\n    local res=()\n    for val in \"${arr[@]}\"\
    ; do\n        if [[ $val -gt 9 ]]; then\n            len=$((len+1))\n        else\n\
    \            len=$((len+0))\n        fi\n    done\n    for ((i=0; i<len; i++));\
    \ do\n        res+=(\"\\\"${arr[i]}\\\"\")\n    done\n    echo \"${res[@]}\"\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    local -a names=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        j=$((${arr[i]} + 1))\n        if ((j > 9)) ; then\n     \
    \       j=$((${j} % 10))\n        fi\n        result+=(\"${names[j]}\")\n    done\n\
    \    IFS=$'\\n' printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo2ocok1u.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local name\n  local\
    \ num\n  local lengths\n  local length\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length_name\n\
    \  local length_names\n  local length_name\n  local length_names\n  local length\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local i j\n    local -a names\n    local -a lengths\n\
    \    local -a tmp\n    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n \
    \   local -a tmp5\n    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n \
    \   local -a tmp9\n    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n\
    \    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n\
    \    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n\
    \    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n\
    \    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n\
    \    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n\
    \    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n\
    \    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n\
    \    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n\
    \    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n\
    \    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n\
    \    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n\
    \    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n\
    \    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n\
    \    local -a tmp65\n    local -a tmp66\n    local -a tmp67\n    local -a tmp68\n\
    \    local -a tmp\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvpne76q8.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local -a names=(\"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a\
    \ digits=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        local j\n        for ((j=0; j<${#digits[@]};\
    \ j++)); do\n            if [[ ${arr[i]} -ge ${digits[j]} && ${arr[i]} -le ${digits[j+1]}\
    \ ]]; then\n                local k\n                for ((k=0; k<${#names[@]};\
    \ k++)); do\n                    if [[ ${arr[i]} -eq ${digits[j]} ]]; then\n \
    \                       result+=(\"\\\"${names[k]}\\\"\")\n                  \
    \      break\n                    fi\n                done\n                break\n\
    \            fi\n        done\n    done\n    if [[ ${#result[@]} -eq 0 ]]; then\n\
    \        result=()\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmploan4x62.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n' arr=(\
    \ $1 )\n    local lengths=( ${#arr[@]} )\n    local maxlen=${#lengths[@]}\n  \
    \  local maxidx=${#lengths[@]}\n    local maxval=${lengths[$maxidx]}\n    local\
    \ i\n    local val\n    local idx\n    local vals\n    local val\n    local name\n\
    \    local newarr\n    local newlen\n    local newidx\n    local newval\n    local\
    \ newname\n    local newvals\n    local newname\n    local newidx\n    local newval\n\
    \    local newname\n    local newvals\n    local newname\n    local newidx\n \
    \   local newval\n    local newname\n    local newvals\n    local newname\n  \
    \  local newidx\n    local newval\n    local newname\n    local newvals\n    local\
    \ newname\n    local newidx\n    local newval\n    local newname\n    local newvals\n\
    \    local newname\n    local newidx\n    local newval\n    local newname\n  \
    \  local newvals\n    local newname\n    local newidx\n    local newval\n    local\
    \ newname\n    local newvals\n    local newname\n    local newidx\n    local newval\n\
    \    local newname\n    local newvals\n    local newname\n    local newidx\n \
    \   local newval\n    local newname\n    local newvals\n    local newname\n  \
    \  local newidx\n    local newval\n    local newname\n    local newvals\n    local\
    \ newname\n    local newidx\n    local newval\n    local newname\n    local newvals\n\
    \    local newname\n    local newidx\n    local newval\n    local newname\n  \
    \  local newvals\n    local newname\n    local newidx\n    local newval\n    local\
    \ newname\n    local newvals\n    local newname\n    local newidx\n    local newval\n\
    \    local newname\n    local newvals\n    local newname\n    local newidx\n \
    \   local newval\n    local newname\n    local newvals\n    local newname\n  \
    \  local newidx\n    local newval\n    local newname\n    local newvals\n    local\
    \ newname\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=( $1 )\n\
    \    local -a result=()\n    local -i i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local i j k l m n o p q r s t u v w x y z\n    local -a\
    \ names\n    local -a lengths\n    local -a lengths_sorted\n    local -a lengths_sorted_reversed\n\
    \    local -a lengths_sorted_reversed_sorted\n    local -a lengths_sorted_reversed_sorted_reversed\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted\n    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local -a lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp784e1gxg.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local result\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length\n  local index\n  local value\n  local result\n\n  if [[ \"$array\"\
    \ =~ ^[0-9]+$ ]]; then\n    length=${#array}\n  else\n    length=${#array} # assume\
    \ it's a single number\n    array=\"$array \"\n  fi\n\n  result=()\n  for index\
    \ in $(seq 0 $((length-1))); do\n    value=${array:$index:1}\n    if [[ $value\
    \ =~ ^[0-9]$ ]]; then\n      result+=(\"${value:0:1}\")\n    fi\n  done\n\n  if\
    \ [[ \"$array\" =~ ^[0-9]+$ ]]; then\n    array=${array:0:$((length-1))}\n  fi\n\
    \n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjas9e1b0.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=()\n  local -a digits_reversed=()\n\
    \  local -a digits_reversed_with_quotes=()\n  local -a digits_reversed_with_quotes_reversed=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes=()\n  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \  local -a digits_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd1cq0jh8.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=( $1 )\n \
    \   local lengths=( ${#arr[@]} )\n    local result=()\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local A\n    local\
    \ B\n    local C\n    local D\n    local E\n    local F\n    local G\n    local\
    \ H\n    local I\n    local J\n    local K\n    local L\n    local M\n    local\
    \ N\n    local O\n    local P\n    local Q\n    local R\n    local S\n    local\
    \ T\n    local U\n    local V\n    local W\n    local X\n    local Y\n    local\
    \ Z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local A\n    local B\n    local C\n    local\
    \ D\n    local E\n    local F\n    local G\n    local H\n    local I\n    local\
    \ J\n    local K\n    local L\n    local M\n    local N\n    local O\n    local\
    \ P\n    local Q\n    local R\n    local S\n    local T\n    local U\n    local\
    \ V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    \n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local result=()\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=$1\n  local\
    \ -a result=()\n  local i j\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    local\
    \ -a tmp=()\n    for (( j=0; j<${#arr[@]}; j++ )); do\n      if [[ ${arr[j]} -ge\
    \ 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n        tmp+=(\"${arr[j]}\")\n      fi\n\
    \    done\n    local -a tmp2=()\n    for (( j=0; j<${#tmp[@]}; j++ )); do\n  \
    \    tmp2+=(\"${name[${tmp[j]}]}\")\n    done\n    result+=(\"${tmp2[@]}\")\n\
    \  done\n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3b840fse.sh: line 23: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local result\n  local i\n  local j\n  local name\n  local\
    \ tmp\n  local tmp2\n  local tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n\
    \  local tmp7\n  local tmp8\n  local tmp9\n  local tmp10\n  local tmp11\n  local\
    \ tmp12\n  local tmp13\n  local tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n\
    \  local tmp18\n  local tmp19\n  local tmp20\n  local tmp21\n  local tmp22\n \
    \ local tmp23\n  local tmp24\n  local tmp25\n  local tmp26\n  local tmp27\n  local\
    \ tmp28\n  local tmp29\n  local tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n\
    \  local tmp34\n  local tmp35\n  local tmp36\n  local tmp37\n  local tmp38\n \
    \ local tmp39\n  local tmp40\n  local tmp41\n  local tmp42\n  local tmp43\n  local\
    \ tmp44\n  local tmp45\n  local tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n\
    \  local tmp50\n  local tmp51\n  local tmp52\n  local tmp53\n  local tmp54\n \
    \ local tmp55\n  local tmp56\n  local tmp57\n  local tmp58\n  local tmp59\n  local\
    \ tmp60\n  local tmp61\n  local tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n\
    \  local tmp66\n  local tmp67\n  local tmp68\n  local tmp69\n  local tmp70\n \
    \ local tmp71\n  local tmp72\n  local tmp73\n  local tmp74\n  local tmp75\n  local\
    \ tmp76\n  local tmp77\n  local tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n\
    \  local tmp82\n  local tmp83\n  local tmp84\n  local tmp85\n  local tmp86\n \
    \ local tmp87\n  local tmp88\n  local tmp89\n  local tmp90\n  local tmp91\n  local\
    \ tmp92\n  local tmp93\n  local tmp94\n  local tmp95\n  local tmp96\n  local tmp97\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  output=$(IFS=' '; echo \"\
    ${array[@]}\" | sort -n | cut -d' ' -f$((${#array[@]} - $length))); IFS=$' ';)\n\
    \  for i in $output; do\n    array=(\"${array[@]/%/${i}}\")\n  done\n  echo \"\
    ${array[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6bd5tnvl.sh: line 21: syntax error near unexpected token `)''

    /tmp/tmp6bd5tnvl.sh: line 21: `  output=$(IFS='' ''; echo "${array[@]}" | sort
    -n | cut -d'' '' -f$((${#array[@]} - $length))); IFS=$'' '';)''

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a lengths=(\"1\" \"2\"\
    \ \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a lengths_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\")\n    local -a digits=()\n\
    \    local -a digits_reversed=()\n    local -a digits_reversed_length=()\n   \
    \ local -a digits_reversed_length_reversed=()\n    local -a digits_reversed_length_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_length_reversed_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_length_reversed_reverse\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq6bjumq6.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n\n  if [ -z \"$array\" ]; then\n    return\
    \ 0\n  fi\n\n  output=$(IFS=' '; echo \"${array[@]}\" | sort -n -k 2 | cut -d'\
    \ ' -f2- | sed 's/^/\"/; s/$/\"/; s/^/\"/; s/$/\"/; s/^/\"/; s/^/\"/; s/^/\"/;\
    \ s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4n83cscp.sh: line 25: unexpected EOF while looking for matching
    `''''

    /tmp/tmp4n83cscp.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length\n    local i\n    local result\n    local name\n    local digit\n\
    \    local j\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"\
    Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a lengths=(\"1\" \"2\" \"3\" \"\
    4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  local -a tmp\n  local i j k l m\n  local\
    \ -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n\
    \  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local\
    \ -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n\
    \  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local\
    \ -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n\
    \  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local\
    \ -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n\
    \  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local\
    \ -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n\
    \  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local\
    \ -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n\
    \  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local\
    \ -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n\
    \  local -a tmp61\n  local -a tmp62\n\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp49r2f6pp.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local names=()\n    local lengths=()\n    local length\n    local number\n\
    \    local name\n    local length\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local n\n    local o\n    local p\n    local q\n \
    \   local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local \n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a names\n    local -a result\n\n    arr=( $1 )\n    names=( One Two Three Four\
    \ Five Six Seven Eight Nine )\n    result=()\n\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        if [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]} -le 9 ]]; then\n\
    \            result+=( ${names[${arr[i]}]} )\n        fi\n    done\n\n    printf\
    \ '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=( )\n  local\
    \ -a result=( )\n  local -a digits=( )\n  local -a digits_length=( )\n  local\
    \ -a digits_names=( )\n  local -a digits_names_length=( )\n  local -a digits_names_reversed=(\
    \ )\n  local -a digits_names_reversed_length=( )\n  local -a digits_names_reversed_names=(\
    \ )\n  local -a digits_names_reversed_names_length=( )\n  local -a digits_names_reversed_names_names=(\
    \ )\n  local -a digits_names_reversed_names_names_length=( )\n  local -a digits_names_reversed_names_names_names=(\
    \ )\n  local -a digits_names_reversed_names_names_names_length=( )\n  local -a\
    \ digits_names_reversed_names_names_names_names=( )\n  local -a digits_names_reversed_names_names_names_names_length=(\
    \ )\n  local -a digits_names_reversed_names_names_names_names_names=( )\n  local\
    \ -a digits_names_reversed_names_names_names_names_names_length=( )\n  local -a\
    \ digits_names_reversed_names_names_names_names_names_names=( )\n  local -a digits_names_reversed_names_names_names_names_names_names_length=(\
    \ )\n  local -a digits_names_reversed_names_names_names_names_names_names_names=(\
    \ )\n  local -a digits_names_reversed_names_names_names_names_names_names_names_length=(\
    \ )\n  local -a digits_names_reversed_names_names_names_names_names_names_names_names_names=(\
    \ )\n  local -a digits_names_reversed_names_names_names_names_names_names_names_names_names_length=(\
    \ )\n  local -a digits_names_reversed_names_names_names_names_names_names_names_names_names_names_names=(\
    \ )\n  local -a digits_names_reversed_names_names_names_names_names_names_names_names_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length\n    local i\n    local result\n    local name\n\n    length=${#array}\n\
    \    if [ -z \"$length\" ]; then\n        echo \"$array\"\n        return\n  \
    \  fi\n\n    result=()\n    for (( i=0; i<$length; i++ )); do\n        name=${array:$i:1}\n\
    \        if [ \"$name\" -eq \"1\" ]; then\n            result+=(\"One\")\n   \
    \     elif [ \"$name\" -eq \"2\" ]; then\n            result+=(\"Two\")\n    \
    \    elif [ \"$name\" -eq \"3\" ]; then\n            result+=(\"Three\")\n   \
    \     elif [ \"$name\" -eq \"4\" ]; then\n            result+=(\"Four\")\n   \
    \     elif [ \"$name\" -eq \"5\" ]; then\n            result+=(\"Five\")\n   \
    \     elif [ \"$name\" -eq \"6\" ]; then\n            result+=(\"Six\")\n    \
    \    elif [ \"$name\" -eq \"7\" ]; then\n            result+=(\"Seven\")\n   \
    \     elif [ \"$name\" -eq \"8\" ]; then\n            result+=(\"Eight\")\n  \
    \      elif [ \"$name\" -eq \"9\" ]; then\n            result+=(\"Nine\")\n  \
    \      else\n            echo \"$array\"\n        fi\n    done\n\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpti5ha6ct.sh: line 32: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 34: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 36: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 38: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 40: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 42: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 44: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 46: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 48: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 32: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 34: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 36: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 38: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 40: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 42: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 44: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 46: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 48: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 32: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 34: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 36: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 38: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 40: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 42: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 44: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 46: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 48: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 32: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 34: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 36: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 38: [:  : integer expression expected

    /tmp/tmpti5ha6ct.sh: line 40: [:  : integer expression expected

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local -a names\n    local -a lengths\n\
    \    local -a length\n    local -a name\n    local -a lengths\n    local -a length\n\
    \    local -a name\n    local -a lengths\n    local -a length\n    local -a name\n\
    \    local -a lengths\n    local -a length\n    local -a name\n    local -a lengths\n\
    \    local -a length\n    local -a name\n    local -a lengths\n    local -a length\n\
    \    local -a name\n    local -a lengths\n    local -a length\n    local -a name\n\
    \    local -a lengths\n    local -a length\n    local -a name\n    local -a lengths\n\
    \    local -a length\n    local -a name\n    local -a lengths\n    local -a length\n\
    \    local -a name\n    local -a lengths\n    local -a length\n    local -a name\n\
    \    local -a lengths\n    local -a length\n    local -a name\n    local -a lengths\n\
    \    local -a length\n    local -a name\n    local -a lengths\n    local -a length\n\
    \    local -a name\n    local -a lengths\n    local -a length\n    local -a name\n\
    \    local -a lengths\n    local -a length\n    local -a name\n    local -a lengths\n\
    \    local -a length\n    local -a name\n    local -a lengths\n    local -a length\n\
    \    local -a name\n    local -a lengths\n    local -a length\n    local -a name\n\
    \    local -a lengths\n    local -a length\n    local -a name\n    local -a lengths\n\
    \    local -a length\n    local -a name\n    local -a lengths\n    local -a length\n\
    \    local -a name\n    local -a lengths\n    local -a length\n    local -a name\n\
    \    local -a lengths\n    local -a length\n    local -a name\n    local -a lengths\n\
    \    local -a length\n    local -a name\n    local -a lengths\n    local -a length\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphtg2a_z3.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=(\"${@}\"\
    )\n    local -a result=()\n    local -i i\n    local -a tmp\n    local -a tmp2\n\
    \    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n\
    \    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local -a tmp10\n\
    \    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n\
    \    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n\
    \    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n\
    \    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n\
    \    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n\
    \    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n\
    \    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n\
    \    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n\
    \    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n\
    \    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n\
    \    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n\
    \    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n\
    \    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n\
    \    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n\
    \    local -a tmp67\n    local -a tmp68\n    local -a tmp69\n    local -a tmp70\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -i i\n    local -a\
    \ tmp\n    for ((i = 0; i < ${#arr[@]}; i++)); do\n        tmp=()\n        for\
    \ ((j = 0; j < ${#names[@]}; j++)); do\n            tmp+=(\"${arr[i]}\" \"${names[j]}\"\
    )\n        done\n        result+=(\"${tmp[@]}\")\n    done\n    IFS=$'\\n' printf\
    \ '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp569sghe4.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=' ' arr=(\"\
    $@\")\n    local result=()\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<${#arr[@]}; j++)); do\n            if ((j<i))\
    \ ; then\n                local k\n                for ((k=0; k<${#arr[@]}; k++));\
    \ do\n                    if ((k==i)) ; then\n                        result+=(\"\
    ${arr[k]}\")\n                    fi\n                done\n                break\n\
    \            fi\n        done\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -n digits=$2\n    local -n digits_map=()\n  \
    \  local -n digits_map_index=()\n    local -n digits_map_reversed=()\n    local\
    \ -n digits_map_reversed_index=()\n    local -n digits_map_reversed_value=()\n\
    \    local -n digits_map_reversed_value_index=()\n    local -n digits_map_reversed_value_value=()\n\
    \    local -n digits_map_reversed_value_value_index=()\n    local -n digits_map_reversed_value_value_value=()\n\
    \    local -n digits_map_reversed_value_value_value_index=()\n    local -n digits_map_reversed_value_value_value_value=()\n\
    \    local -n digits_map_reversed_value_value_value_value_index=()\n    local\
    \ -n digits_map_reversed_value_value_value_value=()\n    local -n digits_map_reversed_value_value_value_value_index=()\n\
    \    local -n digits_map_reversed_value_value_value_value=()\n    local -n digits_map_reversed_value_value_value_value_index=()\n\
    \    local -n digits_map_reversed_value_value_value_value=()\n    local -n digits_map_reversed_value_value_value_value_index=()\n\
    \    local -n digits_map_reversed_value_value_value_value_value=()\n    local\
    \ -n digits_map_reversed_value_value_value_value_index=()\n    local -n digits_map_reversed_value_value_value_value_value=()\n\
    \    local -n digits_map_reversed_value_value_value_value_index=()\n    local\
    \ -n digits_map_reversed_value_value_value_value_value=()\n    local -n digits_map_reversed_value_value_value_value_index=()\n\
    \    local -n digits_map_reversed_value_value_value_value_value=()\n    local\
    \ -n digits_map_reversed_value_value_value_value_value_index=()\n    local -n\
    \ digits_map_reversed_value_value_value_value_value=()\n    local -n digits_map_reversed_value_value_value_value_value_index=()\n\
    \    local -n digits_map_reversed_value_value_value_value_value_value=()\n   \
    \ local -n digits_map_reversed_value_value_value_value_value_index=()\n    local\
    \ -n digits_map_reversed_value_value_value_value_value_value=()\n    local -n\
    \ digits_map_reversed_value_value_value_value\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphowp4kx8.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmphowp4kx8.sh: line 19: local: `'': not a valid identifier

    /tmp/tmphowp4kx8.sh: line 20: local: digits_map: reference variable cannot be
    an array

    /tmp/tmphowp4kx8.sh: line 21: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphowp4kx8.sh: line 22: local: digits_map_reversed: reference variable cannot
    be an array

    /tmp/tmphowp4kx8.sh: line 23: local: digits_map_reversed_index: reference variable
    cannot be an array

    /tmp/tmphowp4kx8.sh: line 24: local: digits_map_reversed_value: reference variable
    cannot be an array

    /tmp/tmphowp4kx8.sh: line 25: local: digits_map_reversed_value_index: reference
    variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 26: local: digits_map_reversed_value_value: reference
    variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 27: local: digits_map_reversed_value_value_index: reference
    variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 28: local: digits_map_reversed_value_value_value: reference
    variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 29: local: digits_map_reversed_value_value_value_index:
    reference variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 30: local: digits_map_reversed_value_value_value_value:
    reference variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 31: local: digits_map_reversed_value_value_value_value_index:
    reference variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 32: local: digits_map_reversed_value_value_value_value:
    reference variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 33: local: digits_map_reversed_value_value_value_value_index:
    reference variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 34: local: digits_map_reversed_value_value_value_value:
    reference variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 35: local: digits_map_reversed_value_value_value_value_index:
    reference variable cannot be an array

    /tmp/tmphowp4kx8.sh: line 36: local: digits_map_reversed_value_value_value_value:
    reference variable cann'
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names\n    local -a tmp\n    local -a tmp2\n\
    \    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n\
    \    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local -i len\n \
    \   local -i i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp40yapskv.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a names\n    local -a result\n    local -i i\n    local len\n    local str\n\
    \    local tmp\n\n    arr=( $1 )\n    len=${#arr[@]}\n    if [[ $len == 0 ]];\
    \ then\n        result=()\n        return 0\n    fi\n    IFS=' ' read -a names\
    \ <<<\"${arr[@]}\"\n    for ((i = 0; i < len; ++i)); do\n        tmp=${arr[i]}\n\
    \        if [[ $tmp -ge 1 ]] && [[ $tmp -le 9 ]]; then\n            arr[i]=${names[$tmp]}\n\
    \        fi\n    done\n    IFS=' '\n    for str in \"${arr[@]}\"; do\n       \
    \ result+=( \"$str\" )\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n'\n \
    \   local -a arr\n    local -a result\n    local -a names\n    local -a nums\n\
    \    local -a nums_tmp\n    local -i len\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  output=$(IFS=' '; echo \"${array[@]}\"\
    \ | sort -n -k 2 | \\\n    awk -F'\"' '{for (i=1; i<=NF; i++) if ($i==length)\
    \ print $(i-1)\"-\"\\$(i); else print $i}')\n  IFS=$' \\t\\n'\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {for (i=1; i<=NF; i++) if ($i==length) print $(i-1)"-"\$(i);
    else print $i}

    awk: cmd. line:1:                                                       ^ backslash
    not last character on line

    awk: cmd. line:1: {for (i=1; i<=NF; i++) if ($i==length) print $(i-1)"-"\$(i);
    else print $i}

    awk: cmd. line:1:                                                       ^ syntax
    error

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n' arr=(\
    \ $1 )\n    local -a result=()\n    local i\n    for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n        local j\n        for (( j=0; j<${#arr[@]}; j++ )); do\n    \
    \        if (( ${arr[j]} <= 9 )); then\n                local k\n            \
    \    for (( k=0; k<${#arr[@]}; k++ )); do\n                    if (( ${arr[k]}\
    \ <= ${arr[j]} )); then\n                        result+=( \"${arr[k]}\" )\n \
    \                   fi\n                done\n            else\n             \
    \   break\n            fi\n        done\n    done\n    IFS=$' \\t\\n'\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a sorted\n  local -a reversed\n  local -a result\n\n  sorted=( $(sort -n <<<\"\
    $arr\") )\n  reversed=( $(sort -n <<<\"$arr\" |\n    awk '{\n      for(i=NF;i>0;i--)\
    \ printf \"%s \", $i\n      printf \"\\n\"\n    }') )\n  result=( $(printf \"\
    %s\\n\" \"${reversed[@]}\" |\n    awk '{\n      for(i=NF;i>0;i--) printf \"%s\
    \ \", $i\n      printf \"\\n\"\n    }') )\n\n  printf '%s\\n' \"${sorted[@]}\"\
    \n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpcfhwkhj4.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=(\"0\" \"1\" \"2\"\
    \ \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  local -a digits_length=${#digits[@]}\n\
    \  local -a digits_reversed=()\n  local -a digits_reversed_length=${#digits_reversed[@]}\n\
    \  local -a digits_reversed_reversed=()\n  local -a digits_reversed_reversed_length=${#digits_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4_3cyusy.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_length=${#digits[@]}\n\
    \    local -a digits_length2=${#digits[@]}\n    local -a digits_length3=${#digits[@]}\n\
    \    local -a digits_length4=${#digits[@]}\n    local -a digits_length5=${#digits[@]}\n\
    \    local -a digits_length6=${#digits[@]}\n    local -a digits_length7=${#digits[@]}\n\
    \    local -a digits_length8=${#digits[@]}\n    local -a digits_length9=${#digits[@]}\n\
    \    local -a digits_length10=${#digits[@]}\n    local -a digits_length11=${#digits[@]}\n\
    \    local -a digits_length12=${#digits[@]}\n    local -a digits_length13=${#digits[@]}\n\
    \    local -a digits_length14=${#digits[@]}\n    local -a digits_length15=${#digits[@]}\n\
    \    local -a digits_length16=${#digits[@]}\n    local -a digits_length17=${#digits[@]}\n\
    \    local -a digits_length18=${#digits[@]}\n    local -a digits_length19=${#digits[@]}\n\
    \    local -a digits_length20=${#digits[@]}\n    local -a digits_length21=${#digits[@]}\n\
    \    local -a digits_length22=${#digits[@]}\n    local -a digits_length23=${#digits[@]}\n\
    \    local -a digits_length24=${#digits[@]}\n    local -a digits_length25=${#digits[@]}\n\
    \    local -a digits_length26=${#digits[@]}\n    local -a digits_length27=${#digits[@]}\n\
    \    local -a digits_length28=${#digits[@]}\n    local -a digits_length29=${#digits[@]}\n\
    \    local -a digit\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv3k27kv2.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=( $1 )\n\
    \  local -a result=()\n  local -a digits=()\n  local -a names=( One Two Three\
    \ Four Five Six Seven Eight Nine )\n  local -i i\n  local -a tmp\n  local -a tmp2\n\
    \  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n  local -a\
    \ tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local -a tmp11\n\
    \  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n  local\
    \ -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local -a tmp20\n\
    \  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n  local\
    \ -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local -a tmp29\n\
    \  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n  local\
    \ -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local -a tmp38\n\
    \  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n  local\
    \ -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local -a tmp47\n\
    \  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n  local\
    \ -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local -a tmp56\n\
    \  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n  local\
    \ -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local -a tmp65\n\
    \  \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a names\n    local -a lengths\n    local -a result\n    local i j k l m\n \
    \   local -a tmp\n    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n  \
    \  local -a tmp5\n    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n  \
    \  local -a tmp9\n    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n\
    \    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n\
    \    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n\
    \    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n\
    \    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n\
    \    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n\
    \    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n\
    \    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n\
    \    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n\
    \    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n\
    \    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n\
    \    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n\
    \    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n\
    \    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n\
    \    local -a tmp65\n    local -a tmp66\n    local -a tmp67\n    local -a tmp68\n\
    \    local -a \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=()\n  local -a tmp=()\n\
    \  local -a tmp2=()\n  local -i len=0\n  local -i i\n  local -a tmp3=()\n  local\
    \ -a tmp4=()\n  local -a tmp5=()\n  local -a tmp6=()\n  local -a tmp7=()\n  local\
    \ -a tmp8=()\n  local -a tmp9=()\n  local -a tmp10=()\n  local -a tmp11=()\n \
    \ local -a tmp12=()\n  local -a tmp13=()\n  local -a tmp14=()\n  local -a tmp15=()\n\
    \  local -a tmp16=()\n  local -a tmp17=()\n  local -a tmp18=()\n  local -a tmp19=()\n\
    \  local -a tmp20=()\n  local -a tmp21=()\n  local -a tmp22=()\n  local -a tmp23=()\n\
    \  local -a tmp24=()\n  local -a tmp25=()\n  local -a tmp26=()\n  local -a tmp27=()\n\
    \  local -a tmp28=()\n  local -a tmp29=()\n  local -a tmp30=()\n  local -a tmp31=()\n\
    \  local -a tmp32=()\n  local -a tmp33=()\n  local -a tmp34=()\n  local -a tmp35=()\n\
    \  local -a tmp36=()\n  local -a tmp37=()\n  local -a tmp38=()\n  local -a tmp39=()\n\
    \  local -a tmp40=()\n  local -a tmp41=()\n  local -a tmp42=()\n  local -a tmp43=()\n\
    \  local -a tmp44=()\n  local -a tmp45=()\n  local -a tmp46=()\n  local -a tmp47=()\n\
    \  local -a tmp48=()\n  local -a tmp49=()\n  local -a tmp50=()\n  local -a tmp51=()\n\
    \  local -a tmp52=()\n  local -a \n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpq5vypqje.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=()\n  local -a lengths=()\n\
    \  local -a names_length=()\n  local -a length_length=()\n  local -a lengths_length=()\n\
    \  local -a names_length_name=()\n  local -a length_length_name=()\n  local -a\
    \ lengths_length_name=()\n  local -a names_length_name_length=()\n  local -a length_length_name_length=()\n\
    \  local -a lengths_length_name_length=()\n  local -a names_length_name_length_name=()\n\
    \  local -a length_length_name_length_name=()\n  local -a lengths_length_name_length_name=()\n\
    \  local -a names_length_name_length_name_length=()\n  local -a length_length_name_length_name_length=()\n\
    \  local -a lengths_length_name_length_name_length=()\n  local -a names_length_name_length_name_length_name=()\n\
    \  local -a length_length_name_length_name_length_name=()\n  local -a lengths_length_name_length_name_length_name=()\n\
    \  local -a names_length_name_length_name_length_name_length=()\n  local -a length_length_name_length_name_length_name_length=()\n\
    \  local -a lengths_length_name_length_name_length_name_length=()\n  local -a\
    \ names_length_name_length_name_length_name_length_name=()\n  local -a length_length_name_length_name_length_name_length_name=()\n\
    \  local -a lengths_length_name_length_name_length_name_length_name=()\n  local\
    \ -a names_length_name_length_name_length_name_length_name_length=()\n  local\
    \ -a length_length_name_length_name_length_name_length_name_length=()\n  local\
    \ -a lengths_length_name_length_name_length_name_length_name_length_name=()\n\
    \  local -a names_length_name_length_name_length_name_length_name_length_name_length=()\n\
    \  local -a length_length_name_length_name_length_name_length_name_length_name_length=()\n\
    \  local -a lengths_length_name_length_name_length_name_length_name_length_name_length_name=()\n\
    \  local -a names_length_name_length_name_length_name_length_name_length_name_length_name_length=()\n\
    \  local -a length_length_name_length_name_length_name_length_name_length_name_length_name_length=()\n\
    \  local -a lengths_length_name_length_name_length_name_length_name_length_name_length_name_length_name=()\n\
    \  local -a names_length_name_length\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyxpwbciu.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=( $1 )\n  local\
    \ result=()\n  local digits=${#arr[@]}\n  local digit\n  local digits_reversed\n\
    \  local digits_reversed_index\n  local digits_reversed_index2\n  local digits_reversed_index3\n\
    \  local digits_reversed_index4\n  local digits_reversed_index5\n  local digits_reversed_index6\n\
    \  local digits_reversed_index7\n  local digits_reversed_index8\n  local digits_reversed_index9\n\
    \  local digits_reversed_index10\n  local digits_reversed_index11\n  local digits_reversed_index12\n\
    \  local digits_reversed_index13\n  local digits_reversed_index14\n  local digits_reversed_index15\n\
    \  local digits_reversed_index16\n  local digits_reversed_index17\n  local digits_reversed_index18\n\
    \  local digits_reversed_index19\n  local digits_reversed_index20\n  local digits_reversed_index21\n\
    \  local digits_reversed_index22\n  local digits_reversed_index23\n  local digits_reversed_index24\n\
    \  local digits_reversed_index25\n  local digits_reversed_index26\n  local digits_reversed_index27\n\
    \  local digits_reversed_index28\n  local digits_reversed_index29\n  local digits_reversed_index30\n\
    \  local digits_reversed_index31\n  local digits_reversed_index32\n  local digits_reversed_index33\n\
    \  local digits_reversed_index34\n  local digits_reversed_index35\n  local digits_reversed_index36\n\
    \  local digits_reversed_index37\n  local digits_reversed_index38\n  local digits_reversed_index39\n\
    \  local digits_reversed_index40\n  local digits_reversed_index41\n  local digits_reversed_index42\n\
    \  local digits_reversed_index43\n  local digits_reversed_index44\n  local digits_reversed_index45\n\
    \  local digits_reversed_index46\n  local digits_reversed_index47\n  local digits_reversed_index48\n\
    \  local digits_reversed_index49\n  local digits_reversed_index50\n  local digits_reversed_index51\n\
    \  local digits_reversed_index52\n  local digits_reversed_index53\n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -i len=0\n  local -i i\n  local\
    \ -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")\n  local -a names_reversed=(\"Nine\" \"Eight\" \"Seven\" \"Six\" \"\
    Five\" \"Four\" \"Three\" \"Two\" \"One\")\n  local -a names_reversed_length=(\"\
    Nine\" \"Eight\" \"Seven\" \"Six\" \"Five\" \"Four\" \"Three\" \"Two\" \"One\"\
    )\n  local -a names_reversed_length_reversed=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a names_reversed_length_reversed_length=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n  local -a names_reversed_length_reversed_length_reversed=(\"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a\
    \ names_reversed_length_reversed_length_reversed_length=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a names_reversed_length_reversed_length_reversed_length_reversed=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n  local -a names_reversed_length_reversed_length_reversed_length_reversed_length=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n  local -a names_reversed_length_reversed_length_reversed_length_reversed_length_reversed=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n  local -a names_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n  local -a names_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed=(\"\
    One\" \"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5nu07r0t.sh: line 46: unexpected EOF while looking for matching
    `"''

    /tmp/tmp5nu07r0t.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=( $1 )\n\
    \    local -a result=()\n    local -i len=0\n    local -i i\n    local -i j\n\
    \    local -i k\n    local -i tmp\n    local -i tmp2\n    local -i tmp3\n    local\
    \ -i tmp4\n    local -i tmp5\n    local -i tmp6\n    local -i tmp7\n    local\
    \ -i tmp8\n    local -i tmp9\n    local -i tmp10\n    local -i tmp11\n    local\
    \ -i tmp12\n    local -i tmp13\n    local -i tmp14\n    local -i tmp15\n    local\
    \ -i tmp16\n    local -i tmp17\n    local -i tmp18\n    local -i tmp19\n    local\
    \ -i tmp20\n    local -i tmp21\n    local -i tmp22\n    local -i tmp23\n    local\
    \ -i tmp24\n    local -i tmp25\n    local -i tmp26\n    local -i tmp27\n    local\
    \ -i tmp28\n    local -i tmp29\n    local -i tmp30\n    local -i tmp31\n    local\
    \ -i tmp32\n    local -i tmp33\n    local -i tmp34\n    local -i tmp35\n    local\
    \ -i tmp36\n    local -i tmp37\n    local -i tmp38\n    local -i tmp39\n    local\
    \ -i tmp40\n    local -i tmp41\n    local -i tmp42\n    local -i tmp43\n    local\
    \ -i tmp44\n    local -i tmp45\n    local -i tmp46\n    local -i tmp47\n    local\
    \ -i tmp48\n    local -i tmp49\n    local -i tmp50\n    local -i tmp51\n    local\
    \ -i tmp52\n    local -i tmp53\n    local -i tmp54\n    local -i tmp55\n    local\
    \ -i tmp56\n    local -i tmp57\n    local -i tmp58\n    local -i tmp59\n    local\
    \ -i tmp60\n    local -i tmp61\n    local -i tmp62\n    local -i tmp63\n    local\
    \ -i tmp64\n    local -i tmp65\n    local -i tmp66\n    local -i tmp67\n    local\
    \ -i tmp68\n    local -i tmp69\n    local -i tmp70\n    local -i tmp71\n    local\
    \ -i tmp72\n    local -i tmp73\n    local -i tmp74\n    local -i tmp75\n    local\
    \ -i tmp76\n    local -i tmp77\n    local -i tmp78\n    local -i tmp79\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits_tmp=()\n\
    \  local -a names_tmp=()\n  local -a digits_tmp2=()\n  local -a names_tmp2=()\n\
    \  local -i i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr0jg9pfz.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a names\n  local -a lengths\n  local -a digits\n  local\
    \ -a tmp\n  local -a tmp2\n  local -i i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  \n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa0ynrynb.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=()\n\
    \    local -a digits_reversed_reversed=()\n    local -a digits_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed=()\n    local -a digits_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reverse\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd8tewq77.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local result=()\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=()\n  local -a lengths=()\n\
    \  local -a tmp\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local \n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuvnux8c1.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -i i\n    local -a names=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n    local -a tmp\n    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n\
    \    local -a tmp5\n    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n\
    \    local -a tmp9\n    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n\
    \    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n\
    \    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n\
    \    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n\
    \    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n\
    \    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n\
    \    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n\
    \    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n\
    \    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n\
    \    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n\
    \    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n\
    \    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n\
    \    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n\
    \    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n\
    \    local -a tmp\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi_y5xhrv.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  output=$(IFS=' ' read -r -a array <<<\
    \ \"$array\")\n  local i\n  for (( i = 0; i < ${#array[@]}; i++ )); do\n    if\
    \ [[ ${array[$i]} -ge 1 ]] && [[ ${array[$i]} -le 9 ]]; then\n      array[$i]=\"\
    ${array[$i]}${length}\"\n      output[$i]=\"${output[$i]}${length}\"\n    fi\n\
    \  done\n  output=($(IFS=' ' read -r -a output <<< \"${output[*]}\" ))\n  IFS='\
    \ ' read -r -a output <<< \"${output[*]}\"\n  echo \"${output[*]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5z21rcq5.sh: line 23: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a digits\n    local -a names\n    local -a lengths\n\
    \    local -a length\n    local -a digit\n    local -a name\n    local -i i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5vhek77w.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names\n    local -i len\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj_h53c56.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  local\
    \ -a names\n  local -a output\n  local -a tmp\n  local -a tmp2\n  local -i len\n\
    \  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local\
    \ -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n\
    \  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local\
    \ -i y\n  local -i z\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n\
    \  local -i e\n  local -i f\n  local -i g\n  local -i h\n  local -i i\n  local\
    \ -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n\
    \  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local\
    \ -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n\
    \  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local -i e\n  local\
    \ -i f\n  local -i g\n  local -i h\n  local -i i\n  local -i j\n  local -i k\n\
    \  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local\
    \ -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n\
    \  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i a\n  local\
    \ -i b\n  local -i c\n  local -i d\n  local -i e\n  local -i f\n  local -i g\n\
    \  local -i h\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local\
    \ -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n\
    \  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local\
    \ -i x\n  local -i y\n  \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  output=$(IFS=' ' read -r -a array <<<\
    \ \"$array\")\n  local i\n  for i in \"${!array[@]}\"; do\n    if [[ ${array[$i]}\
    \ -ge 1 ]] && [[ ${array[$i]} -le 9 ]]; then\n      output[$i]=\"${array[$i]}\"\
    \n    fi\n  done\n  if [[ ${#output[@]} -eq 0 ]]; then\n    return 0\n  fi\n \
    \ output=($(sort -n \"${output[@]}\" | rev | sed 's/^/\"${One}\"/' | sed 's/$/\"\
    ${Nine}\"/'))\n  for i in \"${!output[@]}\"; do\n    output[$i]=\"${output[$i]//${One}/${One}}\"\
    \n    output[$i]=\"${output[$i]//${Nine}/${Nine}}\"\n  done\n  printf '%s\\n'\
    \ \"${output[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprw6w_ha3.sh: line 23: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")

    sort: cannot read: '''': No such file or directory

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=(\"${1//\
    \ / }\")\n    local -a result=()\n    local -i i\n    local j\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        j=$((i+1))\n        if [[ ${arr[i]} -ge 1 ]]\
    \ && [[ ${arr[i]} -le 9 ]]; then\n            result+=(\"\\\"${arr[i]}\\\"\" \"\
    \\\"${arr[j]}\\\"\")\n        fi\n    done\n    if [[ ${#result[@]} -eq 0 ]];\
    \ then\n        echo \"\"\n    else\n        echo \"${result[@]}\"\n    fi\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1sy44_lw.sh: line 23: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=( $1 )\n \
    \   local lengths=( ${#arr[@]} )\n    local i=0\n    local output\n    local j=0\n\
    \    local k=0\n    local name\n    local length\n    local length_name\n    local\
    \ length_names\n    local length_names_tmp\n    local length_names_tmp2\n    local\
    \ length_names_tmp3\n    local length_names_tmp4\n    local length_names_tmp5\n\
    \    local length_names_tmp6\n    local length_names_tmp7\n    local length_names_tmp8\n\
    \    local length_names_tmp9\n    local length_names_tmp10\n    local length_names_tmp11\n\
    \    local length_names_tmp12\n    local length_names_tmp13\n    local length_names_tmp14\n\
    \    local length_names_tmp15\n    local length_names_tmp16\n    local length_names_tmp17\n\
    \    local length_names_tmp18\n    local length_names_tmp19\n    local length_names_tmp20\n\
    \    local length_names_tmp21\n    local length_names_tmp22\n    local length_names_tmp23\n\
    \    local length_names_tmp24\n    local length_names_tmp25\n    local length_names_tmp26\n\
    \    local length_names_tmp27\n    local length_names_tmp28\n    local length_names_tmp29\n\
    \    local length_names_tmp30\n    local length_names_tmp31\n    local length_names_tmp32\n\
    \    local length_names_tmp33\n    local length_names_tmp34\n    local length_names_tmp35\n\
    \    local length_names_tmp36\n    local length_names_tmp37\n    local length_names_tmp38\n\
    \    local length_names_tmp39\n    local length_names_tmp40\n    local length_names_tmp41\n\
    \    local length_names_tmp42\n    local length_names_tmp43\n    local length_names_tmp44\n\
    \    local length_names_tmp45\n    local length_names_tmp46\n    local length_names_tmp47\n\
    \    local length_names_tmp48\n    local length_names_tmp49\n    local length_names_tmp50\n\
    \    local length_names_tmp51\n    local length_names_tmp52\n    local length_names_tmp53\n\
    \    local length_names_tmp54\n    local length_names_tmp55\n    local length_names_tmp56\n\
    \    local length_names_tmp57\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ _\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local A\n    local B\n    local C\n    local\
    \ D\n    local E\n    local F\n    local G\n    local H\n    local I\n    local\
    \ J\n    local K\n    local L\n    local M\n    local N\n    local O\n    local\
    \ P\n    local Q\n    local R\n    local S\n    local T\n    local U\n    local\
    \ V\n    local W\n    local X\n    local Y\n    local Z\n    local _\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=$1\n    local\
    \ output\n    local i\n    local length\n    local digit\n    local name\n   \
    \ local tmp\n    local j\n    local lengths\n    local length\n    local digit\n\
    \    local name\n    local tmp\n    local j\n    local lengths\n    local length\n\
    \    local digit\n    local name\n    local tmp\n    local j\n    local lengths\n\
    \    local length\n    local digit\n    local name\n    local tmp\n    local j\n\
    \    local lengths\n    local length\n    local digit\n    local name\n    local\
    \ tmp\n    local j\n    local lengths\n    local length\n    local digit\n   \
    \ local name\n    local tmp\n    local j\n    local lengths\n    local length\n\
    \    local digit\n    local name\n    local tmp\n    local j\n    local lengths\n\
    \    local length\n    local digit\n    local name\n    local tmp\n    local j\n\
    \    local lengths\n    local length\n    local digit\n    local name\n    local\
    \ tmp\n    local j\n    local lengths\n    local length\n    local digit\n   \
    \ local name\n    local tmp\n    local j\n    local lengths\n    local length\n\
    \    local digit\n    local name\n    local tmp\n    local j\n    local lengths\n\
    \    local length\n    local digit\n    local name\n    local tmp\n    local j\n\
    \    local lengths\n    local length\n    local digit\n    local name\n    local\
    \ tmp\n    local j\n    local lengths\n    local length\n    local digit\n   \
    \ local name\n    local tmp\n    local j\n    local lengths\n    local length\n\
    \    local digit\n    local name\n    local tmp\n    local j\n    local lengths\n\
    \    local length\n    local digit\n    local name\n    local tmp\n    local j\n\
    \    local lengths\n    local length\n    local digit\n    local name\n    local\
    \ tmp\n    local j\n    local lengths\n    local length\n    local digit\n   \
    \ local name\n    local tmp\n    local j\n    local lengths\n    local length\n\
    \    local digit\n    local name\n    local tmp\n    local j\n    local lengths\n\
    \    local length\n    local digit\n    local name\n    local tmp\n    local j\n\
    \    local length\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n'\n \
    \   local arr=( $1 )\n    local result=()\n    local digits=()\n    local i=0\n\
    \    local j=0\n    local length=0\n    local digit\n    local name\n    local\
    \ tmp\n\n    # Count how many numbers are in the array\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        length=${#arr[$i]}\n        if (( length == 0 )); then\n\
    \            continue\n        fi\n        digits=( ${arr[$i]} )\n        for\
    \ (( j=0; j<length; j++ )); do\n            digit=${digits[j]}\n            if\
    \ (( digit < 1 )); then\n                digit=${digit}\n            fi\n    \
    \        if (( digit > 9 )); then\n                digit=${digit}\n          \
    \  fi\n            (( length-- ))\n        done\n        length=$(( length + 1\
    \ ))\n    done\n\n    # Sort the numbers and reverse the array\n    for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n        length=${#arr[$i]}\n        if (( length ==\
    \ 0 )); then\n            continue\n        fi\n        digits=( ${arr[$i]} )\n\
    \        for (( j=0; j<length; j++ )); do\n            digit=${digits[j]}\n  \
    \          if (( digit < 1 )); then\n                digit=${digit}\n        \
    \    fi\n            if (( digit > 9 )); then\n                digit=${digit}\n\
    \            fi\n            (( length-- ))\n        done\n        length=$((\
    \ length + 1 ))\n    done\n\n    # Replace each digit by its corresponding name\
    \ from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        length=${#arr[$i]}\n\
    \        if (( length == 0 )); then\n            continue\n        fi\n      \
    \  digits=( ${arr[$i]} )\n        for (( j=0; j<length; j++ )); do\n         \
    \   digit=${digits[j]}\n            if (( digit < 1 )); then\n               \
    \ digit=${digit}\n            fi\n            if (( digit > 9 )); then\n     \
    \           digit=${digit}\n            fi\n            (( length-- ))\n     \
    \   done\n        length=$(( length + 1 ))\n    done\n\n    # Return the array\n\
    \    for (( i=0; i<${#arr[@]}; i++ )); do\n        result+=( ${arr\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp77qt65l3.sh: line 93: syntax error near unexpected token `(''

    /tmp/tmp77qt65l3.sh: line 93: `candidate() {''

    /tmp/tmp77qt65l3.sh: line 94: by_length: command not found

    /tmp/tmp77qt65l3.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmp77qt65l3.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=$1\n  local\
    \ -a arr2\n  local -a arr3\n  local -a arr4\n  local -a arr5\n  local -a arr6\n\
    \  local -a arr7\n  local -a arr8\n  local -a arr9\n  local -a arr10\n  local\
    \ -a arr11\n  local -a arr12\n  local -a arr13\n  local -a arr14\n  local -a arr15\n\
    \  local -a arr16\n  local -a arr17\n  local -a arr18\n  local -a arr19\n  local\
    \ -a arr20\n  local -a arr21\n  local -a arr22\n  local -a arr23\n  local -a arr24\n\
    \  local -a arr25\n  local -a arr26\n  local -a arr27\n  local -a arr28\n  local\
    \ -a arr29\n  local -a arr30\n  local -a arr31\n  local -a arr32\n  local -a arr33\n\
    \  local -a arr34\n  local -a arr35\n  local -a arr36\n  local -a arr37\n  local\
    \ -a arr38\n  local -a arr39\n  local -a arr40\n  local -a arr41\n  local -a arr42\n\
    \  local -a arr43\n  local -a arr44\n  local -a arr45\n  local -a arr46\n  local\
    \ -a arr47\n  local -a arr48\n  local -a arr49\n  local -a arr50\n  local -a arr51\n\
    \  local -a arr52\n  local -a arr53\n  local -a arr54\n  local -a arr55\n  local\
    \ -a arr56\n  local -a arr57\n  local -a arr58\n  local -a arr59\n  local -a arr60\n\
    \  local -a arr61\n  local -a arr62\n  local -a arr63\n  local -a arr64\n  local\
    \ -a arr65\n  local -a arr66\n  local -a arr67\n  local -a arr68\n  local -a arr69\n\
    \  local -a arr70\n  local -a arr71\n  local -a arr72\n  local -a arr73\n  local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=( $1 )\n\
    \  local -a result=()\n  local -i i\n  local j\n  for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n    local -a arr2=( ${arr[i]//[!0-9]/} )\n    for (( j=0; j<${#arr2[@]};\
    \ j++ )); do\n      result+=( ${arr2[j]//[0-9]/One} ${arr2[j]//[0-9]/Two} ${arr2[j]//[0-9]/Three}\
    \ ${arr2[j]//[0-9]/Four} ${arr2[j]//[0-9]/Five} ${arr2[j]//[0-9]/Six} ${arr2[j]//[0-9]/Seven}\
    \ ${arr2[j]//[0-9]/Eight} ${arr2[j]//[0-9]/Nine} )\n    done\n  done\n  printf\
    \ '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -n digits=${arr[@]}\n    local -i i\n    local\
    \ -n digit\n    local -n name\n    for ((i = 0; i < ${#digits[@]}; ++i)); do\n\
    \        digit=${digits[i]}\n        name=${names[i]}\n        if (( digit >=\
    \ 1 && digit <= 9 )); then\n            result+=(\"\\\"${name}\\\"\")\n      \
    \  fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz8f5f23y.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpz8f5f23y.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=( $1 )\n  local\
    \ lengths=( ${#arr[@]} )\n  local result=()\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  \n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length\n  local i\n  local j\n  local result\n  local element\n  local\
    \ lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=( $1 )\n\
    \  local -a result=()\n  local -i i\n  local j\n  local k\n  local length\n  local\
    \ name\n  local num\n\n  for (( i = 0; i < ${#arr[@]}; i++ )); do\n    num=${arr[i]}\n\
    \    length=${#num}\n    if [[ $num -gt 0 && $num -lt 10 ]]; then\n      name=${num}\n\
    \    elif [[ $num -gt 10 && $num -lt 100 ]]; then\n      name=${num%?}\n    elif\
    \ [[ $num -gt 100 && $num -lt 1000 ]]; then\n      name=${num%??}\n    elif [[\
    \ $num -gt 1000 && $num -lt 10000 ]]; then\n      name=${num%???}\n    elif [[\
    \ $num -gt 10000 && $num -lt 100000 ]]; then\n      name=${num%????}\n    elif\
    \ [[ $num -gt 100000 && $num -lt 1000000 ]]; then\n      name=${num%?????}\n \
    \   elif [[ $num -gt 1000000 && $num -lt 10000000 ]]; then\n      name=${num%??????}\n\
    \    elif [[ $num -gt 10000000 && $num -lt 100000000 ]]; then\n      name=${num%???????}\n\
    \    elif [[ $num -gt 100000000 && $num -lt 1000000000 ]]; then\n      name=${num%????????}\n\
    \    elif [[ $num -gt 1000000000 && $num -lt 10000000000 ]]; then\n      name=${num%?????????}\n\
    \    elif [[ $num -gt 10000000000 && $num -lt 100000000000 ]]; then\n      name=${num%??????????}\n\
    \    elif [[ $num -gt 100000000000 && $num -lt 1000000000000 ]]; then\n      name=${num%???????????}\n\
    \    elif [[ $num -gt 1000000000000 && $num -lt 10000000000000 ]]; then\n    \
    \  name=${num%????????????}\n    elif [[ $num -gt 10000000000000 && $num -lt 100000000000000\
    \ ]]; then\n      name=${num%??????????????}\n    elif [[ $num -gt 100000000000000\
    \ && $num -lt 1000000000000000 ]]; then\n      name=${num%???????????????}\n \
    \   elif [[ $num -gt 1000000000000000 && $num -lt 10000000000000000 ]]; then\n\
    \      name=${\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp91dgr8gg.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a map\n    local -a tmp\n    local -a tmp2\n  \
    \  local -a tmp3\n    local -i len\n    local -i i\n    local -i j\n    local\
    \ -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local\
    \ -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local\
    \ -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local\
    \ -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local\
    \ -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local\
    \ -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local\
    \ -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local\
    \ -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local\
    \ -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local\
    \ -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local\
    \ -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa61juxjp.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  output=$(IFS=' '; echo \"\
    ${array[@]}\" | sort -n | cut -d ' ' -f \"$length\")\n  IFS=$' \\t\\n'\n  for\
    \ (( i=0; i<${#output[@]}; i++ )); do\n    local j\n    local digit=\"${output[$i]}\"\
    \n    local digitName\n    digitName=$(echo \"${digit}\" | sed -e 's/^0*//')\n\
    \    local digitNameUpper\n    digitNameUpper=$(echo \"${digitName}\" | tr '[:upper:]'\
    \ '[:lower:]')\n    local digitNameLower\n    digitNameLower=$(echo \"${digitName}\"\
    \ | tr '[:lower:]' '[:upper:]')\n    local digitNameCapital\n    digitNameCapital=$(echo\
    \ \"${digitName}\" | tr '[:upper:]' '[:lower:]')\n    local digitNameLowerCapital\n\
    \    digitNameLowerCapital=$(echo \"${digitNameLower}\" | tr '[:lower:]' '[:upper:]')\n\
    \    local digitNameCapitalLower\n    digitNameCapitalLower=$(echo \"${digitNameCapital}\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local digitNameCapitalCapital\n    digitNameCapitalCapital=$(echo\
    \ \"${digitNameCapital}\" | tr '[:upper:]' '[:upper:]')\n    local digitNameCapitalCapitalLower\n\
    \    digitNameCapitalCapitalLower=$(echo \"${digitNameCapitalCapital}\" | tr '[:upper:]'\
    \ '[:lower:]')\n    local digitNameCapitalCapitalCapital\n    digitNameCapitalCapitalCapital=$(echo\
    \ \"${digitNameCapitalCapital}\" | tr '[:upper:]' '[:upper:]')\n    local digitNameCapitalCapitalCapitalLower\n\
    \    digitNameCapitalCapitalCapitalLower=$(echo \"${digitNameCapitalCapitalCapital}\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local digitNameCapitalCapitalCapitalCapital\n\
    \    digitNameCapitalCapitalCapitalCapital=$(echo \"${digitNameCapitalCapitalCapital}\"\
    \ | tr '[:upper:]' '[:upper:]')\n    local digitNameCapitalCapitalCapitalCapitalLower\n\
    \    digitNameCapitalCapitalCapitalCapitalLower=$(echo \"${digitNameCapitalCapitalCapitalCapital\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx9qj31z1.sh: line 62: unexpected EOF while looking for matching
    `"''

    /tmp/tmpx9qj31z1.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=()\n\
    \    local -a digits_reversed_name=()\n    local -i i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfwc714h7.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j k l m\n    local -a names=(\"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        ((j=i*9))\n        for ((k=0; k<9; k++)); do\n\
    \            if [[ ${arr[$i]} -ge ${k} && ${arr[$i]} -le ${j} ]]; then\n     \
    \           ((l=k))\n            fi\n        done\n        result+=(\"${names[l]}\"\
    )\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz4onvlim.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        j=$(( ${#arr[@]} - 1 - i ))\n        result+=(\"${arr[i]}\")\n      \
    \  arr[i]=\"${arr[j]}\"\n    done\n    IFS=$'\\n' arr=( \"${result[@]}\" )\n \
    \   IFS=$' ' arr=( \"${arr[@]}\" )\n    IFS=$'\\n' result=( \"${arr[@]}\" )\n\
    \    IFS=$' ' result=( \"${result[@]}\" )\n    IFS=$'\\n' result=( \"${result[@]}\"\
    \ )\n    IFS=$' ' result=( \"${result[@]}\" )\n    IFS=$'\\n' result=( \"${result[@]}\"\
    \ )\n    IFS=$' ' result=( \"${result[@]}\" )\n    IFS=$'\\n' result=( \"${result[@]}\"\
    \ )\n    IFS=$' ' result=( \"${result[@]}\" )\n    IFS=$'\\n' result=( \"${result[@]}\"\
    \ )\n    IFS=$'\\n' result=( \"${result[@]}\" )\n    IFS=$' ' result=( \"${result[@]}\"\
    \ )\n    IFS=$'\\n' result=( \"${result[@]}\" )\n    IFS=$'\\n' result=( \"${result[@]}\"\
    \ )\n    IFS=$' ' result=( \"${result[@]}\" )\n    IFS=$'\\n' result=( \"${result[@]}\"\
    \ )\n    IFS=$'\\n' result=( \"${result[@]}\" )\n    IFS=$' ' result=( \"${result[@]}\"\
    \ )\n    IFS=$'\\n' result=( \"${result[@]}\" )\n    IFS=$'\\n' result=( \"${result[@]}\"\
    \ )\n    IFS=$' ' result=( \"${result[@]}\" )\n    IFS=$'\\n' result=( \"${result[@]}\"\
    \ )\n    IFS=$'\\n' result=( \"${result[@]}\" )\n    IFS=$' ' result=( \"${result[@]}\"\
    \ )\n    IFS=$'\\n' result=( \"${result[@]}\" )\n    IFS=$'\\n' result=( \"${\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwae0bot4.sh: line 64: unexpected EOF while looking for matching
    `"''

    /tmp/tmpwae0bot4.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=(\"0\" \"1\" \"2\"\
    \ \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n    local -n num=${arr[$i]}\n    local digit=${num#0}\n    local length=${#digit}\n\
    \    if (( length == 1 )); then\n      result+=(\"\\\"${names[digit]}\\\"\")\n\
    \    elif (( length == 2 )); then\n      result+=(\"\\\"${names[digit]}\\\" \"\
    \\\"${names[digit+1]}\\\"\")\n    elif (( length == 3 )); then\n      result+=(\"\
    \\\"${names[digit]}\\\" \"\\\"${names[digit+1]}\\\" \"\\\"${names[digit+2]}\\\"\
    \")\n    elif (( length == 4 )); then\n      result+=(\"\\\"${names[digit]}\\\"\
    \ \"\\\"${names[digit+1]}\\\" \"\\\"${names[digit+2]}\\\" \"\\\"${names[digit+3]}\\\
    \"\")\n    elif (( length == 5 )); then\n      result+=(\"\\\"${names[digit]}\\\
    \" \"\\\"${names[digit+1]}\\\" \"\\\"${names[digit+2]}\\\" \"\\\"${names[digit+3]}\\\
    \" \"\\\"${names[digit+4]}\\\"\")\n    elif (( length == 6 )); then\n      result+=(\"\
    \\\"${names[digit]}\\\" \"\\\"${names[digit+1]}\\\" \"\\\"${names[digit+2]}\\\"\
    \ \"\\\"${names[digit+3]}\\\" \"\\\"${names[digit+4]}\\\" \"\\\"${names[digit+5]}\\\
    \"\")\n    elif (( length == 7 )); then\n      result+=(\"\\\"${names[digit]}\\\
    \" \"\\\"${names[digit+1]}\\\" \"\\\"${names[digit+2]}\\\" \"\\\"${names[digit+3]}\\\
    \" \"\\\"${names[digit+4]}\\\" \"\\\"${names[digit+5]}\\\" \"\\\"${names[digit+6]}\\\
    \"\")\n    elif (( length == 8 )); then\n      result+=(\"\\\"${names[digit]}\\\
    \" \"\\\"${names[digit+1]}\\\" \"\\\"${names[digit+2]}\\\" \"\\\"${names[digit+3]}\\\
    \" \"\\\"${names[digit+4]}\\\" \"\\\"${names[digit+5]}\\\" \"\\\"${names[digit+6]}\\\
    \" \"\\\"${names[digit+7]}\\\"\")\n    elif (( length == 9 )); then\n      result+=\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkelce43d.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpkelce43d.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names\n    local -a lengths\n    local -i i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprl10xf2i.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length\n  local i\n  local j\n  local output\n  local name\n  local number\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length\n    local i\n    local j\n    local result\n    local number\n\
    \    local name\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local i j k l m n o p q r s t u v w x y z\n  local -a arr2\n\
    \  local -a arr3\n  local -a arr4\n  local -a arr5\n  local -a arr6\n  local -a\
    \ arr7\n  local -a arr8\n  local -a arr9\n  local -a arr10\n  local -a arr11\n\
    \  local -a arr12\n  local -a arr13\n  local -a arr14\n  local -a arr15\n  local\
    \ -a arr16\n  local -a arr17\n  local -a arr18\n  local -a arr19\n  local -a arr20\n\
    \  local -a arr21\n  local -a arr22\n  local -a arr23\n  local -a arr24\n  local\
    \ -a arr25\n  local -a arr26\n  local -a arr27\n  local -a arr28\n  local -a arr29\n\
    \  local -a arr30\n  local -a arr31\n  local -a arr32\n  local -a arr33\n  local\
    \ -a arr34\n  local -a arr35\n  local -a arr36\n  local -a arr37\n  local -a arr38\n\
    \  local -a arr39\n  local -a arr40\n  local -a arr41\n  local -a arr42\n  local\
    \ -a arr43\n  local -a arr44\n  local -a arr45\n  local -a arr46\n  local -a arr47\n\
    \  local -a arr48\n  local -a arr49\n  local -a arr50\n  local -a arr51\n  local\
    \ -a arr52\n  local -a arr53\n  local -a arr54\n  local -a arr55\n  local -a arr56\n\
    \  local -a arr57\n  local -a arr58\n  local -a arr59\n  local -a arr60\n  local\
    \ -a arr61\n  local -a arr62\n  local -a arr63\n  local -a arr64\n  local -a arr65\n\
    \  local -a arr66\n  local -a arr67\n  local -a arr68\n  local -a arr69\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu72r_2zb.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a lengths=(\"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        local -n num=${arr[i]}\n        if (( num > 9 )); then\n\
    \            local -n num=${num/10}\n            local -n num=${num}\n       \
    \     local -n num=${num}\n            local -n num=${num}\n            local\
    \ -n num=${num}\n            local -n num=${num}\n            local -n num=${num}\n\
    \            local -n num=${num}\n            local -n num=${num}\n          \
    \  local -n num=${num}\n            local -n num=${num}\n            local -n\
    \ num=${num}\n            local -n num=${num}\n            local -n num=${num}\n\
    \            local -n num=${num}\n            local -n num=${num}\n          \
    \  local -n num=${num}\n            local -n num=${num}\n            local -n\
    \ num=${num}\n            local -n num=${num}\n            local -n num=${num}\n\
    \            local -n num=${num}\n            local -n num=${num}\n          \
    \  local -n num=${num}\n            local -n num=${num}\n            local -n\
    \ num=${num}\n            local -n num=${num}\n            local -n num=${num}\n\
    \            local -n num=${num}\n            local -n num=${num}\n          \
    \  local -n num=${num}\n            local -n num=${num}\n            local -n\
    \ num=${num}\n            local -n num=${num}\n            local -n num=${num}\n\
    \            local -n num=${num}\n            local -n num=${num}\n          \
    \  local -n num=${num}\n            local -n num=${num}\n            local -n\
    \ num=${num}\n            local -n num=${num}\n            local -n num=${num}\n\
    \            local -n num=${num}\n            local -n num=${num}\n          \
    \  local -n num=${\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxvtq3eiz.sh: line 85: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local numbers=$1\n  local\
    \ result=()\n  local number\n  local length\n  local digit\n  local name\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=$1\n    local\
    \ -a arr2\n    local -a arr3\n    local -a arr4\n    local -a arr5\n    local\
    \ -a arr6\n    local -a arr7\n    local -a arr8\n    local -a arr9\n    local\
    \ -a arr10\n    local -a arr11\n    local -a arr12\n    local -a arr13\n    local\
    \ -a arr14\n    local -a arr15\n    local -a arr16\n    local -a arr17\n    local\
    \ -a arr18\n    local -a arr19\n    local -a arr20\n    local -a arr21\n    local\
    \ -a arr22\n    local -a arr23\n    local -a arr24\n    local -a arr25\n    local\
    \ -a arr26\n    local -a arr27\n    local -a arr28\n    local -a arr29\n    local\
    \ -a arr30\n    local -a arr31\n    local -a arr32\n    local -a arr33\n    local\
    \ -a arr34\n    local -a arr35\n    local -a arr36\n    local -a arr37\n    local\
    \ -a arr38\n    local -a arr39\n    local -a arr40\n    local -a arr41\n    local\
    \ -a arr42\n    local -a arr43\n    local -a arr44\n    local -a arr45\n    local\
    \ -a arr46\n    local -a arr47\n    local -a arr48\n    local -a arr49\n    local\
    \ -a arr50\n    local -a arr51\n    local -a arr52\n    local -a arr53\n    local\
    \ -a arr54\n    local -a arr55\n    local -a arr56\n    local -a arr57\n    local\
    \ -a arr58\n    local -a arr59\n    local -a arr60\n    local -a arr61\n    local\
    \ -a arr62\n    local -a arr63\n    local -a arr64\n    local -a arr65\n    local\
    \ -a arr66\n    local -a arr67\n    local -a arr68\n    local -a arr69\n    local\
    \ -a arr70\n    local -a arr71\n    local -a arr72\n    local -a arr73\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -i i\n    local j\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        j=$((${#arr[@]} - i - 1))\n \
    \       if (( ${arr[j]} > 9 )); then\n            arr[j]=\"${arr[j]}0\"\n    \
    \    fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        j=$((${#arr[@]}\
    \ - i - 1))\n        result+=(\"${names[j]}\")\n    done\n    IFS=' ' read -ra\
    \ arr <<< \"${result[*]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpons_ilq9.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_length=${#digits[@]}\n\
    \    local -i i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local \n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfrhc_jzc.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -n digits=$2\n    local -i i\n    local digit\n\
    \    local length\n    local name\n    local j\n    local k\n    local l\n   \
    \ local m\n    local n\n    local o\n    local p\n    local q\n    local r\n \
    \   local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyek7ttr9.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpyek7ttr9.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a tmp\n  local -a tmp2\n  local -i i\n  local len\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr25pze1e.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660052806
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=' '\n    local\
    \ -a arr\n    local -a names\n    local -a result\n    local -a tmp\n    local\
    \ -i len\n    local i\n    local j\n    local k\n    local l\n    local m\n  \
    \  local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660052806
