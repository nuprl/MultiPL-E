name: HumanEval_2_truncate_number
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point\
  \ number, it can be decomposed into\n    and integer part (largest integer smaller\
  \ than given number) and decimals\n    (leftover part always smaller than 1).\n\n\
  \    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n\
  \    \n*/\nfloat truncate_number(float number) \n"
tests: "unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
  \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) ==\
  \ 0.0);\n}\nvoid main(){}"
completions: ["{\n    return number - cast(int)number;\n}", "{\n    return number\
    \ - cast(int)number;\n}", "{\n    return number - cast(int)number;\n}", "{\n \
    \   return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}\n/*\n    Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).", "{\n    return number - cast(int)number;\n}", "{\n    return number -\
    \ cast(int)number;\n}", "{\n    return number - cast(int)number;\n}", "{\n   \
    \ return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    return number - cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
