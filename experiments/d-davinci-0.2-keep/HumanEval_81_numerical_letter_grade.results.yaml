name: HumanEval_81_numerical_letter_grade
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade > 3.7)\n            result[i] = \"A\";\n        else\
    \ if(grade > 3.3)\n            result[i] = \"A-\";\n        else if(grade > 3.0)\n\
    \            result[i] = \"B+\";\n        else if(grade > 2.7)\n            result[i]\
    \ = \"B\";\n        else if(grade > 2.3)\n            result[i] = \"B-\";\n  \
    \      else if(grade > 2.0)\n            result[i] = \"C+\";\n        else if(grade\
    \ > 1.7)\n            result[i] = \"C\";\n        else if(grade > 1.3)\n     \
    \       result[i] = \"C-\";\n        else if(grade > 1.0)\n            result[i]\
    \ = \"D+\";\n        else if(grade > 0.7)\n            result[i] = \"D\";\n  \
    \      else if(grade > 0.0)\n            result[i] = \"D-\";\n        else\n \
    \           result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1l8e54jo.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp1l8e54jo.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp1l8e54jo.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf2087554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpst_se6hq.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpst_se6hq.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpst_se6hq.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xef709554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfz_cb02q.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpfz_cb02q.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpfz_cb02q.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xdf737554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n     \
    \   }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n      \
    \      letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n    \
    \    }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n      \
    \      letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n    \
    \    }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     letter_grades[i] = \"D-\";\n        }\n        else\n        {\n       \
    \     letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0e_s7a3l.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmp0e_s7a3l.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmp0e_s7a3l.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x748be554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvqfwyfbn.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpvqfwyfbn.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpvqfwyfbn.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x3e20a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk8wa2bl1.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpk8wa2bl1.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpk8wa2bl1.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x85697554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxu3w5v4o.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpxu3w5v4o.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpxu3w5v4o.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x2405b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8c7m4fmh.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp8c7m4fmh.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp8c7m4fmh.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x32b40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2cabofnv.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp2cabofnv.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp2cabofnv.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x700e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4bcymhep.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp4bcymhep.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp4bcymhep.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x37f1e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppbrst318.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmppbrst318.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmppbrst318.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x380ca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj9jkux2y.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpj9jkux2y.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpj9jkux2y.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x9fdd1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu7k3yxfi.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpu7k3yxfi.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpu7k3yxfi.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xe28d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp655vnlhx.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp655vnlhx.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp655vnlhx.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x25596554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjudb4bfb.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpjudb4bfb.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpjudb4bfb.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xbb0bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8ftq3dwq.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp8ftq3dwq.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp8ftq3dwq.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xabbbd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade > 3.7)\n            result[i] = \"A\";\n        else\
    \ if(grade > 3.3)\n            result[i] = \"A-\";\n        else if(grade > 3.0)\n\
    \            result[i] = \"B+\";\n        else if(grade > 2.7)\n            result[i]\
    \ = \"B\";\n        else if(grade > 2.3)\n            result[i] = \"B-\";\n  \
    \      else if(grade > 2.0)\n            result[i] = \"C+\";\n        else if(grade\
    \ > 1.7)\n            result[i] = \"C\";\n        else if(grade > 1.3)\n     \
    \       result[i] = \"C-\";\n        else if(grade > 1.0)\n            result[i]\
    \ = \"D+\";\n        else if(grade > 0.7)\n            result[i] = \"D\";\n  \
    \      else if(grade > 0.0)\n            result[i] = \"D-\";\n        else if(grade\
    \ == 0.0)\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd880oyb_.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmpd880oyb_.__unittest_L63_C1()\
    \ [0x428591]\\n??:? void tmpd880oyb_.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0x42aa7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n     \
    \       result[i] = \"A+\";\n        else if (grades[i] >= 3.7)\n            result[i]\
    \ = \"A\";\n        else if (grades[i] >= 3.3)\n            result[i] = \"A-\"\
    ;\n        else if (grades[i] >= 3.0)\n            result[i] = \"B+\";\n     \
    \   else if (grades[i] >= 2.7)\n            result[i] = \"B\";\n        else if\
    \ (grades[i] >= 2.3)\n            result[i] = \"B-\";\n        else if (grades[i]\
    \ >= 2.0)\n            result[i] = \"C+\";\n        else if (grades[i] >= 1.7)\n\
    \            result[i] = \"C\";\n        else if (grades[i] >= 1.3)\n        \
    \    result[i] = \"C-\";\n        else if (grades[i] >= 1.0)\n            result[i]\
    \ = \"D+\";\n        else if (grades[i] >= 0.7)\n            result[i] = \"D\"\
    ;\n        else if (grades[i] >= 0.0)\n            result[i] = \"D-\";\n     \
    \   else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0_1qyrky.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmp0_1qyrky.__unittest_L63_C1()\
    \ [0x428701]\\n??:? void tmp0_1qyrky.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0xb7b75554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n     \
    \   }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n      \
    \      letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n    \
    \    }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n      \
    \      letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n    \
    \    }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     letter_grades[i] = \"D-\";\n        }\n        else\n        {\n       \
    \     letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_1ai8hku.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmp_1ai8hku.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmp_1ai8hku.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0xa9cd2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n      \
    \  }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n       \
    \     letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n       \
    \     letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n     \
    \   }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n        \
    \    letter_grades[i] = \"D-\";\n        }\n        else\n        {\n        \
    \    letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4mux1t96.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmp4mux1t96.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmp4mux1t96.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x5b945554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptkhi4hf2.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmptkhi4hf2.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmptkhi4hf2.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x14685554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn_npseuw.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpn_npseuw.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpn_npseuw.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xba524554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n      \
    \  }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n       \
    \     letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n       \
    \     letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n     \
    \   }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n        \
    \    letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n\
    \        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4el0jhnw.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299dd]\\n??:? void tmp4el0jhnw.__unittest_L89_C1()\
    \ [0x428735]\\n??:? void tmp4el0jhnw.__modtest() [0x428c44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e55b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429736]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42970d]\\n??:? runModuleUnitTests [0x42e331]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429ea0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e27]\\n??:? _d_run_main [0x429d92]\\n??:? main [0x428c57]\\\
    n??:? __libc_start_main [0x22af1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp54um79se.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp54um79se.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp54um79se.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x4b990554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvsedkxpr.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpvsedkxpr.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpvsedkxpr.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf459c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4z4atmvp.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp4z4atmvp.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp4z4atmvp.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x551aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8krnpe8u.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp8krnpe8u.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp8krnpe8u.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x6d363554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade > 3.7)\n            result[i] = \"A\";\n        else\
    \ if(grade > 3.3)\n            result[i] = \"A-\";\n        else if(grade > 3.0)\n\
    \            result[i] = \"B+\";\n        else if(grade > 2.7)\n            result[i]\
    \ = \"B\";\n        else if(grade > 2.3)\n            result[i] = \"B-\";\n  \
    \      else if(grade > 2.0)\n            result[i] = \"C+\";\n        else if(grade\
    \ > 1.7)\n            result[i] = \"C\";\n        else if(grade > 1.3)\n     \
    \       result[i] = \"C-\";\n        else if(grade > 1.0)\n            result[i]\
    \ = \"D+\";\n        else if(grade > 0.7)\n            result[i] = \"D\";\n  \
    \      else if(grade > 0.0)\n            result[i] = \"D-\";\n        else\n \
    \           result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpruwquoqb.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpruwquoqb.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpruwquoqb.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xaad80554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprwywo6qp.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmprwywo6qp.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmprwywo6qp.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x5702e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7bnedo81.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp7bnedo81.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp7bnedo81.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xdc22e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n \
    \       else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4d295tz7.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp4d295tz7.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp4d295tz7.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xe9a30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n     \
    \   }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n      \
    \      letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n    \
    \    }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n      \
    \      letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n    \
    \    }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     letter_grades[i] = \"D-\";\n        }\n        else\n        {\n       \
    \     letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo_blkll3.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpo_blkll3.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmpo_blkll3.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x531e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1xmvtwwy.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp1xmvtwwy.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp1xmvtwwy.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x9b0fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_dkhlpdk.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp_dkhlpdk.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp_dkhlpdk.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xa81c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp__4co83l.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp__4co83l.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp__4co83l.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x135f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2mll9qik.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp2mll9qik.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp2mll9qik.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf4c0e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8ctjasqk.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp8ctjasqk.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp8ctjasqk.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x61b3f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7dgwkxf7.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp7dgwkxf7.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp7dgwkxf7.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xac46554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc5u_snpo.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpc5u_snpo.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpc5u_snpo.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x48cc4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu080egp2.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpu080egp2.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpu080egp2.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xa1c89554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp59qhbtxu.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp59qhbtxu.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp59qhbtxu.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x13431554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpucilltw8.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpucilltw8.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpucilltw8.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x5fbe4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjuzi07rm.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpjuzi07rm.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpjuzi07rm.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x923db554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2nqiwmp4.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp2nqiwmp4.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp2nqiwmp4.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x6edbe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n      \
    \  }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n       \
    \     letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n       \
    \     letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n     \
    \   }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n        \
    \    letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n\
    \        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj9m1cpz4.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299dd]\\n??:? void tmpj9m1cpz4.__unittest_L89_C1()\
    \ [0x428735]\\n??:? void tmpj9m1cpz4.__modtest() [0x428c44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e55b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429736]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42970d]\\n??:? runModuleUnitTests [0x42e331]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429ea0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e27]\\n??:? _d_run_main [0x429d92]\\n??:? main [0x428c57]\\\
    n??:? __libc_start_main [0x424ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz13rfyzu.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpz13rfyzu.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpz13rfyzu.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x89476554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkba0wsg1.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpkba0wsg1.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpkba0wsg1.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xe0883554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnh08jrgk.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpnh08jrgk.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpnh08jrgk.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x2151c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmponynzwqb.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmponynzwqb.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmponynzwqb.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xaeb7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8uhl2hbx.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp8uhl2hbx.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp8uhl2hbx.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x8809a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw0ilkzg1.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpw0ilkzg1.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpw0ilkzg1.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x95abe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ g; grades)\n    {\n        if(g >= 4.0)\n            result[i] = \"A+\";\n \
    \       else if(g >= 3.7)\n            result[i] = \"A\";\n        else if(g >=\
    \ 3.3)\n            result[i] = \"A-\";\n        else if(g >= 3.0)\n         \
    \   result[i] = \"B+\";\n        else if(g >= 2.7)\n            result[i] = \"\
    B\";\n        else if(g >= 2.3)\n            result[i] = \"B-\";\n        else\
    \ if(g >= 2.0)\n            result[i] = \"C+\";\n        else if(g >= 1.7)\n \
    \           result[i] = \"C\";\n        else if(g >= 1.3)\n            result[i]\
    \ = \"C-\";\n        else if(g >= 1.0)\n            result[i] = \"D+\";\n    \
    \    else if(g >= 0.7)\n            result[i] = \"D\";\n        else if(g >= 0.0)\n\
    \            result[i] = \"D-\";\n        else\n            result[i] = \"E\"\
    ;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4vsuvzxy.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp4vsuvzxy.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp4vsuvzxy.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x9aacf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzecgt8ef.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpzecgt8ef.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpzecgt8ef.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf21da554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n     \
    \   {\n            result[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ >= 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else\
    \ if (grades[i] >= 3.3)\n        {\n            result[i] = \"A-\";\n        }\n\
    \        else if (grades[i] >= 3.0)\n        {\n            result[i] = \"B+\"\
    ;\n        }\n        else if (grades[i] >= 2.7)\n        {\n            result[i]\
    \ = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n       \
    \     result[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n   \
    \     {\n            result[i] = \"C+\";\n        }\n        else if (grades[i]\
    \ >= 1.7)\n        {\n            result[i] = \"C\";\n        }\n        else\
    \ if (grades[i] >= 1.3)\n        {\n            result[i] = \"C-\";\n        }\n\
    \        else if (grades[i] >= 1.0)\n        {\n            result[i] = \"D+\"\
    ;\n        }\n        else if (grades[i] >= 0.7)\n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     result[i] = \"D-\";\n        }\n        else\n        {\n            result[i]\
    \ = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprys06jbj.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmprys06jbj.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmprys06jbj.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x84da6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6nqdfjyr.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp6nqdfjyr.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp6nqdfjyr.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x9bf8f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6m8105pb.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp6m8105pb.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp6m8105pb.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xbd7b7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      result[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n\
    \            result[i] = \"A\";\n        }\n        else if(grade > 3.3)\n   \
    \     {\n            result[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n\
    \        {\n            result[i] = \"B+\";\n        }\n        else if(grade\
    \ > 2.7)\n        {\n            result[i] = \"B\";\n        }\n        else if(grade\
    \ > 2.3)\n        {\n            result[i] = \"B-\";\n        }\n        else\
    \ if(grade > 2.0)\n        {\n            result[i] = \"C+\";\n        }\n   \
    \     else if(grade > 1.7)\n        {\n            result[i] = \"C\";\n      \
    \  }\n        else if(grade > 1.3)\n        {\n            result[i] = \"C-\"\
    ;\n        }\n        else if(grade > 1.0)\n        {\n            result[i] =\
    \ \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            result[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ result[i] = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiqxes_n1.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmpiqxes_n1.__unittest_L89_C1()\
    \ [0x428591]\\n??:? void tmpiqxes_n1.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0xbc4fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps5d5qkd9.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmps5d5qkd9.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmps5d5qkd9.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xec7b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzgqi213l.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpzgqi213l.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpzgqi213l.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xa1c03554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6bkx02go.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp6bkx02go.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp6bkx02go.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xb1bf7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb2ne02j5.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpb2ne02j5.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpb2ne02j5.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x773da554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4q41qe9y.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp4q41qe9y.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp4q41qe9y.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xad189554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\"\
    ;\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else\
    \ if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n\
    \            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n         \
    \   letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i]\
    \ = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\"\
    ;\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else\
    \ if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n\
    \            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n         \
    \   letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i]\
    \ = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6lt6m8l6.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp6lt6m8l6.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp6lt6m8l6.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1900d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letters = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            letters[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            letters[i] = \"A\";\n      \
    \  else if(grade >= 3.3)\n            letters[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            letters[i] = \"B+\";\n        else if(grade >= 2.7)\n \
    \           letters[i] = \"B\";\n        else if(grade >= 2.3)\n            letters[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            letters[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            letters[i] = \"C\";\n        else\
    \ if(grade >= 1.3)\n            letters[i] = \"C-\";\n        else if(grade >=\
    \ 1.0)\n            letters[i] = \"D+\";\n        else if(grade >= 0.7)\n    \
    \        letters[i] = \"D\";\n        else if(grade >= 0.0)\n            letters[i]\
    \ = \"D-\";\n        else\n            letters[i] = \"E\";\n    }\n    return\
    \ letters;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n\
    \    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgj3hkwef.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpgj3hkwef.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpgj3hkwef.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x42e18554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmnljl03r.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpmnljl03r.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpmnljl03r.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x506e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiqm5czlz.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpiqm5czlz.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpiqm5czlz.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xfb5f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7_q6i8eu.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp7_q6i8eu.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp7_q6i8eu.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x48a6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr3ru5a23.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpr3ru5a23.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpr3ru5a23.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1a7c6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf91od8qq.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpf91od8qq.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpf91od8qq.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xe0ef8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nstring[]\
    \ numerical_letter_grade_2(float[] grades) \n{\n    string[] result = new string[grades.length];\n\
    \    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n \
    \       else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphqvzy7ns.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmphqvzy7ns.d(84): Error: found `{` when expecting `)`\\n/tmp/tmphqvzy7ns.d(94):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphqvzy7ns.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5mgxhnbq.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp5mgxhnbq.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp5mgxhnbq.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1b6e3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcmx1g_fo.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpcmx1g_fo.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpcmx1g_fo.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf5b48554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9l8naqo_.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp9l8naqo_.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp9l8naqo_.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1fce8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n     \
    \   {\n            result[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ > 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else if\
    \ (grades[i] > 3.3)\n        {\n            result[i] = \"A-\";\n        }\n \
    \       else if (grades[i] > 3.0)\n        {\n            result[i] = \"B+\";\n\
    \        }\n        else if (grades[i] > 2.7)\n        {\n            result[i]\
    \ = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n        \
    \    result[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n     \
    \   {\n            result[i] = \"C+\";\n        }\n        else if (grades[i]\
    \ > 1.7)\n        {\n            result[i] = \"C\";\n        }\n        else if\
    \ (grades[i] > 1.3)\n        {\n            result[i] = \"C-\";\n        }\n \
    \       else if (grades[i] > 1.0)\n        {\n            result[i] = \"D+\";\n\
    \        }\n        else if (grades[i] > 0.7)\n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n        \
    \    result[i] = \"D-\";\n        }\n        else\n        {\n            result[i]\
    \ = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpitd5c1hs.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpitd5c1hs.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmpitd5c1hs.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x9fd0b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9hbu4fhn.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp9hbu4fhn.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp9hbu4fhn.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x7867554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n     \
    \   }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n      \
    \      letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n    \
    \    }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n      \
    \      letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n    \
    \    }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     letter_grades[i] = \"D-\";\n        }\n        else\n        {\n       \
    \     letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_uaem_5h.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmp_uaem_5h.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmp_uaem_5h.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0xfe9e1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpht7f4y73.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpht7f4y73.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpht7f4y73.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x58124554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbeiofy56.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpbeiofy56.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpbeiofy56.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1f646554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmvxiggmo.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpmvxiggmo.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpmvxiggmo.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xe1268554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n      \
    \  }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n       \
    \     letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n       \
    \     letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n     \
    \   }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n        \
    \    letter_grades[i] = \"D-\";\n        }\n        else\n        {\n        \
    \    letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppnurrxm0.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmppnurrxm0.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmppnurrxm0.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x31298554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiu0dvg3e.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpiu0dvg3e.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpiu0dvg3e.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1d6e1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0ojrdzan.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp0ojrdzan.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp0ojrdzan.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xb449554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeujyyjf8.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpeujyyjf8.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpeujyyjf8.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xdd4f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgtjske22.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpgtjske22.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpgtjske22.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x5fb29554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n \
    \       {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade\
    \ > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n     \
    \   else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n\
    \        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkltgn3qw.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpkltgn3qw.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpkltgn3qw.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xc07e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppf6l1s8b.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmppf6l1s8b.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmppf6l1s8b.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x27611554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\"\
    ;\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else\
    \ if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n\
    \            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n         \
    \   letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i]\
    \ = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\"\
    ;\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else\
    \ if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n\
    \            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n         \
    \   letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i]\
    \ = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpevnjphk_.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpevnjphk_.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpevnjphk_.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xcf9f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp95ryfjqu.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp95ryfjqu.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp95ryfjqu.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xfc2b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsq4fj10d.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpsq4fj10d.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpsq4fj10d.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x76579554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptjj1wubu.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmptjj1wubu.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmptjj1wubu.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x9a649554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqna0qv29.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpqna0qv29.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpqna0qv29.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xa7e6b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptd7z0b0u.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmptd7z0b0u.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmptd7z0b0u.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xde15b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbpqticeg.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpbpqticeg.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpbpqticeg.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xb5604554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n \
    \       {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade\
    \ > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n     \
    \   else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n\
    \        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmfaurahv.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpmfaurahv.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpmfaurahv.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x5e9ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade > 3.7)\n            result[i] = \"A\";\n        else\
    \ if(grade > 3.3)\n            result[i] = \"A-\";\n        else if(grade > 3.0)\n\
    \            result[i] = \"B+\";\n        else if(grade > 2.7)\n            result[i]\
    \ = \"B\";\n        else if(grade > 2.3)\n            result[i] = \"B-\";\n  \
    \      else if(grade > 2.0)\n            result[i] = \"C+\";\n        else if(grade\
    \ > 1.7)\n            result[i] = \"C\";\n        else if(grade > 1.3)\n     \
    \       result[i] = \"C-\";\n        else if(grade > 1.0)\n            result[i]\
    \ = \"D+\";\n        else if(grade > 0.7)\n            result[i] = \"D\";\n  \
    \      else if(grade > 0.0)\n            result[i] = \"D-\";\n        else\n \
    \           result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz2uhtr9n.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpz2uhtr9n.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpz2uhtr9n.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x61b4f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn7xnc5hv.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpn7xnc5hv.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpn7xnc5hv.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x48fcb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp105nwcbx.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp105nwcbx.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp105nwcbx.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x644e7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n     \
    \   }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n      \
    \      letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n    \
    \    }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n      \
    \      letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n    \
    \    }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     letter_grades[i] = \"D-\";\n        }\n        else\n        {\n       \
    \     letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5w5db88r.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmp5w5db88r.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmp5w5db88r.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x2b34e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade > 3.7)\n            result[i] = \"A\";\n        else\
    \ if(grade > 3.3)\n            result[i] = \"A-\";\n        else if(grade > 3.0)\n\
    \            result[i] = \"B+\";\n        else if(grade > 2.7)\n            result[i]\
    \ = \"B\";\n        else if(grade > 2.3)\n            result[i] = \"B-\";\n  \
    \      else if(grade > 2.0)\n            result[i] = \"C+\";\n        else if(grade\
    \ > 1.7)\n            result[i] = \"C\";\n        else if(grade > 1.3)\n     \
    \       result[i] = \"C-\";\n        else if(grade > 1.0)\n            result[i]\
    \ = \"D+\";\n        else if(grade > 0.7)\n            result[i] = \"D\";\n  \
    \      else if(grade > 0.0)\n            result[i] = \"D-\";\n        else\n \
    \           result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmrr3oalm.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpmrr3oalm.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpmrr3oalm.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x7c7ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n     \
    \   if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n  \
    \      else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n      \
    \  }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n\
    \        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"\
    B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n   \
    \         result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n      \
    \  {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n\
    \        {\n            result ~= \"C-\";\n        }\n        else if(grade >=\
    \ 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n\
    \        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdde8nxld.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a3d]\\n??:? void tmpdde8nxld.__unittest_L89_C1()\
    \ [0x428799]\\n??:? void tmpdde8nxld.__modtest() [0x428ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eed7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429796]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42976d]\\n??:? runModuleUnitTests [0x42ecad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e8c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e13]\\n??:? _d_run_main [0x429d7e]\\n??:? main [0x428cbb]\\\
    n??:? __libc_start_main [0x144f7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letters = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            letters[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            letters[i] = \"A\";\n      \
    \  else if(grade >= 3.3)\n            letters[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            letters[i] = \"B+\";\n        else if(grade >= 2.7)\n \
    \           letters[i] = \"B\";\n        else if(grade >= 2.3)\n            letters[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            letters[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            letters[i] = \"C\";\n        else\
    \ if(grade >= 1.3)\n            letters[i] = \"C-\";\n        else if(grade >=\
    \ 1.0)\n            letters[i] = \"D+\";\n        else if(grade >= 0.7)\n    \
    \        letters[i] = \"D\";\n        else if(grade >= 0.0)\n            letters[i]\
    \ = \"D-\";\n        else\n            letters[i] = \"E\";\n    }\n    return\
    \ letters;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n\
    \    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpavtpasa7.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpavtpasa7.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpavtpasa7.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf27c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkeqx_ofl.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpkeqx_ofl.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpkeqx_ofl.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x9b904554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpymcx0wg2.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpymcx0wg2.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpymcx0wg2.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x62ad2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letters = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n     \
    \   {\n            letters[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ >= 3.7)\n        {\n            letters[i] = \"A\";\n        }\n        else\
    \ if (grades[i] >= 3.3)\n        {\n            letters[i] = \"A-\";\n       \
    \ }\n        else if (grades[i] >= 3.0)\n        {\n            letters[i] = \"\
    B+\";\n        }\n        else if (grades[i] >= 2.7)\n        {\n            letters[i]\
    \ = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n       \
    \     letters[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n  \
    \      {\n            letters[i] = \"C+\";\n        }\n        else if (grades[i]\
    \ >= 1.7)\n        {\n            letters[i] = \"C\";\n        }\n        else\
    \ if (grades[i] >= 1.3)\n        {\n            letters[i] = \"C-\";\n       \
    \ }\n        else if (grades[i] >= 1.0)\n        {\n            letters[i] = \"\
    D+\";\n        }\n        else if (grades[i] >= 0.7)\n        {\n            letters[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     letters[i] = \"D-\";\n        }\n        else\n        {\n            letters[i]\
    \ = \"E\";\n        }\n    }\n    return letters;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjunumg22.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpjunumg22.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmpjunumg22.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x3d119554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzl_z8p6i.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpzl_z8p6i.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpzl_z8p6i.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xb76ad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzismavm3.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpzismavm3.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpzismavm3.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xea95c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp62b5yh6_.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp62b5yh6_.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp62b5yh6_.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x4a95d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpotfmu97k.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpotfmu97k.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpotfmu97k.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x5a6af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\"\
    ;\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else\
    \ if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n\
    \            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n         \
    \   letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i]\
    \ = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\"\
    ;\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else\
    \ if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n\
    \            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n         \
    \   letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i]\
    \ = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnrwkt9zf.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpnrwkt9zf.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpnrwkt9zf.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x6631f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n \
    \       {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade\
    \ > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n     \
    \   else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n\
    \        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpubdgl78m.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmpubdgl78m.__unittest_L89_C1()\
    \ [0x428591]\\n??:? void tmpubdgl78m.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0xbb4a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsif9sqdn.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpsif9sqdn.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpsif9sqdn.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xe232f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp28gtskbw.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp28gtskbw.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp28gtskbw.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xa42f9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7golmqg7.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp7golmqg7.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp7golmqg7.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x792dc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n     \
    \   }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n      \
    \      letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n    \
    \    }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n      \
    \      letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n    \
    \    }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     letter_grades[i] = \"D-\";\n        }\n        else\n        {\n       \
    \     letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvx6ibbff.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpvx6ibbff.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmpvx6ibbff.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x485a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpps5v7j27.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpps5v7j27.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpps5v7j27.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x9a6e3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_b8fqq5f.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp_b8fqq5f.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp_b8fqq5f.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x60080554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7pzya87s.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp7pzya87s.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp7pzya87s.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x640a4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb3dpyfg5.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpb3dpyfg5.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpb3dpyfg5.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1512a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnej8cypx.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpnej8cypx.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpnej8cypx.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xb4d67554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe1q1q4jd.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpe1q1q4jd.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpe1q1q4jd.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x6644a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp61mcfce6.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp61mcfce6.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp61mcfce6.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xddd06554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp62v0map3.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp62v0map3.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp62v0map3.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xfa92a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n     \
    \   {\n            result[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ >= 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else\
    \ if (grades[i] >= 3.3)\n        {\n            result[i] = \"A-\";\n        }\n\
    \        else if (grades[i] >= 3.0)\n        {\n            result[i] = \"B+\"\
    ;\n        }\n        else if (grades[i] >= 2.7)\n        {\n            result[i]\
    \ = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n       \
    \     result[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n   \
    \     {\n            result[i] = \"C+\";\n        }\n        else if (grades[i]\
    \ >= 1.7)\n        {\n            result[i] = \"C\";\n        }\n        else\
    \ if (grades[i] >= 1.3)\n        {\n            result[i] = \"C-\";\n        }\n\
    \        else if (grades[i] >= 1.0)\n        {\n            result[i] = \"D+\"\
    ;\n        }\n        else if (grades[i] >= 0.7)\n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     result[i] = \"D-\";\n        }\n        else\n        {\n            result[i]\
    \ = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_ju_qlz2.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmp_ju_qlz2.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmp_ju_qlz2.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0xd3a56554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n     \
    \   {\n            result[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ >= 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else\
    \ if (grades[i] >= 3.3)\n        {\n            result[i] = \"A-\";\n        }\n\
    \        else if (grades[i] >= 3.0)\n        {\n            result[i] = \"B+\"\
    ;\n        }\n        else if (grades[i] >= 2.7)\n        {\n            result[i]\
    \ = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n       \
    \     result[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n   \
    \     {\n            result[i] = \"C+\";\n        }\n        else if (grades[i]\
    \ >= 1.7)\n        {\n            result[i] = \"C\";\n        }\n        else\
    \ if (grades[i] >= 1.3)\n        {\n            result[i] = \"C-\";\n        }\n\
    \        else if (grades[i] >= 1.0)\n        {\n            result[i] = \"D+\"\
    ;\n        }\n        else if (grades[i] >= 0.7)\n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     result[i] = \"D-\";\n        }\n        else\n        {\n            result[i]\
    \ = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3vvifihn.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmp3vvifihn.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmp3vvifihn.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x68242554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6o5yrnsr.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp6o5yrnsr.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp6o5yrnsr.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x388ba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxhr8mmhz.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpxhr8mmhz.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpxhr8mmhz.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xc4464554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn38y9k0k.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpn38y9k0k.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpn38y9k0k.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xfa0e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgocqlg21.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpgocqlg21.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpgocqlg21.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x84376554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcdt83wfl.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpcdt83wfl.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpcdt83wfl.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf407f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi8opg1b5.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpi8opg1b5.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpi8opg1b5.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x51af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkbi8r0m5.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpkbi8r0m5.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpkbi8r0m5.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x42ca9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmn9_cmn7.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpmn9_cmn7.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpmn9_cmn7.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xcfbcf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n \
    \       else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxw7zuxa5.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpxw7zuxa5.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpxw7zuxa5.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x3594e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjpsy6gwi.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpjpsy6gwi.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpjpsy6gwi.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x5a7b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ g; grades)\n    {\n        if(g >= 4.0)\n            result[i] = \"A+\";\n \
    \       else if(g >= 3.7)\n            result[i] = \"A\";\n        else if(g >=\
    \ 3.3)\n            result[i] = \"A-\";\n        else if(g >= 3.0)\n         \
    \   result[i] = \"B+\";\n        else if(g >= 2.7)\n            result[i] = \"\
    B\";\n        else if(g >= 2.3)\n            result[i] = \"B-\";\n        else\
    \ if(g >= 2.0)\n            result[i] = \"C+\";\n        else if(g >= 1.7)\n \
    \           result[i] = \"C\";\n        else if(g >= 1.3)\n            result[i]\
    \ = \"C-\";\n        else if(g >= 1.0)\n            result[i] = \"D+\";\n    \
    \    else if(g >= 0.7)\n            result[i] = \"D\";\n        else if(g >= 0.0)\n\
    \            result[i] = \"D-\";\n        else\n            result[i] = \"E\"\
    ;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprmsvk_85.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmprmsvk_85.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmprmsvk_85.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xba10c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqg3zh7gs.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpqg3zh7gs.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpqg3zh7gs.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x60292554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5ieuvlx2.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp5ieuvlx2.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp5ieuvlx2.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x502d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo__xa2rg.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpo__xa2rg.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpo__xa2rg.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x216bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0fp25532.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmp0fp25532.__unittest_L89_C1()\
    \ [0x428591]\\n??:? void tmp0fp25532.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0xf628554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqeaaex0n.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpqeaaex0n.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpqeaaex0n.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x7e3a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n     \
    \   }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n      \
    \      letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n    \
    \    }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n      \
    \      letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n    \
    \    }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     letter_grades[i] = \"D-\";\n        }\n        else\n        {\n       \
    \     letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx9dq2i7j.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpx9dq2i7j.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmpx9dq2i7j.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x77eee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc5ovn9qu.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpc5ovn9qu.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpc5ovn9qu.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x5280a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjbjvksgt.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpjbjvksgt.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpjbjvksgt.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xfe893554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv0mqbqbx.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpv0mqbqbx.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpv0mqbqbx.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xa0c07554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd4l9a6be.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpd4l9a6be.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpd4l9a6be.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x44d42554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa3p7s7c7.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpa3p7s7c7.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpa3p7s7c7.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x52721554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt90ow1o_.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpt90ow1o_.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpt90ow1o_.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x8e473554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnibignkt.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpnibignkt.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpnibignkt.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x52c28554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8t6coqvi.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp8t6coqvi.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp8t6coqvi.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x58a4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnszs_8ad.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpnszs_8ad.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpnszs_8ad.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x6b1f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyrtn5acn.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpyrtn5acn.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpyrtn5acn.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x2b253554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp03ejo5d.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpp03ejo5d.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpp03ejo5d.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x8f9ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp08fawuxl.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmp08fawuxl.__unittest_L89_C1()\
    \ [0x428591]\\n??:? void tmp08fawuxl.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0xf30ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letters = new string[grades.length];\n    foreach(i,\
    \ g; grades)\n    {\n        if(g >= 4.0)\n            letters[i] = \"A+\";\n\
    \        else if(g >= 3.7)\n            letters[i] = \"A\";\n        else if(g\
    \ >= 3.3)\n            letters[i] = \"A-\";\n        else if(g >= 3.0)\n     \
    \       letters[i] = \"B+\";\n        else if(g >= 2.7)\n            letters[i]\
    \ = \"B\";\n        else if(g >= 2.3)\n            letters[i] = \"B-\";\n    \
    \    else if(g >= 2.0)\n            letters[i] = \"C+\";\n        else if(g >=\
    \ 1.7)\n            letters[i] = \"C\";\n        else if(g >= 1.3)\n         \
    \   letters[i] = \"C-\";\n        else if(g >= 1.0)\n            letters[i] =\
    \ \"D+\";\n        else if(g >= 0.7)\n            letters[i] = \"D\";\n      \
    \  else if(g >= 0.0)\n            letters[i] = \"D-\";\n        else\n       \
    \     letters[i] = \"E\";\n    }\n    return letters;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf5nvnh_e.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpf5nvnh_e.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpf5nvnh_e.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x34ff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnt8w1n33.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpnt8w1n33.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpnt8w1n33.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf0714554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy965tvot.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpy965tvot.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpy965tvot.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xaa84554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiwnn_r0y.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpiwnn_r0y.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpiwnn_r0y.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1ceb7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx9u_i6ek.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpx9u_i6ek.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpx9u_i6ek.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x4d639554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpglifknyd.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpglifknyd.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpglifknyd.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x58224554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg7j29skc.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpg7j29skc.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpg7j29skc.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x9ab69554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphxbl_kt4.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmphxbl_kt4.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmphxbl_kt4.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1ef3f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpotd1ko8d.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpotd1ko8d.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpotd1ko8d.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x41b06554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpktu9ssg7.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpktu9ssg7.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpktu9ssg7.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x70287554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw04n7bxe.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpw04n7bxe.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpw04n7bxe.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x73421554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp73a5wcme.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp73a5wcme.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp73a5wcme.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xbd8f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptbfxub57.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmptbfxub57.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmptbfxub57.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x9764f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprarajnwh.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmprarajnwh.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmprarajnwh.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xe207e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade > 3.7)\n            result[i] = \"A\";\n        else\
    \ if(grade > 3.3)\n            result[i] = \"A-\";\n        else if(grade > 3.0)\n\
    \            result[i] = \"B+\";\n        else if(grade > 2.7)\n            result[i]\
    \ = \"B\";\n        else if(grade > 2.3)\n            result[i] = \"B-\";\n  \
    \      else if(grade > 2.0)\n            result[i] = \"C+\";\n        else if(grade\
    \ > 1.7)\n            result[i] = \"C\";\n        else if(grade > 1.3)\n     \
    \       result[i] = \"C-\";\n        else if(grade > 1.0)\n            result[i]\
    \ = \"D+\";\n        else if(grade > 0.7)\n            result[i] = \"D\";\n  \
    \      else if(grade > 0.0)\n            result[i] = \"D-\";\n        else\n \
    \           result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcugq25nx.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpcugq25nx.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpcugq25nx.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xbf315554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_8khuseg.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp_8khuseg.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp_8khuseg.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xdc68f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpletsfj_n.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpletsfj_n.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpletsfj_n.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xce920554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzfx5021z.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpzfx5021z.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpzfx5021z.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x4b813554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_i35l094.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp_i35l094.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp_i35l094.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x87940554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4i23xuw1.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp4i23xuw1.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp4i23xuw1.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x35a69554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpejl9zfcb.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpejl9zfcb.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpejl9zfcb.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xabaf0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps88q_y9o.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmps88q_y9o.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmps88q_y9o.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x836b1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm0r1n23n.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpm0r1n23n.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpm0r1n23n.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x8f7b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm8e624gx.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpm8e624gx.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpm8e624gx.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xaa7b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9e7pja15.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp9e7pja15.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp9e7pja15.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x56527554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n      \
    \  }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n       \
    \     letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n       \
    \     letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n     \
    \   }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n        \
    \    letter_grades[i] = \"D-\";\n        }\n        else\n        {\n        \
    \    letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6i6nsrcb.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmp6i6nsrcb.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmp6i6nsrcb.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x114f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n     \
    \   {\n            result[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ >= 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else\
    \ if (grades[i] >= 3.3)\n        {\n            result[i] = \"A-\";\n        }\n\
    \        else if (grades[i] >= 3.0)\n        {\n            result[i] = \"B+\"\
    ;\n        }\n        else if (grades[i] >= 2.7)\n        {\n            result[i]\
    \ = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n       \
    \     result[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n   \
    \     {\n            result[i] = \"C+\";\n        }\n        else if (grades[i]\
    \ >= 1.7)\n        {\n            result[i] = \"C\";\n        }\n        else\
    \ if (grades[i] >= 1.3)\n        {\n            result[i] = \"C-\";\n        }\n\
    \        else if (grades[i] >= 1.0)\n        {\n            result[i] = \"D+\"\
    ;\n        }\n        else if (grades[i] >= 0.7)\n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     result[i] = \"D-\";\n        }\n        else\n        {\n            result[i]\
    \ = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpljt8ocmz.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpljt8ocmz.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmpljt8ocmz.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0xdb943554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i]\
    \ = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"\
    A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n\
    \        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade\
    \ >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n      \
    \      letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n           \
    \ letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\"\
    ;\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsfbisjqy.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpsfbisjqy.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpsfbisjqy.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x38d95554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n     \
    \   {\n            result[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ >= 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else\
    \ if (grades[i] >= 3.3)\n        {\n            result[i] = \"A-\";\n        }\n\
    \        else if (grades[i] >= 3.0)\n        {\n            result[i] = \"B+\"\
    ;\n        }\n        else if (grades[i] >= 2.7)\n        {\n            result[i]\
    \ = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n       \
    \     result[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n   \
    \     {\n            result[i] = \"C+\";\n        }\n        else if (grades[i]\
    \ >= 1.7)\n        {\n            result[i] = \"C\";\n        }\n        else\
    \ if (grades[i] >= 1.3)\n        {\n            result[i] = \"C-\";\n        }\n\
    \        else if (grades[i] >= 1.0)\n        {\n            result[i] = \"D+\"\
    ;\n        }\n        else if (grades[i] >= 0.7)\n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     result[i] = \"D-\";\n        }\n        else\n        {\n            result[i]\
    \ = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa6ulc3i_.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpa6ulc3i_.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmpa6ulc3i_.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0xded84554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphfqws67x.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmphfqws67x.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmphfqws67x.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x854d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6nn2sbmm.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp6nn2sbmm.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp6nn2sbmm.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xd5dc8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9dz4pg8f.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp9dz4pg8f.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp9dz4pg8f.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xfd374554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n \
    \       {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade\
    \ > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n     \
    \   else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n\
    \        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqokz8euu.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmpqokz8euu.__unittest_L89_C1()\
    \ [0x428591]\\n??:? void tmpqokz8euu.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0x18fc7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n     \
    \   {\n            result[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ >= 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else\
    \ if (grades[i] >= 3.3)\n        {\n            result[i] = \"A-\";\n        }\n\
    \        else if (grades[i] >= 3.0)\n        {\n            result[i] = \"B+\"\
    ;\n        }\n        else if (grades[i] >= 2.7)\n        {\n            result[i]\
    \ = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n       \
    \     result[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n   \
    \     {\n            result[i] = \"C+\";\n        }\n        else if (grades[i]\
    \ >= 1.7)\n        {\n            result[i] = \"C\";\n        }\n        else\
    \ if (grades[i] >= 1.3)\n        {\n            result[i] = \"C-\";\n        }\n\
    \        else if (grades[i] >= 1.0)\n        {\n            result[i] = \"D+\"\
    ;\n        }\n        else if (grades[i] >= 0.7)\n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     result[i] = \"D-\";\n        }\n        else\n        {\n            result[i]\
    \ = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphxwuaevt.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmphxwuaevt.__unittest_L89_C1()\
    \ [0x428701]\\n??:? void tmphxwuaevt.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x743c3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu9wq91kc.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpu9wq91kc.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpu9wq91kc.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xdb240554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0s_zv0kz.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp0s_zv0kz.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp0s_zv0kz.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf4957554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade > 3.7)\n            result[i] = \"A\";\n        else\
    \ if(grade > 3.3)\n            result[i] = \"A-\";\n        else if(grade > 3.0)\n\
    \            result[i] = \"B+\";\n        else if(grade > 2.7)\n            result[i]\
    \ = \"B\";\n        else if(grade > 2.3)\n            result[i] = \"B-\";\n  \
    \      else if(grade > 2.0)\n            result[i] = \"C+\";\n        else if(grade\
    \ > 1.7)\n            result[i] = \"C\";\n        else if(grade > 1.3)\n     \
    \       result[i] = \"C-\";\n        else if(grade > 1.0)\n            result[i]\
    \ = \"D+\";\n        else if(grade > 0.7)\n            result[i] = \"D\";\n  \
    \      else if(grade > 0.0)\n            result[i] = \"D-\";\n        else\n \
    \           result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo47rf8qd.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpo47rf8qd.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpo47rf8qd.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x41b81554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      result[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n\
    \            result[i] = \"A\";\n        }\n        else if(grade > 3.3)\n   \
    \     {\n            result[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n\
    \        {\n            result[i] = \"B+\";\n        }\n        else if(grade\
    \ > 2.7)\n        {\n            result[i] = \"B\";\n        }\n        else if(grade\
    \ > 2.3)\n        {\n            result[i] = \"B-\";\n        }\n        else\
    \ if(grade > 2.0)\n        {\n            result[i] = \"C+\";\n        }\n   \
    \     else if(grade > 1.7)\n        {\n            result[i] = \"C\";\n      \
    \  }\n        else if(grade > 1.3)\n        {\n            result[i] = \"C-\"\
    ;\n        }\n        else if(grade > 1.0)\n        {\n            result[i] =\
    \ \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            result[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ result[i] = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpww4ncvb1.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmpww4ncvb1.__unittest_L89_C1()\
    \ [0x428591]\\n??:? void tmpww4ncvb1.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0x4eb49554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8qo16kxx.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmp8qo16kxx.__unittest_L89_C1()\
    \ [0x428591]\\n??:? void tmp8qo16kxx.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0xcf087554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_w8ps922.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp_w8ps922.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp_w8ps922.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xc21d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_s_rgv6p.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp_s_rgv6p.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp_s_rgv6p.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x249db554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_vt4fg72.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp_vt4fg72.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp_vt4fg72.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xc6e6b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp__rduedf.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp__rduedf.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmp__rduedf.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xd79d8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1vaweqq6.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp1vaweqq6.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp1vaweqq6.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x7988e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\"\
    ;\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else\
    \ if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n\
    \            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n         \
    \   letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i]\
    \ = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\"\
    ;\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else\
    \ if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n\
    \            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n         \
    \   letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i]\
    \ = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj6k0ir50.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpj6k0ir50.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpj6k0ir50.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x8d12c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n      \
    \  {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n    \
    \    else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n     \
    \   {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n    \
    \    else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n\
    \        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiepbml_v.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpiepbml_v.__unittest_L89_C1()\
    \ [0x428589]\\n??:? void tmpiepbml_v.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x676e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for\
    \ (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n      \
    \  }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n       \
    \     letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n       \
    \     letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n     \
    \   }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n        \
    \    letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n\
    \        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0ggw4qg9.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299dd]\\n??:? void tmp0ggw4qg9.__unittest_L89_C1()\
    \ [0x428735]\\n??:? void tmp0ggw4qg9.__modtest() [0x428c44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e55b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429736]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42970d]\\n??:? runModuleUnitTests [0x42e331]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429ea0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e27]\\n??:? _d_run_main [0x429d92]\\n??:? main [0x428c57]\\\
    n??:? __libc_start_main [0x34ded554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
