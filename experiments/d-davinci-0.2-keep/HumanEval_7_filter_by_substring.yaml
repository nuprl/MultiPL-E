name: HumanEval_7_filter_by_substring
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
  \ only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
  \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n   \
  \ ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[] strings,\
  \ string substring) \n"
tests: "unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
completions: ["{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n\
    \    string[] filtered_strings;\n    foreach(string s; strings)\n    {\n     \
    \   if(s.contains(substring))\n        {\n            filtered_strings ~= s;\n\
    \        }\n    }\n    return filtered_strings;\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.contains(substring));\n}\n/*\n    Filter an input list\
    \ of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring(string[] strings,\
    \ string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\n/*\n    Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\n/*\n    Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\n/*\n    Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\n/*\n    Filter an input list of strings", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.contains(substring));\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings)\n    {\n        if (s.contains(substring))\n \
    \       {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.contains(substring));\n}", "{\n    return strings.filter!(a => a.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.contains(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(a => a.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.contains(substring));\n}", "{\n    string[] result;\n    foreach(string\
    \ s; strings) \n    {\n        if (s.contains(substring)) \n        {\n      \
    \      result ~= s;\n        }\n    }\n    return result;\n}", "{\n    return\
    \ strings.filter!(s => s.contains(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    string[]\
    \ filtered;\n    foreach(string s; strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            filtered ~= s;\n        }\n    }\n    return filtered;\n\
    }", "{\n    string[] result;\n    foreach(string s; strings) \n    {\n       \
    \ if (s.contains(substring)) \n        {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.contains(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    string[] result;\n    foreach(string s; strings) \n    {\n       \
    \ if (s.contains(substring)) \n        {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}\n/*\n Filter an input list of strings only for\
    \ ones that contain given substring\n    >>> filter_by_substring([], 'a')\n  \
    \  []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n   \
    \ ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[] strings,\
    \ string substring) \n{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}\n/*\n Filter an input list of strings only for\
    \ ones that contain given substring\n    >>> filter_by_substring([], 'a')\n  \
    \  []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n   \
    \ ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[] strings,\
    \ string substring) \n{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n Filter an input", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}\n/*\n    >>> filter_by_substring_case_insensitive(['abc',\
    \ 'bacd', 'cde', 'array'], 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.toLower().canFind(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive_and_length(['abc', 'bacd',\
    \ 'cde', 'array'], 'A', 4)\n    ['bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive_and_length(string[]\
    \ strings, string substring, size_t length) \n{\n    return strings.filter!(s\
    \ => s.toLower().canFind(substring.toLower()) && s.length == length);\n}\n/*\n\
    \    >>> filter_by_substring_case_insensitive_and_length_with_predicate(['abc',\
    \ 'bacd', 'cde', 'array'], 'A', 4, (s) => s.length == 4)\n    ['bacd', 'array']\n\
    */\nstring[] filter_by_substring_case_insensitive_and_length_with_predicate(string[]\
    \ strings, string substring, size_t length, alias pred) \n{\n    return strings.filter!(s\
    \ => s.toLower().canFind(substring.toLower()) && s.length == length && pred(s));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive_and_length_with_predicate_and_transform(['abc',\
    \ 'bacd', 'cde', 'array'], 'A', 4, (s) => s.length == 4, (s) => s.toUpper())\n\
    \    ['BACD', 'ARRAY']\n*/\nstring[] filter_by_substring_case_insensitive_and_length_with_predicate_and_transform(string[]\
    \ strings", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n\
    \    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.contains(substring));\n}", "{\n    return strings.filter!(s => s.contains(substring)).array;\n\
    }", "{\n    string[] result;\n    foreach(string s; strings)\n    {\n        if\
    \ (s.contains(substring))\n        {\n            result ~= s;\n        }\n  \
    \  }\n    return result;\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    string[] filtered_strings;\n    foreach(string s; strings)\n    {\n\
    \        if(s.contains(substring))\n        {\n            filtered_strings ~=\
    \ s;\n        }\n    }\n    return filtered_strings;\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings)\n    {\n        if (s.contains(substring))\n \
    \       {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}\n/*\n    Filter an\
    \ input list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n    Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}\n/*\n    Filter an input list of strings only for\
    \ ones that contain given substring\n    >>> filter_by_substring([], 'a')\n  \
    \  []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n   \
    \ ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[] strings,\
    \ string substring) \n{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n    Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}\n/*", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring)).array;\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings)\n    {\n        if (s.contains(substring))\n \
    \       {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    string[]\
    \ result;\n    foreach(string s; strings)\n    {\n        if (s.contains(substring))\n\
    \        {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    string[] result;\n    foreach(string s; strings)\n    {\n        if\
    \ (s.contains(substring))\n        {\n            result ~= s;\n        }\n  \
    \  }\n    return result;\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return filter!(s => s.canFind(substring))(strings);\n}", "{\n    return\
    \ strings.filter!(s => s.contains(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings)\n    {\n        if (s.contains(substring))\n \
    \       {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    string[] result;\n    foreach(string\
    \ s; strings)\n    {\n        if (s.contains(substring))\n        {\n        \
    \    result ~= s;\n        }\n    }\n    return result;\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.contains(substring));\n}", "{\n    return filter!(s => s.canFind(substring))(strings);\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ strings.filter!(x => x.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    string[]\
    \ result;\n    foreach(string s; strings)\n    {\n        if (s.canFind(substring))\n\
    \        {\n            result ~= s;\n        }\n    }\n    return result;\n}\n\
    /*\n    >>> filter_by_substring_2([], 'a')\n    []\n    >>> filter_by_substring_2(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_2(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n    >>> filter_by_substring_3([], 'a')\n    []\n    >>> filter_by_substring_3(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_3(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring)).array;\n\
    }\n/*\n    >>> filter_by_substring_4([], 'a')\n    []\n    >>> filter_by_substring_4(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_4(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring)).array.dup;\n\
    }\n/*\n    >>> filter_by_substring_5([], 'a')\n    []\n    >>> filter_by_substring_5(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_5(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring)).array.dup.idup;\n\
    }\n", "{\n    return strings.filter!(s => s.canFind(substring));\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}\n/*\n Filter an input list of strings only for\
    \ ones that contain given substring\n    >>> filter_by_substring([], 'a')\n  \
    \  []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n   \
    \ ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[] strings,\
    \ string substring) \n{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}\n/*\n Filter an input", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return filter!(s => s.canFind(substring))(strings);\n\
    }", "{\n    string[] result;\n    foreach(string s; strings)\n    {\n        if\
    \ (s.contains(substring))\n        {\n            result ~= s;\n        }\n  \
    \  }\n    return result;\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    string[] result;\n    foreach(string\
    \ s; strings)\n    {\n        if (s.contains(substring))\n        {\n        \
    \    result ~= s;\n        }\n    }\n    return result;\n}", "{\n    return strings.filter!(s\
    \ => s.contains(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n    >>> filter_by_substring_2([], 'a')\n    []\n    >>> filter_by_substring_2(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_2(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring)).array;\n\
    }\n/*\n    >>> filter_by_substring_3([], 'a')\n    []\n    >>> filter_by_substring_3(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_3(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring)).array();\n\
    }\n/*\n    >>> filter_by_substring_4([], 'a')\n    []\n    >>> filter_by_substring_4(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_4(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring)).arrayof;\n\
    }\n/*\n    >>> filter_by_substring_5([], 'a')\n    []\n    >>> filter_by_substring_5(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_5(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring)).arrayof();\n\
    }\n/*\n    >>> filter_by_substring_6([], 'a')\n    []\n    >>> filter_by_substring_6(['abc',\
    \ 'bacd", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n\
    \    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n Find the longest string in a list of strings\n    >>> longest_string(['abc',\
    \ 'bacd', 'cde', 'array'])\n    'array'\n*/\nstring longest_string(string[] strings)\
    \ \n{\n    return strings.reduce!((a, b) => a.length > b.length ? a : b)(\"\"\
    );\n}\n/*\n Find the shortest string in a list of strings\n    >>> shortest_string(['abc',\
    \ 'bacd', 'cde', 'array'])\n    'cde'\n*/\nstring shortest_string(string[] strings)\
    \ \n{\n    return strings.reduce!((a, b) => a.length < b.length ? a : b)(\"\"\
    );\n}\n/*\n Find the longest string in a list of strings that contains a given\
    \ substring\n    >>> longest_string_with_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'a')\n    'bacd'\n*/\nstring longest_string_with_substring(string[] strings,\
    \ string substring) \n{\n    return longest_string(filter_by_substring(strings,\
    \ substring));\n}\n/*\n Find the shortest string in a list of strings that contains\
    \ a given substring\n    >>> shortest_string_with_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'a')\n    'abc'\n*/\nstring shortest_string_with_substring(string[]\
    \ strings, string substring) \n{\n    return shortest_string(filter_by_substring(strings,\
    \ substring));\n}\n/*\n Find the longest string in a list of strings that contains\
    \ a given substring\n    >>> longest_string_with_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'a')\n    'bacd'\n*/\nstring longest_string_with_substring(string[]\
    \ strings, string substring) \n{\n    return longest_string(filter_by_substring(strings,\
    \ substring));\n}\n/*\n Find the shortest string in a list of strings that contains\
    \ a given substring", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    string[] result;\n    foreach(string s; strings)\n    {\n        if\
    \ (s.contains(substring))\n        {\n            result ~= s;\n        }\n  \
    \  }\n    return result;\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return filter!(a =>\
    \ a.canFind(substring))(strings);\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return filter!(s =>\
    \ s.canFind(substring))(strings);\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings)\n    {\n        if (s.contains(substring))\n \
    \       {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    string[] result;\n    foreach(string\
    \ s; strings)\n    {\n        if (s.contains(substring))\n        {\n        \
    \    result ~= s;\n        }\n    }\n    return result;\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}\n/*\n    >>> filter_by_substring_case_insensitive(['abc',\
    \ 'bacd', 'cde', 'array'], 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.toLower().canFind(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive(['abc', 'bacd', 'cde', 'array'],\
    \ 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.toLower().canFind(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive(['abc', 'bacd', 'cde', 'array'],\
    \ 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.toLower().canFind(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive(['abc', 'bacd', 'cde', 'array'],\
    \ 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.toLower().canFind(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive(['abc', 'bacd', 'cde', 'array'],\
    \ 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring)", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    string[]\
    \ result;\n    foreach(string s; strings)\n    {\n        if (s.contains(substring))\n\
    \        {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return filter!(s => s.canFind(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(s => s.canFind(substring))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    return filter!(s\
    \ => s.canFind(substring))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(s => s.canFind(substring))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    return filter!(s\
    \ => s.canFind(substring))(strings);\n}\n", "{\n    return strings.filter!(s =>\
    \ s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}\n/*\n Find the index of the first\
    \ element in the input list that satisfies the predicate\n    >>> find_first_index([1,\
    \ 2, 3, 4, 5], (x) => x > 3)\n    3\n    >>> find_first_index([1, 2, 3, 4, 5],\
    \ (x) => x > 5)\n    -1\n*/", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}\n/*\n Find the index of the first element in a\
    \ list that satisfies a predicate\n    >>> find_index_by_predicate([], (x) =>\
    \ true)\n    -1\n    >>> find_index_by_predicate([1, 2, 3, 4], (x) => x > 2)\n\
    \    2\n*/", "{\n    string[] result;\n    foreach(string s; strings)\n    {\n\
    \        if (s.contains(substring))\n        {\n            result ~= s;\n   \
    \     }\n    }\n    return result;\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    string[]\
    \ result;\n    foreach(string s; strings)\n    {\n        if (s.contains(substring))\n\
    \        {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return filter!(s\
    \ => s.canFind(substring))(strings);\n}", "{\n    return strings.filter!(s =>\
    \ s.contains(substring));\n}\n/*\n    >>> filter_by_substring_case_insensitive(['abc',\
    \ 'bacd', 'cde', 'array'], 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.toLower().contains(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive_with_regex(['abc', 'bacd',\
    \ 'cde', 'array'], 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive_with_regex(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.match(regex(substring,\
    \ \"i\")));\n}\n/*\n    >>> filter_by_substring_case_insensitive_with_regex(['abc',\
    \ 'bacd', 'cde', 'array'], 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive_with_regex_and_alias(string[]\
    \ strings, string substring) \n{\n    import std.regex : regex, match;\n    return\
    \ strings.filter!(s => match(s, regex(substring, \"i\")));\n}\n/*\n    >>> filter_by_substring_case_insensitive_with_regex(['abc',\
    \ 'bacd', 'cde', 'array'], 'A')\n    ['abc', 'bacd', 'array']\n*/\nstring[] filter_by_substring_case_insensitive_with_regex_and_alias_and_alias(string[]\
    \ strings, string substring) \n{\n    import std.regex : regex, match;\n    import\
    \ std.algorithm : filter;\n    return filter!(s => match(s, regex(substring, \"\
    i\")))(strings);\n}\n/*\n", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ filter!(s => s.canFind(substring))(strings);\n}", "{\n    return strings.filter!(s\
    \ => s.contains(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    string[] result;\n    foreach(string s; strings)\n    {\n        if\
    \ (s.contains(substring))\n        {\n            result ~= s;\n        }\n  \
    \  }\n    return result;\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.contains(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ filter!(s => s.canFind(substring))(strings);\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return filter!(s => s.canFind(substring))(strings);\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.contains(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.contains(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring)).array;\n}", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    string[]\
    \ result;\n    foreach(string s; strings)\n    {\n        if (s.contains(substring))\n\
    \        {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return filter!(s\
    \ => s.contains(substring))(strings);\n}", "{\n    return strings.filter!(s =>\
    \ s.canFind(substring));\n}", "{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if (s.contains(substring))\n        {\n           \
    \ result ~= s;\n        }\n    }\n    return result;\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
