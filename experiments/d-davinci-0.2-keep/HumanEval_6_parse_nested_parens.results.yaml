name: HumanEval_6_parse_nested_parens
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack ~= 1;\n            depth += 1;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            stack ~= -1;\n            depth -= 1;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5stwtn3x.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp5stwtn3x.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmp5stwtn3x.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5stwtn3x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long[] max_stack;\n    long max_depth = 0;\n    long depth\
    \ = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n\
    \            stack ~= 1;\n            depth += 1;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        else if(c == ')')\n        {\n            stack\
    \ ~= -1;\n            depth -= 1;\n        }\n        else if(c == ' ')\n    \
    \    {\n            max_stack ~= max_depth;\n            max_depth = 0;\n    \
    \        depth = 0;\n        }\n    }\n    max_stack ~= max_depth;\n    return\
    \ max_stack;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n \
    \   assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpianftrsb.d(25): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpianftrsb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n  \
    \  {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp83giaxlq.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83giaxlq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string) \n    {\n        if (c == '(')\
    \ \n        {\n            stack ~= depth;\n            depth++;\n           \
    \ max_depth = max(max_depth, depth);\n        }\n        else if (c == ')') \n\
    \        {\n            depth = stack.pop;\n        }\n        else if (c == '\
    \ ') \n        {\n            result ~= max_depth;\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp869w_sk.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpp869w_sk.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpp869w_sk.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpp869w_sk.d(28):\
    \ Error: no property `pop` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpp869w_sk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbtk3qrmt.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbtk3qrmt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack ~= depth;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            if(stack.length == 0)\n            {\n                throw new Exception(\"\
    Invalid input string\");\n            }\n            else\n            {\n   \
    \             depth = stack[$-1];\n                stack = stack[0..$-1];\n  \
    \          }\n        }\n        else if(c == ' ')\n        {\n            result\
    \ ~= max_depth;\n            max_depth = 0;\n            depth = 0;\n        }\n\
    \        else\n        {\n            throw new Exception(\"Invalid input string\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwbd4c80m.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpwbd4c80m.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpwbd4c80m.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbd4c80m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long current_depth;\n    foreach\
    \ (paren_group; paren_string.split) \n    {\n        max_depth = 0;\n        current_depth\
    \ = 0;\n        stack = [];\n        foreach (paren; paren_group) \n        {\n\
    \            if (paren == '(') \n            {\n                stack ~= paren;\n\
    \                current_depth++;\n                max_depth = max(max_depth,\
    \ current_depth);\n            } \n            else if (paren == ')') \n     \
    \       {\n                stack.pop;\n                current_depth--;\n    \
    \        }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy6wxunk9.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6wxunk9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int max_nesting = 0;\n    int current_nesting = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            current_nesting++;\n\
    \            max_nesting = max(max_nesting, current_nesting);\n        }\n   \
    \     else if(c == ')') \n        {\n            current_nesting--;\n        }\n\
    \        else if(c == ' ') \n        {\n            result ~= max_nesting;\n \
    \           max_nesting = 0;\n            current_nesting = 0;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprz_vka_t.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprz_vka_t.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            current_depth++;\n  \
    \          max_depth = max(max_depth, current_depth);\n        } \n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        } \n       \
    \ else if(c == ' ') \n        {\n            result ~= max_depth;\n          \
    \  max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp5a0nag7.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5a0nag7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split) \n    {\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach(paren; paren_group) \n      \
    \  {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')') \n            {\n                depth--;\n        \
    \    }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvcyihp2r.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcyihp2r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    for (int i = 0; i < paren_string.length; i++) \n    {\n    \
    \    if (paren_string[i] == '(') \n        {\n            stack.push(paren_string[i]);\n\
    \            depth++;\n            max_depth = max(max_depth, depth);\n      \
    \  } \n        else if (paren_string[i] == ')') \n        {\n            stack.pop();\n\
    \            depth--;\n        } \n        else if (paren_string[i] == ' ') \n\
    \        {\n            result.push(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx0rk7x2h.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpx0rk7x2h.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpx0rk7x2h.d(22):\
    \ Error: no property `push` for type `int[]`\\n/tmp/tmpx0rk7x2h.d(24): Error:\
    \ undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpx0rk7x2h.d(28):\
    \ Error: no property `pop` for type `int[]`\\n/tmp/tmpx0rk7x2h.d(33): Error: no\
    \ property `push` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpx0rk7x2h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long[] max_stack;\n    long max_stack_size;\n    long\
    \ stack_size;\n    long max_depth;\n    long depth;\n    long i;\n    long j;\n\
    \    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n\
    \    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long ab;\n\
    \    long ac;\n    long ad;\n    long ae;\n    long af;\n    long ag;\n    long\
    \ ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n    long am;\n\
    \    long an;\n    long ao;\n    long ap;\n    long aq;\n    long ar;\n    long\
    \ as;\n    long at;\n    long au;\n    long av;\n    long aw;\n    long ax;\n\
    \    long ay;\n    long az;\n    long ba;\n    long bb;\n    long bc;\n    long\
    \ bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n    long bi;\n\
    \    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long bn;\n    long\
    \ bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n    long bt;\n\
    \    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long by;\n    long\
    \ bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n    long ce;\n\
    \    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long cj;\n    long\
    \ ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n    long cp;\n\
    \    long\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz096bdlv.d(108): Error: no identifier for declarator `long`\\\
    n/tmp/tmpz096bdlv.d(108): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz096bdlv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_depth += 1;\n   \
    \         max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth -= 1;\n        }\n      \
    \  else if(c == ' ')\n        {\n            result ~= max_depth;\n          \
    \  max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa7rdqfwi.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7rdqfwi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int max_level = 0;\n    int level = 0;\n    foreach(char\
    \ c; paren_string) \n    {\n        if (c == '(') \n        {\n            level++;\n\
    \            max_level = max(max_level, level);\n        } \n        else if (c\
    \ == ')') \n        {\n            level--;\n        } \n        else if (c ==\
    \ ' ') \n        {\n            result ~= max_level;\n            max_level =\
    \ 0;\n            level = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9evmyl_9.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp9evmyl_9.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9evmyl_9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(ch; paren_string)\n\
    \    {\n        if(ch == '(')\n        {\n            nesting++;\n           \
    \ max_nesting = max(max_nesting, nesting);\n        }\n        else if(ch == ')')\n\
    \        {\n            nesting--;\n        }\n        else if(ch == ' ')\n  \
    \      {\n            result ~= max_nesting;\n            max_nesting = 0;\n \
    \           nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5bzzl44d.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bzzl44d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    foreach(paren; paren_string.split(\"\
    \ \"))\n    {\n        foreach(c; paren)\n        {\n            if(c == '(')\n\
    \            {\n                stack ~= 1;\n            }\n            else if(c\
    \ == ')')\n            {\n                stack ~= -1;\n            }\n      \
    \  }\n        result ~= max(stack);\n        stack = new long[];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpphugjoyw.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpphugjoyw.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpphugjoyw.d(16):\
    \ Error: no property `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpphugjoyw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_level = 0;\n    long level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            stack ~=\
    \ 1;\n            level += 1;\n            max_level = max(max_level, level);\n\
    \        }\n        else if(c == ')')\n        {\n            stack ~= -1;\n \
    \           level -= 1;\n        }\n        else\n        {\n            if(stack.length\
    \ > 0)\n            {\n                result ~= max_level;\n                max_level\
    \ = 0;\n                level = 0;\n                stack = [];\n            }\n\
    \        }\n    }\n    if(stack.length > 0)\n    {\n        result ~= max_level;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjyv2_ryk.d(24): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyv2_ryk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    foreach(char c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            stack ~= 1;\n        }\n\
    \        else if(c == ')')\n        {\n            if(stack.length == 0)\n   \
    \         {\n                throw new Exception(\"Invalid input\");\n       \
    \     }\n            else\n            {\n                result ~= stack.length;\n\
    \                stack.length = stack.length - 1;\n            }\n        }\n\
    \        else if(c == ' ')\n        {\n            if(stack.length != 0)\n   \
    \         {\n                throw new Exception(\"Invalid input\");\n       \
    \     }\n        }\n        else\n        {\n            throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    if(stack.length != 0)\n    {\n      \
    \  throw new Exception(\"Invalid input\");\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp17abgi4.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpp17abgi4.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp17abgi4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int max_depth = 0;\n    int current_depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            current_depth++;\n  \
    \          max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmpgcyc6u.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmpgcyc6u.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            ++nesting;\n       \
    \     max_nesting = max(max_nesting, nesting);\n        } \n        else if (c\
    \ == ')') \n        {\n            --nesting;\n        } \n        else if (c\
    \ == ' ') \n        {\n            result ~= max_nesting;\n            max_nesting\
    \ = 0;\n            nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4sdzb79g.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4sdzb79g.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int depth = 0;\n    int max_depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfvbpxsh7.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpfvbpxsh7.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfvbpxsh7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_count;\n    long max_count;\n    long i;\n    long j;\n    long\
    \ k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long\
    \ q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long\
    \ w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long ab;\n    long\
    \ ac;\n    long ad;\n    long ae;\n    long af;\n    long ag;\n    long ah;\n\
    \    long ai;\n    long aj;\n    long ak;\n    long al;\n    long am;\n    long\
    \ an;\n    long ao;\n    long ap;\n    long aq;\n    long ar;\n    long as;\n\
    \    long at;\n    long au;\n    long av;\n    long aw;\n    long ax;\n    long\
    \ ay;\n    long az;\n    long ba;\n    long bb;\n    long bc;\n    long bd;\n\
    \    long be;\n    long bf;\n    long bg;\n    long bh;\n    long bi;\n    long\
    \ bj;\n    long bk;\n    long bl;\n    long bm;\n    long bn;\n    long bo;\n\
    \    long bp;\n    long bq;\n    long br;\n    long bs;\n    long bt;\n    long\
    \ bu;\n    long bv;\n    long bw;\n    long bx;\n    long by;\n    long bz;\n\
    \    long ca;\n    long cb;\n    long cc;\n    long cd;\n    long ce;\n    long\
    \ cf;\n    long cg;\n    long ch;\n    long ci;\n    long cj;\n    long ck;\n\
    \    long cl;\n    long cm;\n    long cn;\n    long co;\n    long cp;\n    long\
    \ cq;\n    long cr;\n    long cs;\n    long ct;\n    long cu;\n   \nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpazzffv5j.d(109): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazzffv5j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_depth++;\n      \
    \      max_depth = max(max_depth, current_depth);\n        }\n        else if(c\
    \ == ')')\n        {\n            current_depth--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpns3_kkc_.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpns3_kkc_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int max_nesting = 0;\n    int nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            nesting++;\n            max_nesting\
    \ = max(max_nesting, nesting);\n        }\n        else if(c == ')')\n       \
    \ {\n            nesting--;\n        }\n        else if(c == ' ')\n        {\n\
    \            result ~= max_nesting;\n            max_nesting = 0;\n          \
    \  nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfkpy07cx.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkpy07cx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n   \
    \ int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj =\
    \ 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n   \
    \ int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as =\
    \ 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n   \
    \ int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb =\
    \ 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n   \
    \ int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk =\
    \ 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n   \
    \ int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt =\
    \ 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n   \n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppquhbw11.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppquhbw11.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int i;\n    int j;\n    int max_level;\n    int level;\n    int len;\n  \
    \  char c;\n    int start;\n    int end;\n    int[] paren_count;\n    int[] paren_count_max;\n\
    \    int[] paren_count_min;\n    int[] paren_count_max_index;\n    int[] paren_count_min_index;\n\
    \    int[] paren_count_max_index_start;\n    int[] paren_count_max_index_end;\n\
    \    int[] paren_count_min_index_start;\n    int[] paren_count_min_index_end;\n\
    \    int[] paren_count_max_index_start_end;\n    int[] paren_count_min_index_start_end;\n\
    \    int[] paren_count_max_index_start_end_start;\n    int[] paren_count_min_index_start_end_start;\n\
    \    int[] paren_count_max_index_start_end_end;\n    int[] paren_count_min_index_start_end_end;\n\
    \    int[] paren_count_max_index_start_end_start_end;\n    int[] paren_count_min_index_start_end_start_end;\n\
    \    int[] paren_count_max_index_start_end_start_end_start;\n    int[] paren_count_min_index_start_end_start_end_start;\n\
    \    int[] paren_count_max_index_start_end_start_end_end;\n    int[] paren_count_min_index_start_end_start_end_end;\n\
    \    int[] paren_count_max_index_start_end_start_end_start_end;\n    int[] paren_count_min_index_start_end_start_end_start_end;\n\
    \    int[] paren_count_max_index_start_end_start_end_start_end_start;\n    int[]\
    \ paren_count_min_index_start_end_start_end_start_end\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph0j117zx.d(48): Error: semicolon expected, not `unittest`\\n/tmp/tmph0j117zx.d(48):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmph0j117zx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ foreach(char c; paren_string)\n    {\n        if(c == '(')\n        {\n    \
    \        stack ~= 1;\n            max_depth = max(max_depth, stack.length);\n\
    \        }\n        else if(c == ')')\n        {\n            stack.pop;\n   \
    \     }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdi7cpvy9.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpdi7cpvy9.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpdi7cpvy9.d(22):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpdi7cpvy9.d(26):\
    \ Error: no property `pop` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdi7cpvy9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            current_depth++;\n  \
    \          max_depth = max(max_depth, current_depth);\n        } \n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        } \n       \
    \ else if(c == ' ') \n        {\n            if(current_depth != 0) \n       \
    \     {\n                result ~= max_depth;\n                max_depth = 0;\n\
    \                current_depth = 0;\n            }\n        }\n    }\n    if(current_depth\
    \ != 0) \n    {\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9twpny0z.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9twpny0z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    foreach (paren_group; paren_string.split)\
    \ \n    {\n        stack = [];\n        max_depth = 0;\n        foreach (paren;\
    \ paren_group) \n        {\n            if (paren == '(') \n            {\n  \
    \              stack ~= 1;\n                max_depth = max(max_depth, stack.length);\n\
    \            } \n            else if (paren == ')') \n            {\n        \
    \        stack.pop;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmouom9m8.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmouom9m8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n\
    \        int max_depth = 0;\n        int depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n                depth++;\n         \
    \   else if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkmba7296.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkmba7296.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    foreach (paren; paren_string) \n    {\n        if (paren ==\
    \ '(') \n        {\n            stack ~= 1;\n            depth++;\n          \
    \  max_depth = max(max_depth, depth);\n        } \n        else if (paren == ')')\
    \ \n        {\n            stack.pop;\n            depth--;\n        } \n    \
    \    else if (paren == ' ') \n        {\n            result ~= max_depth;\n  \
    \          max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc3g_6lne.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpc3g_6lne.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpc3g_6lne.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpc3g_6lne.d(28):\
    \ Error: no property `pop` for type `int[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpc3g_6lne.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string) \n\
    \    {\n        if (c == '(') \n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if (c == ')') \n        {\n\
    \            depth--;\n        }\n        else if (c == ' ') \n        {\n   \
    \         result ~= max_depth;\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpojyntwdd.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpojyntwdd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long len;\n    long len2;\n    long len3;\n    char c;\n    char c2;\n\
    \    char c3;\n    string paren_string2;\n    string paren_string3;\n    string\
    \ paren_string4;\n    string paren_string5;\n    string paren_string6;\n    string\
    \ paren_string7;\n    string paren_string8;\n    string paren_string9;\n    string\
    \ paren_string10;\n    string paren_string11;\n    string paren_string12;\n  \
    \  string paren_string13;\n    string paren_string14;\n    string paren_string15;\n\
    \    string paren_string16;\n    string paren_string17;\n    string paren_string18;\n\
    \    string paren_string19;\n    string paren_string20;\n    string paren_string21;\n\
    \    string paren_string22;\n    string paren_string23;\n    string paren_string24;\n\
    \    string paren_string25;\n    string paren_string26;\n    string paren_string27;\n\
    \    string paren_string28;\n    string paren_string29;\n    string paren_string30;\n\
    \    string paren_string31;\n    string paren_string32;\n    string paren_string33;\n\
    \    string paren_string34;\n    string paren_string35;\n    string paren_string36;\n\
    \    string paren_string37;\n    string paren_string38;\n    string paren_string39;\n\
    \    string paren_string40;\n    string paren_string41;\n    string paren_string42;\n\
    \    string paren_string43;\n    string paren_string44;\n    string paren_string45;\n\
    \    string paren_string46;\n    string paren_string47;\n    string paren_string48;\n\
    \    string paren_string49;\n    string paren_string50;\n\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9wq_jx1v.d(76): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wq_jx1v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long len;\n    long len2;\n    char c;\n    stack = [];\n    result\
    \ = [];\n    max_depth = 0;\n    depth = 0;\n    len = paren_string.length;\n\
    \    for (i = 0; i < len; i++) \n    {\n        c = paren_string[i];\n       \
    \ if (c == '(') \n        {\n            stack.push(i);\n            depth++;\n\
    \            max_depth = max(max_depth, depth);\n        }\n        else if (c\
    \ == ')') \n        {\n            stack.pop();\n            depth--;\n      \
    \  }\n        else if (c == ' ') \n        {\n            if (stack.length ==\
    \ 0) \n            {\n                result.push(max_depth);\n              \
    \  max_depth = 0;\n                depth = 0;\n            }\n        }\n    }\n\
    \    if (stack.length == 0) \n    {\n        result.push(max_depth);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd56zsbb5.d(33): Error: no property `push` for type `long[]`\\\
    n/tmp/tmpd56zsbb5.d(35): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\n/tmp/tmpd56zsbb5.d(39): Error: no property `pop` for type `long[]`\\\
    n/tmp/tmpd56zsbb5.d(46): Error: no property `push` for type `long[]`\\n/tmp/tmpd56zsbb5.d(54):\
    \ Error: no property `push` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpd56zsbb5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ len;\n    long paren_count;\n    long paren_start;\n    long paren_end;\n  \
    \  string paren_group;\n    string[] paren_groups;\n    paren_groups = paren_string.split(\"\
    \ \");\n    foreach(paren_group; paren_groups)\n    {\n        stack = [];\n \
    \       max_depth = 0;\n        depth = 0;\n        paren_count = 0;\n       \
    \ paren_start = 0;\n        paren_end = 0;\n        len = paren_group.length;\n\
    \        for(i = 0; i < len; i++)\n        {\n            if(paren_group[i] ==\
    \ '(')\n            {\n                stack ~= 1;\n                depth += 1;\n\
    \                paren_count += 1;\n                if(paren_count == 1)\n   \
    \             {\n                    paren_start = i;\n                }\n   \
    \         }\n            else if(paren_group[i] == ')')\n            {\n     \
    \           stack.pop();\n                depth -= 1;\n                paren_count\
    \ -= 1;\n                if(paren_count == 0)\n                {\n           \
    \         paren_end = i;\n                    max_depth = max(max_depth, paren_end\
    \ - paren_start + 1);\n                }\n            }\n        }\n        result\
    \ ~= max_depth;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6jv793pk.d(25): Error: no property `split` for type `string`\\\
    n/tmp/tmp6jv793pk.d(26): Error: variable `paren_group` is shadowing variable `tmp6jv793pk.parse_nested_parens.paren_group`\\\
    n/tmp/tmp6jv793pk.d(49): Error: no property `pop` for type `long[]`\\n/tmp/tmp6jv793pk.d(55):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jv793pk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    foreach (paren_group;\
    \ paren_string.split)\n    {\n        max_depth = 0;\n        depth = 0;\n   \
    \     stack = [];\n        foreach (paren; paren_group)\n        {\n         \
    \   if (paren == '(')\n            {\n                stack ~= paren;\n      \
    \          depth += 1;\n                max_depth = max(max_depth, depth);\n \
    \           }\n            else if (paren == ')')\n            {\n           \
    \     stack.pop;\n                depth -= 1;\n            }\n        }\n    \
    \    assert(stack.empty);\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ooh9r9s.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ooh9r9s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_depth++;\n      \
    \      max_depth = max(max_depth, current_depth);\n        }\n        else if(c\
    \ == ')')\n        {\n            current_depth--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4tj_qs5.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4tj_qs5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string) \n\
    \    {\n        if (c == '(') \n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        } \n        else if (c == ')') \n        {\n\
    \            depth--;\n        } \n        else if (c == ' ') \n        {\n  \
    \          result ~= max_depth;\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbcbd886v.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcbd886v.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split(\" \")) \n    {\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach(paren; paren_group) \n      \
    \  {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')') \n            {\n                depth--;\n        \
    \    }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg0hsfaw_.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0hsfaw_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    int i = 0;\n    while (i < paren_string.length) \n    {\n  \
    \      if (paren_string[i] == '(') \n        {\n            stack.push(i);\n \
    \           depth++;\n            if (depth > max_depth) \n            {\n   \
    \             max_depth = depth;\n            }\n        } \n        else if (paren_string[i]\
    \ == ')') \n        {\n            if (stack.length == 0) \n            {\n  \
    \              throw new Exception(\"Invalid string\");\n            }\n     \
    \       stack.pop();\n            depth--;\n        } \n        else if (paren_string[i]\
    \ == ' ') \n        {\n            if (stack.length == 0) \n            {\n  \
    \              result.push(max_depth);\n                max_depth = 0;\n     \
    \       }\n        } \n        else \n        {\n            throw new Exception(\"\
    Invalid string\");\n        }\n        i++;\n    }\n    if (stack.length != 0)\
    \ \n    {\n        throw new Exception(\"Invalid string\");\n    }\n    result.push(max_depth);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppg1sy8e7.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmppg1sy8e7.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmppg1sy8e7.d(23):\
    \ Error: no property `push` for type `int[]`\\n/tmp/tmppg1sy8e7.d(36): Error:\
    \ no property `pop` for type `int[]`\\n/tmp/tmppg1sy8e7.d(43): Error: no property\
    \ `push` for type `long[]`\\n/tmp/tmppg1sy8e7.d(57): Error: no property `push`\
    \ for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppg1sy8e7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long current_level = 0;\n    long max_level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp07hycbjh.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp07hycbjh.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp07hycbjh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long[] max_stack = new long[];\n\
    \    foreach(char c; paren_string)\n    {\n        if(c == '(')\n        {\n \
    \           stack ~= 1;\n            if(max_stack.length == 0)\n            {\n\
    \                max_stack ~= 1;\n            }\n            else\n          \
    \  {\n                max_stack[$-1] += 1;\n            }\n        }\n       \
    \ else if(c == ')')\n        {\n            if(stack.length == 0)\n          \
    \  {\n                throw new Exception(\"Invalid string\");\n            }\n\
    \            else\n            {\n                stack[$-1] -= 1;\n         \
    \       if(stack[$-1] == 0)\n                {\n                    stack.length\
    \ -= 1;\n                    result ~= max_stack[$-1];\n                    max_stack.length\
    \ -= 1;\n                }\n            }\n        }\n        else if(c == ' ')\n\
    \        {\n            if(stack.length != 0)\n            {\n               \
    \ throw new Exception(\"Invalid string\");\n            }\n        }\n       \
    \ else\n        {\n            throw new Exception(\"Invalid string\");\n    \
    \    }\n    }\n    if(stack.length != 0)\n    {\n        throw new Exception(\"\
    Invalid string\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzw723mn6.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpzw723mn6.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpzw723mn6.d(16):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `long[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzw723mn6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    foreach (c; paren_string) \n    {\n        if (c == '(') \n\
    \        {\n            stack ~= 1;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        } \n        else if (c == ')') \n        {\n\
    \            stack ~= -1;\n            depth--;\n        } \n        else if (c\
    \ == ' ') \n        {\n            if (stack.length > 0) \n            {\n   \
    \             result ~= max_depth;\n                max_depth = 0;\n         \
    \       depth = 0;\n                stack = new int[];\n            }\n      \
    \  }\n    }\n    if (stack.length > 0) \n    {\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp57g_c3wp.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp57g_c3wp.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmp57g_c3wp.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmp57g_c3wp.d(38):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `int[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57g_c3wp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int max_depth = 0;\n    int current_depth = 0;\n    foreach(char\
    \ c; paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5dbjybci.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp5dbjybci.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5dbjybci.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    foreach (paren_group;\
    \ paren_string.split) \n    {\n        stack = [];\n        max_depth = 0;\n \
    \       depth = 0;\n        foreach (paren; paren_group) \n        {\n       \
    \     if (paren == '(') \n            {\n                stack ~= depth;\n   \
    \             depth += 1;\n                max_depth = max(max_depth, depth);\n\
    \            } \n            else if (paren == ')') \n            {\n        \
    \        depth = stack.pop;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy7xk4_d6.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy7xk4_d6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    string[] groups = paren_string.split(\" \");\n    foreach(string\
    \ group; groups)\n    {\n        long max_level = 0;\n        long level = 0;\n\
    \        foreach(char c; group)\n        {\n            if(c == '(')\n       \
    \     {\n                level++;\n                max_level = max(max_level,\
    \ level);\n            }\n            else if(c == ')')\n            {\n     \
    \           level--;\n            }\n        }\n        result ~= max_level;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfex7tng_.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpfex7tng_.d(15): Error: no property\
    \ `split` for type `string`\\n/tmp/tmpfex7tng_.d(25): Error: undefined identifier\
    \ `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfex7tng_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    int i = 0;\n    while (i < paren_string.length) \n    {\n  \
    \      if (paren_string[i] == '(') \n        {\n            stack.push(i);\n \
    \           depth++;\n            max_depth = max(max_depth, depth);\n       \
    \ } \n        else if (paren_string[i] == ')') \n        {\n            stack.pop();\n\
    \            depth--;\n        } \n        else if (paren_string[i] == ' ') \n\
    \        {\n            result.push(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n        i++;\n    }\n    result.push(max_depth);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpftgjgrl1.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpftgjgrl1.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpftgjgrl1.d(23):\
    \ Error: no property `push` for type `int[]`\\n/tmp/tmpftgjgrl1.d(25): Error:\
    \ undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpftgjgrl1.d(29):\
    \ Error: no property `pop` for type `int[]`\\n/tmp/tmpftgjgrl1.d(34): Error: no\
    \ property `push` for type `long[]`\\n/tmp/tmpftgjgrl1.d(40): Error: no property\
    \ `push` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpftgjgrl1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long n;\n    long m;\n    long len;\n    long len_paren_string;\n  \
    \  long[] paren_string_split;\n    string paren_string_split_i;\n    len_paren_string\
    \ = paren_string.length;\n    paren_string_split = paren_string.split(' ');\n\
    \    n = paren_string_split.length;\n    result = new long[];\n    for (i = 0;\
    \ i < n; i++) {\n        paren_string_split_i = paren_string_split[i];\n     \
    \   len = paren_string_split_i.length;\n        stack = new long[];\n        max_depth\
    \ = 0;\n        depth = 0;\n        for (j = 0; j < len; j++) {\n            if\
    \ (paren_string_split_i[j] == '(') {\n                stack ~= 1;\n          \
    \      depth++;\n                max_depth = max(max_depth, depth);\n        \
    \    } else if (paren_string_split_i[j] == ')') {\n                stack ~= -1;\n\
    \                depth--;\n            }\n        }\n        m = stack.length;\n\
    \        if (m == 0) {\n            result ~= max_depth;\n        } else {\n \
    \           result ~= -1;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdkh2161r.d(27): Error: no property `split` for type `string`\\\
    n/tmp/tmpdkh2161r.d(29): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `long[]`\\'s\\n/tmp/tmpdkh2161r.d(31): Error: cannot implicitly\
    \ convert expression `paren_string_split[cast(ulong)i]` of type `long` to `string`\\\
    n/tmp/tmpdkh2161r.d(33): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `long[]`\\'s\\n/tmp/tmpdkh2161r.d(40): Error: undefined identifier\
    \ `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpdkh2161r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int count = 0;\n    int max_count = 0;\n    foreach(c; paren_string)\n  \
    \  {\n        if(c == '(')\n        {\n            count++;\n            max_count\
    \ = max(max_count, count);\n        }\n        else if(c == ')')\n        {\n\
    \            count--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_count;\n            max_count = 0;\n            count =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcf6zyqbn.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcf6zyqbn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n         \
    \   stack ~= 1;\n            max_depth = max(max_depth, stack.length);\n     \
    \   }\n        else if(c == ')')\n        {\n            stack.pop;\n        }\n\
    \        else if(c == ' ')\n        {\n            result ~= max_depth;\n    \
    \        max_depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz1n952em.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpz1n952em.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpz1n952em.d(22):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpz1n952em.d(26):\
    \ Error: no property `pop` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpz1n952em.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int max_nesting = 0;\n    int current_nesting = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_nesting++;\n\
    \            max_nesting = max(max_nesting, current_nesting);\n        }\n   \
    \     else if(c == ')')\n        {\n            current_nesting--;\n        }\n\
    \        else if(c == ' ')\n        {\n            result ~= max_nesting;\n  \
    \          max_nesting = 0;\n            current_nesting = 0;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpscpbibol.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpscpbibol.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpscpbibol.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long depth = 0;\n    long max_depth = 0;\n    foreach(c; paren_string) \n\
    \    {\n        if (c == '(') \n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if (c == ')') \n        {\n\
    \            depth--;\n        }\n        else if (c == ' ') \n        {\n   \
    \         result ~= max_depth;\n            max_depth = 0;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6lanlf3g.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lanlf3g.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_level;\n    foreach(paren_group; paren_string.split)\n\
    \    {\n        stack = [];\n        max_level = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                stack\
    \ ~= 1;\n                max_level = max(max_level, stack.length);\n         \
    \   }\n            else if(paren == ')')\n            {\n                stack.pop;\n\
    \            }\n        }\n        result ~= max_level;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8uhwxo43.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8uhwxo43.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long cur_nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            cur_nesting++;\n        \
    \    max_nesting = max(max_nesting, cur_nesting);\n        }\n        else if(c\
    \ == ')')\n        {\n            cur_nesting--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_nesting;\n            max_nesting\
    \ = 0;\n            cur_nesting = 0;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvnz_jyq5.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvnz_jyq5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    auto paren_groups\
    \ = paren_string.split;\n    long[] max_nesting_levels;\n    foreach(paren_group;\
    \ paren_groups) \n    {\n        long max_nesting_level = 0;\n        long current_nesting_level\
    \ = 0;\n        foreach(paren; paren_group) \n        {\n            if(paren\
    \ == '(') \n            {\n                current_nesting_level++;\n        \
    \        max_nesting_level = max(max_nesting_level, current_nesting_level);\n\
    \            }\n            else if(paren == ')') \n            {\n          \
    \      current_nesting_level--;\n            }\n        }\n        max_nesting_levels\
    \ ~= max_nesting_level;\n    }\n    return max_nesting_levels;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmi82tix7.d(14): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmi82tix7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    foreach (paren_group;\
    \ paren_string.split(\" \")) \n    {\n        max_depth = 0;\n        depth =\
    \ 0;\n        stack = [];\n        foreach (paren; paren_group) \n        {\n\
    \            if (paren == '(') \n            {\n                depth++;\n   \
    \             stack ~= depth;\n            }\n            else if (paren == ')')\
    \ \n            {\n                stack.pop();\n                depth = stack.length\
    \ ? stack[$-1] : 0;\n            }\n            max_depth = max(max_depth, depth);\n\
    \        }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp02yp947w.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02yp947w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    int len = paren_string.length;\n    while (i < len)\n    {\n\
    \        if (paren_string[i] == '(')\n        {\n            depth++;\n      \
    \      if (depth > max_depth)\n            {\n                max_depth = depth;\n\
    \            }\n        }\n        else if (paren_string[i] == ')')\n        {\n\
    \            depth--;\n        }\n        else if (paren_string[i] == ' ')\n \
    \       {\n            result[j] = max_depth;\n            j++;\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n        i++;\n    }\n    result[j]\
    \ = max_depth;\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnga90xxy.d(20): Error: cannot implicitly convert expression `paren_string.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpnga90xxy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n   \nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ilvedyz.d(109): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ilvedyz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n    foreach\
    \ (c; paren_string) \n    {\n        if (c == '(') \n        {\n            depth++;\n\
    \            max_depth = max(max_depth, depth);\n        } \n        else if (c\
    \ == ')') \n        {\n            depth--;\n        } \n        else if (c ==\
    \ ' ') \n        {\n            if (depth != 0) \n            {\n            \
    \    throw new Exception(\"Invalid input\");\n            }\n            result\
    \ ~= max_depth;\n            max_depth = 0;\n        } \n        else \n     \
    \   {\n            throw new Exception(\"Invalid input\");\n        }\n    }\n\
    \    if (depth != 0) \n    {\n        throw new Exception(\"Invalid input\");\n\
    \    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkbtmp7i7.d(23): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbtmp7i7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int max_nesting = 0;\n    int current_nesting = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            current_nesting++;\n\
    \            max_nesting = max(max_nesting, current_nesting);\n        }\n   \
    \     else if(c == ')') \n        {\n            current_nesting--;\n        }\n\
    \        else if(c == ' ') \n        {\n            result ~= max_nesting;\n \
    \           max_nesting = 0;\n            current_nesting = 0;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphjjbgvgt.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjjbgvgt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string) \n\
    \    {\n        if (c == '(') \n        {\n            depth += 1;\n         \
    \   max_depth = max(max_depth, depth);\n        }\n        else if (c == ')')\
    \ \n        {\n            depth -= 1;\n        }\n        else if (c == ' ')\
    \ \n        {\n            result ~= max_depth;\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc7uawo1e.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7uawo1e.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int count = 0;\n    int max = 0;\n    foreach(c; paren_string)\n    {\n \
    \       if(c == '(')\n        {\n            count++;\n            if(count >\
    \ max)\n            {\n                max = count;\n            }\n        }\n\
    \        else if(c == ')')\n        {\n            count--;\n        }\n     \
    \   else if(c == ' ')\n        {\n            result ~= max;\n            max\
    \ = 0;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_nyhiig9.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428385]\\n??:? void tmp_nyhiig9.__unittest_L40_C1()\
    \ [0x427f71]\\n??:? void tmp_nyhiig9.__modtest() [0x428104]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cd5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bbee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430641]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bbc5]\\n??:? runModuleUnitTests [0x42cb31]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42875b]\\n??:? _d_run_main [0x4286c6]\\n??:? main [0x428117]\\\
    n??:? __libc_start_main [0x70d40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string) \n    {\n        if (c == '(')\
    \ \n        {\n            depth++;\n            max_depth = max(max_depth, depth);\n\
    \        } \n        else if (c == ')') \n        {\n            depth--;\n  \
    \      } \n        else if (c == ' ') \n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6maxzsl5.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp6maxzsl5.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmp6maxzsl5.d(23):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6maxzsl5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    foreach (paren_group;\
    \ paren_string.split(\" \")) \n    {\n        stack = [];\n        max_depth =\
    \ 0;\n        depth = 0;\n        foreach (paren; paren_group) \n        {\n \
    \           if (paren == '(') \n            {\n                stack ~= paren;\n\
    \                depth += 1;\n                max_depth = max(max_depth, depth);\n\
    \            }\n            else if (paren == ')') \n            {\n         \
    \       stack.pop();\n                depth -= 1;\n            }\n        }\n\
    \        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzwoz6f04.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwoz6f04.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            current_depth++;\n  \
    \          max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8x1obe5x.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8x1obe5x.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n\
    \        long max_depth = 0;\n        long current_depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_depth += 1;\n                max_depth = max(max_depth, current_depth);\n\
    \            }\n            else if(paren == ')')\n            {\n           \
    \     current_depth -= 1;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmputl4y_7m.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmputl4y_7m.d(15): Error: no property\
    \ `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmputl4y_7m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long len;\n    long len2;\n    char c;\n    foreach(paren_string; paren_string.split(\"\
    \ \"))\n    {\n        stack = [];\n        max_depth = 0;\n        depth = 0;\n\
    \        i = 0;\n        len = paren_string.length;\n        while(i < len)\n\
    \        {\n            c = paren_string[i];\n            if(c == '(')\n     \
    \       {\n                stack.push(i);\n                depth++;\n        \
    \        if(depth > max_depth)\n                {\n                    max_depth\
    \ = depth;\n                }\n            }\n            else if(c == ')')\n\
    \            {\n                if(stack.length == 0)\n                {\n   \
    \                 throw new Exception(\"Invalid input\");\n                }\n\
    \                stack.pop();\n                depth--;\n            }\n     \
    \       i++;\n        }\n        if(stack.length != 0)\n        {\n          \
    \  throw new Exception(\"Invalid input\");\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphlcnp_j0.d(23): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlcnp_j0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    foreach(paren; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(c; paren)\n \
    \       {\n            if(c == '(')\n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(c == ')')\n            {\n                depth--;\n            }\n\
    \        }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu84wzt50.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpu84wzt50.d(15): Error: no property\
    \ `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpu84wzt50.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    foreach (paren_group;\
    \ paren_string.split) \n    {\n        stack = [];\n        max_depth = 0;\n \
    \       depth = 0;\n        foreach (paren; paren_group) \n        {\n       \
    \     if (paren == '(') \n            {\n                stack ~= 1;\n       \
    \         depth += 1;\n                max_depth = max(max_depth, depth);\n  \
    \          } \n            else if (paren == ')') \n            {\n          \
    \      stack ~= -1;\n                depth -= 1;\n            }\n        }\n \
    \       if (stack.sum != 0) \n        {\n            throw new Exception(\"Invalid\
    \ paren string\");\n        }\n        result ~= max_depth;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4iv6sn4d.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4iv6sn4d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_31xlvbz.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_31xlvbz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int start = 0;\n    int end = 0;\n    int max_depth = 0;\n\
    \    int depth = 0;\n    while (end < paren_string.length) \n    {\n        if\
    \ (paren_string[end] == '(') \n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if (paren_string[end] == ')')\
    \ \n        {\n            depth--;\n        }\n        else if (paren_string[end]\
    \ == ' ') \n        {\n            if (depth == 0) \n            {\n         \
    \       result ~= max_depth;\n                max_depth = 0;\n               \
    \ start = end + 1;\n            }\n        }\n        end++;\n    }\n    if (depth\
    \ == 0) \n    {\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplaj0vrsp.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmplaj0vrsp.d(24): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmplaj0vrsp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long len;\n    long len2;\n    char c;\n    foreach(paren_group; paren_string.split(\"\
    \ \"))\n    {\n        stack = new long[];\n        max_depth = 0;\n        depth\
    \ = 0;\n        len = paren_group.length;\n        for(i = 0; i < len; i++)\n\
    \        {\n            c = paren_group[i];\n            if(c == '(')\n      \
    \      {\n                stack ~= 1;\n                depth++;\n            \
    \    max_depth = max(max_depth, depth);\n            }\n            else if(c\
    \ == ')')\n            {\n                stack ~= -1;\n                depth--;\n\
    \            }\n        }\n        len2 = stack.length;\n        for(j = 0; j\
    \ < len2; j++)\n        {\n            if(stack[j] == -1)\n            {\n   \
    \             stack[j] = 1;\n            }\n            else\n            {\n\
    \                stack[j] = 0;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3ibckna.d(23): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3ibckna.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split(\" \")) \n    {\n        long max_depth\
    \ = 0;\n        long current_depth = 0;\n        foreach(paren; paren_group) \n\
    \        {\n            if(paren == '(') \n            {\n                current_depth++;\n\
    \                max_depth = max(max_depth, current_depth);\n            } \n\
    \            else if(paren == ')') \n            {\n                current_depth--;\n\
    \            }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qgpdl9s.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qgpdl9s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long current_level;\n    long max_level;\n    foreach\
    \ (paren_group; paren_string.split)\n    {\n        stack = [];\n        current_level\
    \ = 0;\n        max_level = 0;\n        foreach (paren; paren_group)\n       \
    \ {\n            if (paren == '(')\n            {\n                stack ~= current_level;\n\
    \                current_level++;\n                max_level = max(max_level,\
    \ current_level);\n            }\n            else if (paren == ')')\n       \
    \     {\n                if (stack.length == 0)\n                {\n         \
    \           throw new Exception(\"Invalid paren string\");\n                }\n\
    \                current_level = stack.pop;\n            }\n        }\n      \
    \  if (stack.length != 0)\n        {\n            throw new Exception(\"Invalid\
    \ paren string\");\n        }\n        result ~= max_level;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkzn4q12b.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzn4q12b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int start = 0;\n    int end = 0;\n    int max_depth = 0;\n\
    \    int depth = 0;\n    while (end < paren_string.length) \n    {\n        if\
    \ (paren_string[end] == '(') \n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        } \n        else if (paren_string[end] ==\
    \ ')') \n        {\n            depth--;\n        } \n        else if (paren_string[end]\
    \ == ' ') \n        {\n            if (depth == 0) \n            {\n         \
    \       result ~= max_depth;\n                max_depth = 0;\n               \
    \ start = end + 1;\n            }\n        }\n        end++;\n    }\n    if (depth\
    \ == 0) \n    {\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn8xo7erz.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpn8xo7erz.d(24): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpn8xo7erz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            nesting++;\n       \
    \     max_nesting = max(max_nesting, nesting);\n        }\n        else if (c\
    \ == ')') \n        {\n            nesting--;\n        }\n        else if (c ==\
    \ ' ') \n        {\n            result ~= max_nesting;\n            max_nesting\
    \ = 0;\n            nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyrgaxsae.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrgaxsae.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ paren_count;\n    long group_count;\n    long group_start;\n    long group_end;\n\
    \    long group_length;\n    long group_index;\n    long group_depth;\n    long\
    \ group_depth_index;\n    long group_depth_count;\n    long group_depth_start;\n\
    \    long group_depth_end;\n    long group_depth_length;\n    long group_depth_index;\n\
    \    long group_depth_depth;\n    long group_depth_depth_index;\n    long group_depth_depth_count;\n\
    \    long group_depth_depth_start;\n    long group_depth_depth_end;\n    long\
    \ group_depth_depth_length;\n    long group_depth_depth_index;\n    long group_depth_depth_depth;\n\
    \    long group_depth_depth_depth_index;\n    long group_depth_depth_depth_count;\n\
    \    long group_depth_depth_depth_start;\n    long group_depth_depth_depth_end;\n\
    \    long group_depth_depth_depth_length;\n    long group_depth_depth_depth_index;\n\
    \    long group_depth_depth_depth_depth;\n    long group_depth_depth_depth_depth_index;\n\
    \    long group_depth_depth_depth_depth_count;\n    long group_depth_depth_depth_depth_start;\n\
    \    long group_depth_depth_depth_depth_end;\n    long group_depth_depth_depth_depth_length;\n\
    \    long group_depth_depth_depth_depth_index;\n    long group_depth_depth_depth_depth_depth;\n\
    \    long group_depth_depth_depth_depth_depth_index;\n    long group_depth_depth_depth_depth_depth_count;\n\
    \    long group_depth_depth_depth_depth_depth_start;\n    long group_depth_depth_depth_depth_depth_end;\n\
    \    long group_depth_depth_depth_depth_depth_length;\n    long group_depth_depth_depth\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0f4ux4p.d(60): Error: semicolon expected, not `unittest`\\n/tmp/tmpe0f4ux4p.d(60):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpe0f4ux4p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n         \
    \   stack ~= 1;\n            max_depth = max(max_depth, stack.length);\n     \
    \   }\n        else if(c == ')')\n        {\n            stack.popBack();\n  \
    \      }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5dgii0dh.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp5dgii0dh.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmp5dgii0dh.d(22):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmp5dgii0dh.d(26):\
    \ Error: no property `popBack` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5dgii0dh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n    long i =\
    \ 0;\n    foreach (c; paren_string)\n    {\n        if (c == '(')\n        {\n\
    \            depth++;\n            max_depth = max(max_depth, depth);\n      \
    \  }\n        else if (c == ')')\n        {\n            depth--;\n        }\n\
    \        else if (c == ' ')\n        {\n            result ~= max_depth;\n   \
    \         max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplyppdo83.d(24): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplyppdo83.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int max_level = 0;\n    int level = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            level++;\n            max_level\
    \ = max(max_level, level);\n        }\n        else if(c == ')')\n        {\n\
    \            level--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_level;\n            max_level = 0;\n            level =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprm4qj2x1.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmprm4qj2x1.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprm4qj2x1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(char c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_depth++;\n      \
    \      max_depth = max(max_depth, current_depth);\n        }\n        else if(c\
    \ == ')')\n        {\n            current_depth--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4y0yefqk.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4y0yefqk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_level = 0;\n    long level = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            level++;\n            max_level\
    \ = max(max_level, level);\n        }\n        else if(c == ')')\n        {\n\
    \            level--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_level;\n            max_level = 0;\n            level =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1i0c_ire.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1i0c_ire.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long current_nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_nesting++;\n    \
    \        max_nesting = max(max_nesting, current_nesting);\n        }\n       \
    \ else if(c == ')')\n        {\n            current_nesting--;\n        }\n  \
    \      else if(c == ' ')\n        {\n            result ~= max_nesting;\n    \
    \        max_nesting = 0;\n            current_nesting = 0;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpziktajon.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpziktajon.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    foreach(paren_group; paren_string.split(\" \")) \n   \
    \ {\n        stack = [];\n        foreach(paren; paren_group) \n        {\n  \
    \          if(paren == '(') \n            {\n                stack ~= 1;\n   \
    \         } \n            else \n            {\n                stack[$-1] +=\
    \ 1;\n            }\n        }\n        result ~= max(stack);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_tzc6gf0.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_tzc6gf0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_count;\n    long[] paren_depth;\n    long[] paren_max;\n   \
    \ long[] paren_min;\n    long[] paren_max_depth;\n    long[] paren_min_depth;\n\
    \    long[] paren_max_depth_count;\n    long[] paren_min_depth_count;\n    long[]\
    \ paren_max_depth_count_max;\n    long[] paren_min_depth_count_max;\n    long[]\
    \ paren_max_depth_count_min;\n    long[] paren_min_depth_count_min;\n    long[]\
    \ paren_max_depth_count_max_max;\n    long[] paren_min_depth_count_max_max;\n\
    \    long[] paren_max_depth_count_min_min;\n    long[] paren_min_depth_count_min_min;\n\
    \    long[] paren_max_depth_count_max_max_max;\n    long[] paren_min_depth_count_max_max_max;\n\
    \    long[] paren_max_depth_count_min_min_min;\n    long[] paren_min_depth_count_min_min_min;\n\
    \    long[] paren_max_depth_count_max_max_max_max;\n    long[] paren_min_depth_count_max_max_max_max;\n\
    \    long[] paren_max_depth_count_min_min_min_min;\n    long[] paren_min_depth_count_min_min_min_min;\n\
    \    long[] paren_max_depth_count_max_max_max_max_max;\n    long[] paren_min_depth_count_max_max_max_max_max;\n\
    \    long[] paren_max_depth_count_min_min_min_min_min;\n    long[] paren_min_depth_count_min_min_min_min_min;\n\
    \    long[] paren_max_depth_count_max_max_max_max_max_max;\n    long[] paren_min_depth_count_max_\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp71wbjoiq.d(45): Error: semicolon expected, not `unittest`\\n/tmp/tmp71wbjoiq.d(45):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp71wbjoiq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n    foreach\
    \ (c; paren_string) \n    {\n        if (c == '(') \n        {\n            stack\
    \ ~= 1;\n            depth++;\n            max_depth = max(max_depth, depth);\n\
    \        }\n        else if (c == ')') \n        {\n            stack.popBack();\n\
    \            depth--;\n        }\n        else if (c == ' ') \n        {\n   \
    \         result ~= max_depth;\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpha5lxnrj.d(24): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpha5lxnrj.d(28): Error: no property `popBack` for\
    \ type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha5lxnrj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int[] paren_stack;\n    int paren_count;\n    int max_paren_count;\n    foreach(paren_group;\
    \ paren_string.split(\" \")) \n    {\n        paren_stack = [];\n        paren_count\
    \ = 0;\n        max_paren_count = 0;\n        foreach(paren; paren_group) \n \
    \       {\n            if(paren == '(') \n            {\n                paren_stack\
    \ ~= paren_count;\n                paren_count++;\n                max_paren_count\
    \ = max(max_paren_count, paren_count);\n            }\n            else \n   \
    \         {\n                paren_count = paren_stack.pop;\n            }\n \
    \       }\n        result ~= max_paren_count;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1uyuuhm7.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uyuuhm7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n  \
    \  {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmponktvc8g.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponktvc8g.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split(\" \")) \n    {\n        long max_depth\
    \ = 0;\n        long current_depth = 0;\n        foreach(paren; paren_group) \n\
    \        {\n            if(paren == '(') \n            {\n                current_depth++;\n\
    \                max_depth = max(max_depth, current_depth);\n            }\n \
    \           else if(paren == ')') \n            {\n                current_depth--;\n\
    \            }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpswl92oig.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswl92oig.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ cur_depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack ~= 1;\n            cur_depth++;\n            max_depth\
    \ = max(max_depth, cur_depth);\n        }\n        else if(c == ')')\n       \
    \ {\n            stack ~= -1;\n            cur_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            if(stack.length > 0)\n            {\n \
    \               if(stack.sum == 0)\n                {\n                    result\
    \ ~= max_depth;\n                    max_depth = 0;\n                    cur_depth\
    \ = 0;\n                    stack = new int[];\n                }\n          \
    \  }\n        }\n    }\n    if(stack.length > 0)\n    {\n        if(stack.sum\
    \ == 0)\n        {\n            result ~= max_depth;\n            max_depth =\
    \ 0;\n            cur_depth = 0;\n            stack = new int[];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz06r9sjt.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpz06r9sjt.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpz06r9sjt.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpz06r9sjt.d(35):\
    \ Error: no property `sum` for type `int[]`\\n/tmp/tmpz06r9sjt.d(40): Error: new\
    \ can only create structs, dynamic arrays or class objects, not `int[]`\\'s\\\
    n/tmp/tmpz06r9sjt.d(47): Error: no property `sum` for type `int[]`\\n/tmp/tmpz06r9sjt.d(52):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `int[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz06r9sjt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    foreach (c; paren_string)\n    {\n        if (c == '(')\n  \
    \      {\n            stack ~= 1;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if (c == ')')\n        {\n\
    \            stack ~= -1;\n            depth--;\n        }\n        else if (c\
    \ == ' ')\n        {\n            if (stack.length > 0)\n            {\n     \
    \           result ~= max_depth;\n                max_depth = 0;\n           \
    \     depth = 0;\n                stack = new int[];\n            }\n        }\n\
    \    }\n    if (stack.length > 0)\n    {\n        result ~= max_depth;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe72xuv0n.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpe72xuv0n.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpe72xuv0n.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpe72xuv0n.d(38):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `int[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe72xuv0n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string) \n    {\n        if (c == '(')\
    \ \n        {\n            stack ~= 1;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if (c == ')') \n        {\n\
    \            stack ~= -1;\n            depth--;\n        }\n        else if (c\
    \ == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result ~= max_depth;\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbhkeb8sk.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpbhkeb8sk.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpbhkeb8sk.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbhkeb8sk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfjxzs01z.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjxzs01z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long i;\n    long j;\n    long n;\n    long max_nesting;\n\
    \    long[] paren_groups;\n    long[] paren_group;\n    long[] paren_group_nesting;\n\
    \    long[] paren_group_nesting_stack;\n    long[] paren_group_nesting_stack_top;\n\
    \    long[] paren_group_nesting_stack_top_max;\n    long[] paren_group_nesting_stack_top_max_nesting;\n\
    \    long[] paren_group_nesting_stack_top_max_nesting_max;\n    long[] paren_group_nesting_stack_top_max_nesting_max_nesting;\n\
    \    long[] paren_group_nesting_stack_top_max_nesting_max_nesting_max;\n    long[]\
    \ paren_group_nesting_stack_top_max_nesting_max_nesting_max_nesting;\n    long[]\
    \ paren_group_nesting_stack_top_max_nesting_max_nesting_max_nesting_max;\n   \
    \ long[] paren_group_nesting_stack_top_max_nesting_max_nesting_max_nesting_max_nesting;\n\
    \    long[] paren_group_nesting_stack_top_max_nesting_max_nesting_max_nesting_max_nesting_max;\n\
    \    long[] paren_group_nesting_stack_top_max_nesting_max_nesting_max_nesting_max_nesting_max_nesting;\n\
    \    long[] paren_group_nesting_stack_top_max_nesting_max_nesting_max_nesting_max_nesting_max_nesting_max;\n\
    \    long[] paren_group_nesting_stack_top_max_nesting_max_nesting_max_nesting_max_nesting_max_nesting_max_nesting;\n\
    \    long[] paren_group_nesting_stack_top_max_nesting_max_nesting_max_nesting_\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptijikhmb.d(38): Error: semicolon expected, not `unittest`\\n/tmp/tmptijikhmb.d(38):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptijikhmb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long len;\n    long len2;\n    long[] paren_string_split;\n    long[]\
    \ paren_string_split_i;\n    long[] paren_string_split_i_j;\n    paren_string_split\
    \ = paren_string.split(' ');\n    len = paren_string_split.length;\n    result\
    \ = new long[len];\n    for (i = 0; i < len; i++) \n    {\n        stack = new\
    \ long[paren_string_split[i].length];\n        max_depth = 0;\n        depth =\
    \ 0;\n        paren_string_split_i = paren_string_split[i];\n        len2 = paren_string_split_i.length;\n\
    \        for (j = 0; j < len2; j++) \n        {\n            paren_string_split_i_j\
    \ = paren_string_split_i[j];\n            if (paren_string_split_i_j == '(') \n\
    \            {\n                depth++;\n                max_depth = max(max_depth,\
    \ depth);\n            }\n            else if (paren_string_split_i_j == ')')\
    \ \n            {\n                depth--;\n            }\n        }\n      \
    \  result[i] = max_depth;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpni37ig0v.d(25): Error: no property `split` for type `string`\\\
    n/tmp/tmpni37ig0v.d(30): Error: no property `length` for type `long`\\n/tmp/tmpni37ig0v.d(33):\
    \ Error: cannot implicitly convert expression `paren_string_split[cast(ulong)i]`\
    \ of type `long` to `long[]`\\n/tmp/tmpni37ig0v.d(37): Error: cannot implicitly\
    \ convert expression `paren_string_split_i[cast(ulong)j]` of type `long` to `long[]`\\\
    n/tmp/tmpni37ig0v.d(38): Error: incompatible types for `(paren_string_split_i_j)\
    \ == (\\'(\\')`: `long[]` and `char`\\n/tmp/tmpni37ig0v.d(41): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\n/tmp/tmpni37ig0v.d(43): Error:\
    \ incompatible types for `(paren_string_split_i_j) == (\\')\\')`: `long[]` and\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpni37ig0v.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    foreach (c; paren_string)\n    {\n        if (c == '(')\n  \
    \      {\n            stack ~= 1;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if (c == ')')\n        {\n\
    \            stack ~= -1;\n            depth--;\n        }\n        else if (c\
    \ == ' ')\n        {\n            if (stack.length > 0)\n            {\n     \
    \           result ~= max_depth;\n                max_depth = 0;\n           \
    \     depth = 0;\n                stack = new int[];\n            }\n        }\n\
    \    }\n    if (stack.length > 0)\n    {\n        result ~= max_depth;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwgg1hvja.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpwgg1hvja.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpwgg1hvja.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpwgg1hvja.d(38):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `int[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwgg1hvja.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int current_level = 0;\n    int max_level = 0;\n    foreach(char\
    \ c; paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmm27pxm9.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpmm27pxm9.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmm27pxm9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc8e098vk.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8e098vk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ len;\n    long paren_count;\n    long paren_start;\n    long paren_end;\n  \
    \  long paren_len;\n    string paren_group;\n    string[] paren_groups;\n    paren_groups\
    \ = paren_string.split(\" \");\n    len = paren_groups.length;\n    result = new\
    \ long[len];\n    for (i = 0; i < len; i++) {\n        paren_group = paren_groups[i];\n\
    \        paren_count = paren_group.count('(');\n        paren_start = paren_group.find('(');\n\
    \        paren_end = paren_group.rfind(')');\n        paren_len = paren_end -\
    \ paren_start + 1;\n        if (paren_count == 0 || paren_len != paren_count *\
    \ 2) {\n            result[i] = 0;\n            continue;\n        }\n       \
    \ stack = new long[paren_count];\n        max_depth = 0;\n        depth = 0;\n\
    \        for (j = 0; j < paren_len; j++) {\n            if (paren_group[j] ==\
    \ '(') {\n                depth++;\n                max_depth = max(max_depth,\
    \ depth);\n                stack[depth - 1] = j;\n            } else {\n     \
    \           depth--;\n            }\n        }\n        result[i] = max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvcpecj3u.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmpvcpecj3u.d(31): Error: no property `count` for type `string`\\n/tmp/tmpvcpecj3u.d(32):\
    \ Error: no property `find` for type `string`\\n/tmp/tmpvcpecj3u.d(33): Error:\
    \ no property `rfind` for type `string`\\n/tmp/tmpvcpecj3u.d(42): Error: undefined\
    \ identifier `j`\\n/tmp/tmpvcpecj3u.d(42): Error: undefined identifier `j`\\n/tmp/tmpvcpecj3u.d(42):\
    \ Error: undefined identifier `j`\\n/tmp/tmpvcpecj3u.d(43): Error: undefined identifier\
    \ `j`\\n/tmp/tmpvcpecj3u.d(45): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpvcpecj3u.d(46): Error: undefined identifier `j`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcpecj3u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_count;\n    long max_paren_count;\n    long paren_count_len;\n\
    \    long i;\n    long j;\n    long k;\n    long paren_count_index;\n    long\
    \ paren_count_index_max;\n    long paren_count_index_max_old;\n    long paren_count_index_max_old_old;\n\
    \    long paren_count_index_max_old_old_old;\n    long paren_count_index_max_old_old_old_old;\n\
    \    long paren_count_index_max_old_old_old_old_old;\n    long paren_count_index_max_old_old_old_old_old_old;\n\
    \    long paren_count_index_max_old_old_old_old_old_old_old;\n    long paren_count_index_max_old_old_old_old_old_old_old_old;\n\
    \    long paren_count_index_max_old_old_old_old_old_old_old_old_old;\n    long\
    \ paren_count_index_max_old_old_old_old_old_old_old_old_old_old;\n    long paren_count_index_max_old_old_old_old_old_old_old_old_old_old_old;\n\
    \    long paren_count_index_max_old_old_old_old_old_old_old_old_old_old_old_old;\n\
    \    long paren_count_index_max_old_old_old_old_old_old_old_old_old_old_old_old_old;\n\
    \    long paren_count_index_max_old_old_old_old_old_old_old_old_old_old_old_old_old_old;\n\
    \    long paren_count_index_max_old_old_old_old_old_old_old_old_old_old_old_old_old_old_old;\n\
    \    long paren_count_index_max_old_old_old_old\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7zdfthab.d(39): Error: semicolon expected, not `unittest`\\n/tmp/tmp7zdfthab.d(39):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7zdfthab.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string) \n\
    \    {\n        if (c == '(') \n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if (c == ')') \n        {\n\
    \            depth--;\n        }\n        else if (c == ' ') \n        {\n   \
    \         result ~= max_depth;\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxf5umx16.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxf5umx16.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo093btbk.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo093btbk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int i = 0;\n    int j = 0;\n    int max_nesting = 0;\n  \
    \  int current_nesting = 0;\n    while (i < paren_string.length) \n    {\n   \
    \     if (paren_string[i] == '(') \n        {\n            current_nesting++;\n\
    \            max_nesting = max(max_nesting, current_nesting);\n        }\n   \
    \     else if (paren_string[i] == ')') \n        {\n            current_nesting--;\n\
    \        }\n        else if (paren_string[i] == ' ') \n        {\n           \
    \ result ~= max_nesting;\n            max_nesting = 0;\n            current_nesting\
    \ = 0;\n        }\n        i++;\n    }\n    result ~= max_nesting;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp168ujpyq.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp168ujpyq.d(24): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp168ujpyq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpav_yf2f1.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpav_yf2f1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int paren_count = 0;\n    int max_paren_count = 0;\n    foreach(char\
    \ c; paren_string)\n    {\n        if(c == '(')\n        {\n            paren_count++;\n\
    \            max_paren_count = max(max_paren_count, paren_count);\n        }\n\
    \        else if(c == ')')\n        {\n            paren_count--;\n        }\n\
    \        else if(c == ' ')\n        {\n            result ~= max_paren_count;\n\
    \            max_paren_count = 0;\n            paren_count = 0;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz30iuex9.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpz30iuex9.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpz30iuex9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdt868_2q.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdt868_2q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long n;\n    long paren_count;\n    long[] paren_counts;\n    long[]\
    \ paren_counts_temp;\n    long[] paren_counts_temp2;\n    string[] paren_strings;\n\
    \    string[] paren_strings_temp;\n    string[] paren_strings_temp2;\n    string[]\
    \ paren_strings_temp3;\n    string[] paren_strings_temp4;\n    string[] paren_strings_temp5;\n\
    \    string[] paren_strings_temp6;\n    string[] paren_strings_temp7;\n    string[]\
    \ paren_strings_temp8;\n    string[] paren_strings_temp9;\n    string[] paren_strings_temp10;\n\
    \    string[] paren_strings_temp11;\n    string[] paren_strings_temp12;\n    string[]\
    \ paren_strings_temp13;\n    string[] paren_strings_temp14;\n    string[] paren_strings_temp15;\n\
    \    string[] paren_strings_temp16;\n    string[] paren_strings_temp17;\n    string[]\
    \ paren_strings_temp18;\n    string[] paren_strings_temp19;\n    string[] paren_strings_temp20;\n\
    \    string[] paren_strings_temp21;\n    string[] paren_strings_temp22;\n    string[]\
    \ paren_strings_temp23;\n    string[] paren_strings_temp24;\n    string[] paren_strings_temp25;\n\
    \    string[] paren_strings_temp26;\n    string[] paren_strings_temp27;\n    string[]\
    \ paren_strings_temp28;\n    string[] paren_strings_temp29;\n    string[] paren_strings_temp30;\n\
    \    string[] paren_strings_temp31;\n    string[] paren_strings_temp32;\n    string[]\
    \ paren_strings_temp33;\n    string[] paren_strings_temp34;\n    string[] paren_strings_temp35;\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8jb_bkpm.d(61): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jb_bkpm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int max_nesting = 0;\n    int current_nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_nesting++;\n    \
    \        max_nesting = max(max_nesting, current_nesting);\n        }\n       \
    \ else if(c == ')')\n        {\n            current_nesting--;\n        }\n  \
    \      else if(c == ' ')\n        {\n            result ~= max_nesting;\n    \
    \        max_nesting = 0;\n            current_nesting = 0;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1kcdwxfh.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kcdwxfh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    foreach (c; paren_string) \n    {\n        if (c == '(') \n\
    \        {\n            stack ~= 1;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        } \n        else if (c == ')') \n        {\n\
    \            stack ~= -1;\n            depth--;\n        } \n        else if (c\
    \ == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdml057nk.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpdml057nk.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpdml057nk.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdml057nk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(char c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack ~= 1;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            stack ~= -1;\n            depth--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            if(stack.length == 0)\n            {\n     \
    \           continue;\n            }\n            if(stack.back == -1)\n     \
    \       {\n                stack.popBack();\n                result ~= max_depth;\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi7ifsyld.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpi7ifsyld.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpi7ifsyld.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpi7ifsyld.d(37):\
    \ Error: no property `back` for type `long[]`\\n/tmp/tmpi7ifsyld.d(39): Error:\
    \ no property `popBack` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpi7ifsyld.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split)\n    {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        foreach(c; paren_group)\n        {\n  \
    \          if(c == '(')\n                depth++;\n            else if(c == ')')\n\
    \                depth--;\n            max_depth = max(max_depth, depth);\n  \
    \      }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfounwanm.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfounwanm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_depth++;\n      \
    \      max_depth = max(max_depth, current_depth);\n        }\n        else if(c\
    \ == ')')\n        {\n            current_depth--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbcz8fru7.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcz8fru7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpts1k_qup.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpts1k_qup.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int[] paren_count;\n    int max_count;\n    int i;\n    int j;\n    int k;\n\
    \    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int\
    \ r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n\
    \    int y;\n    int z;\n    int aa;\n    int bb;\n    int cc;\n    int dd;\n\
    \    int ee;\n    int ff;\n    int gg;\n    int hh;\n    int ii;\n    int jj;\n\
    \    int kk;\n    int ll;\n    int mm;\n    int nn;\n    int oo;\n    int pp;\n\
    \    int qq;\n    int rr;\n    int ss;\n    int tt;\n    int uu;\n    int vv;\n\
    \    int ww;\n    int xx;\n    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n\
    \    int ccc;\n    int ddd;\n    int eee;\n    int fff;\n    int ggg;\n    int\
    \ hhh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n    int mmm;\n\
    \    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int rrr;\n    int\
    \ sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n    int xxx;\n\
    \    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int cccc;\n   \
    \ int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n    int\
    \ iiii;\n    int jjjj;\n    int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n\
    \    int oooo\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n   \
    \ assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n  \
    \  assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"\
    (()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwjykdev9.d(102): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpwjykdev9.d(102): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjykdev9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n \
    \   long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n \
    \   long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \   \nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo5n7_bx_.d(88): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo5n7_bx_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpid7nv6v0.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid7nv6v0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split)\n    {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n        {\n\
    \            if(paren == '(')\n                depth++;\n            else if(paren\
    \ == ')')\n                depth--;\n            max_depth = max(max_depth, depth);\n\
    \        }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7kvad3t.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7kvad3t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long len;\n    long len_paren_string;\n    char c;\n    len_paren_string\
    \ = paren_string.length;\n    result = new long[];\n    stack = new long[];\n\
    \    max_depth = 0;\n    depth = 0;\n    i = 0;\n    while (i < len_paren_string)\
    \ \n    {\n        c = paren_string[i];\n        if (c == '(') \n        {\n \
    \           stack.push(1);\n            depth += 1;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        else if (c == ')') \n        {\n            stack.pop();\n\
    \            depth -= 1;\n        }\n        else if (c == ' ') \n        {\n\
    \            result.push(max_depth);\n            max_depth = 0;\n           \
    \ depth = 0;\n        }\n        i += 1;\n    }\n    result.push(max_depth);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn84t7mq5.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpn84t7mq5.d(25): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpn84t7mq5.d(34):\
    \ Error: no property `push` for type `long[]`\\n/tmp/tmpn84t7mq5.d(36): Error:\
    \ undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpn84t7mq5.d(40):\
    \ Error: no property `pop` for type `long[]`\\n/tmp/tmpn84t7mq5.d(45): Error:\
    \ no property `push` for type `long[]`\\n/tmp/tmpn84t7mq5.d(51): Error: no property\
    \ `push` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpn84t7mq5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_count;\n    long[] paren_depth;\n    long max_depth;\n    long\
    \ i;\n    long j;\n    long k;\n    long m;\n    long n;\n    long o;\n    long\
    \ p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long\
    \ v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long\
    \ ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long ag;\n\
    \    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n    long\
    \ am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long ar;\n\
    \    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n    long\
    \ ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long bc;\n\
    \    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n    long\
    \ bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long bn;\n\
    \    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n    long\
    \ bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long by;\n\
    \    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n    long\
    \ ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long cj;\n\
    \    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n    long\
    \ cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1kx0jeyo.d(108): Error: no identifier for declarator `long`\\\
    n/tmp/tmp1kx0jeyo.d(108): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kx0jeyo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max_level = 0;\n    int\
    \ level = 0;\n    int len = paren_string.length;\n    while (i < len)\n    {\n\
    \        if (paren_string[i] == '(')\n        {\n            level++;\n      \
    \      if (level > max_level)\n            {\n                max_level = level;\n\
    \            }\n        }\n        else if (paren_string[i] == ')')\n        {\n\
    \            level--;\n        }\n        else if (paren_string[i] == ' ')\n \
    \       {\n            result ~= max_level;\n            max_level = 0;\n    \
    \        level = 0;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqcperaoc.d(20): Error: cannot implicitly convert expression `paren_string.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqcperaoc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            depth++;\n            max_depth = max(max_depth, depth);\n\
    \        }\n        else if(c == ')')\n        {\n            depth--;\n     \
    \   }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwxt90097.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpwxt90097.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpwxt90097.d(23):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxt90097.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long current_depth;\n    long i;\n\
    \    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi4qltm0c.d(109): Error: no identifier for declarator `long`\\\
    n/tmp/tmpi4qltm0c.d(109): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4qltm0c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int i = 0;\n    int max = 0;\n    int count = 0;\n    while\
    \ (i < paren_string.length)\n    {\n        if (paren_string[i] == '(')\n    \
    \    {\n            count++;\n            if (count > max)\n            {\n  \
    \              max = count;\n            }\n        }\n        else if (paren_string[i]\
    \ == ')')\n        {\n            count--;\n        }\n        else if (paren_string[i]\
    \ == ' ')\n        {\n            result ~= max;\n            max = 0;\n     \
    \       count = 0;\n        }\n        i++;\n    }\n    result ~= max;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgk_quvwh.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgk_quvwh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n  \
    \  {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj4kl0uuj.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4kl0uuj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long current_max;\n    long current_index;\n    long current_paren;\n\
    \    long current_char;\n    long current_paren_count;\n    long current_paren_index;\n\
    \    long current_paren_max;\n    long current_paren_max_index;\n    long current_paren_max_count;\n\
    \    long current_paren_max_char;\n    long current_paren_max_char_index;\n  \
    \  long current_paren_max_char_count;\n    long current_paren_max_char_max;\n\
    \    long current_paren_max_char_max_index;\n    long current_paren_max_char_max_count;\n\
    \    long current_paren_max_char_max_char;\n    long current_paren_max_char_max_char_index;\n\
    \    long current_paren_max_char_max_char_count;\n    long current_paren_max_char_max_char_max;\n\
    \    long current_paren_max_char_max_char_max_index;\n    long current_paren_max_char_max_char_max_count;\n\
    \    long current_paren_max_char_max_char_max_char;\n    long current_paren_max_char_max_char_max_char_index;\n\
    \    long current_paren_max_char_max_char_max_char_count;\n    long current_paren_max_char_max_char_max_char_max;\n\
    \    long current_paren_max_char_max_char_max_char_max_index;\n    long current_paren_max_char_max_char_max_char_max_count;\n\
    \    long current_paren_max_char_max_char_max_char_max_char;\n    long current_paren_max_char_max_char_max_char_max_char_index;\n\
    \    long current_paren_max_char_max_char_max_char_max_char_count;\n    long current_paren_max_char_max_char_max_char_max_char_max;\n\
    \    long current_paren_max_char_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4vu5rw2a.d(48): Error: semicolon expected, not `unittest`\\n/tmp/tmp4vu5rw2a.d(48):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4vu5rw2a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            nesting++;\n            max_nesting\
    \ = max(max_nesting, nesting);\n        }\n        else if(c == ')')\n       \
    \ {\n            nesting--;\n        }\n        else if(c == ' ')\n        {\n\
    \            result ~= max_nesting;\n            max_nesting = 0;\n          \
    \  nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphtyr7wl_.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphtyr7wl_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long cur_depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack ~= 1;\n            cur_depth += 1;\n           \
    \ max_depth = max(max_depth, cur_depth);\n        }\n        else if(c == ')')\n\
    \        {\n            stack ~= -1;\n            cur_depth -= 1;\n        }\n\
    \        else if(c == ' ')\n        {\n            if(stack.length > 0)\n    \
    \        {\n                result ~= max_depth;\n                max_depth =\
    \ 0;\n                cur_depth = 0;\n                stack = new long[];\n  \
    \          }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7zssby37.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp7zssby37.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmp7zssby37.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmp7zssby37.d(38):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `long[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zssby37.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int i = 0;\n    while (i < paren_string.length) \n    {\n\
    \        int j = i;\n        int level = 0;\n        while (j < paren_string.length\
    \ && paren_string[j] != ' ') \n        {\n            if (paren_string[j] == '(')\
    \ \n            {\n                level++;\n            } \n            else\
    \ if (paren_string[j] == ')') \n            {\n                level--;\n    \
    \        }\n            j++;\n        }\n        result ~= level;\n        i =\
    \ j + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsqp7ruao.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpsqp7ruao.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long len;\n    long len2;\n    long[] temp;\n    char c;\n    bool is_open;\n\
    \    bool is_close;\n    bool is_space;\n    bool is_paren;\n    bool is_empty;\n\
    \    bool is_not_empty;\n    bool is_not_space;\n    bool is_not_paren;\n    bool\
    \ is_not_open;\n    bool is_not_close;\n    bool is_not_empty_or_space;\n    bool\
    \ is_not_empty_or_paren;\n    bool is_not_empty_or_open;\n    bool is_not_empty_or_close;\n\
    \    bool is_not_space_or_paren;\n    bool is_not_space_or_open;\n    bool is_not_space_or_close;\n\
    \    bool is_not_paren_or_open;\n    bool is_not_paren_or_close;\n    bool is_not_open_or_close;\n\
    \    bool is_not_empty_or_space_or_paren;\n    bool is_not_empty_or_space_or_open;\n\
    \    bool is_not_empty_or_space_or_close;\n    bool is_not_empty_or_paren_or_open;\n\
    \    bool is_not_empty_or_paren_or_close;\n    bool is_not_empty_or_open_or_close;\n\
    \    bool is_not_space_or_paren_or_open;\n    bool is_not_space_or_paren_or_close;\n\
    \    bool is_not_space_or_open_or_close;\n    bool is_not_paren_or_open_or_close;\n\
    \    bool is_not_empty_or_space_or_paren_or_open;\n    bool is_not_empty_or_space_or_paren_or_close;\n\
    \    bool is_not_empty_or_space_or_open_or_close;\n    bool is_not_empty_or_\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxcmkjxlh.d(58): Error: semicolon expected, not `unittest`\\n/tmp/tmpxcmkjxlh.d(58):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxcmkjxlh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_level = 0;\n    int\
    \ level = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n    \
    \    {\n            stack ~= 1;\n            level++;\n            max_level =\
    \ max(max_level, level);\n        }\n        else if(c == ')')\n        {\n  \
    \          stack ~= -1;\n            level--;\n        }\n        else if(c ==\
    \ ' ')\n        {\n            if(stack.length == 0)\n            {\n        \
    \        result ~= 0;\n            }\n            else\n            {\n      \
    \          result ~= max_level;\n                max_level = 0;\n            \
    \    level = 0;\n                stack = new int[];\n            }\n        }\n\
    \    }\n    if(stack.length != 0)\n    {\n        result ~= max_level;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa6_46edh.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpa6_46edh.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpa6_46edh.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpa6_46edh.d(42):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `int[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa6_46edh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long[] max_stack;\n    long max_stack_size;\n    long\
    \ max_stack_size_prev;\n    long max_stack_size_curr;\n    long stack_size;\n\
    \    long stack_size_prev;\n    long stack_size_curr;\n    long i;\n    long j;\n\
    \    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n\
    \    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long ab;\n\
    \    long ac;\n    long ad;\n    long ae;\n    long af;\n    long ag;\n    long\
    \ ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n    long am;\n\
    \    long an;\n    long ao;\n    long ap;\n    long aq;\n    long ar;\n    long\
    \ as;\n    long at;\n    long au;\n    long av;\n    long aw;\n    long ax;\n\
    \    long ay;\n    long az;\n    long ba;\n    long bb;\n    long bc;\n    long\
    \ bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n    long bi;\n\
    \    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long bn;\n    long\
    \ bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n    long bt;\n\
    \    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long by;\n    long\
    \ bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n    long ce;\n\
    \    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long cj;\n    long\
    \ ck\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbukwr32t.d(104): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpbukwr32t.d(104): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbukwr32t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnchvxbhf.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpnchvxbhf.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpnchvxbhf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack ~= 1;\n            depth += 1;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            stack ~= -1;\n            depth -= 1;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4q8596t2.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp4q8596t2.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmp4q8596t2.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4q8596t2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfcgn17rq.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcgn17rq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string) \n\
    \    {\n        if (c == '(') \n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        } \n        else if (c == ')') \n        {\n\
    \            depth--;\n        } \n        else if (c == ' ') \n        {\n  \
    \          result ~= max_depth;\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk0ry0ul6.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0ry0ul6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    foreach (paren_group;\
    \ paren_string.split(\" \"))\n    {\n        stack = [];\n        max_depth =\
    \ 0;\n        depth = 0;\n        foreach (paren; paren_group)\n        {\n  \
    \          if (paren == '(')\n            {\n                stack ~= 1;\n   \
    \             depth += 1;\n                max_depth = max(max_depth, depth);\n\
    \            }\n            else if (paren == ')')\n            {\n          \
    \      stack.pop();\n                depth -= 1;\n            }\n        }\n \
    \       result ~= max_depth;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb1to2dxh.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1to2dxh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    foreach (paren_group; paren_string.split)\n\
    \    {\n        max_depth = 0;\n        stack = [];\n        foreach (paren; paren_group)\n\
    \        {\n            if (paren == '(')\n            {\n                stack\
    \ ~= 1;\n                max_depth = max(max_depth, stack.length);\n         \
    \   }\n            else if (paren == ')')\n            {\n                stack.pop;\n\
    \            }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpixw6gbxl.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpixw6gbxl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_stack;\n    long paren_count;\n    long max_depth;\n    long\
    \ depth;\n    long i;\n    long j;\n    long n;\n    long m;\n    long k;\n  \
    \  long l;\n    long len;\n    long len2;\n    long len3;\n    long len4;\n  \
    \  long len5;\n    long len6;\n    long len7;\n    long len8;\n    long len9;\n\
    \    long len10;\n    long len11;\n    long len12;\n    long len13;\n    long\
    \ len14;\n    long len15;\n    long len16;\n    long len17;\n    long len18;\n\
    \    long len19;\n    long len20;\n    long len21;\n    long len22;\n    long\
    \ len23;\n    long len24;\n    long len25;\n    long len26;\n    long len27;\n\
    \    long len28;\n    long len29;\n    long len30;\n    long len31;\n    long\
    \ len32;\n    long len33;\n    long len34;\n    long len35;\n    long len36;\n\
    \    long len37;\n    long len38;\n    long len39;\n    long len40;\n    long\
    \ len41;\n    long len42;\n    long len43;\n    long len44;\n    long len45;\n\
    \    long len46;\n    long len47;\n    long len48;\n    long len49;\n    long\
    \ len50;\n    long len51;\n    long len52;\n    long len53;\n    long len54;\n\
    \    long len55;\n    long len56;\n    long len57;\n    long len58;\n    long\
    \ len59;\n    long len60;\n    long len61;\n    long len62;\n    long len63;\n\
    \    long len64;\n    long len65;\n    long len66;\n    long len67;\n    long\
    \ len68;\n    long len69;\n    long len70;\n    long len71;\n    long len72;\n\
    \    long len73;\n    long len74;\n   \nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu2jg0je2.d(100): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2jg0je2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n    long\
    \ j;\n    long len;\n    long len_paren_string;\n    char c;\n    len_paren_string\
    \ = paren_string.length;\n    result = new long[];\n    stack = new long[];\n\
    \    max_depth = 0;\n    depth = 0;\n    i = 0;\n    j = 0;\n    while (i < len_paren_string)\
    \ \n    {\n        c = paren_string[i];\n        if (c == '(') \n        {\n \
    \           stack.push(depth);\n            depth++;\n            max_depth =\
    \ max(max_depth, depth);\n        }\n        else if (c == ')') \n        {\n\
    \            depth = stack.pop();\n        }\n        else if (c == ' ') \n  \
    \      {\n            result.push(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n        i++;\n    }\n    result.push(max_depth);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwt5odgaw.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpwt5odgaw.d(25): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpwt5odgaw.d(35):\
    \ Error: no property `push` for type `long[]`\\n/tmp/tmpwt5odgaw.d(37): Error:\
    \ undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpwt5odgaw.d(41):\
    \ Error: no property `pop` for type `long[]`\\n/tmp/tmpwt5odgaw.d(45): Error:\
    \ no property `push` for type `long[]`\\n/tmp/tmpwt5odgaw.d(51): Error: no property\
    \ `push` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwt5odgaw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split) \n    {\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach(paren; paren_group) \n      \
    \  {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')') \n            {\n                depth--;\n        \
    \    }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5wcqldt0.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5wcqldt0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(char c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcfb8nu_q.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfb8nu_q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int i = 0;\n    while (i < paren_string.length)\n    {\n\
    \        int start = i;\n        int end = i;\n        int count = 0;\n      \
    \  while (end < paren_string.length && paren_string[end] != ' ')\n        {\n\
    \            if (paren_string[end] == '(')\n                count++;\n       \
    \     else if (paren_string[end] == ')')\n                count--;\n         \
    \   end++;\n        }\n        if (count == 0)\n            result ~= max(0, count);\n\
    \        i = end + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb__we2ix.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpb__we2ix.d(30): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpb__we2ix.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppc8b0utx.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmppc8b0utx.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppc8b0utx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n    foreach\
    \ (paren; paren_string) \n    {\n        if (paren == '(') \n        {\n     \
    \       depth++;\n            max_depth = max(max_depth, depth);\n        }\n\
    \        else if (paren == ')') \n        {\n            depth--;\n        }\n\
    \        else if (paren == ' ') \n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps88g8dci.d(23): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps88g8dci.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            nesting++;\n            max_nesting\
    \ = max(max_nesting, nesting);\n        }\n        else if(c == ')')\n       \
    \ {\n            nesting--;\n        }\n        else if(c == ' ')\n        {\n\
    \            result ~= max_nesting;\n            max_nesting = 0;\n          \
    \  nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcrxnyf3.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcrxnyf3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp42xikni_.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42xikni_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_level;\n    long level;\n    foreach (paren;\
    \ paren_string.split(' ')) \n    {\n        stack = [];\n        max_level = 0;\n\
    \        level = 0;\n        foreach (c; paren) \n        {\n            if (c\
    \ == '(') \n            {\n                stack ~= level;\n                level++;\n\
    \                max_level = max(max_level, level);\n            } \n        \
    \    else if (c == ')') \n            {\n                if (stack.length == 0)\
    \ \n                {\n                    throw new Exception(\"Unbalanced parentheses\"\
    );\n                }\n                stack.length--;\n                level\
    \ = stack[$-1];\n            }\n        }\n        if (stack.length != 0) \n \
    \       {\n            throw new Exception(\"Unbalanced parentheses\");\n    \
    \    }\n        result ~= max_level;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmnromrm7.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmnromrm7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if(c == '(') \n        {\n            depth++;\n\
    \            max_depth = max(max_depth, depth);\n        } \n        else if(c\
    \ == ')') \n        {\n            depth--;\n        } \n        else if(c ==\
    \ ' ') \n        {\n            result ~= max_depth;\n            max_depth =\
    \ 0;\n            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn3jmxiv3.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpn3jmxiv3.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpn3jmxiv3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split)\n    {\n        long max_level =\
    \ 0;\n        long level = 0;\n        foreach(paren; paren_group)\n        {\n\
    \            if(paren == '(')\n                level++;\n            else\n  \
    \              level--;\n            max_level = max(max_level, level);\n    \
    \    }\n        result ~= max_level;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1dgonavn.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dgonavn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long current_max = 0;\n \
    \   long current_depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c\
    \ == '(')\n        {\n            stack ~= 1;\n            current_depth += 1;\n\
    \            current_max = max(current_max, current_depth);\n        }\n     \
    \   else if(c == ')')\n        {\n            if(stack.length == 0)\n        \
    \    {\n                throw new Exception(\"Invalid input\");\n            }\n\
    \            stack.popBack();\n            current_depth -= 1;\n        }\n  \
    \      else if(c == ' ')\n        {\n            if(stack.length != 0)\n     \
    \       {\n                throw new Exception(\"Invalid input\");\n         \
    \   }\n            result ~= current_max;\n            current_max = 0;\n    \
    \        current_depth = 0;\n        }\n        else\n        {\n            throw\
    \ new Exception(\"Invalid input\");\n        }\n    }\n    if(stack.length !=\
    \ 0)\n    {\n        throw new Exception(\"Invalid input\");\n    }\n    result\
    \ ~= current_max;\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4x9889kd.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp4x9889kd.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmp4x9889kd.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmp4x9889kd.d(32):\
    \ Error: no property `popBack` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4x9889kd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_count;\n    long max_paren_count;\n    long i;\n    long j;\n\
    \    long k;\n    long n;\n    long m;\n    long len;\n    long paren_count_len;\n\
    \    long result_len;\n    long max_paren_count_len;\n    long paren_count_i;\n\
    \    long paren_count_j;\n    long paren_count_k;\n    long paren_count_n;\n \
    \   long paren_count_m;\n    long paren_count_len;\n    long result_len;\n   \
    \ long max_paren_count_len;\n    long paren_count_i;\n    long paren_count_j;\n\
    \    long paren_count_k;\n    long paren_count_n;\n    long paren_count_m;\n \
    \   long paren_count_len;\n    long result_len;\n    long max_paren_count_len;\n\
    \    long paren_count_i;\n    long paren_count_j;\n    long paren_count_k;\n \
    \   long paren_count_n;\n    long paren_count_m;\n    long paren_count_len;\n\
    \    long result_len;\n    long max_paren_count_len;\n    long paren_count_i;\n\
    \    long paren_count_j;\n    long paren_count_k;\n    long paren_count_n;\n \
    \   long paren_count_m;\n    long paren_count_len;\n    long result_len;\n   \
    \ long max_paren_count_len;\n    long paren_count_i;\n    long paren_count_j;\n\
    \    long paren_count_k;\n    long paren_count_n;\n    long paren_count_m;\n \
    \   long paren_count_len;\n    long result_len;\n    long max_paren_count_len;\n\
    \    long paren_count_i;\n    long paren_count_j;\n    long paren_count_k;\n \
    \   long paren_count_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk8t3ugjt.d(70): Error: semicolon expected, not `unittest`\\n/tmp/tmpk8t3ugjt.d(70):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpk8t3ugjt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long i;\n    long j;\n    long max;\n    long len;\n \
    \   long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[] temp4;\n  \
    \  long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[] temp8;\n  \
    \  long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[] temp12;\n\
    \    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[] temp16;\n\
    \    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[] temp20;\n\
    \    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[] temp24;\n\
    \    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[] temp28;\n\
    \    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[] temp32;\n\
    \    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[] temp36;\n\
    \    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[] temp40;\n\
    \    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[] temp44;\n\
    \    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[] temp48;\n\
    \    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[] temp52;\n\
    \    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[] temp56;\n\
    \    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[] temp60;\n\
    \    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[] temp64;\n\
    \    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[] temp68;\n\
    \    long\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphhd53jy_.d(89): Error: no identifier for declarator `long`\\\
    n/tmp/tmphhd53jy_.d(89): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhd53jy_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string) \n\
    \    {\n        if (c == '(') \n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        } \n        else if (c == ')') \n        {\n\
    \            depth--;\n        } \n        else if (c == ' ') \n        {\n  \
    \          result ~= max_depth;\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuqe79qzd.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqe79qzd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            level++;\n\
    \            stack ~= level;\n        }\n        else if(c == ')')\n        {\n\
    \            result ~= stack.back;\n            stack.popBack;\n            level--;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyiomr0z8.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpyiomr0z8.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpyiomr0z8.d(26):\
    \ Error: no property `back` for type `long[]`\\n/tmp/tmpyiomr0z8.d(27): Error:\
    \ no property `popBack` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpyiomr0z8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_count;\n    long[] paren_max;\n    long[] paren_min;\n    long[]\
    \ paren_level;\n    long[] paren_level_max;\n    long[] paren_level_min;\n   \
    \ long[] paren_level_count;\n    long[] paren_level_max_count;\n    long[] paren_level_min_count;\n\
    \    long[] paren_level_max_index;\n    long[] paren_level_min_index;\n    long[]\
    \ paren_level_max_index_count;\n    long[] paren_level_min_index_count;\n    long[]\
    \ paren_level_max_index_count_max;\n    long[] paren_level_min_index_count_max;\n\
    \    long[] paren_level_max_index_count_min;\n    long[] paren_level_min_index_count_min;\n\
    \    long[] paren_level_max_index_count_max_index;\n    long[] paren_level_min_index_count_max_index;\n\
    \    long[] paren_level_max_index_count_min_index;\n    long[] paren_level_min_index_count_min_index;\n\
    \    long[] paren_level_max_index_count_max_index_count;\n    long[] paren_level_min_index_count_max_index_count;\n\
    \    long[] paren_level_max_index_count_min_index_count;\n    long[] paren_level_min_index_count_min_index_count;\n\
    \    long[] paren_level_max_index_count_max_index_count_max;\n    long[] paren_level_min_index_count_max_index_count_max;\n\
    \    long[] paren_level_max_index_count_min_index_count_max;\n    long[] paren_level_min_index_count_min_index_count_max;\n\
    \    long[] paren_level_max_index_count_max_index_count_min;\n    long[] paren_level_min\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv6kfuzwm.d(46): Error: semicolon expected, not `unittest`\\n/tmp/tmpv6kfuzwm.d(46):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpv6kfuzwm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack ~= 1;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            stack ~= -1;\n            depth--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n            stack = new long[];\n        }\n \
    \   }\n    result ~= max_depth;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohded_vz.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpohded_vz.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpohded_vz.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpohded_vz.d(36):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `long[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohded_vz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            nesting++;\n       \
    \     max_nesting = max(max_nesting, nesting);\n        } \n        else if (c\
    \ == ')') \n        {\n            nesting--;\n        } \n        else if (c\
    \ == ' ') \n        {\n            result ~= max_nesting;\n            max_nesting\
    \ = 0;\n            nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6_hqcx_v.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_hqcx_v.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    foreach (ch; paren_string)\n    {\n        if (ch == '(')\n\
    \        {\n            stack ~= 1;\n            depth += 1;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if (ch == ')')\n        {\n\
    \            stack ~= -1;\n            depth -= 1;\n        }\n        else if\
    \ (ch == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n            stack = new int[];\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xw8lzxs.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp1xw8lzxs.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmp1xw8lzxs.d(24):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmp1xw8lzxs.d(36):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `int[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xw8lzxs.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    string[] groups = paren_string.split(\" \");\n    foreach(string\
    \ group; groups)\n    {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach(char c; group)\n        {\n            if(c == '(')\n       \
    \     {\n                depth++;\n                max_depth = max(max_depth,\
    \ depth);\n            }\n            else if(c == ')')\n            {\n     \
    \           depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyibmvwv8.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpyibmvwv8.d(15): Error: no property\
    \ `split` for type `string`\\n/tmp/tmpyibmvwv8.d(25): Error: undefined identifier\
    \ `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpyibmvwv8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            nesting++;\n            max_nesting\
    \ = max(max_nesting, nesting);\n        }\n        else if(c == ')')\n       \
    \ {\n            nesting--;\n        }\n        else if(c == ' ')\n        {\n\
    \            result ~= max_nesting;\n            max_nesting = 0;\n          \
    \  nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1qp1vdzw.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1qp1vdzw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int i;\n    int max_depth;\n    int depth;\n    int len;\n    int start;\n\
    \    int end;\n    int[] paren_count;\n    int[] paren_depth;\n    int[] paren_start;\n\
    \    int[] paren_end;\n    int[] paren_max_depth;\n    int[] paren_max_depth_start;\n\
    \    int[] paren_max_depth_end;\n    int[] paren_max_depth_count;\n    int[] paren_max_depth_depth;\n\
    \    int[] paren_max_depth_start_index;\n    int[] paren_max_depth_end_index;\n\
    \    int[] paren_max_depth_count_index;\n    int[] paren_max_depth_depth_index;\n\
    \    int[] paren_max_depth_start_index_index;\n    int[] paren_max_depth_end_index_index;\n\
    \    int[] paren_max_depth_count_index_index;\n    int[] paren_max_depth_depth_index_index;\n\
    \    int[] paren_max_depth_start_index_index_index;\n    int[] paren_max_depth_end_index_index_index;\n\
    \    int[] paren_max_depth_count_index_index_index;\n    int[] paren_max_depth_depth_index_index_index;\n\
    \    int[] paren_max_depth_start_index_index_index_index;\n    int[] paren_max_depth_end_index_index_index_index;\n\
    \    int[] paren_max_depth_count_index_index_index_index;\n    int[] paren_max_depth_depth_index_index_index_index;\n\
    \    int[] paren_max_depth_start_index_index_index_index_index;\n    int[] paren_max_depth_end_index_index_index_index_index;\n\
    \    int[] paren_max_depth_count_index_index_index_index_index;\n    int[] paren_max_depth_depth_index_index\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyqpf2u6v.d(50): Error: semicolon expected, not `unittest`\\n/tmp/tmpyqpf2u6v.d(50):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyqpf2u6v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    string[] paren_groups = paren_string.split(\" \");\n    foreach(string\
    \ paren_group; paren_groups)\n    {\n        long max_nesting = 0;\n        long\
    \ current_nesting = 0;\n        foreach(char c; paren_group)\n        {\n    \
    \        if(c == '(')\n            {\n                current_nesting++;\n   \
    \             max_nesting = max(max_nesting, current_nesting);\n            }\n\
    \            else if(c == ')')\n            {\n                current_nesting--;\n\
    \            }\n        }\n        result ~= max_nesting;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcmgao142.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpcmgao142.d(15): Error: no property\
    \ `split` for type `string`\\n/tmp/tmpcmgao142.d(25): Error: undefined identifier\
    \ `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpcmgao142.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int i = 0;\n    int j = 0;\n\
    \    int max = 0;\n    while (i < paren_string.length)\n    {\n        if (paren_string[i]\
    \ == '(')\n        {\n            stack ~= 1;\n            j++;\n        }\n \
    \       else if (paren_string[i] == ')')\n        {\n            stack ~= -1;\n\
    \            j++;\n        }\n        else if (paren_string[i] == ' ')\n     \
    \   {\n            result ~= j;\n            j = 0;\n        }\n        i++;\n\
    \    }\n    result ~= j;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6vajeytu.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp6vajeytu.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vajeytu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    foreach(paren; paren_string.split(\"\
    \ \"))\n    {\n        foreach(c; paren)\n        {\n            if(c == '(')\n\
    \            {\n                stack ~= 1;\n            }\n            else if(c\
    \ == ')')\n            {\n                stack ~= -1;\n            }\n      \
    \  }\n        result ~= stack.length;\n        stack = new int[];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkrgdszko.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpkrgdszko.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpkrgdszko.d(16):\
    \ Error: no property `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkrgdszko.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr5s63jo7.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5s63jo7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n\
    \        long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwf8rnas3.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpwf8rnas3.d(15): Error: no property\
    \ `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwf8rnas3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long[] temp;\n    long max_depth;\n    long depth;\n \
    \   long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n\
    \    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n\
    \    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n\
    \    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long\
    \ af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n\
    \    long al;\n    long am;\n    long an;\n    long ao;\n    long ap;\n    long\
    \ aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n    long av;\n\
    \    long aw;\n    long ax;\n    long ay;\n    long az;\n    long ba;\n    long\
    \ bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n\
    \    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long\
    \ bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n\
    \    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long\
    \ bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n\
    \    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long\
    \ ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n\
    \    long co;\n    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long\
    \ ct\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe7tcg3nw.d(109): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpe7tcg3nw.d(109): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7tcg3nw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string) \n\
    \    {\n        if (c == '(') \n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        } \n        else if (c == ')') \n        {\n\
    \            depth--;\n        } \n        else if (c == ' ') \n        {\n  \
    \          result ~= max_depth;\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbie58tao.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbie58tao.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int i = 0;\n    while (i < paren_string.length) \n    {\n\
    \        int start = i;\n        while (paren_string[i] != ' ') \n        {\n\
    \            i++;\n        }\n        string paren_group = paren_string[start..i];\n\
    \        result ~= get_max_nesting(paren_group);\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_35t_e7q.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp_35t_e7q.d(24): Error: undefined\
    \ identifier `get_max_nesting`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_35t_e7q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            nesting++;\n            max_nesting\
    \ = max(max_nesting, nesting);\n        }\n        else if(c == ')')\n       \
    \ {\n            nesting--;\n        }\n        else if(c == ' ')\n        {\n\
    \            result ~= max_nesting;\n            max_nesting = 0;\n          \
    \  nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5o1wtbx_.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5o1wtbx_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    foreach (paren_group;\
    \ paren_string.split) \n    {\n        stack = [];\n        max_depth = 0;\n \
    \       depth = 0;\n        foreach (paren; paren_group) \n        {\n       \
    \     if (paren == '(') \n            {\n                stack ~= depth;\n   \
    \             depth += 1;\n                max_depth = max(max_depth, depth);\n\
    \            }\n            else if (paren == ')') \n            {\n         \
    \       depth = stack.pop;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptpkbaa56.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpkbaa56.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_level;\n    long level;\n    foreach (paren_group;\
    \ paren_string.split(\" \")) \n    {\n        stack = [];\n        max_level =\
    \ 0;\n        level = 0;\n        foreach (paren; paren_group) \n        {\n \
    \           if (paren == '(') \n            {\n                stack ~= level;\n\
    \                level += 1;\n                max_level = max(max_level, level);\n\
    \            }\n            else \n            {\n                level = stack.back;\n\
    \                stack.popBack;\n            }\n        }\n        result ~= max_level;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpof1klg_i.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof1klg_i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long[] max_stack;\n    long max_stack_size;\n    long\
    \ stack_size;\n    long max_depth;\n    long depth;\n    long i;\n    long j;\n\
    \    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n\
    \    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long ab;\n\
    \    long ac;\n    long ad;\n    long ae;\n    long af;\n    long ag;\n    long\
    \ ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n    long am;\n\
    \    long an;\n    long ao;\n    long ap;\n    long aq;\n    long ar;\n    long\
    \ as;\n    long at;\n    long au;\n    long av;\n    long aw;\n    long ax;\n\
    \    long ay;\n    long az;\n    long ba;\n    long bb;\n    long bc;\n    long\
    \ bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n    long bi;\n\
    \    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long bn;\n    long\
    \ bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n    long bt;\n\
    \    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long by;\n    long\
    \ bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n    long ce;\n\
    \    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long cj;\n    long\
    \ ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n    long cp;\n\
    \    long\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl719ym0b.d(108): Error: no identifier for declarator `long`\\\
    n/tmp/tmpl719ym0b.d(108): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl719ym0b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int max_nesting = 0;\n    int nesting = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            nesting++;\n\
    \            max_nesting = max(max_nesting, nesting);\n        }\n        else\
    \ if(c == ')')\n        {\n            nesting--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_nesting;\n            max_nesting\
    \ = 0;\n            nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp13hy632w.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp13hy632w.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp13hy632w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_n99lc2r.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_n99lc2r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int current_level = 0;\n    int max_level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_1x41u7.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpb_1x41u7.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpb_1x41u7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    int i;\n    int j;\n    int k;\n    int n;\n    int m;\n\
    \    int len;\n    int max;\n    int temp;\n    int count;\n    int[] temp_arr;\n\
    \    int[] temp_arr2;\n    int[] temp_arr3;\n    int[] temp_arr4;\n    int[] temp_arr5;\n\
    \    int[] temp_arr6;\n    int[] temp_arr7;\n    int[] temp_arr8;\n    int[] temp_arr9;\n\
    \    int[] temp_arr10;\n    int[] temp_arr11;\n    int[] temp_arr12;\n    int[]\
    \ temp_arr13;\n    int[] temp_arr14;\n    int[] temp_arr15;\n    int[] temp_arr16;\n\
    \    int[] temp_arr17;\n    int[] temp_arr18;\n    int[] temp_arr19;\n    int[]\
    \ temp_arr20;\n    int[] temp_arr21;\n    int[] temp_arr22;\n    int[] temp_arr23;\n\
    \    int[] temp_arr24;\n    int[] temp_arr25;\n    int[] temp_arr26;\n    int[]\
    \ temp_arr27;\n    int[] temp_arr28;\n    int[] temp_arr29;\n    int[] temp_arr30;\n\
    \    int[] temp_arr31;\n    int[] temp_arr32;\n    int[] temp_arr33;\n    int[]\
    \ temp_arr34;\n    int[] temp_arr35;\n    int[] temp_arr36;\n    int[] temp_arr37;\n\
    \    int[] temp_arr38;\n    int[] temp_arr39;\n    int[] temp_arr40;\n    int[]\
    \ temp_arr41;\n    int[] temp_arr42;\n    int[] temp_arr43;\n    int[] temp_arr44;\n\
    \    int[] temp_arr45;\n    int[] temp_arr46;\n    int[] temp_arr47;\n    int[]\
    \ temp_arr48;\n    int[] temp_arr49;\n    int[] temp_arr50;\n    int[]\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbwsisonp.d(76): Error: no identifier for declarator `int[]`\\\
    n/tmp/tmpbwsisonp.d(76): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwsisonp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_nesting = 0;\n \
    \   long nesting = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            nesting++;\n            max_nesting = max(max_nesting,\
    \ nesting);\n        }\n        else if(c == ')')\n        {\n            nesting--;\n\
    \        }\n        else if(c == ' ')\n        {\n            stack ~= max_nesting;\n\
    \            max_nesting = 0;\n            nesting = 0;\n        }\n    }\n  \
    \  stack ~= max_nesting;\n    return stack;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcjq0nslm.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpcjq0nslm.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpcjq0nslm.d(23):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjq0nslm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_stack;\n    long[] paren_count;\n    long[] paren_max;\n   \
    \ long[] paren_max_index;\n    long[] paren_max_count;\n    long[] paren_max_count_index;\n\
    \    long[] paren_max_count_index_index;\n    long[] paren_max_count_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index;\n    long[] paren_max_count_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index;\n    long[] paren_max_count_index_index_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_max_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n\
    \    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmiu6ea39.d(37): Error: semicolon expected, not `unittest`\\n/tmp/tmpmiu6ea39.d(37):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmiu6ea39.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long cur_depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            cur_depth++;\n      \
    \      max_depth = max(max_depth, cur_depth);\n        }\n        else if(c ==\
    \ ')') \n        {\n            cur_depth--;\n        }\n        else if(c ==\
    \ ' ') \n        {\n            result ~= max_depth;\n            max_depth =\
    \ 0;\n            cur_depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6wgrt2ef.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wgrt2ef.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long current_nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_nesting++;\n    \
    \        max_nesting = max(max_nesting, current_nesting);\n        }\n       \
    \ else if(c == ')')\n        {\n            current_nesting--;\n        }\n  \
    \      else if(c == ' ')\n        {\n            result ~= max_nesting;\n    \
    \        max_nesting = 0;\n            current_nesting = 0;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb83dd15g.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb83dd15g.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n\
    \        int max_depth = 0;\n        int current_depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_depth++;\n                max_depth = max(max_depth, current_depth);\n\
    \            }\n            else if(paren == ')')\n            {\n           \
    \     current_depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ba8879v.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ba8879v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_depth++;\n      \
    \      max_depth = max(max_depth, current_depth);\n        }\n        else if(c\
    \ == ')')\n        {\n            current_depth--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbex2utvj.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbex2utvj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split) \n    {\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach(paren; paren_group) \n      \
    \  {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            } \n        \
    \    else if(paren == ')') \n            {\n                depth--;\n       \
    \     }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2zdhkbp0.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zdhkbp0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpafaj8ljo.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpafaj8ljo.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] paren_counts;\n\
    \    long paren_count = 0;\n    foreach(c; paren_string) \n    {\n        if(c\
    \ == '(') \n        {\n            paren_count++;\n        }\n        else if(c\
    \ == ')') \n        {\n            paren_counts ~= paren_count;\n            paren_count\
    \ = 0;\n        }\n    }\n    return paren_counts;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpasp2yqpe.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428355]\\n??:? void tmpasp2yqpe.__unittest_L30_C1()\
    \ [0x427f45]\\n??:? void tmpasp2yqpe.__modtest() [0x4280d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cd2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bbbe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bb95]\\n??:? runModuleUnitTests [0x42cb01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42872b]\\n??:? _d_run_main [0x428696]\\n??:? main [0x4280eb]\\\
    n??:? __libc_start_main [0xbe2e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            nesting++;\n       \
    \     max_nesting = max(max_nesting, nesting);\n        } \n        else if (c\
    \ == ')') \n        {\n            nesting--;\n        } \n        else if (c\
    \ == ' ') \n        {\n            result ~= max_nesting;\n            max_nesting\
    \ = 0;\n            nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpklqbixph.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpklqbixph.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] paren_count;\n    long[] max_paren_count;\n    long[] max_paren_count_index;\n\
    \    long[] paren_count_index;\n    long[] paren_count_index_temp;\n    long[]\
    \ paren_count_index_temp2;\n    long[] paren_count_index_temp3;\n    long[] paren_count_index_temp4;\n\
    \    long[] paren_count_index_temp5;\n    long[] paren_count_index_temp6;\n  \
    \  long[] paren_count_index_temp7;\n    long[] paren_count_index_temp8;\n    long[]\
    \ paren_count_index_temp9;\n    long[] paren_count_index_temp10;\n    long[] paren_count_index_temp11;\n\
    \    long[] paren_count_index_temp12;\n    long[] paren_count_index_temp13;\n\
    \    long[] paren_count_index_temp14;\n    long[] paren_count_index_temp15;\n\
    \    long[] paren_count_index_temp16;\n    long[] paren_count_index_temp17;\n\
    \    long[] paren_count_index_temp18;\n    long[] paren_count_index_temp19;\n\
    \    long[] paren_count_index_temp20;\n    long[] paren_count_index_temp21;\n\
    \    long[] paren_count_index_temp22;\n    long[] paren_count_index_temp23;\n\
    \    long[] paren_count_index_temp24;\n    long[] paren_count_index_temp25;\n\
    \    long[] paren_count_index_temp26;\n    long[] paren_count_index_temp27;\n\
    \    long[] paren_count_index_temp28;\n    long[] paren_count_index_temp29;\n\
    \    long[] paren_count_index_temp30;\n    long[] paren_count_index_temp31;\n\
    \    long[] paren_count_index_temp32;\n    long[] paren_count_index_temp33;\n\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpffcv6on0.d(53): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffcv6on0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_depth++;\n      \
    \      max_depth = max(max_depth, current_depth);\n        }\n        else if(c\
    \ == ')')\n        {\n            current_depth--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn4_tu_yx.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn4_tu_yx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split)\n    {\n        long max_nesting\
    \ = 0;\n        long current_nesting = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                current_nesting++;\n\
    \                max_nesting = max(max_nesting, current_nesting);\n          \
    \  }\n            else if(paren == ')')\n            {\n                current_nesting--;\n\
    \            }\n        }\n        result ~= max_nesting;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_zdy000y.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zdy000y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab =\
    \ 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n   \
    \ int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak =\
    \ 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n   \
    \ int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at =\
    \ 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n   \
    \ int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc =\
    \ 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n   \
    \ int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl =\
    \ 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n   \
    \ int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu =\
    \ 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n    int by = 0\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpish5r_f9.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpish5r_f9.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpish5r_f9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            depth++;\n            stack ~= depth;\n        }\n   \
    \     else if(c == ')')\n        {\n            if(depth > max_depth)\n      \
    \          max_depth = depth;\n            stack.popBack();\n            depth\
    \ = stack.back;\n        }\n        else if(c == ' ')\n        {\n           \
    \ result ~= max_depth;\n            max_depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp89ye6q4j.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp89ye6q4j.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmp89ye6q4j.d(29):\
    \ Error: no property `popBack` for type `long[]`\\n/tmp/tmp89ye6q4j.d(30): Error:\
    \ no property `back` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp89ye6q4j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    int i = 0;\n    while (i < paren_string.length) \n    {\n  \
    \      if (paren_string[i] == '(') \n        {\n            stack.push(i);\n \
    \           depth++;\n            max_depth = max(max_depth, depth);\n       \
    \ } \n        else if (paren_string[i] == ')') \n        {\n            stack.pop();\n\
    \            depth--;\n        } \n        else if (paren_string[i] == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n        i++;\n    }\n    result ~= max_depth;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2b4p0pn.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpl2b4p0pn.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmpl2b4p0pn.d(23):\
    \ Error: no property `push` for type `int[]`\\n/tmp/tmpl2b4p0pn.d(25): Error:\
    \ undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpl2b4p0pn.d(29):\
    \ Error: no property `pop` for type `int[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpl2b4p0pn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    int max_nesting = 0;\n    int current_nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_nesting++;\n    \
    \        max_nesting = max(max_nesting, current_nesting);\n        }\n       \
    \ else if(c == ')')\n        {\n            current_nesting--;\n        }\n  \
    \      else if(c == ' ')\n        {\n            result ~= max_nesting;\n    \
    \        max_nesting = 0;\n            current_nesting = 0;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk32k4ckp.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk32k4ckp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split(' ')) \n    {\n        long max_level\
    \ = 0;\n        long current_level = 0;\n        foreach(paren; paren_group) \n\
    \        {\n            if(paren == '(') \n            {\n                current_level++;\n\
    \                max_level = max(max_level, current_level);\n            }\n \
    \           else if(paren == ')') \n            {\n                current_level--;\n\
    \            }\n        }\n        result ~= max_level;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzrh31ye1.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrh31ye1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_depth;\n    long depth;\n    foreach (paren_group;\
    \ paren_string.split) \n    {\n        stack = [];\n        max_depth = 0;\n \
    \       depth = 0;\n        foreach (paren; paren_group) \n        {\n       \
    \     if (paren == '(') \n            {\n                stack ~= 1;\n       \
    \         depth += 1;\n                max_depth = max(max_depth, depth);\n  \
    \          } \n            else if (paren == ')') \n            {\n          \
    \      stack.pop;\n                depth -= 1;\n            }\n        }\n   \
    \     assert(stack.empty);\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvlkj0oss.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvlkj0oss.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            nesting++;\n            max_nesting\
    \ = max(max_nesting, nesting);\n        }\n        else if(c == ')')\n       \
    \ {\n            nesting--;\n        }\n        else if(c == ' ')\n        {\n\
    \            result ~= max_nesting;\n            max_nesting = 0;\n          \
    \  nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd36cms__.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd36cms__.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result\
    \ = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n   \
    \ long depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            depth++;\n            max_depth = max(max_depth, depth);\n\
    \        }\n        else if(c == ')')\n        {\n            depth--;\n     \
    \   }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv6tjxaex.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpv6tjxaex.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpv6tjxaex.d(23):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6tjxaex.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    long[] stack;\n    long max_level = 0;\n    long level = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if (c == '(') \n        {\n            level++;\n\
    \            max_level = max(max_level, level);\n        } \n        else if (c\
    \ == ')') \n        {\n            level--;\n        } \n        else if (c ==\
    \ ' ') \n        {\n            if (level != 0) \n            {\n            \
    \    stack ~= max_level;\n                max_level = 0;\n            }\n    \
    \    }\n    }\n    if (level != 0) \n    {\n        stack ~= max_level;\n    }\n\
    \    return stack;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqeaaw8pt.d(23): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqeaaw8pt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] result;\n\
    \    foreach(paren_group; paren_string.split(\" \")) \n    {\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach(paren; paren_group) \n      \
    \  {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')') \n            {\n                depth--;\n        \
    \    }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoemof2tk.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoemof2tk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
