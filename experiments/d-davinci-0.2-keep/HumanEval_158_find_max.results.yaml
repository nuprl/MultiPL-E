name: HumanEval_158_find_max
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\
    \ \n    {\n        int unique_chars = 0;\n        foreach(char c; word) \n   \
    \     {\n            if(word.count(c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars) \n        {\n  \
    \          if(word < max_word) \n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\n/*\nWrite a function\
    \ that accepts a list of strings.\n    The list contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.\nunittest\n{\n    alias candidate = find_max;\n\n\
    \    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdt4xpayt.d(43): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdt4xpayt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!result.canFind(c))\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpae3_92fa.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpae3_92fa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    foreach(word; words)\n \
    \   {\n        int unique_char = 0;\n        foreach(char c; word)\n        {\n\
    \            if(word.count(c) == 1)\n            {\n                unique_char++;\n\
    \            }\n        }\n        if(unique_char > max_unique_char)\n       \
    \ {\n            max_unique_char = unique_char;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0d9kitg.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe0d9kitg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    foreach(string word; words)\n    {\n        if(result.length\
    \ == 0 || result.length < word.length)\n        {\n            result = word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq05vb1p0.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42906d]\\n??:? void tmpq05vb1p0.__unittest_L26_C1()\
    \ [0x427cca]\\n??:? void tmpq05vb1p0.__modtest() [0x4282d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428dc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a7f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a884]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a781]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428d9d]\\n??:? runModuleUnitTests [0x42d71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4294bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429443]\\n??:? _d_run_main [0x4293ae]\\n??:? main [0x4282e7]\\\
    n??:? __libc_start_main [0x67dea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2y5hvc12.d(23): Error: undefined identifier `count`\\n/tmp/tmp2y5hvc12.d(35):\
    \ Error: undefined identifier `min`, did you mean function `main`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y5hvc12.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbiz1h_l4.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbiz1h_l4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp20c56mdd.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp20c56mdd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo8mg9_a8.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo8mg9_a8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!result.canFind(c))\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            result = min(result, word);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsg7zczhj.d(23): Error: no property `canFind` for type `string`\\\
    n/tmp/tmpsg7zczhj.d(35): Error: undefined identifier `min`, did you mean function\
    \ `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsg7zczhj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph3g9f702.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmph3g9f702.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmph3g9f702.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0xe5251554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpokcip09f.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokcip09f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmjva99tx.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjva99tx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    foreach(string word; words)\n  \
    \  {\n        int count = 0;\n        foreach(char c; word)\n        {\n     \
    \       if(count == 0)\n            {\n                count++;\n            }\n\
    \            else\n            {\n                if(word[0..count].count(c) ==\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n        if(count > maxCount)\n        {\n            maxCount\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdgk2sol7.d(29): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdgk2sol7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptuag6ge1.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuag6ge1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\
    \ \n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmponmsckp0.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponmsckp0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp4i68tv1.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpp4i68tv1.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpp4i68tv1.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0xe0aac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw486gu74.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpw486gu74.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpw486gu74.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x568ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28gn1o6s.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28gn1o6s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char ch; word)\n      \
    \  {\n            if(!max_word.canFind(ch))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn1w6b4g7.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1w6b4g7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n\
    \        int unique = 0;\n        foreach(char c; word)\n        {\n         \
    \   if(word.count(c) == 1)\n                unique++;\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max = word;\n            max_unique =\
    \ unique;\n        }\n        else if(unique == max_unique)\n        {\n     \
    \       if(word < max)\n                max = word;\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfrlmxvuy.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfrlmxvuy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_7ql7z3y.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_7ql7z3y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgn4t4sth.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgn4t4sth.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprllia_rm.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprllia_rm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptmdp30z9.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmdp30z9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n \
    \       int count = 0;\n        foreach(char c; word)\n        {\n           \
    \ if(!result.canFind(c))\n            {\n                count++;\n          \
    \  }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpht6rkn50.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpht6rkn50.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4e1k_dnh.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4e1k_dnh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(c; word) \n        {\n            if(!c.canFindIn(max_word))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpykn67f3t.d(23): Error: no property `canFindIn` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpykn67f3t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7439_22s.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmp7439_22s.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmp7439_22s.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x6e153554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_t8m_zmd.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_t8m_zmd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_len = 0;\n    foreach(word; words)\n    {\n        int\
    \ len = word.length;\n        if(len > max_len)\n        {\n            max_len\
    \ = len;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppqh5tdd1.d(20): Error: cannot implicitly convert expression `word.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppqh5tdd1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0de_x0px.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0de_x0px.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!result.canFind(c))\n            {\n                unique++;\n        \
    \    }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            result = word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp09p85ab0.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p85ab0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words) \n\
    \    {\n        int count = 0;\n        foreach(char c; word) \n        {\n  \
    \          if(c !in max_word) \n            {\n                count++;\n    \
    \            max_word ~= c;\n            }\n        }\n        if(count > max_count)\
    \ \n        {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8qk2zr__.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qk2zr__.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp72aaxu1x.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72aaxu1x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!result.canFind(c))\n            {\n                unique++;\n        \
    \    }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            result = word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzrpphnm2.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrpphnm2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpad3_x28i.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad3_x28i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahsmq574.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahsmq574.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfc5agykc.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfc5agykc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(ch; word)\n        {\n            if(count == 0)\n\
    \            {\n                count++;\n            }\n            else\n  \
    \          {\n                if(!ch.canFind(word[0..count]))\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n        if(count > max)\n        {\n            max = count;\n          \
    \  result = word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9js54boj.d(29): Error: no property `canFind` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9js54boj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm1st9f7q.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpm1st9f7q.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpm1st9f7q.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0xfb9f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwl03qkpl.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpwl03qkpl.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpwl03qkpl.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x58184554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = words[0];\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1ktjtuc6.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429155]\\n??:? void tmp1ktjtuc6.__unittest_L33_C1()\
    \ [0x4281c1]\\n??:? void tmp1ktjtuc6.__modtest() [0x4283bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42daf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a9a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a931]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e85]\\n??:? runModuleUnitTests [0x42d8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42966c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4295f3]\\n??:? _d_run_main [0x42955e]\\n??:? main [0x4283cf]\\\
    n??:? __libc_start_main [0x493bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpks63ycsk.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks63ycsk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8adkxcdw.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8adkxcdw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7m8g_oy.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7m8g_oy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char ch; word)\n      \
    \  {\n            if(!ch in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9lsllxtl.d(23): Error: incompatible types for `(!ch) in (max_word)`:\
    \ `bool` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lsllxtl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(c; word)\n        {\n \
    \           if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpolatw6ef.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpolatw6ef.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqpt93o4m.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpqpt93o4m.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpqpt93o4m.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x6f0a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!result.canFind(c))\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplyb8ppe_.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplyb8ppe_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpavxq3ael.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpavxq3ael.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique_characters = 0;\n    foreach(word; words)\n  \
    \  {\n        int unique_characters = 0;\n        foreach(character; word)\n \
    \       {\n            if(!max_word.canFind(character))\n            {\n     \
    \           unique_characters++;\n            }\n        }\n        if(unique_characters\
    \ > max_unique_characters)\n        {\n            max_unique_characters = unique_characters;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb0brute0.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0brute0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char ch; word)\n      \
    \  {\n            if(word.count(ch) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk4qjoarr.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4qjoarr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n \
    \       int count = 0;\n        foreach(char c; word)\n        {\n           \
    \ if(!result.canFind(c))\n            {\n                count++;\n          \
    \  }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq16u1r1z.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq16u1r1z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2g6lugv6.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmp2g6lugv6.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmp2g6lugv6.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x9fe5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count = 1;\n            }\n          \
    \  else\n            {\n                if(word[0..count].count(c) == 0)\n   \
    \             {\n                    count++;\n                }\n           \
    \ }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max_count)\n        {\n            if(word < max_word)\n            {\n    \
    \            max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6_aijhjg.d(29): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_aijhjg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    foreach(string word; words) \n \
    \   {\n        int count = 0;\n        foreach(char c; word) \n        {\n   \
    \         if(count == 0) \n            {\n                count++;\n         \
    \   }\n            else if(word[0..count].count(c) == 0) \n            {\n   \
    \             count++;\n            }\n        }\n        if(count > maxCount)\
    \ \n        {\n            maxCount = count;\n            maxWord = word;\n  \
    \      }\n    }\n    return maxWord;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptzl432eb.d(27): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzl432eb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz8un0se9.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8un0se9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe7c_152b.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7c_152b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxya3o1hu.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxya3o1hu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    foreach(word; words)\n \
    \   {\n        int unique_char = 0;\n        foreach(char; word)\n        {\n\
    \            if(word.count(char) == 1)\n            {\n                unique_char++;\n\
    \            }\n        }\n        if(unique_char > max_unique_char)\n       \
    \ {\n            max_unique_char = unique_char;\n            max_word = word;\n\
    \        }\n        else if(unique_char == max_unique_char)\n        {\n     \
    \       if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxxiq8h71.d(21): Error: no identifier for declarator `char`\\\
    n/tmp/tmpxxiq8h71.d(23): Error: found `)` when expecting `.` following char\\\
    n/tmp/tmpxxiq8h71.d(23): Error: found `==` when expecting identifier following\
    \ `char`.\\n/tmp/tmpxxiq8h71.d(23): Error: found `1` when expecting `,`\\n/tmp/tmpxxiq8h71.d(24):\
    \ Error: found `{` when expecting `)`\\n/tmp/tmpxxiq8h71.d(41): Error: declaration\
    \ expected, not `return`\\n/tmp/tmpxxiq8h71.d(42): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxxiq8h71.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(c !in max_word)\n            {\n                count++;\n      \
    \          max_word ~= c;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvzqtwg89.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzqtwg89.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words) \n\
    \    {\n        int count = 0;\n        foreach(char c; word) \n        {\n  \
    \          if(!max_word.canFind(c)) \n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count) \n        {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpss2by86t.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss2by86t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6bfgospa.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bfgospa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuhjm7hzi.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpuhjm7hzi.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpuhjm7hzi.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x94db7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkr93zrl0.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkr93zrl0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1vj0_39.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1vj0_39.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max = words[0];\n    foreach(word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpizagh93r.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429155]\\n??:? void tmpizagh93r.__unittest_L33_C1()\
    \ [0x4281c1]\\n??:? void tmpizagh93r.__modtest() [0x4283bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42daf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a9a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a931]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e85]\\n??:? runModuleUnitTests [0x42d8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42966c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4295f3]\\n??:? _d_run_main [0x42955e]\\n??:? main [0x4283cf]\\\
    n??:? __libc_start_main [0xebc80554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu3104mil.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3104mil.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1mwal75a.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmp1mwal75a.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmp1mwal75a.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x8d6a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(c !in result)\n\
    \            {\n                count++;\n                result ~= c;\n     \
    \       }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphp1ng625.d(23): Error: incompatible types for `(c) in (result)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphp1ng625.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \                max_word ~= c;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw4ghchtt.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4ghchtt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!contains(max_word, c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9g9tvivo.d(23): Error: undefined identifier `contains`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9g9tvivo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph7y56h72.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7y56h72.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpif7tclhx.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpif7tclhx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0t2z_id.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0t2z_id.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                count++;\n            }\n        }\n \
    \       if(count > max)\n        {\n            max = count;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgo0cewoz.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgo0cewoz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcmxcer24.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcmxcer24.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0nk32nd3.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0nk32nd3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphq9p9a1n.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphq9p9a1n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(char c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjk6lc3oa.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk6lc3oa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6_op5pe.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6_op5pe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(count == 0)\n            {\n                count = 1;\n            }\n\
    \            else\n            {\n                if(c != word[count-1])\n   \
    \             {\n                    count++;\n                }\n           \
    \ }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp69h_830c.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42910d]\\n??:? void tmp69h_830c.__unittest_L43_C1()\
    \ [0x427d6a]\\n??:? void tmp69h_830c.__modtest() [0x428374]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a909]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a998]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a895]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e3d]\\n??:? runModuleUnitTests [0x42d831]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429557]\\n??:? _d_run_main [0x4294c2]\\n??:? main [0x428387]\\\
    n??:? __libc_start_main [0x9aaf5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjj2qq78l.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjj2qq78l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgoiwqibx.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgoiwqibx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(ch; word)\n        {\n            if(!result.canFind(ch))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ruw8oik.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ruw8oik.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_len = 0;\n    foreach(word; words)\n    {\n        int\
    \ len = word.length;\n        if(len > max_len)\n        {\n            max_len\
    \ = len;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwrjfls1g.d(20): Error: cannot implicitly convert expression `word.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwrjfls1g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in word[0..$-1])\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ty0v6an.d(23): Error: incompatible types for `(c) in (word[0..__dollar\
    \ - 1LU])`: `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5ty0v6an.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwx8hpfcw.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwx8hpfcw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\
    \ \n    {\n        int unique_chars = 0;\n        foreach(char c; word) \n   \
    \     {\n            if(word.count(c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars) \n        {\n  \
    \          if(word < max_word) \n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprb5r90g.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprb5r90g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2en93wep.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2en93wep.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb1x7j56e.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1x7j56e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqdfvhds.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqdfvhds.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1m7kt_ap.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1m7kt_ap.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqvfh69nr.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpqvfh69nr.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpqvfh69nr.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x61c1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoftrjted.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoftrjted.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(c; word)\n        {\n \
    \           if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7zmn73fi.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zmn73fi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!c.canFindIn(max_word))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf2bc8re6.d(23): Error: no property `canFindIn` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2bc8re6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\
    \ \n    {\n        int unique_chars = 0;\n        foreach(char c; word) \n   \
    \     {\n            if(word.count(c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars) \n        {\n  \
    \          if(word < max_word) \n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpldcdjayz.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldcdjayz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpffv4icw4.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffv4icw4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcr7r8ptg.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcr7r8ptg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = words[0];\n    int max_unique_chars = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(word.count(c) == 1)\n            {\n              \
    \  unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwqg0jusp.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqg0jusp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7araakvm.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7araakvm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpchdr98wy.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchdr98wy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(ch; word)\n        {\n            if(!ch in\
    \ max)\n            {\n                count++;\n            }\n        }\n  \
    \      if(count > max_count)\n        {\n            max = word;\n           \
    \ max_count = count;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjha5_6i2.d(23): Error: incompatible types for `(!ch) in (max)`:\
    \ `bool` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjha5_6i2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!c.canFindIn(max_word))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpral_5ol4.d(23): Error: no property `canFindIn` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpral_5ol4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].count(c) == 0)\n           \
    \     {\n                    count++;\n                }\n            }\n    \
    \    }\n        if(count > max_count)\n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n        else if(count == max_count)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpauwgw8yf.d(29): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpauwgw8yf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < result) \n            {\n               \
    \ result = word;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43zkynrx.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43zkynrx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in word[0..$-1])\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoosstijb.d(23): Error: incompatible types for `(c) in (word[0..__dollar\
    \ - 1LU])`: `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpoosstijb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1oyn48op.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1oyn48op.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmykal2d5.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmykal2d5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].canFind(c))\n              \
    \  {\n                    continue;\n                }\n                else\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max_count)\n        {\n            if(word < max_word)\n            {\n    \
    \            max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1n9f91bk.d(29): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1n9f91bk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(word; words)\n    {\n        if(max.length == 0 ||\
    \ word.length > max.length)\n        {\n            max = word;\n        }\n \
    \       else if(word.length == max.length)\n        {\n            if(word < max)\n\
    \            {\n                max = word;\n            }\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiixtck7v.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429145]\\n??:? void tmpiixtck7v.__unittest_L33_C1()\
    \ [0x4281b1]\\n??:? void tmpiixtck7v.__modtest() [0x4283ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a921]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8ad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e75]\\n??:? runModuleUnitTests [0x42d849]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956f]\\n??:? _d_run_main [0x4294da]\\n??:? main [0x4283bf]\\\
    n??:? __libc_start_main [0xe984a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n \
    \       int count = 0;\n        foreach(char c; word)\n        {\n           \
    \ if(c !in result)\n            {\n                count++;\n                result\
    \ ~= c;\n            }\n        }\n        if(count > max)\n        {\n      \
    \      max = count;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppale8iu8.d(23): Error: incompatible types for `(c) in (result)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppale8iu8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n    \
    \    int unique = 0;\n        foreach(char c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max = word;\n            max_unique =\
    \ unique;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92jozyks.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92jozyks.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n\
    \        int unique = 0;\n        foreach(char c; word)\n        {\n         \
    \   if(word.count(c) == 1)\n                unique++;\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max = word;\n            max_unique =\
    \ unique;\n        }\n        else if(unique == max_unique)\n        {\n     \
    \       if(word < max)\n                max = word;\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8oqyjwhi.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8oqyjwhi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!max_word.canFind(c))\n            {\n                count++;\n       \
    \     }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkc8v50n5.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkc8v50n5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!c.canFindIn(max_word))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjeetmjex.d(23): Error: no property `canFindIn` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjeetmjex.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max_word = \"\";\n    auto max_count = 0;\n    foreach(word; words)\n    {\n\
    \        auto count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp06gw0jg6.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06gw0jg6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnj2nhy6j.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj2nhy6j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiilsm6r9.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiilsm6r9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    return\
    \ words.max!((a, b) => a.length.compare(b.length));\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps5nfj0yt.d(16): Error: no property `max` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5nfj0yt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptmzmpwwb.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmzmpwwb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0pxzfbq7.d(23): Error: undefined identifier `count`\\n/tmp/tmp0pxzfbq7.d(35):\
    \ Error: undefined identifier `min`, did you mean function `main`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pxzfbq7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjbj4i89g.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjbj4i89g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfciyizdh.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfciyizdh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_kifdwfd.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kifdwfd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxl5fpcu1.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxl5fpcu1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpymahxs8k.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymahxs8k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz6btr13u.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz6btr13u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3j39elv5.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3j39elv5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8do7f3ji.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8do7f3ji.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwu4b1_34.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu4b1_34.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vm7dgcd.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vm7dgcd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuukvpew8.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuukvpew8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(char; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].count(char) == 0)\n        \
    \        {\n                    count++;\n                }\n            }\n \
    \       }\n        if(count > max_count)\n        {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"\
    string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdf0oup6t.d(21): Error: no identifier for declarator `char`\\\
    n/tmp/tmpdf0oup6t.d(29): Error: found `)` when expecting `.` following char\\\
    n/tmp/tmpdf0oup6t.d(29): Error: found `==` when expecting identifier following\
    \ `char`.\\n/tmp/tmpdf0oup6t.d(29): Error: found `0` when expecting `,`\\n/tmp/tmpdf0oup6t.d(30):\
    \ Error: found `{` when expecting `)`\\n/tmp/tmpdf0oup6t.d(41): Error: declaration\
    \ expected, not `return`\\n/tmp/tmpdf0oup6t.d(42): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdf0oup6t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkhokf21x.d(23): Error: undefined identifier `count`\\n/tmp/tmpkhokf21x.d(35):\
    \ Error: undefined identifier `min`, did you mean function `main`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhokf21x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmkvol_z7.d(23): Error: undefined identifier `count`\\n/tmp/tmpmkvol_z7.d(35):\
    \ Error: undefined identifier `min`, did you mean function `main`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmkvol_z7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(!result.canFind(c)) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            result = word;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn3bu7ymo.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3bu7ymo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(c\
    \ !in max_word)\n            {\n                max_word ~= c;\n             \
    \   count++;\n            }\n        }\n        if(count > max_count)\n      \
    \  {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy3zku_va.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `immutable(char)` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpy3zku_va.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8450ilmc.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8450ilmc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpczrhv1xi.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpczrhv1xi.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpczrhv1xi.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0xccbb4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplnd3k9mo.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnd3k9mo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptf81ft59.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf81ft59.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!result.canFind(c))\n            {\n                unique++;\n        \
    \    }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            result = word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1hyw97l.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1hyw97l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ maxWord = \"\";\n    int maxUnique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(count(word, c) == 1)\n            {\n                unique++;\n       \
    \     }\n        }\n        if(unique > maxUnique)\n        {\n            maxUnique\
    \ = unique;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppqdrhy0p.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppqdrhy0p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5hjq1se9.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5hjq1se9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(count(word, c) == 1)\n            {\n                unique++;\n       \
    \     }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            result = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < result)\n            {\n     \
    \           result = word;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdki3rsif.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdki3rsif.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfhbh4cjp.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfhbh4cjp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(count ==\
    \ max)\n            {\n                if(result > word)\n                {\n\
    \                    result = word;\n                }\n            }\n      \
    \      if(count > max)\n            {\n                max = count;\n        \
    \        result = word;\n            }\n            count++;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjv493s_6.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4291b5]\\n??:? void tmpjv493s_6.__unittest_L40_C1()\
    \ [0x428221]\\n??:? void tmpjv493s_6.__modtest() [0x42841c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dae3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428f0e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a991]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a91d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ee5]\\n??:? runModuleUnitTests [0x42d8b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429658]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4295df]\\n??:? _d_run_main [0x42954a]\\n??:? main [0x42842f]\\\
    n??:? __libc_start_main [0xd85a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdpnq0nxk.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpnq0nxk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr1dy1e3e.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1dy1e3e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            result = min(result, word);\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7qbshiv9.d(23): Error: no property `count` for type `string`\\\
    n/tmp/tmp7qbshiv9.d(35): Error: undefined identifier `min`, did you mean function\
    \ `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qbshiv9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdfjj3nhy.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfjj3nhy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_gaxzya7.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gaxzya7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr8pc5dxs.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8pc5dxs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp36dn4sav.d(23): Error: undefined identifier `count`\\n/tmp/tmp36dn4sav.d(35):\
    \ Error: undefined identifier `min`, did you mean function `main`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36dn4sav.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz2i2w2md.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2i2w2md.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpody46xun.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpody46xun.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4idozb5w.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4idozb5w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjwcw6cps.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjwcw6cps.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4cxfhzyz.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cxfhzyz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpog72ucmo.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpog72ucmo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!c.canFindIn(max_word))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdoccc_ph.d(23): Error: no property `canFindIn` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdoccc_ph.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!contains(max_word, c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjwymz7qy.d(23): Error: undefined identifier `contains`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjwymz7qy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdg7_yiw7.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdg7_yiw7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words) \n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word) \n      \
    \  {\n            if(!c.canFindIn(max_word)) \n            {\n               \
    \ unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\
    \ \n        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpimv94flv.d(23): Error: no property `canFindIn` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimv94flv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(ch; word)\n        {\n            if(word.count(ch)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa_j1k9u8.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_j1k9u8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyhq73581.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhq73581.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvd542g7_.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvd542g7_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1yek_nhi.d(23): Error: undefined identifier `count`\\n/tmp/tmp1yek_nhi.d(35):\
    \ Error: undefined identifier `min`, did you mean function `main`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yek_nhi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc4dnyl6c.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpc4dnyl6c.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpc4dnyl6c.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0xe33b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0yk3cwfb.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmp0yk3cwfb.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmp0yk3cwfb.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x8a85554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0_efufo6.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_efufo6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n    \
    \    int unique = 0;\n        foreach(c; word)\n        {\n            if(!c.canFindIn(word[0..$-1]))\n\
    \                unique++;\n        }\n        if(unique > max_unique)\n     \
    \   {\n            max = word;\n            max_unique = unique;\n        }\n\
    \        else if(unique == max_unique)\n        {\n            if(word < max)\n\
    \                max = word;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzv_n88xb.d(23): Error: no property `canFindIn` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzv_n88xb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word.compare(max) < 0)\n         \
    \   {\n                max = word;\n            }\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp01ztp1n4.d(25): Error: no property `compare` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01ztp1n4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words) \n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word) \n      \
    \  {\n            if(c !in max_word) \n            {\n                max_word\
    \ ~= c;\n                unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars) \n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe216ls0b.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe216ls0b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique_char = 0;\n    string max_word = \"\";\n    foreach(string word;\
    \ words)\n    {\n        int unique_char = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique_char++;\n            }\n        }\n        if(unique_char > max_unique_char)\n\
    \        {\n            max_unique_char = unique_char;\n            max_word =\
    \ word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplz6afi22.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplz6afi22.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyetw1u88.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyetw1u88.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(result.indexOf(c)\
    \ == -1)\n            {\n                count++;\n            }\n        }\n\
    \        if(count > max)\n        {\n            max = count;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc_2bvh60.d(23): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_2bvh60.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr13_hgpo.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr13_hgpo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfcopb4q8.d(23): Error: incompatible types for `(c) in (max_word)`:\
    \ `char` and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcopb4q8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoamoz9ob.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoamoz9ob.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            result = min(result, word);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeziwo293.d(23): Error: no property `count` for type `string`\\\
    n/tmp/tmpeziwo293.d(35): Error: undefined identifier `min`, did you mean function\
    \ `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeziwo293.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptzh0ip97.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzh0ip97.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmqcg8jvo.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpmqcg8jvo.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpmqcg8jvo.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x9ace5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words) \n\
    \    {\n        int unique_chars = 0;\n        foreach(c; word) \n        {\n\
    \            if(word.count(c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars) \n        {\n  \
    \          max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgourr_1p.d(23): Error: no property `count` for type `string`\\\
    n/tmp/tmpgourr_1p.d(35): Error: undefined identifier `min`, did you mean function\
    \ `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgourr_1p.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique_char = 0;\n        foreach(char c; word)\n        {\n\
    \            if(c.count(word) == 1)\n            {\n                unique_char++;\n\
    \            }\n        }\n        if(unique_char > max_unique_char)\n       \
    \ {\n            max_unique_char = unique_char;\n            max_word = word;\n\
    \        }\n        else if(unique_char == max_unique_char)\n        {\n     \
    \       if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz_g6f1cf.d(23): Error: no property `count` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz_g6f1cf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!c.in(max_word))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3lqt1td4.d(23): Error: identifier expected following `.`, not\
    \ `in`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lqt1td4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n    \
    \    int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max = word;\n       \
    \     max_unique = unique;\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"\
    string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpipypni_6.d(23): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipypni_6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars\
    \ += 1;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n        else if(unique_chars == max_unique_chars)\n    \
    \    {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppxo_fgk3.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppxo_fgk3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpabagj88c.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpabagj88c.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpabagj88c.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x537ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(count ==\
    \ 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].count(c) == 0)\n           \
    \     {\n                    count++;\n                }\n            }\n    \
    \    }\n        if(count > max)\n        {\n            max = count;\n       \
    \     result = word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"\
    string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4ec731l.d(29): Error: no property `count` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4ec731l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words) \n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word) \n      \
    \  {\n            if(!max_word.canFind(c)) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyzrcbsh4.d(23): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzrcbsh4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count = 1;\n            }\n          \
    \  else\n            {\n                if(word[0..count].canFind(c))\n      \
    \          {\n                    continue;\n                }\n             \
    \   else\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n        else\
    \ if(count == max_count)\n        {\n            if(word < max_word)\n       \
    \     {\n                max_word = word;\n            }\n        }\n    }\n \
    \   return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7gqyi5ar.d(29): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gqyi5ar.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(c\
    \ !in word[0..$-1])\n                count++;\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n        else if(count == max_count)\n        {\n            max_word\
    \ = min(max_word, word);\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4m5cqtqv.d(23): Error: incompatible types for `(c) in (word[0..__dollar\
    \ - 1LU])`: `immutable(char)` and `string`\\n/tmp/tmp4m5cqtqv.d(33): Error: undefined\
    \ identifier `min`, did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4m5cqtqv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm1jmz1x1.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1jmz1x1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb_k8tyuj.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmpb_k8tyuj.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmpb_k8tyuj.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x9f823554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1_pyvthl.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42913d]\\n??:? void tmp1_pyvthl.__unittest_L33_C1()\
    \ [0x4281a9]\\n??:? void tmp1_pyvthl.__modtest() [0x4283a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a919]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e6d]\\n??:? runModuleUnitTests [0x42d841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429567]\\n??:? _d_run_main [0x4294d2]\\n??:? main [0x4283b7]\\\
    n??:? __libc_start_main [0x55e1c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp6vc_v06.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6vc_v06.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words) \n\
    \    {\n        int unique_chars = 0;\n        foreach(c; word) \n        {\n\
    \            if(count(word, c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars) \n        {\n  \
    \          if(word < max_word) \n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdb4gi_mf.d(23): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdb4gi_mf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
