name: HumanEval_12_longest
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) return null;\n    Nullable!(string) longest = strings[0];\n\
    \    foreach (string s; strings) {\n        if (s.length > longest.length) longest\
    \ = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp147rv5nt.d(16): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp147rv5nt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(result.isNull ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprx2km9qq.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmprx2km9qq.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmprx2km9qq.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xb607f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxnbfz34s.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpxnbfz34s.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpxnbfz34s.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x666fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(i, s; strings)\n    {\n        if(result.isNull || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnmv5exbw.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpnmv5exbw.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpnmv5exbw.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xdbba9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcyan7n7n.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpcyan7n7n.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpcyan7n7n.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x71581554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprau0o6y6.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmprau0o6y6.__unittest_L24_C1()\
    \ [0x441437]\\n??:? void tmprau0o6y6.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x3ae06554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnnmxba_c.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpnnmxba_c.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpnnmxba_c.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x7aa22554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings) \n    {\n        if(result.isNull || str.length\
    \ > result.get.length) \n        {\n            result = str;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpepc2kn5h.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpepc2kn5h.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpepc2kn5h.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xa30d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp80by3ju7.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp80by3ju7.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp80by3ju7.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xf01ea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(str; strings)\n    {\n      \
    \  if(longest.isNull || str.length > longest.get.length)\n        {\n        \
    \    longest = str;\n        }\n    }\n    return longest;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest\
    \ is null || s.length > longest.get.length)\n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpquxfl_x9.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpquxfl_x9.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpquxfl_x9.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xef136554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(result.isNull ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppbyk5tzw.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmppbyk5tzw.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppbyk5tzw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpts_sa3nx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpts_sa3nx.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpts_sa3nx.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xc1567554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    Nullable!(string) longest =\
    \ strings[0];\n    foreach (string s; strings)\n    {\n        if (s.length >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqvh172hp.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqvh172hp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo2sg2bum.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpo2sg2bum.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpo2sg2bum.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x5180554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkyq0vp0y.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpkyq0vp0y.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpkyq0vp0y.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x7a88f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg_o4bpo1.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpg_o4bpo1.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpg_o4bpo1.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xb23f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(s.length\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq22d53uz.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554a1]\\n??:? void tmpq22d53uz.__unittest_L26_C1()\
    \ [0x44142b]\\n??:? void tmpq22d53uz.__modtest() [0x452fb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e317]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454aa5]\\n??:? runModuleUnitTests [0x45e0ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45642c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563b3]\\n??:? _d_run_main [0x45631e]\\n??:? main [0x453083]\\\
    n??:? __libc_start_main [0x70ff0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (s; strings)\n        {\n            if (s.length\
    \ > longest.length)\n                longest = s;\n        }\n        return longest;\n\
    \    }\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj6zy4vh8.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpj6zy4vh8.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6zy4vh8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto result\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > result.length)\n                result = s;\n        }\n       \
    \ return result;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxhzuqp0o.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpxhzuqp0o.d(26): Error:\
    \ cannot implicitly convert expression `result` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhzuqp0o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3o0u2qje.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp3o0u2qje.__unittest_L24_C1()\
    \ [0x441437]\\n??:? void tmp3o0u2qje.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x402a6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(!result.isNull ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"core.exception.AssertError@/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2845):\
    \ Called `get' on null Nullable!string.\\n----------------\\n??:? _d_assert_msg\
    \ [0x4553ba]\\n??:? inout pure nothrow ref @property @nogc @safe inout(immutable(char)[])\
    \ std.typecons.Nullable!(immutable(char)[]).Nullable.get() [0x441d61]\\n??:? std.typecons.Nullable!(immutable(char)[]).Nullable\
    \ tmpl7ews9e_.longest(immutable(char)[][]) [0x4413ad]\\n??:? void tmpl7ews9e_.__unittest_L26_C1()\
    \ [0x44148b]\\n??:? void tmpl7ews9e_.__modtest() [0x452fac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e317]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454aa5]\\n??:? runModuleUnitTests [0x45e0ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45642c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563b3]\\n??:? _d_run_main [0x45631e]\\n??:? main [0x45307f]\\\
    n??:? __libc_start_main [0xd0370554]\\n1/1 unittests FAILED\\n\""
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        string\
    \ longest = strings[0];\n        foreach (string s; strings)\n        {\n    \
    \        if (s.length > longest.length)\n                longest = s;\n      \
    \  }\n        return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7oz1zet.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpx7oz1zet.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7oz1zet.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjl34rwqn.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpjl34rwqn.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpjl34rwqn.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xf3b74554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn3zmj81j.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpn3zmj81j.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpn3zmj81j.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xd4236554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7mgabw_j.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp7mgabw_j.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp7mgabw_j.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x9120f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(!result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"core.exception.AssertError@/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2845):\
    \ Called `get' on null Nullable!string.\\n----------------\\n??:? _d_assert_msg\
    \ [0x4553ba]\\n??:? inout pure nothrow ref @property @nogc @safe inout(immutable(char)[])\
    \ std.typecons.Nullable!(immutable(char)[]).Nullable.get() [0x441d61]\\n??:? std.typecons.Nullable!(immutable(char)[]).Nullable\
    \ tmplm7r2rsb.longest(immutable(char)[][]) [0x4413ad]\\n??:? void tmplm7r2rsb.__unittest_L26_C1()\
    \ [0x44148b]\\n??:? void tmplm7r2rsb.__modtest() [0x452fac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e317]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454aa5]\\n??:? runModuleUnitTests [0x45e0ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45642c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563b3]\\n??:? _d_run_main [0x45631e]\\n??:? main [0x45307f]\\\
    n??:? __libc_start_main [0xee954554]\\n1/1 unittests FAILED\\n\""
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoynog5fg.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpoynog5fg.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpoynog5fg.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x1577d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprz38c6u6.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmprz38c6u6.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmprz38c6u6.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xf70cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgivw5qnt.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpgivw5qnt.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpgivw5qnt.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x635df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprbvy2a8.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpprbvy2a8.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprbvy2a8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_vhait7l.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp_vhait7l.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp_vhait7l.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xe6199554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest\
    \ is null || s.length > longest.get.length) \n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqv89girv.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpqv89girv.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpqv89girv.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xc60b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest\
    \ is null || s.length > longest.get.length)\n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplrimxlze.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmplrimxlze.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmplrimxlze.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xeda8e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu1vi18er.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpu1vi18er.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpu1vi18er.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xe6dc6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        Nullable!(string)\
    \ longest = null;\n        foreach (string s; strings)\n        {\n          \
    \  if (longest is null || s.length > longest.length)\n                longest\
    \ = s;\n        }\n        return longest;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdp5dho6d.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdp5dho6d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprortjp0e.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmprortjp0e.__unittest_L24_C1()\
    \ [0x441437]\\n??:? void tmprortjp0e.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xcdb3b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz47ee7bn.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpz47ee7bn.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz47ee7bn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjihno91v.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpjihno91v.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpjihno91v.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x4b1c1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpympd9ura.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpympd9ura.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpympd9ura.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xca523554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(result.isNull ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkj2bn65l.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpkj2bn65l.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpkj2bn65l.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x8890d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        string\
    \ longest = strings[0];\n        foreach (string s; strings)\n        {\n    \
    \        if (s.length > longest.length)\n                longest = s;\n      \
    \  }\n        return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp547id70x.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp547id70x.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp547id70x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        string\
    \ longest = strings[0];\n        foreach (string s; strings)\n        {\n    \
    \        if (s.length > longest.length)\n                longest = s;\n      \
    \  }\n        return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4v43flvw.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp4v43flvw.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4v43flvw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqqw28aea.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpqqw28aea.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpqqw28aea.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x42643554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnz36q0pg.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpnz36q0pg.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpnz36q0pg.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x9d4f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp54qxys2g.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp54qxys2g.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp54qxys2g.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x1240b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2j3gkomi.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp2j3gkomi.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp2j3gkomi.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x9b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp84xy661l.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp84xy661l.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp84xy661l.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x8dcc5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(s; strings) \n    {\n        if (result.isNull || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptrpvdz8_.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmptrpvdz8_.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmptrpvdz8_.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x11dae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest\
    \ is null || s.length > longest.get.length) \n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2bbu_9rj.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp2bbu_9rj.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmp2bbu_9rj.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xf94ca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings) \n    {\n        if(!result.isNull || str.length\
    \ > result.get.length) \n        {\n            result = str;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"core.exception.AssertError@/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2845):\
    \ Called `get' on null Nullable!string.\\n----------------\\n??:? _d_assert_msg\
    \ [0x4553ba]\\n??:? inout pure nothrow ref @property @nogc @safe inout(immutable(char)[])\
    \ std.typecons.Nullable!(immutable(char)[]).Nullable.get() [0x441d61]\\n??:? std.typecons.Nullable!(immutable(char)[]).Nullable\
    \ tmpbompr_88.longest(immutable(char)[][]) [0x4413ad]\\n??:? void tmpbompr_88.__unittest_L26_C1()\
    \ [0x44148b]\\n??:? void tmpbompr_88.__modtest() [0x452fac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e317]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454aa5]\\n??:? runModuleUnitTests [0x45e0ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45642c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563b3]\\n??:? _d_run_main [0x45631e]\\n??:? main [0x45307f]\\\
    n??:? __libc_start_main [0xa8d7d554]\\n1/1 unittests FAILED\\n\""
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(s; strings)\n    {\n        if (result.isNull || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsktbtri4.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpsktbtri4.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpsktbtri4.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x3389b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        size_t\
    \ max_length = 0;\n        size_t max_index = 0;\n        foreach (i, s; strings)\n\
    \        {\n            if (s.length > max_length)\n            {\n          \
    \      max_length = s.length;\n                max_index = i;\n            }\n\
    \        }\n        return strings[max_index];\n    }\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplhi2yf3o.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmplhi2yf3o.d(30): Error:\
    \ cannot implicitly convert expression `strings[max_index]` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhi2yf3o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo6l19vik.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpo6l19vik.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpo6l19vik.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xe8c10554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxe2fjmgi.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpxe2fjmgi.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpxe2fjmgi.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x515c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4pzsvnvw.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp4pzsvnvw.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp4pzsvnvw.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x5c72a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        string\
    \ longest = strings[0];\n        foreach (string s; strings)\n        {\n    \
    \        if (s.length > longest.length)\n                longest = s;\n      \
    \  }\n        return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp99fp7qri.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp99fp7qri.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp99fp7qri.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(!result.isNull)\n\
    \        {\n            if(s.length > result.get.length)\n            {\n    \
    \            result = s;\n            }\n        }\n        else\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto max\
    \ = strings[0];\n        foreach (str; strings)\n        {\n            if (str.length\
    \ > max.length)\n                max = str;\n        }\n        return max;\n\
    \    }\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1bjs3wru.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp1bjs3wru.d(26): Error:\
    \ cannot implicitly convert expression `max` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bjs3wru.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || longest.length < s.length)\n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp842m00jq.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp842m00jq.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmp842m00jq.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x1cebc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwe6u1hr2.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpwe6u1hr2.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpwe6u1hr2.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x5498f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1npfupph.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp1npfupph.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1npfupph.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt4qlyv00.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpt4qlyv00.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpt4qlyv00.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xb9d64554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    int maxLength = 0;\n    foreach(string s; strings)\n    {\n   \
    \     if(s.length > maxLength)\n        {\n            maxLength = s.length;\n\
    \            result = s;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6gqx1pz0.d(22): Error: cannot implicitly convert expression `s.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6gqx1pz0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_z0l2r21.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp_z0l2r21.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_z0l2r21.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5gi6_c2h.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp5gi6_c2h.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp5gi6_c2h.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x80506554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx2_9rm7d.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpx2_9rm7d.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpx2_9rm7d.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x768da554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings) \n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n            result = str;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9qfa134v.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp9qfa134v.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmp9qfa134v.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x5ba42554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqh_qkarg.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpqh_qkarg.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpqh_qkarg.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x659b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq4t8z6tz.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpq4t8z6tz.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4t8z6tz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo1ao2v85.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpo1ao2v85.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1ao2v85.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu9e9uv40.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpu9e9uv40.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpu9e9uv40.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xe286a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(result is null ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"core.exception.AssertError@/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2845):\
    \ Called `get' on null Nullable!string.\\n----------------\\n??:? _d_assert_msg\
    \ [0x4553ba]\\n??:? inout pure nothrow ref @property @nogc @safe inout(immutable(char)[])\
    \ std.typecons.Nullable!(immutable(char)[]).Nullable.get() [0x441d65]\\n??:? std.typecons.Nullable!(immutable(char)[]).Nullable\
    \ tmpce4hlqls.longest(immutable(char)[][]) [0x4413a0]\\n??:? void tmpce4hlqls.__unittest_L26_C1()\
    \ [0x44148f]\\n??:? void tmpce4hlqls.__modtest() [0x452fb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e317]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454aa5]\\n??:? runModuleUnitTests [0x45e0ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45642c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563b3]\\n??:? _d_run_main [0x45631e]\\n??:? main [0x453083]\\\
    n??:? __libc_start_main [0x5a60b554]\\n1/1 unittests FAILED\\n\""
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6k8yotrf.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp6k8yotrf.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp6k8yotrf.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x73bd8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp56co_xj9.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp56co_xj9.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp56co_xj9.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x88722554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3o6xivhq.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp3o6xivhq.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3o6xivhq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest\
    \ is null || s.length > longest.get.length)\n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6asym0lc.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp6asym0lc.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmp6asym0lc.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x35848554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    auto longest = strings[0];\n\
    \    foreach (string s; strings)\n    {\n        if (s.length > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcow99ct2.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpcow99ct2.d(24): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcow99ct2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest\
    \ is null || s.length > longest.get.length)\n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwgbp13p6.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpwgbp13p6.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpwgbp13p6.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xb1ab5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        string\
    \ longest = strings[0];\n        foreach (string s; strings)\n        {\n    \
    \        if (s.length > longest.length)\n                longest = s;\n      \
    \  }\n        return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfpzngo4n.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpfpzngo4n.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpzngo4n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (s; strings)\n        {\n            if (s.length\
    \ > longest.length)\n                longest = s;\n        }\n        return longest;\n\
    \    }\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwxt9_bvl.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpwxt9_bvl.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxt9_bvl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest\
    \ is null || s.length > longest.get.length)\n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9bluhq2h.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp9bluhq2h.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmp9bluhq2h.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x6f201554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\n/*\n    Return the sum of the numbers\
    \ in the list.\n    >>> sum([])\n    0\n    >>> sum([1, 2, 3])\n    6\n    >>>\
    \ sum([1.0, 2.0, 3.0])\n    6.0\n*/\nT sum(T)(T[] numbers) if(is(T == int) ||\
    \ is(T == double))\n{\n    T sum = 0;\n    foreach(T n; numbers)\n    {\n    \
    \    sum += n;\n    }\n    return sum;\n}\n/*\n    Return the average of the numbers\
    \ in the list.\n    >>> average([])\n    0\n    >>> average([1, 2, 3])\n    2\n\
    \    >>> average([1.0, 2.0, 3.0])\n    2.0\n*/\nT average(T)(T[] numbers) if(is(T\
    \ == int) || is(T == double))\n{\n    return sum(numbers) / numbers.length;\n\
    }\n/*\n    Return the median of the numbers in the list.\n    >>> median([])\n\
    \    0\n    >>> median([1, 2, 3])\n    2\n    >>> median([1.0, 2.0, 3.0])\n  \
    \  2.0\n    >>> median([1, 2, 3, 4])\n    2.5\n*/\nT median(T)(T[] numbers) if(is(T\
    \ == int) || is(T == double))\n{\n    T[] sorted = numbers[];\n    std.algorithm.sort(sorted);\n\
    \    if(sorted.length % 2 == 0)\n    {\n        return (sorted[sorted.length /\
    \ 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n    else\n    {\n        return\
    \ sorted[sorted.length / 2];\n    }\n}\n/*\n    Return the mode of the numbers\
    \ in the list.\n    >>> mode\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyofo85rx.d(81): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyofo85rx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (s; strings)\n        {\n            if (s.length\
    \ > longest.length)\n                longest = s;\n        }\n        return longest;\n\
    \    }\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmponbwvcjx.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmponbwvcjx.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponbwvcjx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpckt8aerc.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpckt8aerc.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpckt8aerc.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x1f288554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    auto longest = strings[0];\n\
    \    foreach (string s; strings)\n    {\n        if (s.length > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm51063xa.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpm51063xa.d(24): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm51063xa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph4my8vi5.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmph4my8vi5.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmph4my8vi5.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x560bb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt4ipcumz.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpt4ipcumz.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpt4ipcumz.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x220a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm_ip3a6e.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpm_ip3a6e.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpm_ip3a6e.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xd8684554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpumld21dr.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpumld21dr.__unittest_L24_C1()\
    \ [0x441437]\\n??:? void tmpumld21dr.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x96d2c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3hl2mhrl.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp3hl2mhrl.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp3hl2mhrl.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x465ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp638lru8j.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp638lru8j.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp638lru8j.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x1be13554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1wv6w0y2.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp1wv6w0y2.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp1wv6w0y2.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x5ab9a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx5ef9mj2.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpx5ef9mj2.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpx5ef9mj2.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x294bf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplv3u_4a3.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmplv3u_4a3.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmplv3u_4a3.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x9ac2a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdmuyqv7l.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpdmuyqv7l.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpdmuyqv7l.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xca2c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (i, s; strings)\n        {\n            if (s.length\
    \ > longest.length)\n                longest = s;\n        }\n        return longest;\n\
    \    }\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp27mdbqnd.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp27mdbqnd.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27mdbqnd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    int maxLength = 0;\n    foreach(string s; strings)\n    {\n   \
    \     if(s.length > maxLength)\n        {\n            maxLength = s.length;\n\
    \            result = s;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa7wfdhtw.d(22): Error: cannot implicitly convert expression `s.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpa7wfdhtw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi9m_089d.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpi9m_089d.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpi9m_089d.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xd0e0e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz73cgluh.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpz73cgluh.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpz73cgluh.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x35fff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(result is null ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"core.exception.AssertError@/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2845):\
    \ Called `get' on null Nullable!string.\\n----------------\\n??:? _d_assert_msg\
    \ [0x4553ba]\\n??:? inout pure nothrow ref @property @nogc @safe inout(immutable(char)[])\
    \ std.typecons.Nullable!(immutable(char)[]).Nullable.get() [0x441d65]\\n??:? std.typecons.Nullable!(immutable(char)[]).Nullable\
    \ tmps2s4ejmh.longest(immutable(char)[][]) [0x4413a0]\\n??:? void tmps2s4ejmh.__unittest_L26_C1()\
    \ [0x44148f]\\n??:? void tmps2s4ejmh.__modtest() [0x452fb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e317]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454aa5]\\n??:? runModuleUnitTests [0x45e0ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45642c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563b3]\\n??:? _d_run_main [0x45631e]\\n??:? main [0x453083]\\\
    n??:? __libc_start_main [0xfdadd554]\\n1/1 unittests FAILED\\n\""
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph4cmz72x.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmph4cmz72x.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmph4cmz72x.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x9c0df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || longest.length < s.length)\n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxqul4pkc.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpxqul4pkc.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpxqul4pkc.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x81252554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplssu0zgi.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmplssu0zgi.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmplssu0zgi.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x78b1d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvmfadzrg.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpvmfadzrg.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpvmfadzrg.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xe8809554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result is null ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"core.exception.AssertError@/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2845):\
    \ Called `get' on null Nullable!string.\\n----------------\\n??:? _d_assert_msg\
    \ [0x4553ba]\\n??:? inout pure nothrow ref @property @nogc @safe inout(immutable(char)[])\
    \ std.typecons.Nullable!(immutable(char)[]).Nullable.get() [0x441d65]\\n??:? std.typecons.Nullable!(immutable(char)[]).Nullable\
    \ tmp9jx0o62g.longest(immutable(char)[][]) [0x4413a0]\\n??:? void tmp9jx0o62g.__unittest_L26_C1()\
    \ [0x44148f]\\n??:? void tmp9jx0o62g.__modtest() [0x452fb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e317]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454aa5]\\n??:? runModuleUnitTests [0x45e0ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45642c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563b3]\\n??:? _d_run_main [0x45631e]\\n??:? main [0x453083]\\\
    n??:? __libc_start_main [0x9da84554]\\n1/1 unittests FAILED\\n\""
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest\
    \ is null || s.length > longest.get.length) \n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1f89fnvx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp1f89fnvx.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmp1f89fnvx.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x1fd55554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp05ezif1g.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp05ezif1g.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp05ezif1g.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xe3756554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnnuh8pmk.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpnnuh8pmk.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpnnuh8pmk.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x4d0b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(!result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"core.exception.AssertError@/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2845):\
    \ Called `get' on null Nullable!string.\\n----------------\\n??:? _d_assert_msg\
    \ [0x4553ba]\\n??:? inout pure nothrow ref @property @nogc @safe inout(immutable(char)[])\
    \ std.typecons.Nullable!(immutable(char)[]).Nullable.get() [0x441d61]\\n??:? std.typecons.Nullable!(immutable(char)[]).Nullable\
    \ tmps_h9upsy.longest(immutable(char)[][]) [0x4413ad]\\n??:? void tmps_h9upsy.__unittest_L26_C1()\
    \ [0x44148b]\\n??:? void tmps_h9upsy.__modtest() [0x452fac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e317]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454aa5]\\n??:? runModuleUnitTests [0x45e0ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45642c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563b3]\\n??:? _d_run_main [0x45631e]\\n??:? main [0x45307f]\\\
    n??:? __libc_start_main [0x61c08554]\\n1/1 unittests FAILED\\n\""
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxrtbi_bg.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpxrtbi_bg.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpxrtbi_bg.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xd0f02554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv_s58o3u.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpv_s58o3u.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpv_s58o3u.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x2cd85554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppusnvtoi.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmppusnvtoi.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmppusnvtoi.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x7ec43554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    auto longest = strings[0];\n\
    \    foreach (i, s; strings)\n    {\n        if (s.length > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n    Return the sum\
    \ of all the numbers in the list. Return None in case the input list is empty.\n\
    \    >>> sum_of_numbers([])\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqj58g1r8.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj58g1r8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || longest.length < s.length)\n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqhhhlnkd.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpqhhhlnkd.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpqhhhlnkd.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xff55b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi0k_rlw7.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpi0k_rlw7.__unittest_L24_C1()\
    \ [0x441437]\\n??:? void tmpi0k_rlw7.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xb51c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || longest.get.length < s.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpexrh2x7c.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpexrh2x7c.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpexrh2x7c.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x119da554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphc3oampe.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmphc3oampe.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmphc3oampe.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xa7889554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjuo6bs4f.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpjuo6bs4f.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpjuo6bs4f.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x86557554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || longest.length < s.length)\n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9ivgt0rh.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp9ivgt0rh.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmp9ivgt0rh.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xf49ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprs9l60it.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmprs9l60it.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmprs9l60it.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x1ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8b93lfg9.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp8b93lfg9.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp8b93lfg9.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xff582554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_jxnsh3z.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp_jxnsh3z.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp_jxnsh3z.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x11eca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmta85svc.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpmta85svc.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmta85svc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg3llo9qx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpg3llo9qx.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpg3llo9qx.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xa6b4f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings) \n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length) \n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnh1ofiol.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpnh1ofiol.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpnh1ofiol.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xdb53554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmd7o1fqy.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpmd7o1fqy.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpmd7o1fqy.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x4655e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) \n    {\n        return Nullable!(string).init;\n    }\n\
    \    else \n    {\n        string longest = strings[0];\n        foreach (string\
    \ s; strings) \n        {\n            if (s.length > longest.length) \n     \
    \       {\n                longest = s;\n            }\n        }\n        return\
    \ Nullable!(string)(longest);\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxqf0qxu6.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpxqf0qxu6.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpxqf0qxu6.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0xc8889554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpydovyjhc.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpydovyjhc.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpydovyjhc.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xc69ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    auto longest = strings[0];\n\
    \    foreach (i, s; strings)\n    {\n        if (s.length > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw79h0_iv.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpw79h0_iv.d(24): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw79h0_iv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsuzq8rxk.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpsuzq8rxk.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpsuzq8rxk.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x8284c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpix9xkngx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpix9xkngx.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpix9xkngx.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xae27f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest is null\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwc2p83uy.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpwc2p83uy.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpwc2p83uy.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x2814554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc67v6y_g.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpc67v6y_g.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpc67v6y_g.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xd1acb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpys2spt34.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpys2spt34.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpys2spt34.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x6ce40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(result.isNull ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpssfe_nvh.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpssfe_nvh.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpssfe_nvh.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x3ea8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest\
    \ is null || s.length > longest.get.length) \n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpepqq2kj4.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpepqq2kj4.__unittest_L26_C1()\
    \ [0x44143b]\\n??:? void tmpepqq2kj4.__modtest() [0x452fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x453093]\\\
    n??:? __libc_start_main [0x3936554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    if (strings.length == 0)\n        return result;\n    else\n  \
    \  {\n        result = strings[0];\n        foreach (string s; strings)\n    \
    \    {\n            if (s.length > result.get!string.length)\n               \
    \ result = s;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnvw633d2.d(24): Error: `inout` method `std.typecons.Nullable!string.Nullable.get!string.get`\
    \ is not callable using a mutable object\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpnvw633d2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgnk9tsoo.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpgnk9tsoo.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgnk9tsoo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7yj0zm39.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp7yj0zm39.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp7yj0zm39.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xc894e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwud3a8tg.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpwud3a8tg.d(26): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwud3a8tg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu5z3aje2.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpu5z3aje2.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpu5z3aje2.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x8a2b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuqdvms59.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpuqdvms59.__unittest_L24_C1()\
    \ [0x441437]\\n??:? void tmpuqdvms59.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x734c9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(result.isNull ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm3t7otcu.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmpm3t7otcu.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmpm3t7otcu.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0xe71c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    string longest = strings[0];\n\
    \    foreach (string s; strings)\n    {\n        if (s.length > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbnn08cwc.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpbnn08cwc.d(24): Error:\
    \ cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbnn08cwc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0w1yqxi0.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4554b1]\\n??:? void tmp0w1yqxi0.__unittest_L26_C1()\
    \ [0x441437]\\n??:? void tmp0w1yqxi0.__modtest() [0x452fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e327]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454ade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459cd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459c5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454ab5]\\n??:? runModuleUnitTests [0x45e0fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x45643c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4563c3]\\n??:? _d_run_main [0x45632e]\\n??:? main [0x45308f]\\\
    n??:? __libc_start_main [0x2b8e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
