name: HumanEval_57_monotonic
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp77aucq08.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77aucq08.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1])\n            increasing = false;\n\
    \        if (l[i] < l[i + 1])\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0)\n        return true;\n    long prev = l[0];\n    bool increasing = true;\n\
    \    foreach (i; l[1..$])\n    {\n        if (i == prev)\n            continue;\n\
    \        if (increasing)\n        {\n            if (i < prev)\n            {\n\
    \                increasing = false;\n                prev = i;\n            }\n\
    \        }\n        else\n        {\n            if (i > prev)\n             \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpadg0_8lr.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428335]\\n??:? void tmpadg0_8lr.__unittest_L39_C1()\
    \ [0x427ee7]\\n??:? void tmpadg0_8lr.__modtest() [0x4280b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b24a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303dd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43088c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430369]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b221]\\n??:? runModuleUnitTests [0x42c18d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42877f]\\n??:? _d_run_main [0x4286ea]\\n??:? main [0x4280cb]\\\
    n??:? __libc_start_main [0x61cae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ \n    {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1])\
    \ return false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, v; l)\n    {\n        if (i == 0)\n        {\n            continue;\n\
    \        }\n        if (increasing && v < l[i - 1])\n        {\n            return\
    \ false;\n        }\n        if (!increasing && v > l[i - 1])\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True\
    \ if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    True\n    \n*/\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    long prev = l[0];\n    bool increasing = true;\n\
    \    foreach (i; 1..l.length)\n    {\n        if (prev == l[i])\n            continue;\n\
    \        if (increasing)\n        {\n            if (prev > l[i])\n          \
    \  {\n                increasing = false;\n                prev = l[i];\n    \
    \        }\n            else\n                prev = l[i];\n        }\n      \
    \  else\n        {\n            if (prev < l[i])\n                return false;\n\
    \            else\n                prev = l[i];\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0) return true;\n    long prev = l[0];\n    bool increasing = true;\n   \
    \ foreach (i; 1..l.length) {\n        if (l[i] == prev) continue;\n        if\
    \ (increasing) {\n            if (l[i] < prev) {\n                increasing =\
    \ false;\n                prev = l[i];\n            }\n        } else {\n    \
    \        if (l[i] > prev) return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg8upbu7v.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42839d]\\n??:? void tmpg8upbu7v.__unittest_L31_C1()\
    \ [0x427f4b]\\n??:? void tmpg8upbu7v.__modtest() [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0x1cb33554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, v; l)\n    {\n        if (i == 0)\n        {\n            continue;\n\
    \        }\n        if (increasing && v < l[i - 1])\n        {\n            return\
    \ false;\n        }\n        if (!increasing && v > l[i - 1])\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    long[] l2\
    \ = l.dup;\n    l2.sort;\n    return l == l2 || l == l2.reverse;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphauq4_fm.d(16): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmphauq4_fm.d(17): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphauq4_fm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[1..$], l[0..$-1]))\n\
    \    {\n        increasing &= i > j;\n        decreasing &= i < j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdq3arcr9.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdq3arcr9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0)\n        return true;\n    long prev = l[0];\n    bool increasing = true;\n\
    \    foreach (i; l[1..$])\n    {\n        if (i == prev)\n            continue;\n\
    \        if (increasing)\n        {\n            if (i < prev)\n            {\n\
    \                increasing = false;\n                prev = i;\n            }\n\
    \        }\n        else\n        {\n            if (i > prev)\n             \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp97dc04m8.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428335]\\n??:? void tmp97dc04m8.__unittest_L39_C1()\
    \ [0x427ee7]\\n??:? void tmp97dc04m8.__modtest() [0x4280b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b24a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303dd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43088c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430369]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b221]\\n??:? runModuleUnitTests [0x42c18d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42877f]\\n??:? _d_run_main [0x4286ea]\\n??:? main [0x4280cb]\\\
    n??:? __libc_start_main [0xd0c37554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, v; l) \n    {\n        if (i > 0) \n        {\n            if\
    \ (increasing && v < l[i - 1]) \n            {\n                return false;\n\
    \            }\n            if (!increasing && v > l[i - 1]) \n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    long diff = l[1] - l[0];\n    for (long i =\
    \ 2; i < l.length; i++)\n    {\n        if (diff * (l[i] - l[i - 1]) < 0)\n  \
    \          return false;\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2,\
    \ 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3v750ll8.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v750ll8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, v; l)\
    \ \n    {\n        if (i == 0) continue;\n        if (increasing && v < l[i-1])\
    \ return false;\n        if (!increasing && v > l[i-1]) return false;\n    }\n\
    \    return true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n\
    */\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    long[] d\
    \ = l[1..$] - l[0..$-1];\n    return d.all!(x => x == 0 || x == d[0]);\n}\n/*\n\
    Return True if list elements are monotonically increasing.\n    >>> increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> increasing([1, 20, 4, 10])\n    False\n    >>>\
    \ increasing([4, 1, 0, -10])\n    False\n*/\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8_db2xs0.d(15): Error: array operation `l[1..__dollar] - l[0..__dollar\
    \ - 1LU]` without destination memory not allowed\\n/tmp/tmp8_db2xs0.d(16): Error:\
    \ no property `all` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8_db2xs0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, v; l) \n    {\n        if (i > 0) \n        {\n            if (increasing\
    \ && v < l[i - 1])\n                return false;\n            if (!increasing\
    \ && v > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing)\n\
    \        {\n            if (e < l[i - 1])\n                return false;\n   \
    \     }\n        else\n        {\n            if (e > l[i - 1])\n            \
    \    return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp3z05m8b.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp3z05m8b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing)\n\
    \        {\n            if (e < l[i - 1])\n                return false;\n   \
    \     }\n        else\n        {\n            if (e > l[i - 1])\n            \
    \    return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n\
    \    {\n        if (i > 0)\n        {\n            if (increasing)\n         \
    \   {\n                if (e < l[i-1]) return false;\n            }\n        \
    \    else\n            {\n                if (e > l[i-1]) return false;\n    \
    \        }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, v; l) \n    {\n        if (i > 0) \n        {\n            if\
    \ (increasing) \n            {\n                if (v < l[i - 1]) \n         \
    \       {\n                    return false;\n                }\n            }\
    \ \n            else \n            {\n                if (v > l[i - 1]) \n   \
    \             {\n                    return false;\n                }\n      \
    \      }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> increasing([1, 2, 4, 20])\n    True\n    >>> increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> increasing([4, 1, 0, -10])\n    False\n    \n\
    */\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ss4_tv0.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ss4_tv0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (size_t i = 1;\
    \ i < l.length - 1; i++) \n    {\n        if (increasing) \n        {\n      \
    \      if (l[i] > l[i + 1]) return false;\n        } \n        else \n       \
    \ {\n            if (l[i] < l[i + 1]) return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 2; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i] < l[i - 1])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i] > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/\nunittest\n{\n  \
    \  alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    long[] l2\
    \ = l[1..$];\n    return l2.all!((a, b) => a > b || a < b)(l[0]);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl7lw0eqb.d(16): Error: no property `all` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl7lw0eqb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing)\n\
    \        {\n            if (e < l[i - 1])\n                return false;\n   \
    \     }\n        else\n        {\n            if (e > l[i - 1])\n            \
    \    return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing)\n        {\n          \
    \  if (l[i] > l[i + 1]) return false;\n        }\n        else\n        {\n  \
    \          if (l[i] < l[i + 1]) return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n    \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpxoa6cu7c.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42844e]\\n??:? bool tmpxoa6cu7c.monotonic(long[]) [0x427de8]\\\
    n??:? void tmpxoa6cu7c.__unittest_L49_C1() [0x427e99]\\n??:? void tmpxoa6cu7c.__modtest()\
    \ [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0xb52b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/\nunittest\n{\n  \
    \  alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if the list is sorted in ascending order.\n    >>> is_sorted([1, 2, 4,\
    \ 20])\n    True\n    >>> is_sorted([1, 20, 4, 10])\n    False\n    >>> is_sorted([4,\
    \ 1, 0, -10])\n    False\n*/\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    else \n    {\n        bool increasing\
    \ = l[0] < l[1];\n        foreach (i, elem; l) \n        {\n            if (i\
    \ > 0) \n            {\n                if (increasing) \n                {\n\
    \                    if (elem < l[i - 1]) \n                    {\n          \
    \              return false;\n                    }\n                }\n     \
    \           else \n                {\n                    if (elem > l[i - 1])\
    \ \n                    {\n                        return false;\n           \
    \         }\n                }\n            }\n        }\n        return true;\n\
    \    }\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    auto first = l[0];\n    auto\
    \ second = l[1];\n    if (first == second) \n    {\n        return monotonic(l[1..$]);\n\
    \    }\n    auto inc = first < second;\n    foreach (i, e; l[1..$]) \n    {\n\
    \        if (inc && e < i) \n        {\n            return false;\n        }\n\
    \        if (!inc && e > i) \n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpigxt5izr.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283a5]\\n??:? void tmpigxt5izr.__unittest_L39_C1()\
    \ [0x427f57]\\n??:? void tmpigxt5izr.__modtest() [0x428128]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c427]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43044d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b291]\\n??:? runModuleUnitTests [0x42c1fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428868]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287ef]\\n??:? _d_run_main [0x42875a]\\n??:? main [0x42813b]\\\
    n??:? __libc_start_main [0x2335554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    int direction\
    \ = 0;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n    {\n        if (i > j)\n\
    \        {\n            if (direction == 1)\n                return false;\n \
    \           direction = -1;\n        }\n        else if (i < j)\n        {\n \
    \           if (direction == -1)\n                return false;\n            direction\
    \ = 1;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9s596ot3.d(16): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9s596ot3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    True\n    \n*/\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1])\n            increasing = false;\n\
    \        if (l[i] < l[i + 1])\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing)\n\
    \        {\n            if (e < l[i - 1])\n                return false;\n   \
    \     }\n        else\n        {\n            if (e > l[i - 1])\n            \
    \    return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4n7tor21.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42844e]\\n??:? bool tmp4n7tor21.monotonic(long[]) [0x427de8]\\\
    n??:? void tmp4n7tor21.__unittest_L48_C1() [0x427e99]\\n??:? void tmp4n7tor21.__modtest()\
    \ [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0x5252f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 2; i < l.length; i++) \n    {\n        if (increasing) \n  \
    \      {\n            if (l[i] < l[i - 1]) \n            {\n                return\
    \ false;\n            }\n        } \n        else \n        {\n            if\
    \ (l[i] > l[i - 1]) \n            {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnc_ahn5l.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnc_ahn5l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> increasing([1, 2, 4, 20])\n    True\n    >>> increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> increasing([4, 1, 0, -10])\n    False\n*/\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqfnpz2u.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqfnpz2u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw2nbzpri.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2nbzpri.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpxerk5q7w.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42844e]\\n??:? bool tmpxerk5q7w.monotonic(long[]) [0x427de8]\\\
    n??:? void tmpxerk5q7w.__unittest_L39_C1() [0x427e99]\\n??:? void tmpxerk5q7w.__modtest()\
    \ [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0xbae06554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (size_t i = 1;\
    \ i < l.length - 1; i++)\n    {\n        if (increasing)\n        {\n        \
    \    if (l[i] > l[i + 1]) return false;\n        }\n        else\n        {\n\
    \            if (l[i] < l[i + 1]) return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 2; i < l.length; i++) \n    {\n        if (increasing && l[i] < l[i - 1])\
    \ \n            return false;\n        if (!increasing && l[i] > l[i - 1]) \n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0) \n    {\n        return true;\n    }\n    long[] diff = l[1 .. $] - l[0\
    \ .. $ - 1];\n    return diff.all!(a => a == 0 || a == diff[0]);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx9hk0wk5.d(19): Error: array operation `l[1..__dollar] - l[0..__dollar\
    \ - 1LU]` without destination memory not allowed\\n/tmp/tmpx9hk0wk5.d(20): Error:\
    \ no property `all` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpx9hk0wk5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    return l.length\
    \ < 2 || (l[0] < l[1] ? l[0..$-1].zip(l[1..$]).all!(a => a[0] <= a[1]) : l[0..$-1].zip(l[1..$]).all!(a\
    \ => a[0] >= a[1]));\n}\nunittest\n{\n    alias candidate = monotonic;\n\n   \
    \ assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L,\
    \ 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n \
    \   assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy14iuba6.d(15): Error: no property `zip` for type `long[]`\\\
    n/tmp/tmpy14iuba6.d(15): Error: no property `zip` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy14iuba6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ \n    {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1])\
    \ return false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp36279vvz.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42844e]\\n??:? bool tmp36279vvz.monotonic(long[]) [0x427de8]\\\
    n??:? void tmp36279vvz.__unittest_L39_C1() [0x427e99]\\n??:? void tmp36279vvz.__modtest()\
    \ [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0xa9657554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    long[] diffs = l[1 .. $] - l[0\
    \ .. $ - 1];\n    return all!(a => a == 0 || a == 1 || a == -1)(diffs);\n}\n/*\n\
    Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/\nunittest\n{\n  \
    \  alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmenkz2_7.d(19): Error: array operation `l[1..__dollar] - l[0..__dollar\
    \ - 1LU]` without destination memory not allowed\\n/tmp/tmpmenkz2_7.d(20): Error:\
    \ template instance `all!((a) => a == 0 || a == 1 || a == -1)` template `all`\
    \ is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmenkz2_7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1]) return\
    \ false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2x09yg2.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2x09yg2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\n/*\nReturn True if the list\
    \ is sorted.\n    >>> sorted([1, 2, 4, 20])\n    True\n    >>> sorted([1, 20,\
    \ 4, 10])\n    False\n    >>> sorted([4, 1, 0, -10])\n    False\n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzye1lg4z.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzye1lg4z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1]) return\
    \ false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing)\n        {\n          \
    \  if (l[i] > l[i + 1]) return false;\n        }\n        else\n        {\n  \
    \          if (l[i] < l[i + 1]) return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1)\n        return true;\n    long prev = l[0];\n    bool increasing = l[1]\
    \ > prev;\n    foreach (i, v; l[1..$])\n    {\n        if (increasing)\n     \
    \   {\n            if (v < prev)\n                return false;\n        }\n \
    \       else\n        {\n            if (v > prev)\n                return false;\n\
    \        }\n        prev = v;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n    \
    \    {\n            if (l[i] < l[i - 1])\n            {\n                return\
    \ false;\n            }\n        }\n        else\n        {\n            if (l[i]\
    \ > l[i - 1])\n            {\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0)\n        return true;\n    long prev = l[0];\n    bool increasing = true;\n\
    \    foreach (i; l[1..$])\n    {\n        if (i == prev)\n            continue;\n\
    \        if (increasing && i < prev)\n            increasing = false;\n      \
    \  else if (!increasing && i > prev)\n            return false;\n        prev\
    \ = i;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    auto d = l[1] - l[0];\n    foreach (i, e; l[1..$])\n\
    \    {\n        if (e - l[i] != d) return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp06nyqw_y.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42834d]\\n??:? void tmp06nyqw_y.__unittest_L23_C1()\
    \ [0x427e64]\\n??:? void tmp06nyqw_y.__modtest() [0x4280d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3cf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b262]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430381]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b239]\\n??:? runModuleUnitTests [0x42c1a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428797]\\n??:? _d_run_main [0x428702]\\n??:? main [0x4280e3]\\\
    n??:? __libc_start_main [0xe811b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    else \n    {\n        long[]\
    \ diff = l[1 .. $] - l[0 .. $ - 1];\n        return all!(a => a == 0)(diff) ||\
    \ all!(a => a == 0)(diff.map!(a => -a));\n    }\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1u97do4.d(21): Error: array operation `l[1..__dollar] - l[0..__dollar\
    \ - 1LU]` without destination memory not allowed\\n/tmp/tmpe1u97do4.d(22): Error:\
    \ template instance `all!((a) => a == 0)` template `all` is not defined\\n/tmp/tmpe1u97do4.d(22):\
    \ Error: template instance `all!((a) => a == 0)` template `all` is not defined\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1u97do4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n    \
    \    {\n            if (l[i] < l[i - 1])\n            {\n                return\
    \ false;\n            }\n        }\n        else\n        {\n            if (l[i]\
    \ > l[i - 1])\n            {\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i] < l[i - 1])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i] > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0)\n        return true;\n    long prev = l[0];\n    bool increasing = true;\n\
    \    foreach (i; l[1..$])\n    {\n        if (prev == i)\n            continue;\n\
    \        if (increasing)\n        {\n            if (prev > i)\n            {\n\
    \                increasing = false;\n                prev = i;\n            }\n\
    \        }\n        else\n        {\n            if (prev < i)\n             \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8z505o4i.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428335]\\n??:? void tmp8z505o4i.__unittest_L39_C1()\
    \ [0x427ee7]\\n??:? void tmp8z505o4i.__modtest() [0x4280b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b24a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303dd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43088c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430369]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b221]\\n??:? runModuleUnitTests [0x42c18d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42877f]\\n??:? _d_run_main [0x4286ea]\\n??:? main [0x4280cb]\\\
    n??:? __libc_start_main [0x2f112554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n\
    */\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0) return true;\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i-1]) increasing\
    \ = false;\n        if (l[i] > l[i-1]) decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1)\n        return true;\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjcorg3q.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjcorg3q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 2; i < l.length; i++) \n    {\n        if (increasing && l[i]\
    \ < l[i - 1]) \n        {\n            return false;\n        }\n        if (!increasing\
    \ && l[i] > l[i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n\
    */\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    long[] l2\
    \ = l.dup;\n    l2.sort;\n    return l == l2 || l == l2.reverse;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgb3sc3x1.d(16): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpgb3sc3x1.d(17): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgb3sc3x1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing && e < l[i - 1])\
    \ \n        {\n            return false;\n        }\n        if (!increasing &&\
    \ e > l[i - 1]) \n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n\
    */\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp76zmsu8j.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428456]\\n??:? bool tmp76zmsu8j.monotonic(long[]) [0x427de8]\\\
    n??:? void tmp76zmsu8j.__unittest_L42_C1() [0x427ea1]\\n??:? void tmp76zmsu8j.__modtest()\
    \ [0x428124]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c427]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43044d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b291]\\n??:? runModuleUnitTests [0x42c1fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428868]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287ef]\\n??:? _d_run_main [0x42875a]\\n??:? main [0x428137]\\\
    n??:? __libc_start_main [0x2c705554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, x; l)\
    \ \n    {\n        if (i > 0) \n        {\n            if (increasing && l[i]\
    \ < l[i-1]) return false;\n            if (!increasing && l[i] > l[i-1]) return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    long[] d = l[1..$] - l[0..$-1];\n    return d.all!(x\
    \ => x == 0 || x == d[0]);\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp7ugowyf.d(16): Error: array operation `l[1..__dollar] - l[0..__dollar\
    \ - 1LU]` without destination memory not allowed\\n/tmp/tmpp7ugowyf.d(17): Error:\
    \ no property `all` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpp7ugowyf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ \n    {\n        if (i > 0) \n        {\n            if (increasing && e < l[i\
    \ - 1]) return false;\n            if (!increasing && e > l[i - 1]) return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (size_t\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\
    \ {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp20rucout.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp20rucout.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 2; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i] < l[i - 1])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i] > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if list is sorted\
    \ in ascending order.\n    >>> is_sorted([1, 2, 4, 20])\n    True\n    >>> is_sorted([1,\
    \ 20, 4, 10])\n    False\n    >>> is_sorted([4, 1, 0, -10])\n    False\n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    else \n    {\n        long[]\
    \ diffs = l[1 .. $].map!(a => a - l[$ - 1]);\n        return all!(a => a == 0\
    \ || a == 1 || a == -1)(diffs);\n    }\n}\nunittest\n{\n    alias candidate =\
    \ monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn8m9lxxk.d(21): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpn8m9lxxk.d(22): Error: template instance `all!((a) => a == 0 || a ==\
    \ 1 || a == -1)` template `all` is not defined\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpn8m9lxxk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    long sign = sign(l[1] - l[0]);\n    foreach\
    \ (i, v; l)\n    {\n        if (sign != sign(v - l[i - 1]))\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcnslax5r.d(17): Error: undefined identifier `sign`, did you mean\
    \ template `sgn(F)(F x)`?\\n/tmp/tmpcnslax5r.d(20): Error: function expected before\
    \ `()`, not `sign` of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpcnslax5r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    long[] l2 = l[1..$];\n    foreach(i,\
    \ j; zip(l, l2)) {\n        if (i > j) {\n            increasing = false;\n  \
    \      }\n        if (i < j) {\n            decreasing = false;\n        }\n \
    \   }\n    return increasing || decreasing;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0v5zjxgb.d(18): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0v5zjxgb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    long sign = l[1] - l[0];\n    for (int i = 1;\
    \ i < l.length - 1; i++)\n    {\n        if (sign * (l[i + 1] - l[i]) < 0)\n \
    \           return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing)\n        {\n          \
    \  if (l[i] > l[i + 1]) return false;\n        }\n        else\n        {\n  \
    \          if (l[i] < l[i + 1]) return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i] < l[i - 1])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i] > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing)\n\
    \        {\n            if (e < l[i - 1])\n                return false;\n   \
    \     }\n        else\n        {\n            if (e > l[i - 1])\n            \
    \    return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if\
    \ list elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    True\n    \n*/\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] >= l[0];\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (increasing) \n  \
    \      {\n            if (l[i] < l[i - 1]) \n            {\n                return\
    \ false;\n            }\n        } \n        else \n        {\n            if\
    \ (l[i] > l[i - 1]) \n            {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1]) return\
    \ false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\
    \ \n    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n\
    \    return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp74rwdeu3.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74rwdeu3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    True\n    \n*/\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l)\n    {\n        if (i == 0)\n        {\n            continue;\n\
    \        }\n        if (increasing)\n        {\n            if (e < l[i - 1])\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    else\n        {\n            if (e > l[i - 1])\n            {\n         \
    \       return false;\n            }\n        }\n    }\n    return true;\n}\n\
    /*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, v; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing)\n\
    \        {\n            if (v < l[i - 1])\n                return false;\n   \
    \     }\n        else\n        {\n            if (v > l[i - 1])\n            \
    \    return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/\nunittest\n{\n  \
    \  alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0)\n        return true;\n    long prev = l[0];\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach (i; l[1..$])\n    {\n        if (i >\
    \ prev)\n            decreasing = false;\n        if (i < prev)\n            increasing\
    \ = false;\n        prev = i;\n    }\n    return increasing || decreasing;\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp6i4nkylf.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42844e]\\n??:? bool tmp6i4nkylf.monotonic(long[]) [0x427de8]\\\
    n??:? void tmp6i4nkylf.__unittest_L39_C1() [0x427e99]\\n??:? void tmp6i4nkylf.__modtest()\
    \ [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0x36992554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpdkd4ya7h.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42844e]\\n??:? bool tmpdkd4ya7h.monotonic(long[]) [0x427de8]\\\
    n??:? void tmpdkd4ya7h.__unittest_L48_C1() [0x427e99]\\n??:? void tmpdkd4ya7h.__modtest()\
    \ [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0xacbf8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1)\n        return true;\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i +\
    \ 1])\n            return false;\n        if (!increasing && l[i] < l[i + 1])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    long[] diffs = l[1..$] - l[0..$-1];\n    return diffs.all!(x\
    \ => x == diffs[0]);\n}\nunittest\n{\n    alias candidate = monotonic;\n\n   \
    \ assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L,\
    \ 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n \
    \   assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxaykr4io.d(16): Error: array operation `l[1..__dollar] - l[0..__dollar\
    \ - 1LU]` without destination memory not allowed\\n/tmp/tmpxaykr4io.d(17): Error:\
    \ no property `all` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxaykr4io.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0) return true;\n    long prev = l[0];\n    bool increasing = true;\n   \
    \ foreach (i; l[1..$]) {\n        if (i == prev) continue;\n        if (increasing)\
    \ {\n            if (i < prev) increasing = false;\n        } else {\n       \
    \     if (i > prev) return false;\n        }\n        prev = i;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l) \n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    else \n    {\n        bool increasing\
    \ = l[0] < l[1];\n        foreach (i, e; l) \n        {\n            if (i > 0)\
    \ \n            {\n                if (increasing) \n                {\n     \
    \               if (e < l[i - 1]) \n                    {\n                  \
    \      return false;\n                    }\n                }\n             \
    \   else \n                {\n                    if (e > l[i - 1]) \n       \
    \             {\n                        return false;\n                    }\n\
    \                }\n            }\n        }\n        return true;\n    }\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    long[] diffs = l[1 .. $].map!(a\
    \ => a - l[$ - 1]);\n    return diffs.all!(a => a == diffs[0]) && diffs[0] !=\
    \ 0;\n}\n/*\nReturn True if list is sorted.\n    >>> sorted([1, 2, 4, 20])\n \
    \   True\n    >>> sorted([1, 20, 4, 10])\n    False\n    >>> sorted([4, 1, 0,\
    \ -10])\n    False\n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu_oyh7z6.d(19): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpu_oyh7z6.d(20): Error: no property `all` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_oyh7z6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i] < l[i - 1])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i] > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, v; l) \n    {\n        if (i == 0) \n        {\n            continue;\n\
    \        }\n        if (increasing != (v > l[i - 1])) \n        {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n    >>> strictly_increasing([1, 2, 4,\
    \ 20])\n    True\n    >>> strictly_increasing([1, 20, 4, 10])\n    False\n   \
    \ >>> strictly_increasing([4, 1, 0, -10])\n    False\n*/\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\
    \ \n    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n\
    \    return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8b9jj6a2.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8b9jj6a2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i] < l[i - 1])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i] > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ \n    {\n        if (i == 0) continue;\n        if (increasing) \n        {\n\
    \            if (e < l[i - 1]) return false;\n        } \n        else \n    \
    \    {\n            if (e > l[i - 1]) return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, v; l) \n    {\n        if (i > 0) \n        {\n            if\
    \ (increasing && v < l[i - 1]) \n            {\n                return false;\n\
    \            }\n            if (!increasing && v > l[i - 1]) \n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n        return true;\n    long diff = l[1] - l[0];\n    foreach (i, e;\
    \ l[1..$]) \n    {\n        if (e - l[i] != diff) \n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps4y2ked0.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42834d]\\n??:? void tmps4y2ked0.__unittest_L25_C1()\
    \ [0x427e64]\\n??:? void tmps4y2ked0.__modtest() [0x4280d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3cf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b262]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430381]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b239]\\n??:? runModuleUnitTests [0x42c1a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428797]\\n??:? _d_run_main [0x428702]\\n??:? main [0x4280e3]\\\
    n??:? __libc_start_main [0xbf502554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, v; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && v < l[i - 1])\n                return false;\n            if (!increasing\
    \ && v > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n\tif (l.length\
    \ < 2) \n\t{\n\t\treturn true;\n\t}\n\tbool increasing = l[1] > l[0];\n\tforeach\
    \ (i, v; l) \n\t{\n\t\tif (i > 0) \n\t\t{\n\t\t\tif (increasing) \n\t\t\t{\n\t\
    \t\t\tif (v < l[i - 1]) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\
    } \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (v > l[i - 1]) \n\t\t\t\t{\n\t\t\t\t\treturn\
    \ false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n   \
    \ alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++) \n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing && e < l[i - 1])\
    \ \n        {\n            return false;\n        }\n        if (!increasing &&\
    \ e > l[i - 1]) \n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpz9_ipzk4.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428456]\\n??:? bool tmpz9_ipzk4.monotonic(long[]) [0x427de8]\\\
    n??:? void tmpz9_ipzk4.__unittest_L33_C1() [0x427ea1]\\n??:? void tmpz9_ipzk4.__modtest()\
    \ [0x428124]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c427]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43044d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b291]\\n??:? runModuleUnitTests [0x42c1fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428868]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287ef]\\n??:? _d_run_main [0x42875a]\\n??:? main [0x428137]\\\
    n??:? __libc_start_main [0xbabc2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 2; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd039h_4_.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd039h_4_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i] < l[i - 1])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i] > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n\
    \    \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    long prev = l[0];\n    bool increasing = l[1]\
    \ > prev;\n    foreach (i; 1..l.length)\n    {\n        if (l[i] == prev)\n  \
    \          continue;\n        if (l[i] > prev != increasing)\n            return\
    \ false;\n        prev = l[i];\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3zgbrelu.d(23): Error: found `!=` when expecting `)`\\n/tmp/tmp3zgbrelu.d(23):\
    \ Error: found `)` when expecting `;` following statement\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zgbrelu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/\nunittest\n{\n  \
    \  alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0)\n        return true;\n    long prev = l[0];\n    bool increasing = true;\n\
    \    for (long i = 1; i < l.length; i++)\n    {\n        if (prev == l[i])\n \
    \           continue;\n        if (increasing && prev > l[i])\n        {\n   \
    \         increasing = false;\n            prev = l[i];\n            continue;\n\
    \        }\n        if (!increasing && prev < l[i])\n            return false;\n\
    \        prev = l[i];\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, v; l)\n\
    \    {\n        if (i == 0) continue;\n        if (increasing && v < l[i-1]) return\
    \ false;\n        if (!increasing && v > l[i-1]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 2; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0) return true;\n    long prev = l[0];\n    bool increasing = true;\n   \
    \ foreach (i; 1..l.length) {\n        if (prev == l[i]) continue;\n        if\
    \ (increasing && l[i] < prev) increasing = false;\n        if (!increasing &&\
    \ l[i] > prev) return false;\n        prev = l[i];\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp6zc32muw.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42844e]\\n??:? bool tmp6zc32muw.monotonic(long[]) [0x427de8]\\\
    n??:? void tmp6zc32muw.__unittest_L39_C1() [0x427e99]\\n??:? void tmp6zc32muw.__modtest()\
    \ [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0xc78c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && l[i - 1] > e)\n            return false;\n        if (!increasing && l[i\
    \ - 1] < e)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1)\n        return true;\n    if (l[0] < l[1])\n    {\n        for (size_t\
    \ i = 1; i < l.length; i++)\n        {\n            if (l[i] < l[i-1])\n     \
    \           return false;\n        }\n    }\n    else\n    {\n        for (size_t\
    \ i = 1; i < l.length; i++)\n        {\n            if (l[i] > l[i-1])\n     \
    \           return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ != (e > l[i - 1]))\n            return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ <= 1) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpl8cv1u3f.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42844e]\\n??:? bool tmpl8cv1u3f.monotonic(long[]) [0x427de8]\\\
    n??:? void tmpl8cv1u3f.__unittest_L39_C1() [0x427e99]\\n??:? void tmpl8cv1u3f.__modtest()\
    \ [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0xb264a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ == 0)\n    {\n        return true;\n    }\n    if (l.length == 1)\n    {\n \
    \       return true;\n    }\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i +\
    \ 1])\n        {\n            return false;\n        }\n        if (!increasing\
    \ && l[i] < l[i + 1])\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1]) return\
    \ false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsleb6bxh.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsleb6bxh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
