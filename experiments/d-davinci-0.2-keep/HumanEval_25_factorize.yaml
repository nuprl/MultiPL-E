name: HumanEval_25_factorize
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n Return list of prime factors\
  \ of given integer in the order from smallest to largest.\n    Each of the factors\
  \ should be listed number of times corresponding to how many times it appeares in\
  \ factorization.\n    Input number should be equal to the product of all factors\n\
  \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
  \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n) \n"
tests: "unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
  \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) ==\
  \ [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
  \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L,\
  \ 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
  \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
completions: ["{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            factors ~= i;\n     \
    \       n /= i;\n        } \n        else \n        {\n            i++;\n    \
    \    }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n    long[]\
    \ primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,\
    \ 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\
    \ 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,\
    \ 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431,\
    \ 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523,\
    \ 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631,\
    \ 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,\
    \ 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853,\
    \ 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,\
    \ 971, 977, 983, 991, 997];\n    foreach(p; primes)\n    {\n        if(n % p ==\
    \ 0)\n        {\n            factors ~= p;\n            n /= p;\n        }\n \
    \   }\n    return factors;\n}", "{\n    long[] result = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            result ~= i;\n            n /= i;\n        }\n       \
    \ else \n        {\n            i++;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n         \
    \   factors ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ factors;\n}", "{\n    long[] factors = [];\n    long d = 2;\n    while (n >\
    \ 1) \n    {\n        while (n % d == 0) \n        {\n            factors ~= d;\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
    \ 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n   \
    \ foreach(p; primes) \n    {\n        while(n % p == 0) \n        {\n        \
    \    result ~= p;\n            n /= p;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            factors ~= i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return factors;\n}", "{\n    long[] result = new long[];\n    long i\
    \ = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        }\n        i++;\n    }\n\
    \    return result;\n}", "{\n    long[] result = [];\n    foreach(i; 2..n)\n \
    \   {\n        while(n % i == 0)\n        {\n            result ~= i;\n      \
    \      n /= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    foreach(i; 2..n)\n    {\n        while(n % i == 0)\n        {\n \
    \           result ~= i;\n            n /= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            factors ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return factors;\n}", "{\n    long[] result = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n         \
    \   result ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          factors ~= i;\n            n /= i;\n        } \n        else \n   \
    \     {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n   \
    \ long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       }\n        i++;\n    }\n    return factors;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            factors ~= i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            result ~= d;\n          \
    \  n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n  \
    \  long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n       \
    \ if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n      \
    \  {\n            factors ~= d;\n            n /= d;\n        }\n        d +=\
    \ 1;\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n    long i\
    \ = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n    \
    \        factors ~= i;\n            n /= i;\n        } \n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i\
    \ == 0) \n        {\n            factors ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            factors ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return factors;\n}", "{\n    long[] result = [];\n    long d = 2;\n\
    \    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n         \
    \   result ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n   \
    \ return result;\n}", "{\n    long[] result = [];\n    long[] primes = [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\
    \ 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\
    \ 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\
    \ 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,\
    \ 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\
    \ 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,\
    \ 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757,\
    \ 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\
    \ 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,\
    \ 991, 997];\n    foreach(prime; primes)\n    {\n        while(n % prime == 0)\n\
    \        {\n            result ~= prime;\n            n /= prime;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] res = new long[];\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      res ~= i;\n            n /= i;\n        } \n        else \n        {\n\
    \            i++;\n        }\n    }\n    return res;\n}", "{\n    long[] result\
    \ = new long[];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021,\
    \ 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103,\
    \ 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181", "{\n    long[] result\
    \ = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            result ~= d;\n          \
    \  n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n  \
    \  long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % d == 0) \n        {\n            result ~= d;\n            n /= d;\n  \
    \      }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (i <= n)\n    {\n        if (n % i == 0)\n\
    \        {\n            factors ~= i;\n            n /= i;\n        }\n      \
    \  else\n        {\n            i++;\n        }\n    }\n    return factors;\n}",
  "{\n    long[] factors = [];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    foreach(prime;\
    \ primes)\n    {\n        while(n % prime == 0)\n        {\n            factors\
    \ ~= prime;\n            n /= prime;\n        }\n    }\n    return factors;\n}",
  "{\n    long[] result = [];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    foreach(prime;\
    \ primes)\n    {\n        while(n % prime == 0)\n        {\n            result\
    \ ~= prime;\n            n /= prime;\n        }\n    }\n    return result;\n}",
  "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n    \
    \    if (n % i == 0) \n        {\n            factors ~= i;\n            n /=\
    \ i;\n        }\n        else \n        {\n            i++;\n        }\n    }\n\
    \    return factors;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            result\
    \ ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n)\n    {\n\
    \        if (n % i == 0)\n        {\n            factors ~= i;\n            n\
    \ /= i;\n        }\n        else\n        {\n            i++;\n        }\n   \
    \ }\n    return factors;\n}", "{\n    long[] factors = [];\n    long d = 2;\n\
    \    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n         \
    \   factors ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n  \
    \  return factors;\n}", "{\n    long[] factors = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            factors\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        while (n % i == 0) \n        {\n            result ~= i;\n          \
    \  n /= i;\n        }\n        i++;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n %\
    \ d == 0) \n        {\n            result ~= d;\n            n /= d;\n       \
    \ }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] factors;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            factors ~= i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n\
    \    long[] factors = [];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    foreach(p;\
    \ primes)\n    {\n        while(n % p == 0)\n        {\n            factors ~=\
    \ p;\n            n /= p;\n        }\n    }\n    return factors;\n}", "{\n   \
    \ long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       } \n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return factors;\n}", "{\n    long[] factors = new long[];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] factors =\
    \ [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            factors ~= i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ factors ~= i;\n            n /= i;\n        }\n        else \n        {\n  \
    \          i += 1;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\n\
    \        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        while (n % i == 0) \n        {\n            result ~= i;\n          \
    \  n /= i;\n        }\n        i++;\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            factors ~= i;\n            n /= i;\n      \
    \  } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            n /= i;\n     \
    \       factors ~= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n   \
    \         result ~= i;\n            n /= i;\n        } \n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n)\n    {\n\
    \        if (n % i == 0)\n        {\n            result ~= i;\n            n /=\
    \ i;\n        }\n        else\n        {\n            i += 1;\n        }\n   \
    \ }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n \
    \   while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n\
    \    foreach(i; 2..n)\n    {\n        while(n % i == 0)\n        {\n         \
    \   result ~= i;\n            n /= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n    \
    \    if (n % i == 0) \n        {\n            factors ~= i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return factors;\n}", "{\n    long[] factors = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            factors\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            factors ~= d;\n         \
    \   n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n}", "{\n\
    \    long[] result = [];\n    long divisor = 2;\n    while (n > 1) \n    {\n \
    \       if (n % divisor == 0) \n        {\n            result ~= divisor;\n  \
    \          n /= divisor;\n        } \n        else \n        {\n            divisor++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          factors ~= i;\n            n /= i;\n        } \n        else \n   \
    \     {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n   \
    \ long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       } \n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (n > 1)\n    {\n        if (n % i\
    \ == 0)\n        {\n            factors ~= i;\n            n /= i;\n        }\n\
    \        else\n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            result ~= d;\n          \
    \  n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n  \
    \  long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       }\n        i++;\n    }\n    return factors;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0)\
    \ \n        {\n            factors ~= i;\n            n /= i;\n        }\n   \
    \     i++;\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997];\n    foreach(p; primes) \n    {\n      \
    \  while(n % p == 0) \n        {\n            n /= p;\n            factors ~=\
    \ p;\n        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n\
    \    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n      \
    \  {\n            result ~= i;\n            n /= i;\n        }\n        else\n\
    \            i++;\n    }\n    return result;\n}", "{\n    long[] result = [];\n\
    \    long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n   \
    \     {\n            result ~= d;\n            n /= d;\n        }\n        d +=\
    \ 1;\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long[]\
    \ primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,\
    \ 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\
    \ 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,\
    \ 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431,\
    \ 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523,\
    \ 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631,\
    \ 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,\
    \ 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853,\
    \ 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,\
    \ 971, 977, 983, 991, 997];\n    foreach(p; primes) \n    {\n        while(n %\
    \ p == 0) \n        {\n            n /= p;\n            factors ~= p;\n      \
    \  }\n    }\n    return factors;\n}", "{\n    long[] result = new long[];\n  \
    \  long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n\
    \            result ~= i;\n            n /= i;\n        } \n        else \n  \
    \      {\n            i++;\n        }\n    }\n    return result;\n}", "{\n   \
    \ long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       } \n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return factors;\n}", "{\n    long[] result = new long[];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n            result\
    \ ~= i;\n            n /= i;\n        }\n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            result ~= i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] res = [];\n    foreach(i; 2..n) \n    {\n        if(n % i == 0) \n\
    \        {\n            res ~= i;\n            n /= i;\n            i = 1;\n \
    \       }\n    }\n    return res;\n}", "{\n    long[] factors = [];\n    foreach(i;\
    \ 2..n)\n    {\n        while(n % i == 0)\n        {\n            factors ~= i;\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n %\
    \ i == 0) \n        {\n            result ~= i;\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return result;\n}", "{\n    long[] result = [];\n\
    \    foreach(i; 2..n)\n    {\n        if(n % i == 0)\n        {\n            result\
    \ ~= i;\n            n /= i;\n            i = 1;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}\n/*\n    Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n*/\nlong[] factorize2(long n) \n{\n    long[]\
    \ result = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n        if\
    \ (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n*/\nlong[] factorize3(long n) \n{\n    long[] result = new long[];\n\
    \    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n      \
    \  {\n            result ~= i;\n            n /= i;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return result;\n}\n/*\n  \
    \  Return list of prime factors of given integer in the order from", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1)\n    {\n\
    \        while (n % i == 0)\n        {\n            factors ~= i;\n          \
    \  n /= i;\n        }\n        i++;\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n        if\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       } \n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return factors;\n}", "{\n    long[] result = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            result\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] factors = [];\n    long d = 2;\n\
    \    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n         \
    \   factors ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n  \
    \  return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    foreach(i; 2..n)\n    {\n        if(n % i\
    \ == 0)\n        {\n            result ~= i;\n            n /= i;\n          \
    \  i = 1;\n        }\n    }\n    return result;\n}", "{\n    long[] factors =\
    \ [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0)\
    \ \n        {\n            n /= i;\n            factors ~= i;\n        }\n   \
    \     i++;\n    }\n    return factors;\n}", "{\n    long[] factors = new long[];\n\
    \    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n      \
    \  {\n            factors ~= i;\n            n /= i;\n        }\n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n\
    \    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            result\
    \ ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            factors ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ factors ~= i;\n            n /= i;\n        } \n        else \n        {\n \
    \           i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] result\
    \ = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            result ~= i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[];\n    long[]\
    \ primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,\
    \ 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\
    \ 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,\
    \ 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431,\
    \ 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523,\
    \ 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631,\
    \ 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,\
    \ 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853,\
    \ 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,\
    \ 971, 977, 983, 991, 997];\n    foreach(long p; primes)\n    {\n        while(n\
    \ % p == 0)\n        {\n            result ~= p;\n            n /= p;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long i =\
    \ 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n       \
    \     result ~= i;\n            n /= i;\n        } \n        else \n        {\n\
    \            i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    foreach(i; 2..n)\n    {\n        while(n % i == 0)\n        {\n \
    \           result ~= i;\n            n /= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[];\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            result ~= i;\n      \
    \      n /= i;\n        }\n        else \n        {\n            i++;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long i =\
    \ 2;\n    while (i <= n)\n    {\n        if (n % i == 0)\n        {\n        \
    \    result ~= i;\n            n /= i;\n        }\n        else\n        {\n \
    \           i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            result ~= i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[];\n    long d = 2;\n    while (n > 1) \n\
    \    {\n        while (n % d == 0) \n        {\n            result ~= d;\n   \
    \         n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}",
  "{\n    long[] factors = [];\n    long d = 2;\n    while (n > 1) \n    {\n     \
    \   while (n % d == 0) \n        {\n            factors ~= d;\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    return factors;\n}", "{\n    long[]\
    \ result = new long[];\n    long d = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % d == 0) \n        {\n            result ~= d;\n            n /= d;\n  \
    \      }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    foreach(i; 2..n)\n    {\n        if(n % i == 0)\n        {\n    \
    \        result ~= i;\n            n /= i;\n            i--;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            result\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n\
    }", "{\n    long[] factors = new long[];\n    long i = 2;\n    while (n > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            factors ~= i;\n     \
    \       n /= i;\n        }\n        else \n        {\n            i++;\n     \
    \   }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n    long\
    \ i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n   \
    \         factors ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            factors ~= i;\n            n /= i;\n      \
    \  }\n        else\n            i++;\n    }\n    return factors;\n}", "{\n   \
    \ long[] result = [];\n    foreach(p; primes(n))\n    {\n        while(n % p ==\
    \ 0)\n        {\n            result ~= p;\n            n /= p;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = [];\n    long[] primes =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997];\n    foreach(p; primes)\n    {\n        while(n % p == 0)\n\
    \        {\n            result ~= p;\n            n /= p;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            result ~= d;\n          \
    \  n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n  \
    \  long[] factors = [];\n    while (n % 2 == 0) \n    {\n        factors ~= 2;\n\
    \        n /= 2;\n    }\n    long i = 3;\n    while (i <= sqrt(n)) \n    {\n \
    \       while (n % i == 0) \n        {\n            factors ~= i;\n          \
    \  n /= i;\n        }\n        i += 2;\n    }\n    if (n > 2) \n    {\n      \
    \  factors ~= n;\n    }\n    return factors;\n}", "{\n    long[] result = [];\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997];\n    foreach(p; primes)\n    {\n       \
    \ while(n % p == 0)\n        {\n            result ~= p;\n            n /= p;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            factors ~= d;\n            n /= d;\n        }\n        d++;\n   \
    \ }\n    return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n         \
    \   factors ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            factors ~= i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n\
    \            factors ~= i;\n            n /= i;\n        } \n        else \n \
    \       {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n \
    \   long[] result = [];\n    long i = 2;\n    while (i <= n)\n    {\n        if\
    \ (n % i == 0)\n        {\n            result ~= i;\n            n /= i;\n   \
    \     }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % i == 0) \n        {\n            factors ~= i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          factors ~= i;\n            n /= i;\n        } \n        else \n   \
    \     {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n   \
    \ long[] result = new long[];\n    foreach(i; 2..n)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            result ~= i;\n            n /= i;\n            i\
    \ = 1;\n        }\n    }\n    return result;\n}", "{\n    long[] res = [];\n \
    \   long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n    \
    \    {\n            res ~= i;\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return res;\n}", "{\n    long[] factors = [];\n    long d = 2;\n \
    \   while (n > 1) \n    {\n        while (n % d == 0) \n        {\n          \
    \  factors ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n   \
    \ return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            result ~= d;\n            n /= d;\n        }\n        d += 1;\n \
    \   }\n    return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            result ~= i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            result\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long divisor = 2;\n    while (n > 1) \n\
    \    {\n        while (n % divisor == 0) \n        {\n            factors ~= divisor;\n\
    \            n /= divisor;\n        }\n        divisor += 1;\n    }\n    return\
    \ factors;\n}", "{\n    long[] factors = new long[];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        }\n        else\n            i++;\n    }\n\
    \    return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long[]\
    \ primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,\
    \ 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\
    \ 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,\
    \ 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431,\
    \ 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523,\
    \ 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631,\
    \ 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,\
    \ 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853,\
    \ 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,\
    \ 971, 977, 983, 991, 997];\n    foreach(p; primes)\n    {\n        while(n %\
    \ p == 0)\n        {\n            result ~= p;\n            n /= p;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n         \
    \   factors ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ factors;\n}", "{\n    long[] factors = [];\n    long d = 2;\n    while (n >\
    \ 1) \n    {\n        while (n % d == 0) \n        {\n            factors ~= d;\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            factors ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return factors;\n}", "{\n    long[] result;\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            result ~= d;\n            n /= d;\n        }\n        d += 1;\n \
    \   }\n    return result;\n}", "{\n    long[] factors = [];\n    long d = 2;\n\
    \    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n         \
    \   factors ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n  \
    \  return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n\
    \            factors ~= i;\n            n /= i;\n        } \n        else \n \
    \       {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n \
    \   long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n       \
    \ if (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result = [];\n    long[] primes = [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\
    \ 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\
    \ 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\
    \ 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,\
    \ 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\
    \ 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,\
    \ 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757,\
    \ 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\
    \ 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,\
    \ 991, 997];\n    foreach(prime; primes)\n    {\n        while(n % prime == 0)\n\
    \        {\n            result ~= prime;\n            n /= prime;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[0];\n    long[]\
    \ primes = new long[0];\n    long[] powers = new long[0];\n    long i = 2;\n \
    \   while (i * i <= n) \n    {\n        if (n % i == 0) \n        {\n        \
    \    primes ~= i;\n            powers ~= 0;\n            while (n % i == 0) \n\
    \            {\n                n /= i;\n                powers[$-1]++;\n    \
    \        }\n        }\n        i++;\n    }\n    if (n > 1) \n    {\n        primes\
    \ ~= n;\n        powers ~= 1;\n    }\n    foreach (i, p; zip(primes, powers))\
    \ \n    {\n        result ~= repeat(i, p);\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = [];\n    foreach(i; 2..n)\n\
    \    {\n        if(n % i == 0)\n        {\n            result ~= i;\n        \
    \    n /= i;\n            i = 1;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] factors = [];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    foreach(i;\
    \ primes) \n    {\n        if(n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        }\n    }\n    return factors;\n}", "{\n   \
    \ long[] factors = [];\n    long i = 2;\n    while (n > 1)\n    {\n        if\
    \ (n % i == 0)\n        {\n            factors ~= i;\n            n /= i;\n  \
    \      }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}", "{\n    long[] result = [];\n    while (n % 2 == 0) \n    {\n\
    \        result ~= 2;\n        n /= 2;\n    }\n    long i = 3;\n    while (i <=\
    \ sqrt(n)) \n    {\n        while (n % i == 0) \n        {\n            result\
    \ ~= i;\n            n /= i;\n        }\n        i += 2;\n    }\n    if (n > 2)\
    \ \n    {\n        result ~= n;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n %\
    \ d == 0) \n        {\n            result ~= d;\n            n /= d;\n       \
    \ }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] factors =\
    \ [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            factors ~= i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n)\n    {\n\
    \        if (n % i == 0)\n        {\n            result ~= i;\n            n /=\
    \ i;\n        }\n        else\n        {\n            i++;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          factors ~= i;\n            n /= i;\n        }\n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = new long[];\n    long i = 2;\n    while (i <= n) \n    {\n       \
    \ if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] result = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            result\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            factors ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return factors;\n}", "{\n    long[] factors;\n    foreach(i; 2..n)\n\
    \    {\n        if(n % i == 0)\n        {\n            factors ~= i;\n       \
    \     n /= i;\n            i = 1;\n        }\n    }\n    return factors;\n}",
  "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n      \
    \  {\n            factors ~= d;\n            n /= d;\n        }\n        d +=\
    \ 1;\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n    long i\
    \ = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n    \
    \        factors ~= i;\n            n /= i;\n        }\n        else \n      \
    \  {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ result = new long[];\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1)\
    \ \n    {\n        while (n % i == 0) \n        {\n            result ~= i;\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        while (n % i == 0) \n        {\n            n /= i;\n            result\
    \ ~= i;\n        }\n        i++;\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            factors ~= i;\n            n /= i;\n      \
    \  } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}", "{\n    long[] result = [];\n    long divisor = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % divisor == 0) \n        {\n            result\
    \ ~= divisor;\n            n /= divisor;\n        } \n        else \n        {\n\
    \            divisor++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n\
    \ % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n    \
    \    }\n        i++;\n    }\n    return factors;\n}", "{\n    long[] result =\
    \ [];\n    long i = 2;\n    while (i <= n)\n    {\n        if (n % i == 0)\n \
    \       {\n            result ~= i;\n            n /= i;\n        }\n        else\n\
    \        {\n            i++;\n        }\n    }\n    return result;\n}", "{\n \
    \   long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % d == 0) \n        {\n            result ~= d;\n            n /= d;\n  \
    \      }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            factors ~= i;\n            n /= i;\n        } \n  \
    \      else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
    \ 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n   \
    \ foreach(i; primes)\n    {\n        while(n % i == 0)\n        {\n          \
    \  result ~= i;\n            n /= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n      \
    \  while (n % d == 0) \n        {\n            result ~= d;\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n %\
    \ i == 0) \n        {\n            result ~= i;\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    long[] primes = new long[0];\n    long[] powers = new long[0];\n\
    \    long[] factors = new long[0];\n    long[] factors_powers = new long[0];\n\
    \    long[] factors_primes = new long[0];\n    long[] factors_primes_powers =\
    \ new long[0];\n    long[] factors_primes_powers_factors = new long[0];\n    long[]\
    \ factors_primes_powers_factors_factors = new long[0];\n    long[] factors_primes_powers_factors_factors_factors\
    \ = new long[0];\n    long[] factors_primes_powers_factors_factors_factors_factors\
    \ = new long[0];\n    long[] factors_primes_powers_factors_factors_factors_factors_factors\
    \ = new long[0];\n    long[] factors_primes_powers_factors_factors_factors_factors_factors_factors\
    \ = new long[0];\n    long[] factors_primes_powers_factors_factors_factors_factors_factors_factors_factors\
    \ = new long[0];\n    long[] factors_primes_powers_factors_factors_factors_factors_factors_factors_factors_factors\
    \ = new long[0];\n    long[] factors_primes_powers_factors_factors_factors_factors_factors_factors_factors_factors_factors\
    \ = new long[0];\n    long[] factors_primes_powers_factors_factors_factors_factors_factors_factors_factors_factors_factors_factors\
    \ = new long[0];\n    long[] factors_primes_powers_factors_factors_factors_factors_factors_factors_factors_factors_factors_factors_factors\
    \ = new long[0];\n    long[] factors_primes_powers_factors_factors_factors_factors_factors_factors_factors_factors_factors_factors_factors_factors\
    \ = new", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            result ~= i;\n      \
    \      n /= i;\n        } \n        else \n        {\n            i++;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long d\
    \ = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n  \
    \          result ~= d;\n            n /= d;\n        }\n        d += 1;\n   \
    \ }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n \
    \   while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors\
    \ ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            factors ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return factors;\n}", "{\n    long[] result = [];\n    foreach(i; 2..n)\n\
    \    {\n        while(n % i == 0)\n        {\n            result ~= i;\n     \
    \       n /= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021,\
    \ 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103,\
    \ 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181", "{\n    long[] result\
    \ = [];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,\
    \ 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    foreach(p; primes)\n    {\n\
    \        while(n % p == 0)\n        {\n            result ~= p;\n            n\
    \ /= p;\n        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997];\n    foreach(prime; primes)\n    {\n   \
    \     while(n % prime == 0)\n        {\n            result ~= prime;\n       \
    \     n /= prime;\n        }\n    }\n    return result;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            factors ~= i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[];\n    long i\
    \ = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        }\n        i++;\n    }\n\
    \    return result;\n}", "{\n    long[] res = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            res ~= i;\n\
    \            n /= i;\n        }\n        else\n            i++;\n    }\n    return\
    \ res;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            result ~= i;\n      \
    \      n /= i;\n        } \n        else \n        {\n            i++;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long d\
    \ = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n  \
    \          result ~= d;\n            n /= d;\n        }\n        d += 1;\n   \
    \ }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n \
    \   while (n > 1) \n    {\n        while (n % i == 0) \n        {\n          \
    \  n /= i;\n            factors ~= i;\n        }\n        i++;\n    }\n    return\
    \ factors;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1)\
    \ \n    {\n        while (n % i == 0) \n        {\n            result ~= i;\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return result;\n}",
  "{\n    long[] factors = new long[];\n    long[] primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
    \ 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009,\
    \ 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091,\
    \ 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181", "{\n\
    \    long[] factors = [];\n    long d = 2;\n    while (n > 1) \n    {\n      \
    \  while (n % d == 0) \n        {\n            factors ~= d;\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n\
    \ % d == 0) \n        {\n            factors ~= d;\n            n /= d;\n    \
    \    }\n        d += 1;\n    }\n    return factors;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
