name: HumanEval_124_valid_date
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
  \ which validates a given date string and\n    returns True if the date is valid\
  \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
  \    1. The date string is not empty.\n    2. The number of days is not less than\
  \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is\
  \ not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of\
  \ days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
  \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
  \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
  \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
  \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
  \    \n*/\nbool valid_date(string date) \n"
tests: "unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
  03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
  04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
  01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
  \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
  06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"\
  04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
  20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
  2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
  \ main(){}"
completions: ["{\n    if (date.length == 0) return false;\n    auto date_arr = date.split(\"\
    -\");\n    if (date_arr.length != 3) return false;\n    int month = to!int(date_arr[0]);\n\
    \    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n   \
    \ if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return\
    \ false;\n    if (month == 2) {\n        if (day > 29) return false;\n       \
    \ if (day == 29) {\n            if (year % 4 != 0) return false;\n           \
    \ if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n    }\n  \
    \  else if (month == 4 || month == 6 || month == 9 || month == 11) {\n       \
    \ if (day > 30) return false;\n    }\n    return true;\n}", "{\n    if(date.length\
    \ == 0) return false;\n    auto date_split = date.split(\"-\");\n    if(date_split.length\
    \ != 3) return false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2)\n    {\n\
    \        if(day > 29) return false;\n        if(day == 29)\n        {\n      \
    \      if(year % 4 != 0) return false;\n            if(year % 100 == 0 && year\
    \ % 400 != 0) return false;\n        }\n    }\n    else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if(day > 30) return false;\n\
    \    }\n    return true;\n}", "{\n    int[] months = [1,3,5,7,8,10,12];\n    int[]\
    \ months2 = [4,6,9,11];\n    int[] months3 = [2];\n    int[] days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];\n\
    \    int[] days2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\n\
    \    int[] days3 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];\n\
    \    int[] years = [2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,",
  "{\n    import std.algorithm : map;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.range : isInputRange;\n    import std.typecons : tuple;\n\
    \    import std.math : min, max;\n    import std.string : split;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple", "{\n    import std.algorithm : map;\n\
    \    import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : take, drop;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n   ", "{\n    import std.algorithm : map;\n    import\
    \ std.conv : to;\n    import std.array : array;\n    import std.range : take,\
    \ drop;\n    import std.typecons : tuple;\n    import std.math : min, max;\n \
    \   import std.string : split;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.datetime : DateTime;\n    import std.datetime\
    \ : toISOExtString;\n    import std.datetime : fromISOExtString;\n    import std.datetime\
    \ : DateTimeException;\n    import std.exception : catchAssert;\n    import std.exception\
    \ : assertThrown;\n    import std.exception : assertNotThrown;\n    import std.exception\
    \ : assert;\n    import std.exception : enforce;\n    import std.exception : enforceMsg;\n\
    \    import std.exception : enforceErrno;\n    import std.exception : enforceErrnoMsg;\n\
    \    import std.exception : assume;\n    import std.exception : assumeMsg;\n \
    \   import std.exception : assumeErrno;\n    import std.exception : assumeErrnoMsg;\n\
    \    import std.exception : unittest;\n    import std.exception : unittest_;\n\
    \    import std.exception : unittest_;\n    import std.exception : unittest_;\n\
    \    import std.exception : unittest_;\n    import std.exception : unittest_;\n\
    \    import std.exception : unittest_;\n    import std.exception : unittest_;\n\
    \    import std.exception : unittest_;\n    import std.exception : unittest_;\n\
    \    import std.exception : unittest_;\n    import std.exception : unittest_;\n\
    \    import std.exception : unittest_;\n    import std.exception : unittest_;\n\
    \    import std.exception : unittest_;\n    import std.exception : unittest_;\n\
    \    import std.exception : unittest_;\n    import std.exception", "{\n    import\
    \ std.algorithm : split;\n    import std.conv : to;\n    import std.range : empty;\n\
    \    import std.string : strip;\n    import std.typecons : tuple;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.range : empty;\n    import std.conv : to;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.range : empty;\n    import std.conv : to;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.range : empty;\n    import std.conv : to;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.range : empty;\n    import std.conv : to;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.range : empty;\n    import std.conv : to;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.range : empty;\n    import std.conv : to;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.range : empty;\n    import std.conv : to;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.range : empty;\n    import std.conv : to;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.range : empty;\n    import std.conv : to;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n", "{\n    if(date.length == 0)\n        return false;\n    auto date_arr\
    \ = date.split(\"-\");\n    if(date_arr.length != 3)\n        return false;\n\
    \    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n  \
    \  int year = to!int(date_arr[2]);\n    if(month < 1 || month > 12)\n        return\
    \ false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month ==\
    \ 2)\n    {\n        if(day > 29)\n            return false;\n        if(day ==\
    \ 29)\n        {\n            if(year % 4 != 0)\n                return false;\n\
    \            if(year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    import std.algorithm : map;\n    import std.array : array;\n\
    \    import std.conv : to;\n    import std.range : take;\n    import std.stdio\
    \ : writeln;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import",
  "{\n    import std.algorithm : split;\n    import std.conv : to;\n    import std.array\
    \ : array;\n    import std.range : isInputRange;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.string : strip;\n    import std.stdio\
    \ : writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.range : isInputRange;\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.string : strip;\n    import std.stdio\
    \ : writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.range : isInputRange;\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.string : strip;\n    import std.stdio\
    \ : writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.range : isInputRange;\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.string : strip;\n    import std.stdio\
    \ : writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.range : isInputRange;\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.string : strip;\n    import std.stdio\
    \ : writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;",
  "{\n    import std.algorithm : map;\n    import std.conv : to;\n    import std.range\
    \ : take;\n    import std.array : array;\n    import std.typecons : tuple;\n \
    \   import std.math : isNaN;\n    import std.string : split;\n    import std.stdio\
    \ : writeln;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n   ", "{\n    import std.algorithm\
    \ : split;\n    import std.conv : to;\n    import std.array : empty;\n    import\
    \ std.range : iota;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n\
    \    auto date_arr = date.split(\"-\");\n    if(date_arr.empty)\n        return\
    \ false;\n    if(date_arr.length != 3)\n        return false;\n    auto month\
    \ = date_arr[0].to!int;\n    auto day = date_arr[1].to!int;\n    auto year = date_arr[2].to!int;\n\
    \    if(isNaN(month) || isNaN(day) || isNaN(year))\n        return false;\n  \
    \  if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day >\
    \ 31)\n        return false;\n    if(year < 1)\n        return false;\n    if(month\
    \ == 2)\n    {\n        if(day > 29)\n            return false;\n    }\n    else\
    \ if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day\
    \ > 30)\n            return false;\n    }\n    return true;\n}", "{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    auto month = to!int(date_parts[0]);\n    auto day = to!int(date_parts[1]);\n\
    \    auto year = to!int(date_parts[2]);\n    if (month < 1 || month > 12)\n  \
    \      return false;\n    if (day < 1 || day > 31)\n        return false;\n  \
    \  if (month == 2)\n    {\n        if (day > 29)\n            return false;\n\
    \        if (day == 29)\n        {\n            if ((year % 4 != 0) || (year %\
    \ 100 == 0 && year % 400 != 0))\n                return false;\n        }\n  \
    \  }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n  \
    \  {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }", "{\n    auto parts = split(date, '-');\n    if (parts.length != 3)\n     \
    \   return false;\n    int day = to!int(parts[1]);\n    int month = to!int(parts[0]);\n\
    \    int year = to!int(parts[2]);\n    if (year < 0)\n        return false;\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1)\n \
    \       return false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n\
    \            return day <= 29;\n        else\n            return day <= 28;\n\
    \    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \        return day <= 30;\n    else\n        return day <= 31;\n}", "{\n    string[]\
    \ date_arr = date.split(\"-\");\n    if(date_arr.length != 3)\n        return\
    \ false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if(month < 1 || month > 12)\n      \
    \  return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month\
    \ == 2)\n    {\n        if(day > 29)\n            return false;\n        if(day\
    \ == 29)\n        {\n            if(year % 4 != 0)\n                return false;\n\
    \            if(year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    import std.algorithm : map;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple", "{\n    if (date.length == 0)\n        return false;\n    auto date_parts\
    \ = date.split(\"-\");\n    if (date_parts.length != 3)\n        return false;\n\
    \    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    // Your code here\n  \
    \  auto parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n\
    \    int month = parts[0].to!int;\n    int day = parts[1].to!int;\n    int year\
    \ = parts[2].to!int;\n    if (month < 1 || month > 12) return false;\n    if (day\
    \ < 1 || day > 31) return false;\n    if (month == 2)\n    {\n        if (day\
    \ > 29) return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400 != 0)\
    \ return false;\n        }\n    }\n    else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11)\n    {\n        if (day > 30) return false;\n    }\n  \
    \  return true;\n}", "{\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3) return false;\n    int day = to!int(parts[0]);\n    int month = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (day < 1 || day > 31) return false;\n\
    \    if (month < 1 || month > 12) return false;\n    if (month == 2)\n    {\n\
    \        if (year % 4 == 0)\n        {\n            if (day > 29) return false;\n\
    \        }\n        else\n        {\n            if (day > 28) return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30) return false;\n    }\n    return true;\n\
    }", "{\n    import std.algorithm : map;\n    import std.conv : to;\n    import\
    \ std.array : array;\n    import std.range : take, drop;\n    import std.typecons\
    \ : tuple;\n    import std.math : isNaN;\n    import std.string : split;\n   \
    \ import std.range : isInputRange;\n    import std.algorithm : map;\n    import\
    \ std.conv : to;\n    import std.array : array;\n    import std.range : take,\
    \ drop;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n    import\
    \ std.string : split;\n    import std.range : isInputRange;\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.array : array;\n    import\
    \ std.range : take, drop;\n    import std.typecons : tuple;\n    import std.math\
    \ : isNaN;\n    import std.string : split;\n    import std.range : isInputRange;\n\
    \    import std.algorithm : map;\n    import std.conv : to;\n    import std.array\
    \ : array;\n    import std.range : take, drop;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.string : split;\n    import std.range\
    \ : isInputRange;\n    import std.algorithm : map;\n    import std.conv : to;\n\
    \    import std.array : array;\n    import std.range : take, drop;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.string :\
    \ split;\n    import std.range : isInputRange;\n    import std.algorithm : map;\n\
    \    import std.conv : to;\n    import std.array : array;\n    import std.range\
    \ : take, drop;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n\
    \    import std.string : split;\n    import std.range : isInputRange;\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.array : array;\n\
    \   ", "{\n    import std.algorithm : map;\n    import std.conv : to;\n    import\
    \ std.array : array;\n    import std.range : take;\n    import std.range : drop;\n\
    \    import std.range : isInputRange;\n    import std.range : isForwardRange;\n\
    \    import std.range : isBidirectionalRange;\n    import std.range : isRandomAccessRange;\n\
    \    import std.range : isInfinite;\n    import std.range : isEmpty;\n    import\
    \ std.range : isSorted;\n    import std.range : isSorted!\"a < b\";\n    import\
    \ std.range : isSorted!\"a > b\";\n    import std.range : isSorted!\"a <= b\"\
    ;\n    import std.range : isSorted!\"a >= b\";\n    import std.range : isSorted!\"\
    a.compare(b) < 0\";\n    import std.range : isSorted!\"a.compare(b) > 0\";\n \
    \   import std.range : isSorted!\"a.compare(b) <= 0\";\n    import std.range :\
    \ isSorted!\"a.compare(b) >= 0\";\n    import std.range : isSorted!\"a == b\"\
    ;\n    import std.range : isSorted!\"a != b\";\n    import std.range : isSorted!\"\
    a.compare(b) == 0\";\n    import std.range : isSorted!\"a.compare(b) != 0\";\n\
    \    import std.range : isSorted!\"a.compare(b)\";\n    import std.range : isSorted!\"\
    a.compare(b)\";\n    import std.range : isSorted!\"a.compare(b)\";\n    import\
    \ std.range : isSorted!\"a.compare(b)\";\n    import std.range : isSorted!\"a.compare(b)\"\
    ;\n    import std.range : isSorted!\"a.compare(b)\";\n    import std.range : isSorted!\"\
    a.compare(b)\";\n    import std.range : isSorted!\"a.compare(b)\";\n    import\
    \ std.range : isSorted!\"a.compare(", "{\n    import std.conv;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.string;\n  \
    \  import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.string;\n  \
    \  import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.string;\n  \
    \  import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.", "{\n    if(date.length == 0)\n     \
    \   return false;\n    auto parts = date.split(\"-\");\n    if(parts.length !=\
    \ 3)\n        return false;\n    int month = to!int(parts[0]);\n    int day =\
    \ to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if(month < 1 || month\
    \ > 12)\n        return false;\n    if(day < 1 || day > 31)\n        return false;\n\
    \    if(month == 2)\n    {\n        if(day > 29)\n            return false;\n\
    \        if(day == 29)\n        {\n            if(year % 4 != 0)\n           \
    \     return false;\n            if(year % 100 == 0 && year % 400 != 0)\n    \
    \            return false;\n        }\n    }\n    else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n          \
    \  return false;\n    }\n    return true;\n}", "{\n    string[] date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n\
    \    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n   \
    \ if(year < 0)\n        return false;\n    if(month < 1 || month > 12)\n     \
    \   return false;\n    if(day < 1)\n        return false;\n    if(month == 2)\n\
    \    {\n        if(year % 4 == 0)\n        {\n            if(day > 29)\n     \
    \           return false;\n        }\n        else\n        {\n            if(day\
    \ > 28)\n                return false;\n        }\n    }\n    else if(month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12)\n    {\n        if(day > 31)\n            return false;\n    }\n\
    \    else\n    {\n        if(day > 30)\n            return false;\n    }\n   \
    \ return true;\n}", "{\n    auto date_tuple = tuple(date.split(\"-\"));\n    if\
    \ (date_tuple.length != 3) return false;\n    if (date_tuple[0].length != 2 ||\
    \ date_tuple[1].length != 2 || date_tuple[2].length != 4) return false;\n    int\
    \ month = to!int(date_tuple[0]);\n    int day = to!int(date_tuple[1]);\n    int\
    \ year = to!int(date_tuple[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (month == 2)\n    {\n        if (day < 1 || day > 29) return false;\n\
    \        if (day == 29)\n        {\n            if (year % 4 != 0) return false;\n\
    \            if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n\
    \    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day < 1 || day > 30) return false;\n    }\n    else\n    {\n\
    \        if (day < 1 || day > 31) return false;\n    }\n    return true;\n}",
  "{\n    import std.string;\n    import std.conv;\n    import std.algorithm;\n  \
    \  import std.array;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.math;\n    if(date.length == 0) return false;\n    auto date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3) return false;\n    if(date_arr[0].length !=\
    \ 2 || date_arr[1].length != 2 || date_arr[2].length != 4) return false;\n   \
    \ int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n    int\
    \ year = to!int(date_arr[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2) {\n        if(year\
    \ % 4 == 0) {\n            if(day > 29) return false;\n        } else {\n    \
    \        if(day > 28) return false;\n        }\n    } else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n \
    \   }\n    return true;\n}", "{\n    if(date.length == 0) return false;\n    auto\
    \ date_arr = date.split(\"-\");\n    if(date_arr.length != 3) return false;\n\
    \    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n  \
    \  int year = to!int(date_arr[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2 && day > 29) return\
    \ false;\n    if(month == 2 && day == 29 && !isLeapYear(year)) return false;\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n      \
    \  if(day > 30) return false;\n    }\n    return true;\n}", "{\n    import std.algorithm\
    \ : map;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : take;\n    import std.string : split;\n    import std.typecons :\
    \ tuple;\n    import std.math : isNaN;\n    import std.stdio : writeln;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;", "{\n    auto date_tuple = tuple(date.split(\"\
    -\"));\n    if (date_tuple.length != 3) return false;\n    int month = to!int(date_tuple[0]);\n\
    \    int day = to!int(date_tuple[1]);\n    int year = to!int(date_tuple[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (year % 4 == 0) {\n       \
    \     if (day > 29) return false;\n        } else {\n            if (day > 28)\
    \ return false;\n        }\n    } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}", "{\n    if (date.length == 0)\n        return false;\n    auto parts\
    \ = date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n  \
    \  int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1 || day > 31)\n        return false;\n    if (month == 2)\n  \
    \  {\n        if (day > 29)\n            return false;\n        if (day == 29)\n\
    \        {\n            if (year % 4 != 0)\n                return false;\n  \
    \          if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ return true;\n}", "{\n    import std.algorithm : map;\n    import std.conv :\
    \ to;\n    import std.range : split;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.string :\
    \ toLower;\n    import std.format : format;\n    import std.stdio : writeln;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.range : split;\n\
    \    import std.algorithm : map;\n    import std.math : isNaN;\n    import std.string\
    \ : toLower;\n    import std.format : format;\n    import std.stdio : writeln;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.range : split;\n\
    \    import std.algorithm : map;\n    import std.math : isNaN;\n    import std.string\
    \ : toLower;\n    import std.format : format;\n    import std.stdio : writeln;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.range : split;\n\
    \    import std.algorithm : map;\n    import std.math : isNaN;\n    import std.string\
    \ : toLower;\n    import std.format : format;\n    import std.stdio : writeln;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.range : split;\n\
    \    import std.algorithm : map;\n    import std.math : isNaN;\n    import std.string\
    \ : toLower;\n    import std.format : format;\n    import std.stdio : writeln;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;", "{\n\
    \    if (date.length == 0) return false;\n    auto [m, d, y] = date.split(\"-\"\
    ).map!(to!int).array;\n    if (m < 1 || m > 12) return false;\n    if (d < 1 ||\
    \ d > 31) return false;\n    if (m == 2) {\n        if (d > 29) return false;\n\
    \        if (d == 29 && !isLeapYear(y)) return false;\n    } else if (m == 4 ||\
    \ m == 6 || m == 9 || m == 11) {\n        if (d > 30) return false;\n    }\n \
    \   return true;\n}", "{\n    import std.algorithm;\n    import std.array;\n \
    \   import std.conv;\n    import std.range;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    auto date_array = date.split(\"-\"\
    );\n    if(date_array.length != 3) return false;\n    if(date_array[0].length\
    \ != 2 || date_array[1].length != 2 || date_array[2].length != 4) return false;\n\
    \    if(date_array[0].to!int > 12 || date_array[0].to!int < 1) return false;\n\
    \    if(date_array[0].to!int == 2)\n    {\n        if(date_array[1].to!int > 29\
    \ || date_array[1].to!int < 1) return false;\n    }\n    else if(date_array[0].to!int\
    \ == 1 || date_array[0].to!int == 3 || date_array[0].to!int == 5 || date_array[0].to!int\
    \ == 7 || date_array[0].to!int == 8 || date_array[0].to!int == 10 || date_array[0].to!int\
    \ == 12)\n    {\n        if(date_array[1].to!int > 31 || date_array[1].to!int\
    \ < 1) return false;\n    }\n    else\n    {\n        if(date_array[1].to!int\
    \ > 30 || date_array[1].to!int < 1) return false;\n    }\n    return true;\n}",
  "{\n    if(date.length == 0)\n        return false;\n    if(date.count('-') != 2)\n\
    \        return false;\n    auto date_arr = date.split('-');\n    if(date_arr.length\
    \ != 3)\n        return false;\n    if(date_arr[0].length != 2 || date_arr[1].length\
    \ != 2 || date_arr[2].length != 4)\n        return false;\n    if(date_arr[0].to!int()\
    \ < 1 || date_arr[0].to!int() > 12)\n        return false;\n    if(date_arr[1].to!int()\
    \ < 1 || date_arr[1].to!int() > 31)\n        return false;\n    if(date_arr[2].to!int()\
    \ < 1)\n        return false;\n    if(date_arr[0].to!int() == 2)\n    {\n    \
    \    if(date_arr[1].to!int() > 29)\n            return false;\n        if(date_arr[1].to!int()\
    \ == 29)\n        {\n            if(date_arr[2].to!int() % 4 != 0)\n         \
    \       return false;\n        }\n    }\n    else if(date_arr[0].to!int() == 4\
    \ || date_arr[0].to!int() == 6 || date_arr[0].to!int() == 9 || date_arr[0].to!int()\
    \ == 11)\n    {\n        if(date_arr[1].to!int() > 30)\n            return false;\n\
    \    }\n    return true;\n}", "{\n    auto parts = split(date, \"-\");\n    if\
    \ (parts.length != 3) return false;\n    auto month = to!int(parts[0]);\n    auto\
    \ day = to!int(parts[1]);\n    auto year = to!int(parts[2]);\n    if (month <\
    \ 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n        if (day ==\
    \ 29) {\n            if (year % 4 != 0) return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n        }\n    } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}", "{\n    import std.conv;\n    import std.array;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.string;\n    import std.stdio;\n    import\
    \ std.format;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.array;\n    import std.algorithm;\n    import std.range;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.format;\n    import std.traits;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.string;\n\
    \    import std.stdio;\n    import std.format;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.array;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.format;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.math;\n    import std.array;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.string;\n    import std.stdio;\n    import std.format;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.array;\n    import std.algorithm;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.string;\n    import std.stdio;\n    import\
    \ std.format;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.array;\n    import std", "{\n    string[] arr = date.split(\"\
    -\");\n    if(arr.length != 3)\n        return false;\n    int month = to!int(arr[0]);\n\
    \    int day = to!int(arr[1]);\n    int year = to!int(arr[2]);\n    if(month <\
    \ 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n     \
    \   return false;\n    if(month == 2)\n    {\n        if(day > 29)\n         \
    \   return false;\n        else if(day == 29)\n        {\n            if(year\
    \ % 4 != 0)\n                return false;\n            else if(year % 100 ==\
    \ 0 && year % 400 != 0)\n                return false;\n        }\n    }\n   \
    \ else if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n    \
    \    if(day > 30)\n            return false;\n    }\n    return true;\n}", "{\n\
    \    string[] parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n\
    \    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (year < 0) return false;\n    if (month < 1 || month\
    \ > 12) return false;\n    if (day < 1) return false;\n    if (month == 2)\n \
    \   {\n        if (isLeapYear(year))\n        {\n            if (day > 29) return\
    \ false;\n        }\n        else\n        {\n            if (day > 28) return\
    \ false;\n        }\n    }\n    else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11)\n    {\n        if (day > 30) return false;\n    }\n    else\n\
    \    {\n        if (day > 31) return false;\n    }\n    return true;\n}", "{\n\
    \    int[] months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[]\
    \ days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\n    int[] years = [2000, 2001,\
    \ 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,\
    \ 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,\
    \ 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,\
    \ 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,\
    \ 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,\
    \ 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,\
    \ 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092,\
    \ 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100];\n    if(date.length == 0)\n\
    \        return false;\n    if(date.length != 10)\n        return false;\n   \
    \ if(date[2] != '-' || date[5] != '-')\n        return false;\n    if(date[0]\
    \ == '0')\n        return false;\n    if(date[3] == '0')\n        return false;\n\
    \    if(date[6] == '0')\n        return false;\n    if(date[7] == '0')\n     \
    \   return false;\n    if(date[", "{\n    enum months = [1,2,3,4,5,6,7,8,9,10,11,12];\n\
    \    int[] days = [31,28,31,30,31,30,31,31,30,31,30,31];\n    int[] days_leap\
    \ = [31,29,31,30,31,30,31,31,30,31,30,31];\n    int[] date_split = date.split(\"\
    -\").map!(to!int).array;\n    if (date_split.length != 3)\n        return false;\n\
    \    if (date_split[0] < 1 || date_split[0] > 12)\n        return false;\n   \
    \ if (date_split[1] < 1 || date_split[1] > days[date_split[0]-1])\n        return\
    \ false;\n    if (date_split[2] < 1)\n        return false;\n    return true;\n\
    }", "{\n    if(date.length == 0) return false;\n    auto words = date.split(\"\
    -\");\n    if(words.length != 3) return false;\n    int month = to!int(words[0]);\n\
    \    int day = to!int(words[1]);\n    int year = to!int(words[2]);\n    if(month\
    \ < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n\
    \    if(month == 2)\n    {\n        if(day > 29) return false;\n        if(day\
    \ == 29)\n        {\n            if(year % 4 != 0) return false;\n           \
    \ if(year % 100 == 0 && year % 400 != 0) return false;\n        }\n    }\n   \
    \ else if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n    \
    \    if(day > 30) return false;\n    }\n    return true;\n}", "{\n    auto parts\
    \ = date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n  \
    \  int month = parts[0].to!int;\n    int day = parts[1].to!int;\n    int year\
    \ = parts[2].to!int;\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1)\n        return false;\n    if (month == 2)\n    {\n       \
    \ if (day > 29)\n            return false;\n        if (day == 29)\n        {\n\
    \            if (year % 4 != 0)\n                return false;\n            if\
    \ (year % 100 == 0 && year % 400 != 0)\n                return false;\n      \
    \  }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day > 30)\n            return false;\n    }\n    else\n  \
    \  {\n        if (day > 31)\n            return false;\n    }\n    return true;\n\
    }", "{\n    import std.algorithm : map;\n    import std.conv : to;\n    import\
    \ std.array : array;\n    import std.range : take;\n    import std.string : split;\n\
    \    import std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio\
    \ : writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n\
    \    import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n\
    \    import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n\
    \    import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import", "{\n    if (date.length == 0)\n  \
    \      return false;\n    auto months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n    auto parts = date.split(\"-\");\n    if (parts.length != 3)\n\
    \        return false;\n    auto month = parts[0].to!int;\n    auto day = parts[1].to!int;\n\
    \    auto year = parts[2].to!int;\n    if (month < 1 || month > 12)\n        return\
    \ false;\n    if (day < 1 || day > months[month - 1])\n        return false;\n\
    \    if (month == 2 && day == 29 && !isLeapYear(year))\n        return false;\n\
    \    return true;\n}", "{\n    int[] month_days = [31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n    if (date.length == 0) return false;\n    auto parts\
    \ = date.split(\"-\");\n    if (parts.length != 3) return false;\n    int month\
    \ = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > month_days[month\
    \ - 1]) return false;\n    if (month == 2 && day == 29)\n    {\n        if (year\
    \ % 400 == 0) return true;\n        if (year % 100 == 0) return false;\n     \
    \   if (year % 4 == 0) return true;\n        return false;\n    }\n    return\
    \ true;\n}", "{\n    if(date.length == 0)\n        return false;\n    auto date_tuple\
    \ = tuple(date.split(\"-\"));\n    if(date_tuple.length != 3)\n        return\
    \ false;\n    int month = to!int(date_tuple[0]);\n    int day = to!int(date_tuple[1]);\n\
    \    int year = to!int(date_tuple[2]);\n    if(month < 1 || month > 12)\n    \
    \    return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month\
    \ == 2)\n    {\n        if(day > 29)\n            return false;\n        if(day\
    \ == 29)\n        {\n            if(year % 4 != 0)\n                return false;\n\
    \            if(year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    auto parts = split(date, \"-\");\n    if (parts.length !=\
    \ 3)\n        return false;\n    int month = to!int(parts[0]);\n    int day =\
    \ to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month < 1 || month\
    \ > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n\
    \    if (month == 2)\n    {\n        if (day > 29)\n            return false;\n\
    \        if (day == 29)\n        {\n            if (year % 4 != 0)\n         \
    \       return false;\n            if (year % 100 == 0 && year % 400 != 0)\n \
    \               return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    if (date.length == 0)\
    \ return false;\n    string[] parts = date.split(\"-\");\n    if (parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1) return false;\n    if (month == 2) {\n        if (year % 4 ==\
    \ 0) {\n            if (day > 29) return false;\n        } else {\n          \
    \  if (day > 28) return false;\n        }\n    } else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if (day > 30) return false;\n\
    \    } else {\n        if (day > 31) return false;\n    }\n    return true;\n}",
  "{\n    auto date_arr = date.split(\"-\");\n    if (date_arr.length != 3) return\
    \ false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2)\n  \
    \  {\n        if (day > 29) return false;\n        if (day == 29)\n        {\n\
    \            if (year % 4 != 0) return false;\n            if (year % 100 == 0\
    \ && year % 400 != 0) return false;\n        }\n    }\n    else if (month == 4\
    \ || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}", "{\n    import std.algorithm : map;\n \
    \   import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : isInputRange;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;", "{\n    if (date.length == 0)\n        return\
    \ false;\n    auto date_split = date.split(\"-\");\n    if (date_split.length\
    \ != 3)\n        return false;\n    int month = to!int(date_split[0]);\n    int\
    \ day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n    if\
    \ (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n\
    \        return false;\n    if (month == 2)\n    {\n        if (day > 29)\n  \
    \          return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}", "{\n   \
    \ import std.algorithm : map;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.range : take;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import", "{\n    if (date.length\
    \ == 0) return false;\n    auto date_split = date.split(\"-\");\n    if (date_split.length\
    \ != 3) return false;\n    int month = date_split[0].to!int;\n    int day = date_split[1].to!int;\n\
    \    int year = date_split[2].to!int;\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}", "{\n    if (date.length < 10) return false;\n    int month = to!int(date[0..1]);\n\
    \    int day = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if\
    \ (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return\
    \ false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n        {\n\
    \            if (day > 29) return false;\n        }\n        else\n        {\n\
    \            if (day > 28) return false;\n        }\n    }\n    else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\
    \ return false;\n    }\n    return true;\n}", "{\n    auto parts = date.split(\"\
    -\");\n    if (parts.length != 3) return false;\n    auto day = parts[1].to!int;\n\
    \    auto month = parts[0].to!int;\n    auto year = parts[2].to!int;\n    if (day\
    \ < 1 || day > 31) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (month == 2) {\n        if (isLeapYear(year)) {\n            if (day >\
    \ 29) return false;\n        } else {\n            if (day > 28) return false;\n\
    \        }\n    } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) return false;\n    }\n    return true;\n}", "{\n\
    \    int[] days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    int month = parts[0].to!int;\n    int day = parts[1].to!int;\n    int year\
    \ = parts[2].to!int;\n    if (year < 0)\n        return false;\n    if (month\
    \ < 1 || month > 12)\n        return false;\n    if (day < 1 || day > days[month\
    \ - 1])\n        return false;\n    if (month == 2 && day == 29 && !isLeapYear(year))\n\
    \        return false;\n    return true;\n}", "{\n    if (date.length == 0)\n\
    \        return false;\n    string[] date_array = date.split(\"-\");\n    if (date_array.length\
    \ != 3)\n        return false;\n    if (date_array[0].length != 2 || date_array[1].length\
    \ != 2 || date_array[2].length != 4)\n        return false;\n    int month = to!int(date_array[0]);\n\
    \    int day = to!int(date_array[1]);\n    int year = to!int(date_array[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (month == 2)\n\
    \    {\n        if (day < 1 || day > 29)\n            return false;\n        if\
    \ (day == 29)\n        {\n            if (year % 4 != 0)\n                return\
    \ false;\n            if (year % 100 == 0 && year % 400 != 0)\n              \
    \  return false;\n        }\n    }\n    else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return\
    \ false;\n    }\n    else\n    {\n        if (day < 1 || day > 31)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    import std.algorithm :\
    \ map;\n    import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : isInputRange;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n", "{\n    import std.algorithm\
    \ : split;\n    import std.conv : to;\n    import std.array : array;\n    import\
    \ std.range : take, drop;\n    import std.typecons : tuple;\n    import std.math\
    \ : isNaN;\n    import std.string : toString;\n    import std.typecons : tuple;\n\
    \    import std.traits : isIntegral;\n    import std.algorithm : map;\n    import\
    \ std.range : zip;\n    import std.typecons : tuple;\n    import std.traits :\
    \ isIntegral;\n    import std.algorithm : map;\n    import std.range : zip;\n\
    \    import std.typecons : tuple;\n    import std.traits : isIntegral;\n    import\
    \ std.algorithm : map;\n    import std.range : zip;\n    import std.typecons :\
    \ tuple;\n    import std.traits : isIntegral;\n    import std.algorithm : map;\n\
    \    import std.range : zip;\n    import std.typecons : tuple;\n    import std.traits\
    \ : isIntegral;\n    import std.algorithm : map;\n    import std.range : zip;\n\
    \    import std.typecons : tuple;\n    import std.traits : isIntegral;\n    import\
    \ std.algorithm : map;\n    import std.range : zip;\n    import std.typecons :\
    \ tuple;\n    import std.traits : isIntegral;\n    import std.algorithm : map;\n\
    \    import std.range : zip;\n    import std.typecons : tuple;\n    import std.traits\
    \ : isIntegral;\n    import std.algorithm : map;\n    import std.range : zip;\n\
    \    import std.typecons : tuple;\n    import std.traits : isIntegral;\n    import\
    \ std.algorithm : map;\n    import std.range : zip;\n    import std.typecons :\
    \ tuple;\n    import std.traits : isIntegral;\n    import std.algorithm : map;\n\
    \    import std.range : zip;\n    import std.typecons : tuple;\n    import std.traits\
    \ : isIntegral;\n    import std.algorithm :", "{\n    auto arr = date.split(\"\
    -\");\n    if(arr.length != 3) return false;\n    int month = to!int(arr[0]);\n\
    \    int day = to!int(arr[1]);\n    int year = to!int(arr[2]);\n    if(month <\
    \ 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n\
    \    if(month == 2)\n    {\n        if(year % 4 == 0)\n        {\n           \
    \ if(day > 29) return false;\n        }\n        else\n        {\n           \
    \ if(day > 28) return false;\n        }\n    }\n    else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if(day > 30) return false;\n\
    \    }\n    return true;\n}", "{\n    auto date_parts = date.split(\"-\");\n \
    \   if (date_parts.length != 3)\n        return false;\n    auto month = to!int(date_parts[0]);\n\
    \    auto day = to!int(date_parts[1]);\n    auto year = to!int(date_parts[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }", "{\n    if (date.length == 0) return false;\n    auto date_parts = date.split(\"\
    -\");\n    if (date_parts.length != 3) return false;\n    if (date_parts[0].length\
    \ != 2 || date_parts[1].length != 2 || date_parts[2].length != 4) return false;\n\
    \    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (isLeapYear(year)) {\n            if (day > 29) return false;\n  \
    \      } else {\n            if (day > 28) return false;\n        }\n    } else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day\
    \ > 30) return false;\n    }\n    return true;\n}", "{\n    if (date.length ==\
    \ 0)\n        return false;\n    int month = to!int(date[0..1]);\n    int day\
    \ = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if (month < 1\
    \ || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n      \
    \  return false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n\
    \        {\n            if (day > 29)\n                return false;\n       \
    \ }\n        else\n        {\n            if (day > 28)\n                return\
    \ false;\n        }\n    }\n    else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11)\n    {\n        if (day > 30)\n            return false;\n\
    \    }\n    return true;\n}", "{\n    import std.algorithm : map;\n    import\
    \ std.conv : to;\n    import std.range : take;\n    import std.string : split;\n\
    \    import std.array : array;\n    import std.typecons : tuple;\n    import std.math\
    \ : isNaN;\n    import std.stdio : writeln;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.range : take;\n    import std.conv\
    \ : to;\n    import std.algorithm : map;\n    import std.string : split;\n   \
    \ import std.stdio : writeln;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.range : take;\n    import\
    \ std.conv : to;\n    import std.algorithm : map;\n    import std.string : split;\n\
    \    import std.stdio : writeln;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.range : take;\n    import\
    \ std.conv : to;\n    import std.algorithm : map;\n    import std.string : split;\n\
    \    import std.stdio : writeln;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.range : take;\n    import\
    \ std.conv : to;\n    import std.algorithm : map;\n    import std.string : split;\n\
    \    import std.stdio : writeln;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.range : take;\n    import\
    \ std.conv : to;\n    import std.algorithm : map;\n    import std.string : split;\n\
    \    import std.stdio : writeln;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.range : take;\n    import\
    \ std.conv : to;\n    import std.", "{\n    string[] parts = date.split(\"-\"\
    );\n    if (parts.length != 3)\n        return false;\n    int month = to!int(parts[0]);\n\
    \    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month\
    \ < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n  \
    \      return false;\n    if (month == 2)\n    {\n        if (day > 29)\n    \
    \        return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}", "{\n   \
    \ import std.algorithm : map;\n    import std.conv : to;\n    import std.range\
    \ : take, drop;\n    import std.array : array;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.string : split;\n    import std.stdio\
    \ : writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.datetime : DateTime;\n    import std.datetime : toISOExtString;\n\
    \    import std.datetime : parse;\n    import std.datetime : DateTimeException;\n\
    \    import std.exception : assertThrown;\n    import std.exception : enforce;\n\
    \    import std.exception : assertNotThrown;\n    import std.exception : assertThrown;\n\
    \    import std.exception : assert;\n    import std.exception : assertError;\n\
    \    import std.exception : assertMsg;\n    import std.exception : assertEqual;\n\
    \    import std.exception : assertNotEqual;\n    import std.exception : assertGreater;\n\
    \    import std.exception : assertLess;\n    import std.exception : assertGreaterOrEqual;\n\
    \    import std.exception : assertLessOrEqual;\n    import std.exception : assertThrownMsg;\n\
    \    import std.exception : assertNotThrownMsg;\n    import std.exception : assertEqualMsg;\n\
    \    import std.exception : assertNotEqualMsg;\n    import std.exception : assertGreaterMsg;\n\
    \    import std.exception : assertLessMsg;\n    import std.exception : assertGreaterOrEqualMsg;\n\
    \    import std.exception : assertLessOrEqualMsg;\n    import std.exception :\
    \ assertThrownWith;\n    import std.exception : assertNotThrownWith;\n    import\
    \ std.exception : assertEqualWith;\n    import std.exception : assertNotEqualWith;\n\
    \    import std.exception : assertGreaterWith;\n    import std.exception : assertLessWith;\n\
    \    import std.exception : assertGreaterOrEqualWith;\n", "{\n    auto d = date.split(\"\
    -\");\n    if (d.length != 3) return false;\n    auto m = to!int(d[0]);\n    auto\
    \ dt = to!int(d[1]);\n    auto y = to!int(d[2]);\n    if (m < 1 || m > 12) return\
    \ false;\n    if (m == 2)\n    {\n        if (y % 4 == 0)\n        {\n       \
    \     if (dt < 1 || dt > 29) return false;\n        }\n        else\n        {\n\
    \            if (dt < 1 || dt > 28) return false;\n        }\n    }\n    else\
    \ if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12)\n\
    \    {\n        if (dt < 1 || dt > 31) return false;\n    }\n    else\n    {\n\
    \        if (dt < 1 || dt > 30) return false;\n    }\n    return true;\n}", "{\n\
    \    if (date.length == 0)\n        return false;\n    auto parts = split(date,\
    \ \"-\");\n    if (parts.length != 3)\n        return false;\n    int month =\
    \ to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1)\n \
    \       return false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n\
    \        {\n            if (day > 29)\n                return false;\n       \
    \ }\n        else\n        {\n            if (day > 28)\n                return\
    \ false;\n        }\n    }\n    else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n      \
    \  if (day > 31)\n            return false;\n    }\n    else\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}", "{\n   \
    \ import std.algorithm : map;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.range : isInputRange;\n    import std.string : split;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;", "{\n   \
    \ auto date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n    \
    \    return false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    import std.algorithm :\
    \ map;\n    import std.conv : to;\n    import std.range : joiner;\n    import\
    \ std.string : split;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;", "{\n    import std.algorithm :\
    \ map;\n    import std.conv : to;\n    import std.array : array;\n    import std.range\
    \ : take, drop;\n    import std.typecons : tuple;\n    import std.math : abs;\n\
    \    import std.string : split;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.algorithm : map;\n    import std.conv\
    \ : to;\n    import std.array : array;\n    import std.range : take, drop;\n \
    \   import std.typecons : tuple;\n    import std.math : abs;\n    import std.string\
    \ : split;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.algorithm : map;\n    import std.conv : to;\n    import std.array\
    \ : array;\n    import std.range : take, drop;\n    import std.typecons : tuple;\n\
    \    import std.math : abs;\n    import std.string : split;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.algorithm :\
    \ map;\n    import std.conv : to;\n    import std.array : array;\n    import std.range\
    \ : take, drop;\n    import std.typecons : tuple;\n    import std.math : abs;\n\
    \    import std.string : split;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.algorithm : map;\n    import std.conv\
    \ : to;\n    import std.array : array;\n    import std.range : take, drop;\n \
    \   import std.typecons : tuple;\n    import std.math : abs;\n    import std.string\
    \ : split;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.algorithm : map;\n    import std.conv : to;\n    import std.array\
    \ : array;\n    import std.range : take, drop;\n    import std.typecons : tuple;\n\
    \    import std.math : abs;\n    import std.string :", "{\n    import std.algorithm\
    \ : split;\n    import std.conv : to;\n    import std.string : strip;\n    import\
    \ std.array : array;\n    import std.range : iota;\n    import std.typecons :\
    \ tuple;\n    import std.math : isNaN;\n    import std.stdio : writeln;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.range : iota;\n    import std.algorithm : map;\n  \
    \  import std.algorithm : joiner;\n    import std.stdio : writeln;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.range : iota;\n    import std.algorithm : map;\n  \
    \  import std.algorithm : joiner;\n    import std.stdio : writeln;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.range : iota;\n    import std.algorithm : map;\n  \
    \  import std.algorithm : joiner;\n    import std.stdio : writeln;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.range : iota;\n    import std.algorithm : map;\n  \
    \  import std.algorithm : joiner;\n    import std.stdio : writeln;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.range : iota;\n    import std.algorithm : map;\n  \
    \  import std.algorithm : joiner;\n    import std.stdio : writeln;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.range : iota;\n    import std.algorithm : map;\n  \
    \  import std.algorithm : joiner;\n    import std", "{\n    import std.algorithm\
    \ : map;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : isInputRange;\n    import std.string : split;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;", "{\n    int[] months = [31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    auto parts = date.split(\"-\"\
    );\n    if (parts.length != 3) return false;\n    int month = parts[0].to!int;\n\
    \    int day = parts[1].to!int;\n    int year = parts[2].to!int;\n    if (year\
    \ % 4 == 0 && year % 100 != 0 || year % 400 == 0) months[1] = 29;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > months[month - 1])\
    \ return false;\n    return true;\n}", "{\n    if(date.length == 0) return false;\n\
    \    auto date_split = date.split(\"-\");\n    if(date_split.length != 3) return\
    \ false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2 && day\
    \ > 29) return false;\n    if(month == 2 && day == 29 && !isLeapYear(year)) return\
    \ false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n\
    \        if(day > 30) return false;\n    }\n    return true;\n}", "{\n    auto\
    \ date_split = date.split(\"-\");\n    if (date_split.length != 3) return false;\n\
    \    if (date_split[0].length != 2 || date_split[1].length != 2 || date_split[2].length\
    \ != 4) return false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2)\n  \
    \  {\n        if (year % 4 == 0)\n        {\n            if (day > 29) return\
    \ false;\n        }\n        else\n        {\n            if (day > 28) return\
    \ false;\n        }\n    }\n    else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11)\n    {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}", "{\n    string[] date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n    int\
    \ day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2)\n    {\n        if(isLeapYear(year))\n\
    \        {\n            if(day > 29)\n                return false;\n        }\n\
    \        else\n        {\n            if(day > 28)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    string[] date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3) return false;\n    if(date_arr[0].length != 2 || date_arr[1].length !=\
    \ 2 || date_arr[2].length != 4) return false;\n    int month = to!int(date_arr[0]);\n\
    \    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n   \
    \ if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 2 && day\
    \ == 29 && !isLeapYear(year)) return false;\n    if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11)\n    {\n        if(day > 30) return false;\n    }\n\
    \    return true;\n}", "{\n    if(date.length == 0) return false;\n    auto arr\
    \ = date.split(\"-\");\n    if(arr.length != 3) return false;\n    int month =\
    \ to!int(arr[0]);\n    int day = to!int(arr[1]);\n    int year = to!int(arr[2]);\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2)\n    {\n        if(day > 29) return false;\n    \
    \    if(day == 29)\n        {\n            if(year % 4 != 0) return false;\n \
    \           if(year % 100 == 0 && year % 400 != 0) return false;\n        }\n\
    \    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\n \
    \   {\n        if(day > 30) return false;\n    }\n    return true;\n}", "{\n \
    \   auto tokens = split(date, \"-\");\n    if (tokens.length != 3) return false;\n\
    \    int month = to!int(tokens[0]);\n    int day = to!int(tokens[1]);\n    int\
    \ year = to!int(tokens[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n        if (day == 29) {\n            if (year % 4\
    \ != 0) return false;\n            if (year % 100 == 0 && year % 400 != 0) return\
    \ false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    return true;\n\
    }", "{\n    import std.algorithm : map;\n    import std.conv : to;\n    import\
    \ std.range : isInputRange;\n    import std.string : split;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tupleof;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tupleof;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tupleof;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tupleof;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : Tuple;\n", "{\n    auto parts = date.split(\"\
    -\");\n    if (parts.length != 3) return false;\n    auto month = parts[0].to!int;\n\
    \    auto day = parts[1].to!int;\n    auto year = parts[2].to!int;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1) return false;\n    if (month\
    \ == 2)\n    {\n        if (isLeapYear(year))\n        {\n            if (day\
    \ > 29) return false;\n        }\n        else\n        {\n            if (day\
    \ > 28) return false;\n        }\n    }\n    else if (month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n \
    \   {\n        if (day > 31) return false;\n    }\n    else\n    {\n        if\
    \ (day > 30) return false;\n    }\n    return true;\n}", "{\n    auto date_parts\
    \ = date.split(\"-\");\n    if (date_parts.length != 3)\n        return false;\n\
    \    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (year < 0)\n        return false;\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1)\n \
    \       return false;\n    if (month == 2)\n    {\n        if (year % 4 == 0 &&\
    \ year % 100 != 0 || year % 400 == 0)\n        {\n            if (day > 29)\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if (day > 28)\n                return false;\n        }\n    }\n    else if\
    \ (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12)\n    {\n        if (day > 31)\n            return false;\n\
    \    }\n    else\n    {\n        if (day > 30)\n            return false;\n  \
    \  }\n    return true;\n}", "{\n    import std.algorithm : all;\n    import std.conv\
    \ : to;\n    import std.range : split;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.string :\
    \ toLower;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.range : split;\n    import std.conv : to;\n    import std.algorithm\
    \ : all;\n    import std.math : isNaN;\n    import std.string : toLower;\n   \
    \ import std.typecons : tuple;\n    import std.array : array;\n    import std.range\
    \ : split;\n    import std.conv : to;\n    import std.algorithm : all;\n    import\
    \ std.math : isNaN;\n    import std.string : toLower;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.range : split;\n   \
    \ import std.conv : to;\n    import std.algorithm : all;\n    import std.math\
    \ : isNaN;\n    import std.string : toLower;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.range : split;\n    import std.conv\
    \ : to;\n    import std.algorithm : all;\n    import std.math : isNaN;\n    import\
    \ std.string : toLower;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.range : split;\n    import std.conv : to;\n    import\
    \ std.algorithm : all;\n    import std.math : isNaN;\n    import std.string :\
    \ toLower;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.range : split;\n    import std.conv : to;\n    import std.algorithm\
    \ : all;\n    import std.math : isNaN;\n    import std.string : toLower;\n   \
    \ import std.typecons : tuple;\n    import std.array : array;\n    import std.range\
    \ : split;\n    import std.conv", "{\n    if(date.length == 0)\n        return\
    \ false;\n    auto date_split = date.split(\"-\");\n    if(date_split.length !=\
    \ 3)\n        return false;\n    int month = to!int(date_split[0]);\n    int day\
    \ = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2)\n    {\n        if(isLeapYear(year))\n\
    \        {\n            if(day > 29)\n                return false;\n        }\n\
    \        else\n        {\n            if(day > 28)\n                return false;\n\
    \        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if(day > 30)\n            return false;\n    }\n    return true;\n\
    }", "{\n    string[] date_split = date.split(\"-\");\n    if (date_split.length\
    \ != 3) return false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2)\n  \
    \  {\n        if (day > 29) return false;\n        if (day == 29)\n        {\n\
    \            if (year % 4 != 0) return false;\n            if (year % 100 == 0\
    \ && year % 400 != 0) return false;\n        }\n    }\n    else if (month == 4\
    \ || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}", "{\n    import std.array;\n    import std.conv;\n\
    \    import std.string;\n    import std.algorithm;\n    import std.range;\n  \
    \  import std.format;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.traits;\n    import std.meta;\n    import std.typetuple;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.format;\n    import std.conv;\n    import std.traits;\n    import std.meta;\n\
    \    import std.typetuple;\n    import std.typecons;\n    import std.math;\n \
    \   import std.algorithm;\n    import std.range;\n    import std.format;\n   \
    \ import std.conv;\n    import std.traits;\n    import std.meta;\n    import std.typetuple;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.format;\n    import std.conv;\n    import\
    \ std.traits;\n    import std.meta;\n    import std.typetuple;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.format;\n    import std.conv;\n    import std.traits;\n    import std.meta;\n\
    \    import std.typetuple;\n    import std.typecons;\n    import std.math;\n \
    \   import std.algorithm;\n    import std.range;\n    import std.format;\n   \
    \ import std.conv;\n    import std.traits;\n    import std.meta;\n    import std.typetuple;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.format;\n    import std.conv;\n    import\
    \ std.traits;\n    import std.meta;\n    import std.typetuple;\n    import std.typecons;\n\
    \    import std.math;\n    import std.", "{\n    if (date.length == 0)\n     \
    \   return false;\n    auto parts = date.split(\"-\");\n    if (parts.length !=\
    \ 3)\n        return false;\n    int month = to!int(parts[0]);\n    int day =\
    \ to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month < 1 || month\
    \ > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n\
    \    if (month == 2)\n    {\n        if (day > 29)\n            return false;\n\
    \        if (day == 29)\n        {\n            if (year % 4 != 0)\n         \
    \       return false;\n            if (year % 100 == 0 && year % 400 != 0)\n \
    \               return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    auto parts = date.split(\"\
    -\");\n    if (parts.length != 3)\n        return false;\n    int month = parts[0].to!int;\n\
    \    int day = parts[1].to!int;\n    int year = parts[2].to!int;\n    if (year\
    \ < 0)\n        return false;\n    if (month < 1 || month > 12)\n        return\
    \ false;\n    if (day < 1)\n        return false;\n    if (month == 2)\n    {\n\
    \        if (year % 4 == 0)\n        {\n            if (day > 29)\n          \
    \      return false;\n        }\n        else\n        {\n            if (day\
    \ > 28)\n                return false;\n        }\n    }\n    else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    else\n    {\n        if (day > 31)\n  \
    \          return false;\n    }\n    return true;\n}", "{\n    auto date_split\
    \ = date.split(\"-\");\n    if (date_split.length != 3) return false;\n    int\
    \ month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n    int\
    \ year = to!int(date_split[2]);\n    if (year < 0) return false;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1) return false;\n    if (month\
    \ == 2)\n    {\n        if (day > 29) return false;\n        if (day == 29)\n\
    \        {\n            if (year % 4 != 0) return false;\n            if (year\
    \ % 100 == 0 && year % 400 != 0) return false;\n        }\n    }\n    else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day\
    \ > 30) return false;\n    }\n    else\n    {\n        if (day > 31) return false;\n\
    \    }\n    return true;\n}", "{\n    import std.algorithm : map;\n    import\
    \ std.conv : to;\n    import std.range : isInputRange;\n    import std.typecons\
    \ : tuple;\n    import std.math : isNaN;\n    import std.array : array;\n    import\
    \ std.string : split;\n    import std.stdio : writeln;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;", "{\n    auto d = split(date, '-');\n    if (d.length != 3)\n    \
    \    return false;\n    int month = to!int(d[0]);\n    int day = to!int(d[1]);\n\
    \    int year = to!int(d[2]);\n    if (year < 0)\n        return false;\n    if\
    \ (month < 1 || month > 12)\n        return false;\n    if (day < 1)\n       \
    \ return false;\n    if (month == 2)\n    {\n        if (year % 4 == 0 && year\
    \ % 100 != 0 || year % 400 == 0)\n        {\n            if (day > 29)\n     \
    \           return false;\n        }\n        else\n        {\n            if\
    \ (day > 28)\n                return false;\n        }\n    }\n    else if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12)\n    {\n        if (day > 31)\n            return false;\n \
    \   }\n    else\n    {\n        if (day > 30)\n            return false;\n   \
    \ }\n    return true;\n}", "{\n    int[] months = [31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n    int[] days = [31, 30, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31];\n    int[] months_leap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n    int[] days_leap = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31];\n    int[] months_non_leap = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31];\n    int[] days_non_leap = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31];\n    int[] months_non_leap_2 = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n    int[] days_non_leap_2 = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n    int[] months_leap_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n    int[] days_leap_2 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31];\n    int[] months_leap_3 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31];\n    int[] days_leap_3 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\
    \    int[] months_non_leap_3 = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\
    \    int[] days_non_leap_3 = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\
    \    int[] months_leap_4 = [", "{\n    if (date.empty)\n        return false;\n\
    \    auto parts = date.split(\"-\");\n    if (parts.length != 3)\n        return\
    \ false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return\
    \ false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month ==\
    \ 2)\n    {\n        if (day > 29)\n            return false;\n        if (day\
    \ == 29)\n        {\n            if (year % 4 != 0)\n                return false;\n\
    \            if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ return true;\n}", "{\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.algorithm;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    if(date.length == 0)\n    {\n        return false;\n\
    \    }\n    auto arr = date.split(\"-\");\n    if(arr.length != 3)\n    {\n  \
    \      return false;\n    }\n    int month = to!int(arr[0]);\n    int day = to!int(arr[1]);\n\
    \    int year = to!int(arr[2]);\n    if(month < 1 || month > 12)\n    {\n    \
    \    return false;\n    }\n    if(month == 2)\n    {\n        if(day < 1 || day\
    \ > 29)\n        {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12)\n    {\n        if(day < 1 || day > 31)\n        {\n       \
    \     return false;\n        }\n    }\n    else\n    {\n        if(day < 1 ||\
    \ day > 30)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    auto date_tuple = split(date, '-');\n    if (date_tuple.length\
    \ != 3)\n        return false;\n    int month = to!int(date_tuple[0]);\n    int\
    \ day = to!int(date_tuple[1]);\n    int year = to!int(date_tuple[2]);\n    if\
    \ (year < 0)\n        return false;\n    if (month < 1 || month > 12)\n      \
    \  return false;\n    if (day < 1)\n        return false;\n    if (month == 2)\n\
    \    {\n        if (isLeapYear(year))\n        {\n            if (day > 29)\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if (day > 28)\n                return false;\n        }\n    }\n    else if\
    \ (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12)\n    {\n        if (day > 31)\n            return false;\n\
    \    }\n    else\n    {\n        if (day > 30)\n            return false;\n  \
    \  }\n    return true;\n}", "{\n    auto parts = split(date, '-');\n    if (parts.length\
    \ != 3)\n        return false;\n    auto month = to!int(parts[0]);\n    auto day\
    \ = to!int(parts[1]);\n    auto year = to!int(parts[2]);\n    if (month < 1 ||\
    \ month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return\
    \ false;\n    if (month == 2)\n    {\n        if (day > 29)\n            return\
    \ false;\n        if (day == 29)\n        {\n            if (year % 4 != 0)\n\
    \                return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0)\n                return false;\n        }\n    }\n    else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : take;\n    import\
    \ std.string : split;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.math : isNaN;\n    import std.stdio : writeln;\n  \
    \  import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.range : take;\n    import std.array : array;\n    import std.algorithm :\
    \ map;\n    import std.conv : to;\n    import std.string : split;\n    import\
    \ std.stdio : writeln;\n    import std.traits : isIntegral;\n    import std.typecons\
    \ : tuple;\n    import std.range : take;\n    import std.array : array;\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.string : split;\n\
    \    import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.range : take;\n    import std.array :\
    \ array;\n    import std.algorithm : map;\n    import std.conv : to;\n    import\
    \ std.string : split;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.range : take;\n\
    \    import std.array : array;\n    import std.algorithm : map;\n    import std.conv\
    \ : to;\n    import std.string : split;\n    import std.stdio : writeln;\n   \
    \ import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.range : take;\n    import std.array : array;\n    import std.algorithm :\
    \ map;\n    import std.conv : to;\n    import std.string : split;\n    import\
    \ std.stdio : writeln;\n    import std.traits : isIntegral;\n    import std.typecons\
    \ : tuple;\n    import std.range : take;\n    import std.array", "{\n    if (date.length\
    \ == 0) return false;\n    auto parts = split(date, \"-\");\n    if (parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (year % 4 == 0) {\n            if (day > 29) return false;\n        } else {\n\
    \            if (day > 28) return false;\n        }\n    } else if (month == 4\
    \ || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}", "{\n    import std.algorithm : map;\n \
    \   import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : take, drop;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n\
    \    import std.string : split;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ :", "{\n    import std.algorithm : map;\n    import std.array : array;\n   \
    \ import std.conv : to;\n    import std.range : iota;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n   ", "{\n\
    \    int[] months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    string[]\
    \ date_split = date.split(\"-\");\n    if (date_split.length != 3)\n        return\
    \ false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > months[month - 1])\n        return\
    \ false;\n    if (month == 2 && day == 29 && !isLeapYear(year))\n        return\
    \ false;\n    return true;\n}", "{\n    if(date.length == 0)\n        return false;\n\
    \    auto parts = date.split(\"-\");\n    if(parts.length != 3)\n        return\
    \ false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if(month < 1 || month > 12)\n        return\
    \ false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month ==\
    \ 2)\n    {\n        if(day > 29)\n            return false;\n        if(day ==\
    \ 29)\n        {\n            if(year % 4 != 0)\n                return false;\n\
    \            if(year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    if(date.length == 0)\n        return false;\n    auto date_arr\
    \ = date.split(\"-\");\n    if(date_arr.length != 3)\n        return false;\n\
    \    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n  \
    \  int year = to!int(date_arr[2]);\n    if(month < 1 || month > 12)\n        return\
    \ false;\n    if(month == 2)\n    {\n        if(year % 4 == 0)\n        {\n  \
    \          if(day < 1 || day > 29)\n                return false;\n        }\n\
    \        else\n        {\n            if(day < 1 || day > 28)\n              \
    \  return false;\n        }\n    }\n    else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n   \
    \     if(day < 1 || day > 31)\n            return false;\n    }\n    else\n  \
    \  {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    import std.algorithm : map;\n    import std.array : array;\n\
    \    import std.conv : to;\n    import std.range : take, drop;\n    import std.string\
    \ : split;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n \
    \   import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.conv : to;\n    import std.array : array;\n\
    \    import std.range : take, drop;\n    import std.algorithm : map;\n    import\
    \ std.string : split;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.math : isNaN;\n    import std.typecons : tuple;\n\
    \    import std.conv : to;\n    import std.array : array;\n    import std.range\
    \ : take, drop;\n    import std.algorithm : map;\n    import std.string : split;\n\
    \    import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import\
    \ std.math : isNaN;\n    import std.typecons : tuple;\n    import std.conv : to;\n\
    \    import std.array : array;\n    import std.range : take, drop;\n    import\
    \ std.algorithm : map;\n    import std.string : split;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.math : isNaN;\n\
    \    import std.typecons : tuple;\n    import std.conv : to;\n    import std.array\
    \ : array;\n    import std.range : take, drop;\n    import std.algorithm : map;\n\
    \    import std.string : split;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.math : isNaN;\n    import std.typecons : tuple;\n\
    \    import std.conv : to;\n    import std.array : array;\n    import std.range\
    \ : take, drop;\n    import std.algorithm : map;\n", "{\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : take;\n    import\
    \ std.string : split;\n    import std.typecons : tuple;\n    import std.math :\
    \ min;\n    import std.array : array;\n    import std.typecons : tuple;\n    import\
    \ std.conv : to;\n    import std.algorithm : map;\n    import std.range : take;\n\
    \    import std.string : split;\n    import std.typecons : tuple;\n    import\
    \ std.math : min;\n    import std.array : array;\n    import std.typecons : tuple;\n\
    \    import std.conv : to;\n    import std.algorithm : map;\n    import std.range\
    \ : take;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.math : min;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.conv : to;\n    import std.algorithm : map;\n    import\
    \ std.range : take;\n    import std.string : split;\n    import std.typecons :\
    \ tuple;\n    import std.math : min;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.conv : to;\n    import std.algorithm :\
    \ map;\n    import std.range : take;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : min;\n    import std.array : array;\n\
    \    import std.typecons : tuple;\n    import std.conv : to;\n    import std.algorithm\
    \ : map;\n    import std.range : take;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : min;\n    import std.array : array;\n\
    \    import std.typecons : tuple;\n    import std.conv : to;\n    import std.algorithm\
    \ : map;\n    import std.range : take;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : min;\n    import std", "{\n   \
    \ auto date_split = date.split(\"-\");\n    if (date_split.length != 3)\n    \
    \    return false;\n    int day = to!int(date_split[1]);\n    int month = to!int(date_split[0]);\n\
    \    int year = to!int(date_split[2]);\n    if (day < 1 || day > 31)\n       \
    \ return false;\n    if (month < 1 || month > 12)\n        return false;\n   \
    \ if (year < 0)\n        return false;\n    if (month == 2)\n    {\n        if\
    \ (year % 4 == 0)\n        {\n            if (day > 29)\n                return\
    \ false;\n        }\n        else\n        {\n            if (day > 28)\n    \
    \            return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    if (date.length == 0)\n\
    \        return false;\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3)\n        return false;\n    int month = to!int(parts[0]);\n    int day\
    \ = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month < 1 ||\
    \ month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return\
    \ false;\n    if (month == 2)\n    {\n        if (day > 29)\n            return\
    \ false;\n        if (day == 29)\n        {\n            if (year % 4 != 0)\n\
    \                return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0)\n                return false;\n        }\n    }\n    else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    auto parts =\
    \ split(date, '-');\n    if (parts.length != 3)\n        return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }", "{\n    auto parts = date.split(\"-\");\n    if (parts.length != 3) return\
    \ false;\n    auto month = parts[0].to!int;\n    auto day = parts[1].to!int;\n\
    \    auto year = parts[2].to!int;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1) return false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n\
    \        {\n            if (day > 29) return false;\n        }\n        else\n\
    \        {\n            if (day > 28) return false;\n        }\n    }\n    else\
    \ if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12)\n    {\n        if (day > 31) return false;\n    }\n \
    \   else\n    {\n        if (day > 30) return false;\n    }\n    return true;\n\
    }", "{\n    if(date.length == 0) return false;\n    auto date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3) return false;\n    int month = to!int(date_arr[0]);\n\
    \    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n   \
    \ if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2)\n    {\n        if(year % 4 == 0)\n        {\n  \
    \          if(day > 29) return false;\n        }\n        else\n        {\n  \
    \          if(day > 28) return false;\n        }\n    }\n    else if(month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30) return\
    \ false;\n    }\n    return true;\n}", "{\n    if (date.length == 0)\n       \
    \ return false;\n    auto date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n    int\
    \ day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n    if (month\
    \ < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n  \
    \      return false;\n    if (month == 2)\n    {\n        if (day > 29)\n    \
    \        return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}", "{\n   \
    \ auto date_tuple = tuple(date.split(\"-\"));\n    if(date_tuple.length != 3)\n\
    \        return false;\n    int month = to!int(date_tuple[0]);\n    int day =\
    \ to!int(date_tuple[1]);\n    int year = to!int(date_tuple[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2)\n    {\n        if(year % 4 == 0)\n  \
    \      {\n            if(day > 29)\n                return false;\n        }\n\
    \        else\n        {\n            if(day > 28)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    enum month {Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,\
    \ Oct, Nov, Dec};\n    int[] days_in_month = [31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31];\n    int[] days_in_month_leap = [31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n    bool is_leap_year = false;\n    int year = 0;\n  \
    \  int month = 0;\n    int day = 0;\n    int[] date_array = date.split('-').map!(a\
    \ => a.to!int()).array;\n    if (date_array.length != 3)\n        return false;\n\
    \    if (date_array[0] < 1 || date_array[0] > 12)\n        return false;\n   \
    \ if (date_array[2] % 4 == 0)\n        is_leap_year = true;\n    if (is_leap_year\
    \ && date_array[1] > days_in_month_leap[date_array[0] - 1])\n        return false;\n\
    \    if (!is_leap_year && date_array[1] > days_in_month[date_array[0] - 1])\n\
    \        return false;\n    return true;\n}", "{\n    import std.conv;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.string;\n    import std.stdio;\n    import\
    \ std.format;\n    import std.datetime;\n    import std.traits;\n    import std.meta;\n\
    \    import std.typecons;\n    import std.math;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.format;\n    import std.datetime;\n    import std.traits;\n\
    \    import std.meta;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.format;\n    import std.datetime;\n\
    \    import std.traits;\n    import std.meta;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.string;\n    import std.stdio;\n    import std.format;\n\
    \    import std.datetime;\n    import std.traits;\n    import std.meta;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.string;\n    import std.stdio;\n\
    \    import std.format;\n    import std.datetime;\n    import std.traits;\n  \
    \  import std.meta;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.format;\n    import std.datetime;\n\
    \    import std.traits;\n    import std.meta;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.string;\n    import std.stdio;\n    import std.format;\n\
    \    import std.datetime;\n    import std.traits;\n    import std.meta;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.string;\n    import std.stdio;\n\
    \    import std.format;\n    import std.datetime;\n    import std.traits;\n  \
    \  import std.meta;\n", "{\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    if(date.length == 0) return false;\n\
    \    auto arr = date.split(\"-\");\n    if(arr.length != 3) return false;\n  \
    \  int month = to!int(arr[0]);\n    int day = to!int(arr[1]);\n    int year =\
    \ to!int(arr[2]);\n    if(month < 1 || month > 12) return false;\n    if(day <\
    \ 1 || day > 31) return false;\n    if(month == 2)\n    {\n        if(day > 29)\
    \ return false;\n        if(day == 29)\n        {\n            if(year % 4 !=\
    \ 0) return false;\n            if(year % 100 == 0 && year % 400 != 0) return\
    \ false;\n        }\n    }\n    else if(month == 4 || month == 6 || month == 9\
    \ || month == 11)\n    {\n        if(day > 30) return false;\n    }\n    return\
    \ true;\n}", "{\n    auto date_parts = date.split(\"-\");\n    if (date_parts.length\
    \ != 3)\n        return false;\n    int month = to!int(date_parts[0]);\n    int\
    \ day = to!int(date_parts[1]);\n    int year = to!int(date_parts[2]);\n    if\
    \ (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n\
    \        return false;\n    if (month == 2)\n    {\n        if (day > 29)\n  \
    \          return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}", "{\n   \
    \ if (date.length == 0)\n        return false;\n    auto parts = date.split(\"\
    -\");\n    if (parts.length != 3)\n        return false;\n    int month = to!int(parts[0]);\n\
    \    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (year\
    \ < 0)\n        return false;\n    if (month < 1 || month > 12)\n        return\
    \ false;\n    if (day < 1)\n        return false;\n    if (month == 2)\n    {\n\
    \        if (year % 4 == 0)\n        {\n            if (day > 29)\n          \
    \      return false;\n        }\n        else\n        {\n            if (day\
    \ > 28)\n                return false;\n        }\n    }\n    else if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12)\n    {\n        if (day > 31)\n            return false;\n    }\n\
    \    else\n    {\n        if (day > 30)\n            return false;\n    }\n  \
    \  return true;\n}", "{\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3)\n        return false;\n    int month = to!int(parts[0]);\n    int day\
    \ = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month < 1 ||\
    \ month > 12)\n        return false;\n    if (day < 1)\n        return false;\n\
    \    if (month == 2)\n    {\n        if (isLeapYear(year))\n        {\n      \
    \      if (day > 29)\n                return false;\n        }\n        else\n\
    \        {\n            if (day > 28)\n                return false;\n       \
    \ }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day > 30)\n            return false;\n    }\n    else\n  \
    \  {\n        if (day > 31)\n            return false;\n    }\n    return true;\n\
    }", "{\n    auto splitted = date.split(\"-\");\n    if (splitted.length != 3)\
    \ return false;\n    auto day = splitted[0].to!int;\n    auto month = splitted[1].to!int;\n\
    \    auto year = splitted[2].to!int;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month < 1 || month > 12) return false;\n    if (year < 1) return false;\n\
    \    if (month == 2) {\n        if (year % 4 == 0) {\n            if (day > 29)\
    \ return false;\n        } else {\n            if (day > 28) return false;\n \
    \       }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (day > 30) return false;\n    }\n    return true;\n}", "{\n  \
    \  auto d = date.split(\"-\");\n    if (d.length != 3) return false;\n    int\
    \ month = to!int(d[0]);\n    int day = to!int(d[1]);\n    int year = to!int(d[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (year % 4 == 0) {\n       \
    \     if (day > 29) return false;\n        } else {\n            if (day > 28)\
    \ return false;\n        }\n    } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}", "{\n    if(date.length == 0)\n        return false;\n    auto date_arr\
    \ = date.split(\"-\");\n    if(date_arr.length != 3)\n        return false;\n\
    \    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n  \
    \  int year = to!int(date_arr[2]);\n    if(month < 1 || month > 12)\n        return\
    \ false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month ==\
    \ 2)\n    {\n        if(day > 29)\n            return false;\n        if(day ==\
    \ 29)\n        {\n            if(year % 4 != 0)\n                return false;\n\
    \            if(year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    import std.algorithm : map;\n    import std.conv : to;\n\
    \    import std.array : array;\n    import std.range : isInputRange;\n    import\
    \ std.range : isForwardRange;\n    import std.range : isBidirectionalRange;\n\
    \    import std.range : isRandomAccessRange;\n    import std.range : isInfinite;\n\
    \    import std.range : isSorted;\n    import std.range : isSorted!;\n    import\
    \ std.range : isSorted!greater;\n    import std.range : isSorted!less;\n    import\
    \ std.range : isSorted!lessEqual;\n    import std.range : isSorted!greaterEqual;\n\
    \    import std.range : isSorted!equal;\n    import std.range : isSorted!notEqual;\n\
    \    import std.range : isSorted!unaryFun;\n    import std.range : isSorted!binaryFun;\n\
    \    import std.range : isSorted!binaryFun2;\n    import std.range : isSorted!binaryFun3;\n\
    \    import std.range : isSorted!binaryFun4;\n    import std.range : isSorted!binaryFun5;\n\
    \    import std.range : isSorted!binaryFun6;\n    import std.range : isSorted!binaryFun7;\n\
    \    import std.range : isSorted!binaryFun8;\n    import std.range : isSorted!binaryFun9;\n\
    \    import std.range : isSorted!binaryFun10;\n    import std.range : isSorted!binaryFun11;\n\
    \    import std.range : isSorted!binaryFun12;\n    import std.range : isSorted!binaryFun13;\n\
    \    import std.range : isSorted!binaryFun14;\n    import std.range : isSorted!binaryFun15;\n\
    \    import std.range : isSorted!binaryFun16;\n    import std.range : isSorted!binaryFun17;\n\
    \    import std.range : isSorted!binaryFun18;\n    import std.range : isSorted!binaryFun19;\n\
    \    import std.range : isSorted!binaryFun20;", "{\n    import std.algorithm :\
    \ map;\n    import std.conv : to;\n    import std.range : isInputRange;\n    import\
    \ std.string : split;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple", "{\n    auto date_tuple\
    \ = tuple(date.split(\"-\"));\n    if(date_tuple.length != 3)\n        return\
    \ false;\n    int month = to!int(date_tuple[0]);\n    int day = to!int(date_tuple[1]);\n\
    \    int year = to!int(date_tuple[2]);\n    if(month < 1 || month > 12)\n    \
    \    return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month\
    \ == 2)\n    {\n        if(day > 29)\n            return false;\n        if(day\
    \ == 29)\n        {\n            if(year % 4 != 0)\n                return false;\n\
    \            if(year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    if (date.length == 0)\n        return false;\n    auto\
    \ date_arr = date.split(\"-\");\n    if (date_arr.length != 3)\n        return\
    \ false;\n    auto month = to!int(date_arr[0]);\n    auto day = to!int(date_arr[1]);\n\
    \    auto year = to!int(date_arr[2]);\n    if (month < 1 || month > 12)\n    \
    \    return false;\n    if (day < 1 || day > 31)\n        return false;\n    if\
    \ (month == 2)\n    {\n        if (day > 29)\n            return false;\n    \
    \    if (day == 29)\n        {\n            if (year % 4 != 0)\n             \
    \   return false;\n            if (year % 100 == 0 && year % 400 != 0)\n     \
    \           return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    int[] months = [31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    auto parts = date.split(\"-\"\
    );\n    if (parts.length != 3) return false;\n    int month = parts[0].to!int;\n\
    \    int day = parts[1].to!int;\n    int year = parts[2].to!int;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > months[month - 1])\
    \ return false;\n    if (month == 2 && day == 29 && !isLeapYear(year)) return\
    \ false;\n    return true;\n}", "{\n    auto date_parts = date.split(\"-\");\n\
    \    if (date_parts.length != 3) return false;\n    if (date_parts[0].length !=\
    \ 2 || date_parts[1].length != 2 || date_parts[2].length != 4) return false;\n\
    \    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (year % 4 == 0) {\n            if (day > 29) return false;\n     \
    \   } else {\n            if (day > 28) return false;\n        }\n    } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day >\
    \ 30) return false;\n    }\n    return true;\n}", "{\n    string[] date_array\
    \ = date.split(\"-\");\n    if (date_array.length != 3)\n        return false;\n\
    \    int month = to!int(date_array[0]);\n    int day = to!int(date_array[1]);\n\
    \    int year = to!int(date_array[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    auto date_arr = date.split(\"\
    -\");\n    if (date_arr.length != 3) return false;\n    int day = to!int(date_arr[0]);\n\
    \    int month = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n \
    \   if (day < 1 || day > 31) return false;\n    if (month < 1 || month > 12) return\
    \ false;\n    if (month == 2)\n    {\n        if (year % 4 == 0)\n        {\n\
    \            if (day > 29) return false;\n        }\n        else\n        {\n\
    \            if (day > 28) return false;\n        }\n    }\n    else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\
    \ return false;\n    }\n    return true;\n}", "{\n    import std.algorithm : map;\n\
    \    import std.conv : to;\n    import std.range : take;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.math : abs;\n   \
    \ import std.string : split;\n    import std.traits : isIntegral;\n    import\
    \ std.range : empty;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : take;\n    import\
    \ std.array : array;\n    import std.typecons : tuple;\n    import std.math :\
    \ abs;\n    import std.string : split;\n    import std.traits : isIntegral;\n\
    \    import std.range : empty;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : take;\n    import\
    \ std.array : array;\n    import std.typecons : tuple;\n    import std.math :\
    \ abs;\n    import std.string : split;\n    import std.traits : isIntegral;\n\
    \    import std.range : empty;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : take;\n    import\
    \ std.array : array;\n    import std.typecons : tuple;\n    import std.math :\
    \ abs;\n    import std.string : split;\n    import std.traits : isIntegral;\n\
    \    import std.range : empty;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : take;\n    import\
    \ std.array : array;\n    import std.typecons : tuple;\n    import std.math :\
    \ abs;\n    import std.string : split;\n    import std.traits : isIntegral;\n\
    \    import std.range : empty;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : take;\n   ", "{\n\
    \    if (date.length == 0)\n        return false;\n    auto date_parts = date.split(\"\
    -\");\n    if (date_parts.length != 3)\n        return false;\n    int month =\
    \ to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n    int year =\
    \ to!int(date_parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1 || day > 31)\n        return false;\n    if (month == 2)\n  \
    \  {\n        if (day > 29)\n            return false;\n        if (day == 29)\n\
    \        {\n            if (year % 4 != 0)\n                return false;\n  \
    \          if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ return true;\n}", "{\n    auto date_split = date.split(\"-\");\n    if (date_split.length\
    \ != 3) return false;\n    int day = to!int(date_split[0]);\n    int month = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (day < 1 || day > 31) return false;\n\
    \    if (month < 1 || month > 12) return false;\n    if (month == 2)\n    {\n\
    \        if (year % 4 == 0)\n        {\n            if (day > 29) return false;\n\
    \        }\n        else\n        {\n            if (day > 28) return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30) return false;\n    }\n    return true;\n\
    }", "{\n    import std.array;\n    import std.conv;\n    import std.range;\n \
    \   import std.string;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.stdio;\n    import std.format;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.datetime;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.string;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.stdio;\n    import std.format;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.datetime;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.string;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.stdio;\n    import std.format;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.datetime;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.string;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.stdio;\n    import std.format;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.datetime;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.string;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.stdio;\n    import std.format;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n", "{\n    if (date.length\
    \ == 0)\n        return false;\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3)\n        return false;\n    int month = to!int(parts[0]);\n    int day\
    \ = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month < 1 ||\
    \ month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return\
    \ false;\n    if (month == 2)\n    {\n        if (day > 29)\n            return\
    \ false;\n        if (day == 29)\n        {\n            if (year % 4 != 0)\n\
    \                return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0)\n                return false;\n        }\n    }\n    else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n    int\
    \ day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2 && day > 29)\n        return false;\n \
    \   if(month == 2 && day == 29 && !isLeapYear(year))\n        return false;\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n      \
    \  if(day > 30)\n            return false;\n    }\n    return true;\n}", "{\n\
    \    auto date_split = date.split(\"-\");\n    if (date_split.length != 3)\n \
    \       return false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    if (date.length == 0)\n\
    \        return false;\n    auto date_split = date.split(\"-\");\n    if (date_split.length\
    \ != 3)\n        return false;\n    int month = to!int(date_split[0]);\n    int\
    \ day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n    if\
    \ (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n\
    \        return false;\n    if (month == 2)\n    {\n        if (day > 29)\n  \
    \          return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}", "{\n   \
    \ import std.string;\n    import std.conv;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.typecons;\n    import std.math;\n    if(date.length\
    \ == 0) return false;\n    auto arr = date.split(\"-\");\n    if(arr.length !=\
    \ 3) return false;\n    int month = to!int(arr[0]);\n    int day = to!int(arr[1]);\n\
    \    int year = to!int(arr[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2)\n    {\n      \
    \  if(isLeapYear(year))\n        {\n            if(day > 29) return false;\n \
    \       }\n        else\n        {\n            if(day > 28) return false;\n \
    \       }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }", "{\n    auto arr = date.split(\"-\");\n    if(arr.length != 3)\n        return\
    \ false;\n    int month = arr[0].to!int;\n    int day = arr[1].to!int;\n    int\
    \ year = arr[2].to!int;\n    if(month < 1 || month > 12)\n        return false;\n\
    \    if(day < 1 || day > 31)\n        return false;\n    if(month == 2)\n    {\n\
    \        if(day > 29)\n            return false;\n        if(day == 29)\n    \
    \    {\n            if(year % 4 != 0)\n                return false;\n       \
    \     if(year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    int[] months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31];\n    auto parts = date.split(\"-\");\n    if (parts.length != 3)\n    \
    \    return false;\n    int month = parts[0].to!int;\n    int day = parts[1].to!int;\n\
    \    int year = parts[2].to!int;\n    if (month < 1 || month > 12)\n        return\
    \ false;\n    if (day < 1 || day > months[month - 1])\n        return false;\n\
    \    if (month == 2 && day == 29 && !isLeapYear(year))\n        return false;\n\
    \    return true;\n}", "{\n    string[] date_split = date.split(\"-\");\n    if\
    \ (date_split.length != 3)\n        return false;\n    int day = to!int(date_split[0]);\n\
    \    int month = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (day < 1 || day > 31)\n        return false;\n    if (month < 1 || month\
    \ > 12)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n \
    \       if (day > 30)\n            return false;\n    }\n    return true;\n}",
  "{\n    if(date.length == 0)\n        return false;\n    auto date_split = date.split(\"\
    -\");\n    if(date_split.length != 3)\n        return false;\n    int month =\
    \ to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n    int year =\
    \ to!int(date_split[2]);\n    if(month < 1 || month > 12)\n        return false;\n\
    \    if(day < 1 || day > 31)\n        return false;\n    if(month == 2)\n    {\n\
    \        if(isLeapYear(year))\n        {\n            if(day > 29)\n         \
    \       return false;\n        }\n        else\n        {\n            if(day\
    \ > 28)\n                return false;\n        }\n    }\n    else if(month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    auto parts =\
    \ date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (year < 0)\n        return false;\n    if (month < 1 || month > 12)\n\
    \        return false;\n    if (day < 1)\n        return false;\n    if (month\
    \ == 2)\n    {\n        if (year % 4 == 0 && year % 100 != 0 || year % 400 ==\
    \ 0)\n        {\n            if (day > 29)\n                return false;\n  \
    \      }\n        else\n        {\n            if (day > 28)\n               \
    \ return false;\n        }\n    }\n    else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11)\n    {\n        if (day > 30)\n            return false;\n\
    \    }\n    else\n    {\n        if (day > 31)\n            return false;\n  \
    \  }\n    return true;\n}", "{\n    if(date.length == 0) return false;\n    auto\
    \ d = date.split(\"-\");\n    if(d.length != 3) return false;\n    if(d[0].length\
    \ != 2 || d[1].length != 2 || d[2].length != 4) return false;\n    int month =\
    \ to!int(d[0]);\n    int day = to!int(d[1]);\n    int year = to!int(d[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2)\n    {\n        if(day > 29) return false;\n    \
    \    if(day == 29)\n        {\n            if(year % 4 != 0) return false;\n \
    \           if(year % 100 == 0 && year % 400 != 0) return false;\n        }\n\
    \    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\n \
    \   {\n        if(day > 30) return false;\n    }\n    return true;\n}", "{\n \
    \   import std.algorithm : map;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.range : isInputRange;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.string : split;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple", "{\n    import std.algorithm\
    \ : map;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : take;\n    import std.string : split;\n    import std.typecons :\
    \ tuple;\n    import std.math : isNaN;\n    import std.typecons : tuple;\n   \
    \ import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n   ", "{\n    import std.algorithm : map;\n\
    \    import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : isInputRange;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std", "{\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    auto date_split = date.split(\"-\");\n    if(date_split.length\
    \ != 3)\n        return false;\n    int day = to!int(date_split[0]);\n    int\
    \ month = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n    if(day\
    \ < 1 || day > 31)\n        return false;\n    if(month < 1 || month > 12)\n \
    \       return false;\n    if(year < 1)\n        return false;\n    if(month ==\
    \ 2)\n    {\n        if(year % 4 == 0)\n        {\n            if(day > 29)\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if(day > 28)\n                return false;\n        }\n    }\n    else if(month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int[] months\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if(date.length == 0)\n\
    \        return false;\n    if(date.length != 10)\n        return false;\n   \
    \ if(date[2] != '-' || date[5] != '-')\n        return false;\n    int month =\
    \ to!int(date[0..1]);\n    int day = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > months[month-1])\n        return false;\n    if(month == 2 && day == 29)\n\
    \    {\n        if(year % 4 != 0)\n            return false;\n        if(year\
    \ % 100 == 0 && year % 400 != 0)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    auto parts = date.split(\"-\");\n    if (parts.length !=\
    \ 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n        if (day == 29) {\n            if (year % 4\
    \ != 0) return false;\n            if (year % 100 == 0 && year % 400 != 0) return\
    \ false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    return true;\n\
    }", "{\n    import std.stdio;\n    import std.string;\n    import std.conv;\n\
    \    import std.array;\n    import std.algorithm;\n    import std.range;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.exception;\n    import\
    \ std.datetime;\n    import std.format;\n    import std.traits;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.array;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.array;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.array;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.array;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.array;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.array;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    import std.typecons;\n    import std.", "{\n    import std.algorithm : map;\n\
    \    import std.conv : to;\n    import std.range : split;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n \
    \   import std.string : toLower;\n    import std.stdio : writeln;\n    import\
    \ std.exception : assertThrown;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.range :\
    \ split;\n    import std.conv : to;\n    import std.algorithm : map;\n    import\
    \ std.math : isNaN;\n    import std.stdio : writeln;\n    import std.exception\
    \ : assertThrown;\n    import std.traits : isIntegral;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.range : split;\n   \
    \ import std.conv : to;\n    import std.algorithm : map;\n    import std.math\
    \ : isNaN;\n    import std.stdio : writeln;\n    import std.exception : assertThrown;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.array : array;\n    import std.range : split;\n    import std.conv : to;\n\
    \    import std.algorithm : map;\n    import std.math : isNaN;\n    import std.stdio\
    \ : writeln;\n    import std.exception : assertThrown;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.range : split;\n    import std.conv : to;\n    import std.algorithm\
    \ : map;\n    import std.math : isNaN;\n    import std.stdio : writeln;\n    import\
    \ std.exception : assertThrown;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.range :\
    \ split;\n    import std.conv :", "{\n    auto date_split = date.split(\"-\");\n\
    \    if (date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }", "{\n    if(date.length == 0) return false;\n    auto date_split = date.split(\"\
    -\");\n    if(date_split.length != 3) return false;\n    int day = to!int(date_split[1]);\n\
    \    int month = to!int(date_split[0]);\n    int year = to!int(date_split[2]);\n\
    \    if(day < 1 || day > 31) return false;\n    if(month < 1 || month > 12) return\
    \ false;\n    if(month == 2)\n    {\n        if(day > 29) return false;\n    \
    \    if(day == 29)\n        {\n            if(year % 4 != 0) return false;\n \
    \           if(year % 100 == 0 && year % 400 != 0) return false;\n        }\n\
    \    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\n \
    \   {\n        if(day > 30) return false;\n    }\n    return true;\n}", "{\n \
    \   // your code here\n    int[] days = [31,28,31,30,31,30,31,31,30,31,30,31];\n\
    \    auto d = date.split(\"-\");\n    if(d.length != 3) return false;\n    int\
    \ month = to!int(d[0]);\n    int day = to!int(d[1]);\n    int year = to!int(d[2]);\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > days[month-1])\
    \ return false;\n    if(month == 2 && day == 29)\n    {\n        if(year % 4 !=\
    \ 0) return false;\n        if(year % 100 == 0 && year % 400 != 0) return false;\n\
    \    }\n    return true;\n}", "{\n    auto parts = split(date, '-');\n    if (parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2)\n    {\n    \
    \    if (day > 29) return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0) return false;\n            if (year % 100 == 0 && year\
    \ % 400 != 0) return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30) return false;\n\
    \    }\n    return true;\n}", "{\n    if (date.length < 10)\n        return false;\n\
    \    int day = to!int(date[0..1]);\n    int month = to!int(date[3..4]);\n    int\
    \ year = to!int(date[6..9]);\n    if (day < 1 || day > 31)\n        return false;\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (year < 1)\n\
    \        return false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n\
    \        {\n            if (day > 29)\n                return false;\n       \
    \ }\n        else\n        {\n            if (day > 28)\n                return\
    \ false;\n        }\n    }\n    else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11)\n    {\n        if (day > 30)\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (date.length == 0)\n        return false;\n\
    \    if (date.length != 10)\n        return false;\n    if (date[2] != '-' ||\
    \ date[5] != '-')\n        return false;\n    if (date[0] == '0')\n        return\
    \ false;\n    if (date[3] == '0')\n        return false;\n    if (date[6] == '0')\n\
    \        return false;\n    if (date[7] == '0')\n        return false;\n    if\
    \ (date[8] == '0')\n        return false;\n    if (date[9] == '0')\n        return\
    \ false;\n    if (date[0] == '1' && date[1] == '3')\n        return false;\n \
    \   if (date[0] == '1' && date[1] == '4')\n        return false;\n    if (date[0]\
    \ == '1' && date[1] == '5')\n        return false;\n    if (date[0] == '1' &&\
    \ date[1] == '6')\n        return false;\n    if (date[0] == '1' && date[1] ==\
    \ '7')\n        return false;\n    if (date[0] == '1' && date[1] == '8')\n   \
    \     return false;\n    if (date[0] == '1' && date[1] == '9')\n        return\
    \ false;\n    if (date[0] == '2' && date[1] == '0')\n        return false;\n \
    \   if (date[0] == '2' && date[1] == '1')\n        return false;\n    if (date[0]\
    \ == '2' && date[1] == '2')\n        return false;\n    if (date[0] == '2' &&\
    \ date[1] == '3')\n        return false;\n    if (date[0] == '2' && date[1] ==\
    \ '4')\n        return false;\n    if (date[0] == '2' && date[1] == '5')\n   \
    \     return false;\n    if (date[0] == '2' && date[", "{\n    auto parts = date.split(\"\
    -\");\n    if (parts.length != 3) return false;\n    int month = parts[0].to!int;\n\
    \    int day = parts[1].to!int;\n    int year = parts[2].to!int;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1) return false;\n    if (month\
    \ == 2) {\n        if (day > 29) return false;\n        if (day == 29) {\n   \
    \         if (year % 4 != 0) return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0) return false;\n        }\n    } else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if (day > 30) return false;\n\
    \    } else {\n        if (day > 31) return false;\n    }\n    return true;\n}",
  "{\n    import std.algorithm : map;\n    import std.conv : to;\n    import std.array\
    \ : array;\n    import std.range : take;\n    import std.string : split;\n   \
    \ import std.typecons : tuple;\n    import std.math : abs;\n    import std.stdio\
    \ : writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n   ", "{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }", "{\n    auto parts = date.split(\"-\");\n    if (parts.length != 3) return\
    \ false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) return day <=\
    \ 29;\n    if (month == 4 || month == 6 || month == 9 || month == 11) return day\
    \ <= 30;\n    return true;\n}", "{\n    import std.algorithm : map;\n    import\
    \ std.conv : to;\n    import std.range : split;\n    import std.string : strip;\n\
    \    import std.typecons : tuple;\n    import std.math : max;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n\
    \    import std.conv : to;\n    import std.range : split;\n    import std.string\
    \ : strip;\n    import std.typecons : tuple;\n    import std.math : max;\n   \
    \ import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : split;\n    import\
    \ std.string : strip;\n    import std.typecons : tuple;\n    import std.math :\
    \ max;\n    import std.array : array;\n    import std.typecons : tuple;\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.range : split;\n\
    \    import std.string : strip;\n    import std.typecons : tuple;\n    import\
    \ std.math : max;\n    import std.array : array;\n    import std.typecons : tuple;\n\
    \    import std.algorithm : map;\n    import std.conv : to;\n    import std.range\
    \ : split;\n    import std.string : strip;\n    import std.typecons : tuple;\n\
    \    import std.math : max;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.algorithm : map;\n    import std.conv : to;\n    import\
    \ std.range : split;\n    import std.string : strip;\n    import std.typecons\
    \ : tuple;\n    import std.math : max;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.algorithm : map;\n    import std.conv\
    \ : to;\n    import std.range : split;\n    import std.string : strip;\n    import\
    \ std.typecons : tuple;\n    import std.math : max;\n    import std", "{\n   \
    \ auto date_tuple = tuple(date.split(\"-\"));\n    if(date_tuple.length != 3)\n\
    \        return false;\n    int month = to!int(date_tuple[0]);\n    int day =\
    \ to!int(date_tuple[1]);\n    int year = to!int(date_tuple[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2)\n    {\n        if(day > 29)\n       \
    \     return false;\n        if(day == 29)\n        {\n            if(year % 4\
    \ != 0)\n                return false;\n            if(year % 100 == 0 && year\
    \ % 400 != 0)\n                return false;\n        }\n    }\n    else if(month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if(date.length\
    \ == 0) return false;\n    int[] months = [1,3,5,7,8,10,12];\n    int[] months2\
    \ = [4,6,9,11];\n    int[] months3 = [2];\n    int[] days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];\n\
    \    int[] days2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\n\
    \    int[] days3 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];\n\
    \    int[] years = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,",
  "{\n    // your code here\n    auto d = date.split(\"-\");\n    if(d.length != 3)\
    \ return false;\n    if(d[0].length != 2 || d[1].length != 2 || d[2].length !=\
    \ 4) return false;\n    int day = to!int(d[0]);\n    int month = to!int(d[1]);\n\
    \    int year = to!int(d[2]);\n    if(day < 1 || day > 31) return false;\n   \
    \ if(month < 1 || month > 12) return false;\n    if(month == 2 && day > 29) return\
    \ false;\n    if(month == 2 && day == 29 && !isLeapYear(year)) return false;\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n      \
    \  if(day > 30) return false;\n    }\n    return true;\n}", "{\n    auto date_split\
    \ = date.split(\"-\");\n    if (date_split.length != 3) return false;\n    int\
    \ day = to!int(date_split[0]);\n    int month = to!int(date_split[1]);\n    int\
    \ year = to!int(date_split[2]);\n    if (day < 1 || day > 31) return false;\n\
    \    if (month < 1 || month > 12) return false;\n    if (month == 2) {\n     \
    \   if (year % 4 == 0) {\n            if (day > 29) return false;\n        } else\
    \ {\n            if (day > 28) return false;\n        }\n    } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}", "{\n    import std.algorithm : map;\n \
    \   import std.conv : to;\n    import std.range : take, drop;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.math : abs;\n   \
    \ import std.string : split;\n    import std.traits : isIntegral;\n    import\
    \ std.stdio : writeln;\n    import std.typecons : tuple;\n    import std.datetime\
    \ : DateTime;\n    import std.datetime : Date;\n    import std.datetime : Month;\n\
    \    import std.datetime : Year;\n    import std.datetime : Day;\n    import std.datetime\
    \ : DayOfWeek;\n    import std.datetime : TimeOfDay;\n    import std.datetime\
    \ : Duration;\n    import std.datetime : TimeZone;\n    import std.datetime :\
    \ TimeZoneInfo;\n    import std.datetime : TimeZoneOffset;\n    import std.datetime\
    \ : UTC;\n    import std.datetime : LocalTime;\n    import std.datetime : LocalDateTime;\n\
    \    import std.datetime : LocalDate;\n    import std.datetime : LocalTime;\n\
    \    import std.datetime : DateTimeException;\n    import std.datetime : DateTimeError;\n\
    \    import std.datetime : DateTimeErrorCode;\n    import std.datetime : DateTimeException;\n\
    \    import std.datetime : DateTimeErrorCode;\n    import std.datetime : DateTimeError;\n\
    \    import std.datetime : DateTimeException;\n    import std.datetime : DateTimeErrorCode;\n\
    \    import std.datetime : DateTimeError;\n    import std.datetime : DateTimeException;\n\
    \    import std.datetime : DateTimeErrorCode;\n    import std.datetime : DateTimeError;\n\
    \    import std.datetime : DateTimeException;\n    import std.datetime : DateTimeErrorCode;\n\
    \    import std.datetime : DateTimeError;\n    import std.datetime : DateTimeException;\n\
    \    import std.datetime : DateTimeErrorCode;\n    import std.datetime : DateTimeError;\n\
    \    import std.datetime : DateTimeException;\n", "{\n    if(date.length == 0)\n\
    \        return false;\n    auto date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n    int\
    \ day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2)\n    {\n        if(year % 4 == 0)\n  \
    \      {\n            if(day > 29)\n                return false;\n        }\n\
    \        else\n        {\n            if(day > 28)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    auto date_split = date.split(\"-\");\n    if(date_split.length\
    \ != 3)\n        return false;\n    auto day = date_split[0].to!int;\n    auto\
    \ month = date_split[1].to!int;\n    auto year = date_split[2].to!int;\n    if(day\
    \ < 1 || day > 31)\n        return false;\n    if(month < 1 || month > 12)\n \
    \       return false;\n    if(year < 1)\n        return false;\n    if(month ==\
    \ 2)\n    {\n        if(year % 4 == 0)\n        {\n            if(day > 29)\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if(day > 28)\n                return false;\n        }\n    }\n    else if(month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    auto date_split\
    \ = date.split(\"-\");\n    if (date_split.length != 3)\n        return false;\n\
    \    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    import std.algorithm :\
    \ split;\n    import std.conv : to;\n    import std.array : array;\n    import\
    \ std.range : isInputRange;\n    import std.typecons : tuple;\n    import std.math\
    \ : min, max;\n    import std.traits : isIntegral;\n    import std.string : toLower;\n\
    \    import std.range : isInputRange;\n    import std.array : array;\n    import\
    \ std.conv : to;\n    import std.traits : isIntegral;\n    import std.math : min,\
    \ max;\n    import std.typecons : tuple;\n    import std.algorithm : split;\n\
    \    import std.string : toLower;\n    import std.range : isInputRange;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.traits : isIntegral;\n\
    \    import std.math : min, max;\n    import std.typecons : tuple;\n    import\
    \ std.algorithm : split;\n    import std.string : toLower;\n    import std.range\
    \ : isInputRange;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.traits : isIntegral;\n    import std.math : min, max;\n    import\
    \ std.typecons : tuple;\n    import std.algorithm : split;\n    import std.string\
    \ : toLower;\n    import std.range : isInputRange;\n    import std.array : array;\n\
    \    import std.conv : to;\n    import std.traits : isIntegral;\n    import std.math\
    \ : min, max;\n    import std.typecons : tuple;\n    import std.algorithm : split;\n\
    \    import std.string : toLower;\n    import std.range : isInputRange;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.traits : isIntegral;\n\
    \    import std.math : min, max;\n    import std.typecons : tuple;\n    import\
    \ std.algorithm : split;\n    import std.string : toLower;\n    import std.range\
    \ : isInputRange;\n    import std.array :", "{\n    import std.algorithm;\n  \
    \  import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    if (date.length\
    \ == 0) return false;\n    auto date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ != 3) return false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (month == 2) {\n        if (year % 4 == 0) {\n            if\
    \ (day < 1 || day > 29) return false;\n        } else {\n            if (day <\
    \ 1 || day > 28) return false;\n        }\n    } else if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if (day < 1 || day > 31) return false;\n    } else {\n        if\
    \ (day < 1 || day > 30) return false;\n    }\n    return true;\n}", "{\n    import\
    \ std.algorithm.iteration : map;\n    import std.algorithm.comparison : equal;\n\
    \    import std.range : take;\n    import std.conv : to;\n    import std.array\
    \ : array;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.math : isNaN;\n    import std.range : take;\n    import std.range\
    \ : drop;\n    import std.range : retro;\n    import std.range : retro;\n    import\
    \ std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import", "{\n    if (date.length == 0)\n        return false;\n    auto parts\
    \ = date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n  \
    \  int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1 || day > 31)\n        return false;\n    if (month == 2)\n  \
    \  {\n        if (day > 29)\n            return false;\n        if (day == 29)\n\
    \        {\n            if (year % 4 != 0)\n                return false;\n  \
    \          if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ return true;\n}", "{\n    import std.algorithm : map;\n    import std.conv :\
    \ to;\n    import std.array : array;\n    import std.range : isInputRange;\n \
    \   import std.range : isForwardRange;\n    import std.range : isBidirectionalRange;\n\
    \    import std.range : isRandomAccessRange;\n    import std.range : isInfinite;\n\
    \    import std.range : isEmpty;\n    import std.range : isSorted;\n    import\
    \ std.range : isSorted!\"a < b\";\n    import std.range : isSorted!\"a > b\";\n\
    \    import std.range : isSorted!\"a <= b\";\n    import std.range : isSorted!\"\
    a >= b\";\n    import std.range : isSorted!\"a.compare(b) < 0\";\n    import std.range\
    \ : isSorted!\"a.compare(b) > 0\";\n    import std.range : isSorted!\"a.compare(b)\
    \ <= 0\";\n    import std.range : isSorted!\"a.compare(b) >= 0\";\n    import\
    \ std.range : isSorted!\"a.compare(b)\";\n    import std.range : isSorted!\"a.compare(b)\
    \ > 0\";\n    import std.range : isSorted!\"a.compare(b) < 0\";\n    import std.range\
    \ : isSorted!\"a.compare(b) >= 0\";\n    import std.range : isSorted!\"a.compare(b)\
    \ <= 0\";\n    import std.range : isSorted!\"a.compare(b)\";\n    import std.range\
    \ : isSorted!\"a < b\";\n    import std.range : isSorted!\"a > b\";\n    import\
    \ std.range : isSorted!\"a <= b\";\n    import std.range : isSorted!\"a >= b\"\
    ;\n    import std.range : isSorted!\"a.compare(b) < 0\";\n    import std.range\
    \ : isSorted!\"a.compare(b) > 0\";\n    import std.range : isSorted!\"a.compare(b)\
    \ <= 0\";\n    import std.range : isSorted!\"a.", "{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.math;\n    auto date_array = date.split(\"-\"\
    );\n    if(date_array.length != 3)\n        return false;\n    auto month = to!int(date_array[0]);\n\
    \    auto day = to!int(date_array[1]);\n    auto year = to!int(date_array[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(month == 2)\n\
    \    {\n        if(year % 4 == 0)\n        {\n            if(day < 1 || day >\
    \ 29)\n                return false;\n        }\n        else\n        {\n   \
    \         if(day < 1 || day > 28)\n                return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n\
    \            return false;\n    }\n    else\n    {\n        if(day < 1 || day\
    \ > 30)\n            return false;\n    }\n    return true;\n}", "{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : take, drop;\n    import std.typecons : tuple;\n    import\
    \ std.math : isNaN;\n    import std.string : split;\n    import std.stdio : writeln;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons :", "{\n    auto d = split(date, \"-\");\n    if (d.length\
    \ != 3) return false;\n    int month = to!int(d[0]);\n    int day = to!int(d[1]);\n\
    \    int year = to!int(d[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2)\n    {\n    \
    \    if (day > 29) return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0) return false;\n            if (year % 100 == 0 && year\
    \ % 400 != 0) return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30) return false;\n\
    \    }\n    return true;\n}", "{\n    import std.algorithm : map;\n    import\
    \ std.conv : to;\n    import std.range : take, drop;\n    import std.string :\
    \ split;\n    import std.array : array;\n    import std.typecons : tuple;\n  \
    \  import std.math : isNaN;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.range : take,\
    \ drop;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.algorithm : map;\n    import std.string : split;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.math : isNaN;\n\
    \    import std.typecons : tuple;\n    import std.range : take, drop;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.algorithm : map;\n\
    \    import std.string : split;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.math : isNaN;\n    import std.typecons : tuple;\n\
    \    import std.range : take, drop;\n    import std.array : array;\n    import\
    \ std.conv : to;\n    import std.algorithm : map;\n    import std.string : split;\n\
    \    import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import\
    \ std.math : isNaN;\n    import std.typecons : tuple;\n    import std.range :\
    \ take, drop;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.algorithm : map;\n    import std.string : split;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.math : isNaN;\n\
    \    import std.typecons : tuple;\n    import std.range : take, drop;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.algorithm : map;\n",
  "{\n    auto parts = split(date, '-');\n    if (parts.length != 3) return false;\n\
    \    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n    if\
    \ (day < 1 || day > 31) return false;\n    if (month == 2)\n    {\n        if\
    \ (day > 29) return false;\n        if (day == 29)\n        {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    else if (month == 4 || month == 6\
    \ || month == 9 || month == 11)\n    {\n        if (day > 30) return false;\n\
    \    }\n    return true;\n}", "{\n    int[] months = [31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31];\n    int[] days = [31, 30, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31];\n    int[] leap_days = [31, 29, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31];\n    int[] month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n    int[] leap_month_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n    int[] month_days_30 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n    int[] leap_month_days_30 = [31, 29, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31];\n    int[] month_days_29 = [31, 29, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31];\n    int[] leap_month_days_29 = [31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31];\n    int[] month_days_28 = [31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31];\n    int[] leap_month_days_28 = [31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n    int[] month_days_31 = [31, 31, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n    int[] leap_month_days_31 = [31, 31, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31];\n    int[] month_days_30_31 = [31, 30, 31, 31, 31,\
    \ 30, 31, 31, 30, 31, 30, 31];\n    int[] leap_month_days_30_31 = [31, 30, 31,\
    \ 31", "{\n    if (date.length == 0)\n        return false;\n    if (date.length\
    \ != 10)\n        return false;\n    if (date[2] != '-' || date[5] != '-')\n \
    \       return false;\n    if (date[0] == '0')\n        return false;\n    if\
    \ (date[3] == '0')\n        return false;\n    if (date[6] == '0')\n        return\
    \ false;\n    if (date[7] == '0')\n        return false;\n    if (date[8] == '0')\n\
    \        return false;\n    if (date[9] == '0')\n        return false;\n    if\
    \ (date[0] == '1' && date[1] == '3')\n        return false;\n    if (date[0] ==\
    \ '2' && date[1] == '1')\n        return false;\n    if (date[0] == '2' && date[1]\
    \ == '2')\n        return false;\n    if (date[0] == '2' && date[1] == '3')\n\
    \        return false;\n    if (date[0] == '2' && date[1] == '4')\n        return\
    \ false;\n    if (date[0] == '2' && date[1] == '5')\n        return false;\n \
    \   if (date[0] == '2' && date[1] == '6')\n        return false;\n    if (date[0]\
    \ == '2' && date[1] == '7')\n        return false;\n    if (date[0] == '2' &&\
    \ date[1] == '8')\n        return false;\n    if (date[0] == '2' && date[1] ==\
    \ '9')\n        return false;\n    if (date[0] == '3' && date[1] == '0')\n   \
    \     return false;\n    if (date[0] == '3' && date[1] == '1')\n        return\
    \ false;\n    if (date[0] == '4' && date[1] == '0')\n        return false;\n \
    \   if (date[0] == '4' && date[", "{\n    if (date.length == 0) return false;\n\
    \    auto date_list = date.split(\"-\");\n    if (date_list.length != 3) return\
    \ false;\n    auto month = date_list[0].to!int;\n    auto day = date_list[1].to!int;\n\
    \    auto year = date_list[2].to!int;\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2)\n  \
    \  {\n        if (day > 29) return false;\n        if (day == 29)\n        {\n\
    \            if (year % 4 != 0) return false;\n            if (year % 100 == 0\
    \ && year % 400 != 0) return false;\n        }\n    }\n    else if (month == 4\
    \ || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}", "{\n    auto date_split = date.split(\"\
    -\");\n    if (date_split.length != 3) return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2)\n    {\n        if (day > 29) return false;\n\
    \        if (day == 29)\n        {\n            if (year % 4 != 0) return false;\n\
    \            if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n\
    \    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day > 30) return false;\n    }\n    return true;\n}", "{\n\
    \    import std.conv;\n    import std.string;\n    import std.array;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.math;\n    auto date_arr = date.split(\"-\");\n    if(date_arr.length !=\
    \ 3)\n        return false;\n    int month = to!int(date_arr[0]);\n    int day\
    \ = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n    if(month <\
    \ 1 || month > 12)\n        return false;\n    if(month == 2)\n    {\n       \
    \ if(day < 1 || day > 29)\n            return false;\n    }\n    else if(month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1\
    \ || day > 30)\n            return false;\n    }\n    else\n    {\n        if(day\
    \ < 1 || day > 31)\n            return false;\n    }\n    return true;\n}", "{\n\
    \    auto parts = date.split(\"-\");\n    if (parts.length != 3)\n        return\
    \ false;\n    int month = parts[0].to!int;\n    int day = parts[1].to!int;\n \
    \   int year = parts[2].to!int;\n    if (month < 1 || month > 12)\n        return\
    \ false;\n    if (day < 1)\n        return false;\n    if (month == 2)\n    {\n\
    \        if (day > 29)\n            return false;\n        if (day == 29)\n  \
    \      {\n            if (year % 4 != 0)\n                return false;\n    \
    \        if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ else\n    {\n        if (day > 31)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    import std.conv;\n    import std.array;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.string;\n    import std.format;\n    import std.datetime;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.string;\n\
    \    import std.format;\n    import std.datetime;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.string;\n\
    \    import std.format;\n    import std.datetime;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.string;\n\
    \    import std.format;\n    import std.datetime;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.string;\n\
    \    import std.format;\n    import std.datetime;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.string;\n\
    \    import std.format;\n    import std.datetime;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.string;\n\
    \    import std.format;\n    import std.datetime;", "{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    string[] date_arr\
    \ = date.split(\"-\");\n    if(date_arr.length != 3) return false;\n    int month\
    \ = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 2 && day\
    \ == 29 && !isLeapYear(year)) return false;\n    if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11)\n    {\n        if(day > 30) return false;\n    }\n\
    \    return true;\n}", "{\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (year < 0) return false;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1) return false;\n    if (month\
    \ == 2)\n    {\n        if (year % 4 == 0 && year % 100 != 0 || year % 400 ==\
    \ 0)\n        {\n            if (day > 29) return false;\n        }\n        else\n\
    \        {\n            if (day > 28) return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30) return false;\n    }\n    else\n    {\n        if (day > 31) return\
    \ false;\n    }\n    return true;\n}", "{\n    auto parts = split(date, '-');\n\
    \    if (parts.length != 3) return false;\n    int month = to!int(parts[0]);\n\
    \    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n        if (day ==\
    \ 29) {\n            if (year % 4 != 0) return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n        }\n    } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}", "{\n    if (date.length == 0) return false;\n\
    \    auto date_split = date.split(\"-\");\n    if (date_split.length != 3) return\
    \ false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (isLeapYear(year)) {\n            if (day > 29) return false;\n  \
    \      } else {\n            if (day > 28) return false;\n        }\n    } else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day\
    \ > 30) return false;\n    }\n    return true;\n}", "{\n    int[] months = [31,28,31,30,31,30,31,31,30,31,30,31];\n\
    \    auto parts = date.split(\"-\");\n    if(parts.length != 3) return false;\n\
    \    int month = parts[0].to!int;\n    int day = parts[1].to!int;\n    int year\
    \ = parts[2].to!int;\n    if(year < 0) return false;\n    if(month < 1 || month\
    \ > 12) return false;\n    if(day < 1 || day > months[month-1]) return false;\n\
    \    if(month == 2 && day == 29)\n    {\n        if(year % 4 != 0) return false;\n\
    \        if(year % 100 == 0 && year % 400 != 0) return false;\n    }\n    return\
    \ true;\n}", "{\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3)\n        return false;\n    auto month = to!int(date_arr[0]);\n    auto\
    \ day = to!int(date_arr[1]);\n    auto year = to!int(date_arr[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2)\n    {\n        if(day > 29)\n       \
    \     return false;\n        if(day == 29)\n        {\n            if(year % 4\
    \ != 0)\n                return false;\n            if(year % 100 == 0 && year\
    \ % 400 != 0)\n                return false;\n        }\n    }\n    else if(month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    auto parts =\
    \ split(date, '-');\n    if (parts.length != 3) return false;\n    int month =\
    \ to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2)\n    {\n        if (day > 29) return false;\n\
    \        if (day == 29)\n        {\n            if (year % 4 != 0) return false;\n\
    \            if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n\
    \    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day > 30) return false;\n    }\n    return true;\n}", "{\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    if (date.length == 0) return false;\n    auto arr = date.split(\"-\");\n\
    \    if (arr.length != 3) return false;\n    int month = to!int(arr[0]);\n   \
    \ int day = to!int(arr[1]);\n    int year = to!int(arr[2]);\n    if (month < 1\
    \ || month > 12) return false;\n    if (month == 2) {\n        if (year % 4 ==\
    \ 0) {\n            if (day < 1 || day > 29) return false;\n        } else {\n\
    \            if (day < 1 || day > 28) return false;\n        }\n    } else if\
    \ (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n  \
    \  } else {\n        if (day < 1 || day > 30) return false;\n    }\n    return\
    \ true;\n}", "{\n    auto date_list = date.split(\"-\");\n    if (date_list.length\
    \ != 3)\n        return false;\n    int month = to!int(date_list[0]);\n    int\
    \ day = to!int(date_list[1]);\n    int year = to!int(date_list[2]);\n    if (month\
    \ < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n  \
    \      return false;\n    if (month == 2)\n    {\n        if (day > 29)\n    \
    \        return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}", "{\n   \
    \ int[] months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[]\
    \ days = [0, 0, 0];\n    int i = 0;\n    foreach(c; date)\n    {\n        if(c\
    \ == '-')\n        {\n            i++;\n            continue;\n        }\n   \
    \     if(!isDigit(c))\n            return false;\n        days[i] = days[i] *\
    \ 10 + c.to!int - '0'.to!int;\n    }\n    if(days[0] < 1 || days[0] > 12)\n  \
    \      return false;\n    if(days[2] % 4 == 0 && days[0] == 2)\n        months[1]\
    \ = 29;\n    if(days[1] < 1 || days[1] > months[days[0] - 1])\n        return\
    \ false;\n    return true;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
