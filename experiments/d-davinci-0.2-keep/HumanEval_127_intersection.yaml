name: HumanEval_127_intersection
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
  \    where each interval is a pair of integers. For example, interval = (start,\
  \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
  \ (start, end)\n    includes both start and end.\n    For each given interval, it\
  \ is assumed that its start is less or equal its end.\n    Your task is to determine\
  \ whether the length of intersection of these two \n    intervals is a prime number.\n\
  \    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which\
  \ its length is 1, which not a prime number.\n    If the length of the intersection\
  \ is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the\
  \ two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n\
  \    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4))\
  \ ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \n*/\nstring\
  \ intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2) \n"
tests: "unittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
  \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
  \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
  YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n   \
  \ assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
  \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
  \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"\
  NO\");\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
